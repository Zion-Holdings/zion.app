/* eslint-env serviceworker */
/* global self, caches, Response */

<<<<<<< HEAD
const CACHE_NAME = 'zion-tech-group-v1.0.0';
=======
const CACHE_NAME = 'zion-tech-v1.0.0';
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
const STATIC_CACHE = 'zion-static-v1.0.0';
const DYNAMIC_CACHE = 'zion-dynamic-v1.0.0';

// Files to cache immediately
const STATIC_FILES = [
  '/',
<<<<<<< HEAD
  '/offline',
  '/manifest.json',
  '/favicon.ico',
  '/apple-touch-icon.png'
];

// API endpoints to cache (commented out for now)
// const API_CACHE = [
//   '/api/analytics',
//   '/api/error-reporting'
// ];

=======
  '/offline.html',
  '/manifest.json',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
  '/css/main.css',
  '/js/main.js'
];

>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
// Install event - cache static files
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Caching static files');
        return cache.addAll(STATIC_FILES);
      })
      .then(() => {
        console.log('Static files cached successfully');
        return self.skipWaiting();
      })
      .catch((error) => {
<<<<<<< HEAD
        console.error('Failed to cache static files:', error);
=======
        console.error('Error caching static files:', error);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
      })
  );
});

// Fetch event - serve from cache when offline
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // Return cached version or fetch from network
        if (response) {
          return response;
        }
        return fetch(event.request);
      }
    )
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('Service worker activated');
        return self.clients.claim();
      })
  );
});

// Fetch event - implement caching strategies
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Skip chrome-extension and other non-http requests
  if (!url.protocol.startsWith('http')) {
    return;
  }

  // Handle different types of requests
<<<<<<< HEAD
  if (url.pathname === '/') {
    // Homepage - cache first strategy
    event.respondWith(cacheFirst(request, STATIC_CACHE));
  } else if (url.pathname.startsWith('/api/')) {
    // API requests - network first strategy
    event.respondWith(networkFirst(request, DYNAMIC_CACHE));
  } else if (url.pathname.startsWith('/_next/') || url.pathname.startsWith('/static/')) {
    // Static assets - cache first strategy
    event.respondWith(cacheFirst(request, STATIC_CACHE));
  } else if (url.pathname.startsWith('/images/') || url.pathname.startsWith('/icons/')) {
    // Images - cache first strategy
    event.respondWith(cacheFirst(request, STATIC_CACHE));
  } else {
    // Other pages - network first strategy
    event.respondWith(networkFirst(request, DYNAMIC_CACHE));
  }
});

// Cache First Strategy
async function cacheFirst(request, cacheName) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
=======
  if (request.destination === 'document') {
    // Handle page requests
    event.respondWith(handlePageRequest(request));
  } else if (request.destination === 'image') {
    // Handle image requests
    event.respondWith(handleImageRequest(request));
  } else if (request.destination === 'style' || request.destination === 'script') {
    // Handle CSS and JS requests
    event.respondWith(handleAssetRequest(request));
  } else {
    // Handle other requests
    event.respondWith(handleOtherRequest(request));
  }
});

// Handle page requests with offline fallback
async function handlePageRequest(request) {
  try {
    // Try network first
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // Cache the response for future offline use
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
      return networkResponse;
    }
  } catch (error) {
    console.log('Network failed for page request:', request.url);
  }

  // Try cache
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }

  // Return offline page
  return caches.match('/offline.html');
}

// Handle image requests with cache-first strategy
async function handleImageRequest(request) {
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }

  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
<<<<<<< HEAD
    console.error('Cache first strategy failed:', error);
    // Check if Response is available (it should be in service worker context)
    if (typeof Response !== 'undefined') {
      return new Response('Network error', { status: 503, statusText: 'Service Unavailable' });
    }
    // Fallback for older browsers
    return { status: 503, statusText: 'Service Unavailable' };
  }
}

// Network First Strategy
async function networkFirst(request, cacheName) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
=======
    console.log('Failed to fetch image:', request.url);
    // Return a placeholder image if available
    return caches.match('/icons/placeholder-image.png');
  }
}

// Handle asset requests with cache-first strategy
async function handleAssetRequest(request) {
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }

  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
<<<<<<< HEAD
    console.error('Network first strategy failed:', error);
    
    // Try to get from cache
=======
    console.log('Failed to fetch asset:', request.url);
    throw error;
  }
}

// Handle other requests with network-first strategy
async function handleOtherRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Network failed for request:', request.url);
    
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
<<<<<<< HEAD
    // Return offline page for HTML requests
    if (request.headers.get('accept')?.includes('text/html')) {
      return caches.match('/offline');
    }
    
    // Check if Response is available (it should be in service worker context)
    if (typeof Response !== 'undefined') {
      return new Response('Network error', { status: 503, statusText: 'Service Unavailable' });
    }
    // Fallback for older browsers
    return { status: 503, statusText: 'Service Unavailable' };
=======
    throw error;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
  }
}

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync() {
  try {
<<<<<<< HEAD
    // Perform background sync operations
    console.log('Performing background sync');
    
    // Example: sync analytics data
    const analyticsData = await getStoredAnalytics();
    if (analyticsData.length > 0) {
      await syncAnalytics(analyticsData);
    }
    
    console.log('Background sync completed');
=======
    // Get stored offline actions
    const offlineActions = await getOfflineActions();
    
    for (const action of offlineActions) {
      try {
        await processOfflineAction(action);
        await removeOfflineAction(action.id);
      } catch (error) {
        console.error('Failed to process offline action:', error);
      }
    }
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
  } catch (error) {
    console.error('Background sync failed:', error);
  }
}

<<<<<<< HEAD
// Get stored analytics data
async function getStoredAnalytics() {
  // This would typically get data from IndexedDB
  return [];
}

// Sync analytics data
async function syncAnalytics(data) {
  try {
    const response = await fetch('/api/analytics', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    });
    
    if (response.ok) {
      console.log('Analytics synced successfully');
    }
  } catch (error) {
    console.error('Failed to sync analytics:', error);
  }
=======
// Get stored offline actions from IndexedDB
async function getOfflineActions() {
  // This would typically use IndexedDB
  // For now, return empty array
  return [];
}

// Process an offline action
async function processOfflineAction(action) {
  // This would typically make API calls
  // For now, just log the action
  console.log('Processing offline action:', action);
}

// Remove processed offline action
async function removeOfflineAction(actionId) {
  // This would typically remove from IndexedDB
  console.log('Removing offline action:', actionId);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
}

// Push notification handling
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body,
      icon: '/icons/icon-192x192.png',
<<<<<<< HEAD
      badge: '/icons/badge-72x72.png',
      vibrate: [100, 50, 100],
      data: {
        dateOfArrival: Date.now(),
        primaryKey: 1
      },
      actions: [
        {
          action: 'explore',
          title: 'Explore',
          icon: '/icons/checkmark.png'
=======
      badge: '/icons/icon-72x72.png',
      vibrate: [100, 50, 100],
      data: {
        url: data.url
      },
      actions: [
        {
          action: 'view',
          title: 'View',
          icon: '/icons/icon-72x72.png'
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
        },
        {
          action: 'close',
          title: 'Close',
<<<<<<< HEAD
          icon: '/icons/xmark.png'
=======
          icon: '/icons/icon-72x72.png'
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
        }
      ]
    };

    event.waitUntil(
      self.registration.showNotification(data.title, options)
    );
  }
});

// Notification click handling
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

<<<<<<< HEAD
      if (event.action === 'explore') {
      event.waitUntil(
        self.clients.openWindow('/')
      );
    }
=======
  if (event.action === 'view') {
    event.waitUntil(
      self.clients.openWindow(event.notification.data.url)
    );
  }
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
});

// Message handling from main thread
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({ version: CACHE_NAME });
  }
});

// Error handling
self.addEventListener('error', (event) => {
  console.error('Service worker error:', event.error);
});

self.addEventListener('unhandledrejection', (event) => {
  console.error('Service worker unhandled rejection:', event.reason);
<<<<<<< HEAD
});
=======
});
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
