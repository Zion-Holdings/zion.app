<<<<<<< HEAD
/* eslint-disable no-undef, no-console */
const CACHE_NAME = 'zion-tech-group-v1.0.0';
const STATIC_CACHE = 'zion-static-v1.0.0';
const DYNAMIC_CACHE = 'zion-dynamic-v1.0.0';

const CACHE_NAME = 'zion-tech-group-v1.0.0';
const STATIC_CACHE_NAME = 'zion-tech-group-static-v1.0.0';
const DYNAMIC_CACHE_NAME = 'zion-tech-group-dynamic-v1.0.0';

// Static assets to cache
const STATIC_ASSETS = [
=======
/* eslint-env serviceworker */
/* global self, caches, Response, clients */

const CACHE_NAME = 'zion-tech-group-v1.0.0';
const STATIC_CACHE = 'zion-static-v1.0.0';
const DYNAMIC_CACHE = 'zion-dynamic-v1.0.0';

// Files to cache immediately
const STATIC_FILES = [
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
  '/',
  '/offline.html',
  '/manifest.json',
  '/favicon.ico',
  '/images/zion-tech-group-logo.png',
  '/images/zion-tech-group-og.jpg'
];

<<<<<<< HEAD
// Dynamic routes to cache
const DYNAMIC_ROUTES = [
  '/services',
  '/about',
  '/contact',
  '/solutions',
  '/resources'
];

// Install event - cache static assets
=======
// Install event - cache static files
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME)
      .then((cache) => {
<<<<<<< HEAD
        console.log('Caching static assets');
        return cache.addAll(STATIC_ASSETS);
      })
      .then(() => {
        console.log('Static assets cached successfully');
        return self.skipWaiting();
      })
=======
        console.log('Caching static files');
        return cache.addAll(STATIC_FILES);
      })
      .then(() => {
        console.log('Static files cached successfully');
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error('Error caching static files:', error);
      })
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
<<<<<<< HEAD
            if (cacheName !== STATIC_CACHE_NAME && cacheName !== DYNAMIC_CACHE_NAME) {
=======
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
              console.log('Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
<<<<<<< HEAD
        console.log('Service worker activated');
=======
        console.log('Service Worker activated');
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
        return self.clients.claim();
      })
  );
});

// Fetch event - serve from cache or network
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

<<<<<<< HEAD
  // Skip non-HTTP(S) requests
=======
  // Skip chrome-extension and other non-http requests
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
  if (!url.protocol.startsWith('http')) {
    return;
  }

  // Handle different types of requests
<<<<<<< HEAD
  if (isStaticAsset(request)) {
    event.respondWith(handleStaticAsset(request));
  } else if (isDynamicRoute(request)) {
    event.respondWith(handleDynamicRoute(request));
  } else {
    event.respondWith(handleApiRequest(request));
  }
});

// Check if request is for a static asset
function isStaticAsset(request) {
  const url = new URL(request.url);
  return STATIC_ASSETS.includes(url.pathname) ||
         request.destination === 'image' ||
         request.destination === 'font' ||
         request.destination === 'style' ||
         request.destination === 'script';
}

// Check if request is for a dynamic route
function isDynamicRoute(request) {
  const url = new URL(request.url);
  return DYNAMIC_ROUTES.some(route => url.pathname.startsWith(route));
}

// Handle static asset requests
async function handleStaticAsset(request) {
=======
  if (isStaticFile(request)) {
    event.respondWith(handleStaticFile(request));
  } else if (isAPIRequest(request)) {
    event.respondWith(handleAPIRequest(request));
  } else if (isHTMLRequest(request)) {
    event.respondWith(handleHTMLRequest(request));
  } else {
    event.respondWith(handleOtherRequest(request));
  }
});

// Check if request is for a static file
function isStaticFile(request) {
  const url = new URL(request.url);
  return (
    url.pathname.match(/\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$/) ||
    url.pathname.startsWith('/_next/static/') ||
    url.pathname.startsWith('/images/') ||
    url.pathname.startsWith('/fonts/')
  );
}

// Check if request is for an API
function isAPIRequest(request) {
  const url = new URL(request.url);
  return url.pathname.startsWith('/api/');
}

// Check if request is for HTML
function isHTMLRequest(request) {
  const url = new URL(request.url);
  return (
    request.headers.get('accept')?.includes('text/html') ||
    url.pathname.endsWith('.html') ||
    url.pathname === '/' ||
    !url.pathname.includes('.')
  );
}

// Handle static file requests
async function handleStaticFile(request) {
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
  try {
    // Try cache first
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

<<<<<<< HEAD
    // Fallback to network
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(STATIC_CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Static asset fetch failed:', error);
    // Return offline page for navigation requests
    if (request.destination === 'document') {
      return caches.match('/offline.html');
    }
    throw error;
  }
}

// Handle dynamic route requests
async function handleDynamicRoute(request) {
  try {
    // Try network first for dynamic content
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Dynamic route fetch failed:', error);
    // Try cache as fallback
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    // Return offline page
    return caches.match('/offline.html');
=======
    // Fetch from network
    const networkResponse = await fetch(request);
    
    // Cache successful responses
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }

    return networkResponse;
  } catch (error) {
    console.error('Error handling static file:', error);
    return new Response('Static file not available', { status: 404 });
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
  }
}

// Handle API requests
<<<<<<< HEAD
async function handleApiRequest(request) {
  try {
    // Try network first for API calls
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('API fetch failed:', error);
    // Try cache as fallback
=======
async function handleAPIRequest(request) {
  try {
    // Try network first for API requests
    const networkResponse = await fetch(request);
    
    // Cache successful responses
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }

    return networkResponse;
  } catch (error) {
    console.error('Error handling API request:', error);
    
    // Try to serve from cache as fallback
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
<<<<<<< HEAD
    throw error;
=======

    return new Response('API not available', { status: 503 });
  }
}

// Handle HTML requests
async function handleHTMLRequest(request) {
  try {
    // Try network first for HTML requests
    const networkResponse = await fetch(request);
    
    // Cache successful responses
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }

    return networkResponse;
  } catch (error) {
    console.error('Error handling HTML request:', error);
    
    // Try to serve from cache as fallback
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

    // Serve offline page
    const offlineResponse = await caches.match('/offline.html');
    if (offlineResponse) {
      return offlineResponse;
    }

    return new Response('Page not available offline', { 
      status: 503,
      headers: { 'Content-Type': 'text/html' }
    });
  }
}

// Handle other requests
async function handleOtherRequest(request) {
  try {
    // Try cache first
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

    // Fetch from network
    const networkResponse = await fetch(request);
    
    // Cache successful responses
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }

    return networkResponse;
  } catch (error) {
    console.error('Error handling request:', error);
    return new Response('Resource not available', { status: 404 });
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
  }
}

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync());
  }
});

<<<<<<< HEAD
// Background sync implementation
async function doBackgroundSync() {
  try {
    // Sync any pending data when connection is restored
    console.log('Background sync completed');
  } catch (error) {
    console.error('Background sync failed:', error);
=======
// Background sync function
async function doBackgroundSync() {
  try {
    // Get all clients
    const clients = await self.clients.matchAll();
    
    // Send message to clients about sync
    clients.forEach((client) => {
      client.postMessage({
        type: 'BACKGROUND_SYNC',
        message: 'Background sync completed'
      });
    });
  } catch (error) {
    console.error('Background sync error:', error);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
  }
}

// Push notification handling
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    const options = {
<<<<<<< HEAD
      body: data.body,
      icon: '/images/zion-tech-group-logo.png',
      badge: '/images/badge.png',
=======
      body: data.body || 'New update from Zion Tech Group',
      icon: '/images/zion-tech-group-logo.png',
      badge: '/images/zion-tech-group-logo.png',
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
      vibrate: [100, 50, 100],
      data: {
        dateOfArrival: Date.now(),
        primaryKey: 1
      },
      actions: [
        {
          action: 'explore',
          title: 'Explore',
<<<<<<< HEAD
          icon: '/images/explore.png'
=======
          icon: '/images/zion-tech-group-logo.png'
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
        },
        {
          action: 'close',
          title: 'Close',
<<<<<<< HEAD
          icon: '/images/close.png'
=======
          icon: '/images/zion-tech-group-logo.png'
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
        }
      ]
    };

    event.waitUntil(
<<<<<<< HEAD
      self.registration.showNotification(data.title, options)
=======
      self.registration.showNotification(data.title || 'Zion Tech Group', options)
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
    );
  }
});

// Notification click handling
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  if (event.action === 'explore') {
    event.waitUntil(
<<<<<<< HEAD
      clients.openWindow('/services')
=======
      clients.openWindow('/')
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
    );
  }
});

// Message handling from main thread
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({ version: CACHE_NAME });
  }
});
<<<<<<< HEAD
=======

// Error handling
self.addEventListener('error', (event) => {
  console.error('Service Worker error:', event.error);
});

// Unhandled rejection handling
self.addEventListener('unhandledrejection', (event) => {
  console.error('Service Worker unhandled rejection:', event.reason);
});
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-3513
