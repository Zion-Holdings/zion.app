#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();
const OUT_DIR = path.join(ROOT, 'public', 'reports', 'ops');
const OUT_FILE = path.join(OUT_DIR, 'index.html');

function ensureDir(dir) {
  fs.mkdirSync(dir, { recursive: true });
}

function fileExists(p) {
  try { fs.accessSync(p, fs.constants.F_OK); return true; } catch { return false; }
}

function readCsvSummary(csvPath, maxLines = 5) {
  try {
    const raw = fs.readFileSync(csvPath, 'utf8').split('\n').slice(0, maxLines + 1).join('\n');
    return `<pre class="text-[10px] leading-tight whitespace-pre-wrap">${raw.replace(/[&<>]/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;'}[s]))}</pre>`;
  } catch { return ''; }
}

function linkIfExists(href, label) {
  if (href.startsWith('/reports/')) {
    const key = href.split('/')[2];
    const check = path.join(ROOT, 'public', 'reports', key, 'index.html');
    if (!fileExists(check)) return '';
  }
  return `<a href="${href}" class="inline-flex items-center gap-1 text-cyan-300 hover:text-cyan-200 underline">${label}<span aria-hidden>↗</span></a>`;
}

function generateHtml(sections) {
  const itemsHtml = sections.map(sec => `
    <section class="mt-6 p-4 rounded-xl border border-white/10 bg-white/5">
      <h3 class="text-base font-semibold">${sec.title}</h3>
      <p class="text-xs opacity-80 mt-1">${sec.desc}</p>
      <div class="mt-3 text-sm">
        ${sec.content || ''}
      </div>
    </section>`).join('\n');

  return `<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Ops Dashboard — Consolidated Reports</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
  <style>
    body { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; background:#020617; color:#fff; }
    .container { max-width: 960px; margin: 0 auto; padding: 24px; }
    .grid { display: grid; gap: 12px; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); }
    a { color: #67e8f9; text-decoration: none; }
    a:hover { color: #a5f3fc; }
    .card { border: 1px solid rgba(255,255,255,0.12); background: rgba(255,255,255,0.05); border-radius: 12px; padding: 14px; }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="text-2xl font-extrabold">Ops Dashboard</h1>
    <p class="opacity-80">Consolidated site health across A11y, SEO, Metadata, and Trends. Updated ${new Date().toISOString()}.</p>

    <div class="grid mt-4">
      <div class="card">${linkIfExists('/reports/a11y', 'A11y Alt Text Auditor')}</div>
      <div class="card">${linkIfExists('/reports/metadata', 'Metadata Optimizer')}</div>
      <div class="card">${linkIfExists('/reports/seo', 'SEO Audit')}</div>
      <div class="card">${linkIfExists('/reports/ai-trends', 'AI Trends Radar')}</div>
    </div>

    ${itemsHtml}
  </div>
</body>
</html>`;
}

(function main() {
  ensureDir(OUT_DIR);

  const linkReportCsv = path.join(ROOT, 'link_report.csv');
  const linkCsvSnippet = fileExists(linkReportCsv) ? readCsvSummary(linkReportCsv, 8) : '';

  const sections = [
    {
      title: 'Quick Links',
      desc: 'Jump to detailed dashboards generated by autonomous agents.',
      content: [
        linkIfExists('/reports/a11y', 'A11y report'),
        linkIfExists('/reports/metadata', 'Metadata report'),
        linkIfExists('/reports/seo', 'SEO report'),
        linkIfExists('/reports/ai-trends', 'AI trends'),
      ].filter(Boolean).join(' • ')
    },
    {
      title: 'Link Report (sample)',
      desc: 'First few lines from link_report.csv for quick inspection.',
      content: linkCsvSnippet || '<em>No link report available yet.</em>'
    }
  ];

  const html = generateHtml(sections);
  fs.writeFileSync(OUT_FILE, html);
  console.log('Wrote', OUT_FILE);
})();