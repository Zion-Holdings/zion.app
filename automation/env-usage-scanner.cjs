#!/usr/bin/env node
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();

function walk(dir) {
  const out = [];
  for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
    if (e.name === 'node_modules' || e.name === '.git' || e.name === '.next') continue;
    const full = path.join(dir, e.name);
    if (e.isDirectory()) out.push(...walk(full));
    else out.push(full);
  }
  return out;
}

function scanEnvVars(file) {
  try {
    const src = fs.readFileSync(file, 'utf8');
    const re = /process\.env\.([A-Z0-9_]+)/g;
    const vars = new Set();
    let m;
    while ((m = re.exec(src))) vars.add(m[1]);
    return Array.from(vars);
  } catch {
    return [];
  }
}

function main() {
  const files = walk(ROOT);
  const map = {};
  for (const f of files) {
    if (!/\.(ts|tsx|js|jsx|cjs|mjs)$/.test(f)) continue;
    const vars = scanEnvVars(f);
    if (vars.length) map[f.replace(ROOT, '')] = vars;
  }
  const docsDir = path.join(ROOT, 'docs');
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir, { recursive: true });
  const md = ['# Env Usage Report', '', 'Auto-generated from scanning process.env usage.', ''];
  Object.entries(map).forEach(([file, vars]) => {
    md.push(`- ${file}: ${vars.join(', ')}`);
  });
  md.push('', '_Generated by automation/env-usage-scanner.cjs_');
  fs.writeFileSync(path.join(docsDir, 'env-usage.json'), JSON.stringify(map, null, 2));
  fs.writeFileSync(path.join(docsDir, 'env-usage.md'), md.join('\n'));
  console.log('env-usage-scanner: updated docs/env-usage.*');
}

if (require.main === module) main();