const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

function readTodoMarkdown() {
  const todoMdPath = path.resolve(__dirname, '..', 'docs', 'TODO_REPORT.md');
  try {
    return fs.readFileSync(todoMdPath, 'utf8');
  } catch {
    return '# Roadmap\n\nNo TODO report found. This page will update automatically once TODOs are compiled.';
  }
}

function basicMarkdownToHtml(markdown) {
  // Minimal, safe conversion: headings and paragraphs only, fallback to <pre>
  try {
    const lines = markdown.split(/\r?\n/);
    const html = lines
      .map((line) => {
        if (/^#\s+/.test(line)) return `<h1>${line.replace(/^#\s+/, '').trim()}</h1>`;
        if (/^##\s+/.test(line)) return `<h2>${line.replace(/^##\s+/, '').trim()}</h2>`;
        if (/^###\s+/.test(line)) return `<h3>${line.replace(/^###\s+/, '').trim()}</h3>`;
        if (/^-\s+/.test(line)) return `<li>${line.replace(/^-\s+/, '').trim()}</li>`;
        if (line.trim() === '') return '';
        return `<p>${line.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</p>`;
      })
      .join('\n')
      .replace(/(<li>[^]*?<\/li>)(?!\s*<li>)/g, '<ul>$&</ul>');
    return html;
  } catch {
    return `<pre>${markdown.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>`;
  }
}

function buildHtmlPage(contentHtml) {
  const now = new Date().toISOString();
  return `<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Autonomous Roadmap</title>
  <meta name="description" content="Continuously generated roadmap from repository signals." />
  <style>
    body { font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, Noto Sans, "Apple Color Emoji", "Segoe UI Emoji"; margin: 0; padding: 2rem; background: #0b1220; color: #e5e7eb; }
    a { color: #67e8f9; }
    .container { max-width: 900px; margin: 0 auto; }
    header { margin-bottom: 1.5rem; }
    .badge { display: inline-block; padding: 0.15rem 0.5rem; border-radius: 9999px; background: rgba(34,211,238,0.1); border: 1px solid rgba(34,211,238,0.3); color: #a5f3fc; font-size: 12px; }
    .card { background: rgba(255,255,255,0.04); border: 1px solid rgba(255,255,255,0.08); border-radius: 12px; padding: 1rem; }
    h1, h2, h3 { color: #fff; }
    footer { margin-top: 2rem; opacity: 0.7; font-size: 12px; }
    ul { margin: 0.5rem 0 1rem 1.25rem; }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="badge">Autonomous • Cloud‑Generated</div>
      <h1>Roadmap</h1>
      <p>Continuously distilled from repository TODOs and docs. Last updated: ${now}</p>
      <p><a href="/">← Back to site</a></p>
    </header>
    <div class="card">${contentHtml}</div>
    <footer>Generated by roadmap-orchestrator.cjs</footer>
  </div>
</body>
</html>`;
}

function main() {
  const markdown = readTodoMarkdown();
  const contentHtml = basicMarkdownToHtml(markdown);
  const html = buildHtmlPage(contentHtml);

  const outDir = path.resolve(__dirname, '..', 'public', 'reports', 'roadmap');
  ensureDir(outDir);
  const outFile = path.join(outDir, 'index.html');
  fs.writeFileSync(outFile, html, 'utf8');

  console.log(`[roadmap] Wrote ${outFile}`);
}

if (require.main === module) {
  main();
}