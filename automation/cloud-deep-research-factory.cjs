#!/usr/bin/env node

'use strict';

/*
  Cloud Deep Research Factory
  - Diversified autonomous content generator that synthesizes new content types:
    Patterns, Guides, and Case Studies.
  - Consumes the latest live-site crawl logs produced by `cloud-site-crawler.cjs`
    and extracts stable signals to seed inventive-yet-deterministic content.
  - Writes new TSX pages under:
      pages/reports/patterns/
      pages/reports/guides/
      pages/reports/cases/
  - Updates `public/automation/content-registry.json` by merging an `items` array
    while preserving any existing keys (like `pages`/`docs`) created by other
    indexers.
  - Optionally refreshes the homepage “Latest” section block between
    HOME_LATEST_CONTENT markers.

  Notes:
  - Keeps output deterministic (no LLM calls) and safe for CI.
  - Generates at most 3 pages per run to avoid repository spam while running
    frequently via GitHub Actions.
*/

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) {
  fs.mkdirSync(dirPath, { recursive: true });
}

function safeReadJson(file, fallback) {
  try {
    if (fs.existsSync(file)) return JSON.parse(fs.readFileSync(file, 'utf8'));
  } catch {}
  return fallback;
}

function readLatestCrawl() {
  const logsDir = path.join(process.cwd(), 'automation', 'logs');
  if (!fs.existsSync(logsDir)) return null;
  const files = fs
    .readdirSync(logsDir)
    .filter((f) => f.startsWith('cloud-crawl-') && f.endsWith('.json'))
    .sort();
  if (files.length === 0) return null;
  const latest = path.join(logsDir, files[files.length - 1]);
  try {
    return JSON.parse(fs.readFileSync(latest, 'utf8'));
  } catch {
    return null;
  }
}

function tokenize(text) {
  return String(text || '')
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, ' ')
    .split(/\s+/)
    .filter(Boolean);
}

const STOPWORDS = new Set([
  'the','and','for','with','that','this','from','into','your','you','are','was','were','will','shall','can','could','should','a','an','to','in','of','on','as','by','at','or','if','is','it','we','our','be','has','have','had','not','no','yes','but','more','most','less','over','under','within','their','there','here'
]);

function extractKeywords(text, max = 7) {
  const tokens = tokenize(text).filter((t) => t.length > 2 && !STOPWORDS.has(t));
  const freq = new Map();
  for (const t of tokens) freq.set(t, (freq.get(t) || 0) + 1);
  const ranked = Array.from(freq.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 40)
    .map(([t]) => t);
  const uniq = Array.from(new Set(ranked));
  return uniq.slice(0, max);
}

function pickTopCrawlSnippets(results, max = 3) {
  const sorted = [...results].sort((a, b) => b.length - a.length);
  return sorted.slice(0, max).map((r) => ({ url: r.url, excerpt: String(r.text || '').slice(0, 400) }));
}

function tsxPage({ title, description, bodyHtml }) {
  return `import Head from 'next/head';

export default function Page() {
  return (
    <div className="min-h-screen bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${description}" />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
      <main className="container mx-auto px-6 py-12 prose prose-invert">
        <h1 className="text-3xl font-extrabold">${title}</h1>
        <div className="mt-4">${bodyHtml}</div>
        <p className="mt-6 text-white/60 text-sm">Auto-generated by Cloud Deep Research Factory.</p>
      </main>
    </div>
  );
}
`;
}

function savePage(outPath, src) {
  ensureDir(path.dirname(outPath));
  fs.writeFileSync(outPath, src, 'utf8');
}

function timestampSlug(prefix) {
  const d = new Date();
  const y = d.getUTCFullYear();
  const m = String(d.getUTCMonth() + 1).padStart(2, '0');
  const day = String(d.getUTCDate()).padStart(2, '0');
  const hh = String(d.getUTCHours()).padStart(2, '0');
  const mm = String(d.getUTCMinutes()).padStart(2, '0');
  const ss = String(d.getUTCSeconds()).padStart(2, '0');
  return `${prefix}-${y}-${m}-${day}-${hh}${mm}${ss}`;
}

function createPattern(snippet) {
  const kws = extractKeywords(snippet.excerpt, 6);
  const title = `Pattern — ${kws.slice(0, 3).map((w) => w[0].toUpperCase() + w.slice(1)).join(' ') || 'Cloud Intelligence'}`;
  const desc = 'Actionable architectural pattern synthesized from live site signals.';
  const body = [
    `<p>Source: <a class="text-cyan-300 underline" href="${snippet.url}" target="_blank" rel="noopener">${snippet.url}</a></p>`,
    '<h2>Context</h2>',
    `<p>Signals indicate recurring needs around <strong>${kws.join(', ') || 'autonomous systems'}</strong>.</p>`,
    '<h2>Problem</h2>',
    '<p>How do we design a robust, observable, and cost-efficient approach?</p>',
    '<h2>Forces</h2>',
    '<ul><li>Latency and throughput trade-offs</li><li>Quality and evaluation</li><li>Security and governance</li></ul>',
    '<h2>Solution</h2>',
    '<p>Define clear boundaries, automate evaluation, and continuously iterate with telemetry-in-the-loop.</p>',
    '<h2>Consequences</h2>',
    '<p>Improved reliability and faster iteration; requires disciplined measurement.</p>'
  ].join('');
  const slug = timestampSlug('pattern');
  const outFile = path.join(process.cwd(), 'pages', 'reports', 'patterns', `${slug}.tsx`);
  savePage(outFile, tsxPage({ title, description: desc, bodyHtml: body }));
  return { title, route: `/reports/patterns/${slug}`, filePath: outFile };
}

function createGuide(snippet) {
  const kws = extractKeywords(snippet.excerpt, 6);
  const title = `Guide — ${kws.slice(0, 2).map((w) => w[0].toUpperCase() + w.slice(1)).join(' ')} Implementation`;
  const desc = 'Step-by-step guidance derived from live research signals.';
  const steps = [
    'Clarify objectives and measurable outcomes.',
    'Map data, models, evaluation, and deployment workflow.',
    'Automate checks for security, cost, and reliability.',
    'Instrument telemetry; iterate with feedback loops.',
    'Publish results and integrate learnings.'
  ];
  const body = [
    `<p>Source: <a class="text-cyan-300 underline" href="${snippet.url}" target="_blank" rel="noopener">${snippet.url}</a></p>`,
    '<h2>Overview</h2>',
    `<p>Focus: ${kws.join(', ') || 'autonomous content systems'}.</p>`,
    '<h2>Steps</h2>',
    `<ol>${steps.map((s) => `<li>${s}</li>`).join('')}</ol>`,
    '<h2>Links</h2>',
    '<p><a class="text-cyan-300 underline" href="https://ziontechgroup.com" target="_blank" rel="noopener">https://ziontechgroup.com</a></p>'
  ].join('');
  const slug = timestampSlug('guide');
  const outFile = path.join(process.cwd(), 'pages', 'reports', 'guides', `${slug}.tsx`);
  savePage(outFile, tsxPage({ title, description: desc, bodyHtml: body }));
  return { title, route: `/reports/guides/${slug}`, filePath: outFile };
}

function createCaseStudy(snippet) {
  const kws = extractKeywords(snippet.excerpt, 5);
  const title = `Case Study — ${kws.slice(0, 2).map((w) => w[0].toUpperCase() + w.slice(1)).join(' ')}`;
  const desc = 'Pragmatic case scenario inspired by live site signals.';
  const body = [
    `<p>Source: <a class="text-cyan-300 underline" href="${snippet.url}" target="_blank" rel="noopener">${snippet.url}</a></p>`,
    '<h2>Scenario</h2>',
    `<p>Exploring how ${kws.join(', ') || 'autonomous orchestration'} delivers value.</p>`,
    '<h2>Approach</h2>',
    '<ul><li>Baseline metrics</li><li>Iterative improvements</li><li>Risk management</li></ul>',
    '<h2>Results</h2>',
    '<p>Lower latency, higher reliability, and faster iteration speed.</p>'
  ].join('');
  const slug = timestampSlug('case');
  const outFile = path.join(process.cwd(), 'pages', 'reports', 'cases', `${slug}.tsx`);
  savePage(outFile, tsxPage({ title, description: desc, bodyHtml: body }));
  return { title, route: `/reports/cases/${slug}`, filePath: outFile };
}

function loadRegistryMerged() {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  const existing = safeReadJson(registryPath, {});
  if (typeof existing !== 'object' || !existing) return { items: [] };
  if (!Array.isArray(existing.items)) existing.items = [];
  return existing;
}

function saveRegistryMerged(registry) {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  ensureDir(path.dirname(registryPath));
  fs.writeFileSync(registryPath, JSON.stringify(registry, null, 2), 'utf8');
}

function updateRegistryWith(entries) {
  const reg = loadRegistryMerged();
  const now = new Date().toISOString();
  const seen = new Set(reg.items.map((i) => i.href));
  for (const e of entries) {
    if (!seen.has(e.route)) {
      reg.items.unshift({
        title: e.title,
        href: e.route,
        desc: 'New autonomous content',
        createdAt: now,
        source: 'cloud-deep-research-factory'
      });
    }
  }
  reg.items = reg.items.slice(0, 80);
  saveRegistryMerged(reg);
}

function updateHomepageLatest(entries) {
  const homepagePath = path.join(process.cwd(), 'pages', 'index.tsx');
  if (!fs.existsSync(homepagePath)) return;
  let content = fs.readFileSync(homepagePath, 'utf8');
  const start = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_START */}';
  const end = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_END */}';
  if (!content.includes(start) || !content.includes(end)) return;
  const list = entries
    .slice(0, 6)
    .map(
      (e) => `            <a href="${e.route}" className="group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30 tilt-on-hover">
              <div className="pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100" />
              <h3 className="text-lg font-semibold">${e.title}</h3>
              <p className="mt-1 text-sm text-white/75">Freshly published by autonomous agents.</p>
              <div className="mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90">Open <span aria-hidden>→</span></div>
            </a>`
    )
    .join('\n');
  const block = `\n <section className="mx-auto max-w-7xl px-6 pb-14">\n   <h2 className="text-center text-2xl font-bold tracking-wide text-white/90">Latest Autonomous Content</h2>\n   <div className="mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">\n${list}\n   </div>\n </section>\n `;
  const pattern = new RegExp(`${start}[\s\S]*?${end}`);
  content = content.replace(pattern, `${start}\n${block}${end}`);
  fs.writeFileSync(homepagePath, content, 'utf8');
}

function main() {
  const crawl = readLatestCrawl();
  if (!crawl || !Array.isArray(crawl.results) || crawl.results.length === 0) {
    console.log('cloud-deep-research-factory: no crawl results found; skipping.');
    return;
  }
  const snippets = pickTopCrawlSnippets(crawl.results, 3);
  const created = [];
  for (let i = 0; i < snippets.length; i++) {
    const s = snippets[i];
    if (i === 0) created.push(createPattern(s));
    else if (i === 1) created.push(createGuide(s));
    else created.push(createCaseStudy(s));
  }
  updateRegistryWith(created);
  updateHomepageLatest(created);
  console.log(`cloud-deep-research-factory: created ${created.length} page(s).`);
}

if (require.main === module) {
  try {
    main();
  } catch (err) {
    console.error('cloud-deep-research-factory failed:', err);
    process.exitCode = 1;
  }
}

module.exports = { main };


