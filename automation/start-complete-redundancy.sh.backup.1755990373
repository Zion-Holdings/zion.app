#!/bin/bash

<<<<<<< HEAD
# Complete Redundancy Automation System Startup Script
# Provides comprehensive redundancy for all automation systems
=======
# Complete Redundancy Automation System
# Covers all PM2 automations, GitHub Actions automations, and Netlify functions automations
>>>>>>> origin/cursor/automate-all-existing-automations-and-clean-up-ad2b

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
<<<<<<< HEAD
WORKSPACE_DIR="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$WORKSPACE_DIR/automation/logs"
PID_FILE="$LOG_DIR/complete-redundancy.pid"
LOG_FILE="$LOG_DIR/complete-redundancy.log"
CONFIG_FILE="$WORKSPACE_DIR/automation/redundancy-config.json"
STATUS_FILE="$WORKSPACE_DIR/automation/complete-redundancy-status.json"
=======
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/automation/logs"
PID_DIR="$PROJECT_ROOT/automation/pids"
CONFIG_FILE="$PROJECT_ROOT/automation/redundancy-config.json"
>>>>>>> origin/cursor/automate-all-existing-automations-and-clean-up-ad2b

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
<<<<<<< HEAD
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Ensure log directory exists
mkdir -p "$LOG_DIR"

# Logging function
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "ERROR" "Script failed: $1"
    exit 1
}

# Check if script is already running
check_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            log "WARN" "Complete redundancy system already running (PID: $pid)"
            return 0
        else
            log "WARN" "Stale PID file found, removing"
            rm -f "$PID_FILE"
        fi
    fi
    return 1
}

# Start the complete redundancy system
start_system() {
    log "INFO" "Starting Complete Redundancy Automation System..."
    
    if check_running; then
        log "WARN" "System is already running"
        return 0
    fi
    
    # Check if Node.js is available
    if ! command -v node &> /dev/null; then
        error_exit "Node.js is not installed. Please install Node.js first."
    fi
    
    # Check if the main script exists
    local main_script="$WORKSPACE_DIR/automation/complete-redundancy-automation-system.cjs"
    if [ ! -f "$main_script" ]; then
        error_exit "Main script not found: $main_script"
    fi
    
    # Start the system in background
    cd "$WORKSPACE_DIR"
    nohup node "$main_script" start > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # Wait a moment for the system to start
    sleep 2
    
    # Check if the system started successfully
    if ps -p "$pid" > /dev/null 2>&1; then
        echo "$pid" > "$PID_FILE"
        log "INFO" "Complete Redundancy Automation System started successfully (PID: $pid)"
        echo -e "${GREEN}✓ Complete Redundancy Automation System started (PID: $pid)${NC}"
    else
        error_exit "Failed to start Complete Redundancy Automation System"
    fi
}

# Stop the complete redundancy system
stop_system() {
    log "INFO" "Stopping Complete Redundancy Automation System..."
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            log "INFO" "Stopping process (PID: $pid)"
            kill "$pid" || true
            
            # Wait for process to stop
            local count=0
            while ps -p "$pid" > /dev/null 2>&1 && [ $count -lt 10 ]; do
                sleep 1
                count=$((count + 1))
            done
            
            # Force kill if still running
            if ps -p "$pid" > /dev/null 2>&1; then
                log "WARN" "Force killing process (PID: $pid)"
                kill -9 "$pid" || true
            fi
            
            rm -f "$PID_FILE"
            log "INFO" "Complete Redundancy Automation System stopped"
            echo -e "${YELLOW}✓ Complete Redundancy Automation System stopped${NC}"
        else
            log "WARN" "Process not running, removing stale PID file"
            rm -f "$PID_FILE"
        fi
    else
        log "INFO" "No PID file found, system may not be running"
        echo -e "${YELLOW}ℹ No PID file found, system may not be running${NC}"
    fi
}

# Restart the complete redundancy system
restart_system() {
    log "INFO" "Restarting Complete Redundancy Automation System..."
    stop_system
    sleep 2
    start_system
}

# Check system status
check_status() {
    log "INFO" "Checking Complete Redundancy Automation System status..."
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            echo -e "${GREEN}✓ Complete Redundancy Automation System is RUNNING (PID: $pid)${NC}"
            
            # Show detailed status if available
            if [ -f "$STATUS_FILE" ]; then
                echo -e "\n${CYAN}Detailed Status:${NC}"
                cat "$STATUS_FILE" | jq '.' 2>/dev/null || cat "$STATUS_FILE"
            fi
            
            # Show recent logs
            if [ -f "$LOG_FILE" ]; then
                echo -e "\n${CYAN}Recent Logs:${NC}"
                tail -n 20 "$LOG_FILE" | sed 's/^/  /'
            fi
        else
            echo -e "${RED}✗ Complete Redundancy Automation System is NOT RUNNING (stale PID: $pid)${NC}"
            rm -f "$PID_FILE"
        fi
    else
        echo -e "${RED}✗ Complete Redundancy Automation System is NOT RUNNING${NC}"
    fi
    
    # Check PM2 status
    if command -v pm2 &> /dev/null; then
        echo -e "\n${CYAN}PM2 Status:${NC}"
        pm2 status --no-daemon 2>/dev/null || echo "  PM2 not running or no processes"
    fi
    
    # Check GitHub Actions workflows
    echo -e "\n${CYAN}GitHub Actions Workflows:${NC}"
    local workflows=(
        ".github/workflows/marketing-sync.yml"
        ".github/workflows/sync-health.yml"
        ".github/workflows/marketing-sync-backup.yml"
        ".github/workflows/sync-health-backup.yml"
    )
    
    for workflow in "${workflows[@]}"; do
        if [ -f "$WORKSPACE_DIR/$workflow" ]; then
            echo -e "  ${GREEN}✓${NC} $workflow"
        else
            echo -e "  ${RED}✗${NC} $workflow"
        fi
    done
    
    # Check Netlify Functions
    echo -e "\n${CYAN}Netlify Functions:${NC}"
    local manifest="$WORKSPACE_DIR/netlify/functions/functions-manifest.json"
    if [ -f "$manifest" ]; then
        local function_count=$(jq '.functions | length' "$manifest" 2>/dev/null || echo "0")
        echo -e "  ${GREEN}✓${NC} Functions manifest found ($function_count functions)"
    else
        echo -e "  ${RED}✗${NC} Functions manifest not found"
    fi
}

# Show system health
show_health() {
    log "INFO" "Checking system health..."
    
    if [ -f "$STATUS_FILE" ]; then
        echo -e "${CYAN}System Health Status:${NC}"
        cat "$STATUS_FILE" | jq '.' 2>/dev/null || cat "$STATUS_FILE"
    else
        echo -e "${YELLOW}ℹ No health status file found${NC}"
    fi
    
    # Run health check if system is running
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            echo -e "\n${CYAN}Running Health Check:${NC}"
            cd "$WORKSPACE_DIR"
            node automation/complete-redundancy-automation-system.cjs health 2>/dev/null || echo "  Health check failed"
        fi
    fi
}

# Show system logs
show_logs() {
    log "INFO" "Showing system logs..."
    
    if [ -f "$LOG_FILE" ]; then
        echo -e "${CYAN}Complete Redundancy System Logs:${NC}"
        if [ "$1" = "tail" ]; then
            tail -n 50 "$LOG_FILE"
        elif [ "$1" = "follow" ]; then
            tail -f "$LOG_FILE"
        else
            cat "$LOG_FILE"
        fi
    else
        echo -e "${YELLOW}ℹ No log file found${NC}"
    fi
}

# Run redundancy check
run_redundancy_check() {
    log "INFO" "Running redundancy check..."
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            cd "$WORKSPACE_DIR"
            node automation/complete-redundancy-automation-system.cjs redundancy 2>/dev/null || echo "  Redundancy check failed"
        else
            echo -e "${RED}✗ System is not running${NC}"
        fi
    else
        echo -e "${RED}✗ System is not running${NC}"
    fi
}

# Show help
show_help() {
    echo -e "${CYAN}Complete Redundancy Automation System${NC}"
    echo -e "Provides comprehensive redundancy for all automation systems"
    echo -e ""
    echo -e "${YELLOW}Usage:${NC} $0 [COMMAND]"
    echo -e ""
    echo -e "${YELLOW}Commands:${NC}"
    echo -e "  start     Start the complete redundancy system"
    echo -e "  stop      Stop the complete redundancy system"
    echo -e "  restart   Restart the complete redundancy system"
    echo -e "  status    Show system status and health"
    echo -e "  health    Show detailed health information"
    echo -e "  logs      Show system logs"
    echo -e "  logs tail Show last 50 log lines"
    echo -e "  logs follow Follow logs in real-time"
    echo -e "  check     Run redundancy check"
    echo -e "  help      Show this help message"
    echo -e ""
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  $0 start"
    echo -e "  $0 status"
    echo -e "  $0 logs follow"
    echo -e ""
    echo -e "${YELLOW}Redundancy Layers:${NC}"
    echo -e "  • PM2 automations (ecosystems, processes)"
    echo -e "  • GitHub Actions (workflows, triggers)"
    echo -e "  • Netlify Functions (serverless functions)"
    echo -e "  • Build automation (npm scripts, monitoring)"
    echo -e "  • Health monitoring (status checks, alerts)"
}

# Main script logic
main() {
    local command="${1:-help}"
    
    case "$command" in
        start)
            start_system
            ;;
        stop)
            stop_system
            ;;
        restart)
            restart_system
            ;;
        status)
            check_status
            ;;
        health)
            show_health
            ;;
        logs)
            show_logs "$2"
            ;;
        check)
            run_redundancy_check
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}Unknown command: $command${NC}"
            echo -e "Use '$0 help' for usage information"
=======
NC='\033[0m' # No Color

# Create necessary directories
mkdir -p "$LOG_DIR" "$PID_DIR"

# Logging function
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_DIR/complete-redundancy.log"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a "$LOG_DIR/complete-redundancy-error.log"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1" | tee -a "$LOG_DIR/complete-redundancy.log"
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO:${NC} $1" | tee -a "$LOG_DIR/complete-redundancy.log"
}

# Check if PM2 is installed
check_pm2() {
    if ! command -v pm2 &> /dev/null; then
        error "PM2 is not installed. Please install PM2 first: npm install -g pm2"
        exit 1
    fi
}

# Check if Node.js is available
check_node() {
    if ! command -v node &> /dev/null; then
        error "Node.js is not installed or not in PATH"
        exit 1
    fi
}

# Start PM2 Redundancy System
start_pm2_redundancy() {
    log "Starting PM2 Redundancy System..."
    
    # Start the main PM2 ecosystem
    if pm2 start ecosystem.pm2.cjs --update-env; then
        log "Main PM2 ecosystem started successfully"
    else
        warn "Failed to start main PM2 ecosystem, attempting recovery..."
        pm2 delete all 2>/dev/null || true
        pm2 start ecosystem.pm2.cjs --update-env
    fi
    
    # Start comprehensive redundancy ecosystem
    if pm2 start ecosystem.comprehensive-redundancy.cjs --update-env; then
        log "Comprehensive redundancy ecosystem started successfully"
    else
        warn "Failed to start comprehensive redundancy ecosystem"
    fi
    
    # Start ultimate redundancy ecosystem
    if pm2 start ecosystem.ultimate-redundancy.pm2.cjs --update-env; then
        log "Ultimate redundancy ecosystem started successfully"
    else
        warn "Failed to start ultimate redundancy ecosystem"
    fi
    
    # Bootstrap PM2 logrotate
    pm2 install pm2-logrotate 2>/dev/null || true
    pm2 set pm2-logrotate:max_size 10M
    pm2 set pm2-logrotate:retain 30
    pm2 set pm2-logrotate:compress true
    pm2 set pm2-logrotate:workerInterval 60
    pm2 set pm2-logrotate:rotateInterval '0 0 * * *'
    
    pm2 save
    log "PM2 Redundancy System started successfully"
}

# Start GitHub Actions Redundancy
start_github_redundancy() {
    log "Starting GitHub Actions Redundancy System..."
    
    # Start GitHub Actions redundancy manager
    if pm2 start automation/github-actions-redundancy-manager.cjs --name "github-redundancy-manager" --update-env; then
        log "GitHub Actions redundancy manager started successfully"
    else
        warn "Failed to start GitHub Actions redundancy manager"
    fi
    
    # Start enhanced GitHub Actions redundancy
    if pm2 start automation/enhanced-github-actions-redundancy.cjs --name "enhanced-github-redundancy" --update-env; then
        log "Enhanced GitHub Actions redundancy started successfully"
    else
        warn "Failed to start enhanced GitHub Actions redundancy"
    fi
    
    # Start comprehensive GitHub Actions redundancy
    if pm2 start automation/comprehensive-github-actions-redundancy.cjs --name "comprehensive-github-redundancy" --update-env; then
        log "Comprehensive GitHub Actions redundancy started successfully"
    else
        warn "Failed to start comprehensive GitHub Actions redundancy"
    fi
    
    pm2 save
    log "GitHub Actions Redundancy System started successfully"
}

# Start Netlify Functions Redundancy
start_netlify_redundancy() {
    log "Starting Netlify Functions Redundancy System..."
    
    # Start Netlify functions redundancy manager
    if pm2 start automation/netlify-functions-redundancy-manager.cjs --name "netlify-redundancy-manager" --update-env; then
        log "Netlify functions redundancy manager started successfully"
    else
        warn "Failed to start Netlify functions redundancy manager"
    fi
    
    # Start enhanced Netlify functions redundancy
    if pm2 start automation/enhanced-netlify-functions-redundancy.cjs --name "enhanced-netlify-redundancy" --update-env; then
        log "Enhanced Netlify functions redundancy started successfully"
    else
        warn "Failed to start enhanced Netlify functions redundancy"
    fi
    
    # Start comprehensive Netlify functions redundancy
    if pm2 start automation/comprehensive-netlify-functions-redundancy.cjs --name "comprehensive-netlify-redundancy" --update-env; then
        log "Comprehensive Netlify functions redundancy started successfully"
    else
        warn "Failed to start comprehensive Netlify functions redundancy"
    fi
    
    pm2 save
    log "Netlify Functions Redundancy System started successfully"
}

# Start Master Redundancy Orchestrator
start_master_orchestrator() {
    log "Starting Master Redundancy Orchestrator..."
    
    # Start master redundancy orchestrator
    if pm2 start automation/master-redundancy-orchestrator.cjs --name "master-redundancy-orchestrator" --update-env; then
        log "Master redundancy orchestrator started successfully"
    else
        warn "Failed to start master redundancy orchestrator"
    fi
    
    # Start comprehensive redundancy orchestrator
    if pm2 start automation/comprehensive-redundancy-orchestrator.cjs --name "comprehensive-redundancy-orchestrator" --update-env; then
        log "Comprehensive redundancy orchestrator started successfully"
    else
        warn "Failed to start comprehensive redundancy orchestrator"
    fi
    
    # Start ultimate redundancy master
    if pm2 start automation/ultimate-redundancy-master.cjs --name "ultimate-redundancy-master" --update-env; then
        log "Ultimate redundancy master started successfully"
    else
        warn "Failed to start ultimate redundancy master"
    fi
    
    pm2 save
    log "Master Redundancy Orchestrator started successfully"
}

# Start Monitoring and Health Systems
start_monitoring_systems() {
    log "Starting Monitoring and Health Systems..."
    
    # Start redundancy health monitor
    if pm2 start automation/redundancy-health-monitor.cjs --name "redundancy-health-monitor" --update-env; then
        log "Redundancy health monitor started successfully"
    else
        warn "Failed to start redundancy health monitor"
    fi
    
    # Start comprehensive monitoring dashboard
    if pm2 start automation/comprehensive-monitoring-dashboard.cjs --name "comprehensive-monitoring-dashboard" --update-env; then
        log "Comprehensive monitoring dashboard started successfully"
    else
        warn "Failed to start comprehensive monitoring dashboard"
    fi
    
    # Start continuous build monitor
    if pm2 start automation/continuous-build-monitor.cjs --name "continuous-build-monitor" --update-env; then
        log "Continuous build monitor started successfully"
    else
        warn "Failed to start continuous build monitor"
    fi
    
    # Start build failure recovery
    if pm2 start automation/build-failure-recovery.cjs --name "build-failure-recovery" --update-env; then
        log "Build failure recovery started successfully"
    else
        warn "Failed to start build failure recovery"
    fi
    
    # Start master build orchestrator
    if pm2 start automation/master-build-orchestrator.cjs --name "master-build-orchestrator" --update-env; then
        log "Master build orchestrator started successfully"
    else
        warn "Failed to start master build orchestrator"
    fi
    
    pm2 save
    log "Monitoring and Health Systems started successfully"
}

# Start Git Sync and Build Systems
start_git_build_systems() {
    log "Starting Git Sync and Build Systems..."
    
    # Start redundancy git sync
    if pm2 start automation/redundancy-git-sync.cjs --name "redundancy-git-sync" --update-env; then
        log "Redundancy git sync started successfully"
    else
        warn "Failed to start redundancy git sync"
    fi
    
    # Start enhanced git sync orchestrator
    if pm2 start automation/enhanced-git-sync-orchestrator.cjs --name "enhanced-git-sync-orchestrator" --update-env; then
        log "Enhanced git sync orchestrator started successfully"
    else
        warn "Failed to start enhanced git sync orchestrator"
    fi
    
    # Start redundancy build monitor
    if pm2 start automation/redundancy-build-monitor.cjs --name "redundancy-build-monitor" --update-env; then
        log "Redundancy build monitor started successfully"
    else
        warn "Failed to start redundancy build monitor"
    fi
    
    pm2 save
    log "Git Sync and Build Systems started successfully"
}

# Start the complete redundancy system
start() {
    log "Starting Complete Redundancy Automation System..."
    
    check_pm2
    check_node
    
    # Stop any existing processes
    stop
    
    # Start all systems
    start_pm2_redundancy
    start_github_redundancy
    start_netlify_redundancy
    start_master_orchestrator
    start_monitoring_systems
    start_git_build_systems
    
    # Save PM2 configuration
    pm2 save
    
    # Show status
    status
    
    log "Complete Redundancy Automation System started successfully!"
    log "All systems are now running with redundancy coverage"
}

# Stop the complete redundancy system
stop() {
    log "Stopping Complete Redundancy Automation System..."
    
    # Stop all PM2 processes
    pm2 stop all 2>/dev/null || true
    pm2 delete all 2>/dev/null || true
    
    # Kill any remaining processes
    pkill -f "redundancy" 2>/dev/null || true
    pkill -f "automation" 2>/dev/null || true
    
    log "Complete Redundancy Automation System stopped"
}

# Restart the complete redundancy system
restart() {
    log "Restarting Complete Redundancy Automation System..."
    stop
    sleep 2
    start
}

# Show status of all systems
status() {
    log "=== Complete Redundancy System Status ==="
    
    echo -e "\n${BLUE}PM2 Status:${NC}"
    pm2 status
    
    echo -e "\n${BLUE}PM2 Logs (last 10 lines):${NC}"
    pm2 logs --lines 10 --nostream || true
    
    echo -e "\n${BLUE}System Health Check:${NC}"
    if command -v node &> /dev/null; then
        node -e "
            try {
                const fs = require('fs');
                const configPath = '$CONFIG_FILE';
                if (fs.existsSync(configPath)) {
                    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                    console.log('✓ Configuration loaded successfully');
                    console.log('✓ Redundancy systems configured');
                } else {
                    console.log('⚠ Configuration file not found');
                }
            } catch (error) {
                console.log('✗ Configuration error:', error.message);
            }
        " 2>/dev/null || echo "⚠ Health check failed"
    fi
    
    echo -e "\n${BLUE}Log Files:${NC}"
    ls -la "$LOG_DIR"/*.log 2>/dev/null || echo "No log files found"
    
    echo -e "\n${BLUE}Process IDs:${NC}"
    ls -la "$PID_DIR"/*.pid 2>/dev/null || echo "No PID files found"
}

# Show health status
health() {
    log "=== Complete Redundancy System Health Check ==="
    
    # Check PM2 processes
    local pm2_status=$(pm2 status --no-daemon 2>/dev/null | grep -E "(online|stopped|errored)" | wc -l)
    local total_processes=$(pm2 status --no-daemon 2>/dev/null | grep -E "(online|stopped|errored)" | wc -l)
    
    if [ "$pm2_status" -gt 0 ]; then
        echo -e "${GREEN}✓ PM2 processes running: $pm2_status${NC}"
    else
        echo -e "${RED}✗ No PM2 processes running${NC}"
    fi
    
    # Check log files
    local log_count=$(find "$LOG_DIR" -name "*.log" -type f 2>/dev/null | wc -l)
    if [ "$log_count" -gt 0 ]; then
        echo -e "${GREEN}✓ Log files found: $log_count${NC}"
    else
        echo -e "${YELLOW}⚠ No log files found${NC}"
    fi
    
    # Check configuration
    if [ -f "$CONFIG_FILE" ]; then
        echo -e "${GREEN}✓ Configuration file exists${NC}"
    else
        echo -e "${YELLOW}⚠ Configuration file missing${NC}"
    fi
    
    # Check Node.js
    if command -v node &> /dev/null; then
        echo -e "${GREEN}✓ Node.js available${NC}"
    else
        echo -e "${RED}✗ Node.js not available${NC}"
    fi
    
    # Check PM2
    if command -v pm2 &> /dev/null; then
        echo -e "${GREEN}✓ PM2 available${NC}"
    else
        echo -e "${RED}✗ PM2 not available${NC}"
    fi
}

# Show logs
logs() {
    log "=== Complete Redundancy System Logs ==="
    
    if [ -f "$LOG_DIR/complete-redundancy.log" ]; then
        echo -e "\n${BLUE}Main Log (last 50 lines):${NC}"
        tail -n 50 "$LOG_DIR/complete-redundancy.log"
    fi
    
    if [ -f "$LOG_DIR/complete-redundancy-error.log" ]; then
        echo -e "\n${RED}Error Log (last 20 lines):${NC}"
        tail -n 20 "$LOG_DIR/complete-redundancy-error.log"
    fi
    
    echo -e "\n${BLUE}PM2 Logs (last 20 lines):${NC}"
    pm2 logs --lines 20 --nostream || true
}

# Check system status
check() {
    log "=== Complete Redundancy System Check ==="
    
    # Check if all systems are running
    local pm2_processes=$(pm2 status --no-daemon 2>/dev/null | grep -E "online" | wc -l)
    local expected_processes=25  # Expected number of processes
    
    if [ "$pm2_processes" -ge "$expected_processes" ]; then
        echo -e "${GREEN}✓ All redundancy systems are running ($pm2_processes/$expected_processes)${NC}"
    elif [ "$pm2_processes" -gt 0 ]; then
        echo -e "${YELLOW}⚠ Partial redundancy systems running ($pm2_processes/$expected_processes)${NC}"
    else
        echo -e "${RED}✗ No redundancy systems running${NC}"
    fi
    
    # Check specific systems
    local systems=(
        "pm2-redundancy-manager"
        "github-actions-redundancy-manager"
        "netlify-functions-redundancy-manager"
        "master-redundancy-orchestrator"
        "comprehensive-redundancy-orchestrator"
        "ultimate-redundancy-master"
    )
    
    for system in "${systems[@]}"; do
        if pm2 describe "$system" &>/dev/null; then
            echo -e "${GREEN}✓ $system is running${NC}"
        else
            echo -e "${RED}✗ $system is not running${NC}"
        fi
    done
}

# Monitor system continuously
monitor() {
    log "Starting continuous monitoring..."
    
    while true; do
        clear
        echo -e "${BLUE}=== Complete Redundancy System Monitor ===${NC}"
        echo -e "Press Ctrl+C to stop monitoring\n"
        
        status
        health
        check
        
        echo -e "\n${YELLOW}Monitoring... (refresh every 30 seconds)${NC}"
        sleep 30
    done
}

# Generate report
report() {
    log "=== Complete Redundancy System Report ==="
    
    local report_file="$LOG_DIR/complete-redundancy-report-$(date +%Y%m%d-%H%M%S).md"
    
    {
        echo "# Complete Redundancy System Report"
        echo "Generated: $(date)"
        echo ""
        echo "## System Status"
        echo ""
        echo "### PM2 Processes"
        pm2 status --no-daemon 2>/dev/null || echo "PM2 not available"
        echo ""
        echo "### Health Check"
        health
        echo ""
        echo "### Configuration"
        if [ -f "$CONFIG_FILE" ]; then
            echo "Configuration file exists: $CONFIG_FILE"
        else
            echo "Configuration file missing"
        fi
        echo ""
        echo "### Log Files"
        ls -la "$LOG_DIR"/*.log 2>/dev/null || echo "No log files found"
        echo ""
        echo "### System Information"
        echo "Node.js version: $(node --version 2>/dev/null || echo 'Not available')"
        echo "PM2 version: $(pm2 --version 2>/dev/null || echo 'Not available')"
        echo "Operating system: $(uname -a)"
        echo "Current directory: $(pwd)"
    } > "$report_file"
    
    log "Report generated: $report_file"
    cat "$report_file"
}

# Main function
main() {
    case "${1:-start}" in
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            restart
            ;;
        status)
            status
            ;;
        health)
            health
            ;;
        logs)
            logs
            ;;
        check)
            check
            ;;
        monitor)
            monitor
            ;;
        report)
            report
            ;;
        *)
            echo "Usage: $0 {start|stop|restart|status|health|logs|check|monitor|report}"
            echo ""
            echo "Commands:"
            echo "  start   - Start the complete redundancy system"
            echo "  stop    - Stop the complete redundancy system"
            echo "  restart - Restart the complete redundancy system"
            echo "  status  - Show system status"
            echo "  health  - Show system health"
            echo "  logs    - Show system logs"
            echo "  check   - Check system status"
            echo "  monitor - Monitor system continuously"
            echo "  report  - Generate system report"
>>>>>>> origin/cursor/automate-all-existing-automations-and-clean-up-ad2b
            exit 1
            ;;
    esac
}

<<<<<<< HEAD
# Run main function with all arguments
main "$@"
=======
# Run main function
main "$@"
>>>>>>> origin/cursor/automate-all-existing-automations-and-clean-up-ad2b
