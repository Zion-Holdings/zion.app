#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const cheerio = require('cheerio');
const CFG = require('./spec-dev-config.json');

const OUT_DIR = path.join(__dirname, '..', 'data', 'reports', 'spec-dev');
const CRAWL_FILE = path.join(OUT_DIR, 'site-crawl.json');
const CHAT_FILE = path.join(OUT_DIR, 'chat-raw.html');
const ACTIONS_FILE = path.join(OUT_DIR, 'spec-dev-actions.json');

function ensureDir(p) { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }

function titleFromPath(pn) {
  const trimmed = pn.replace(/\/$/, '');
  const parts = trimmed.split('/').filter(Boolean);
  if (parts.length === 0) return 'Home';
  return parts.map(s => s.replace(/[-_]+/g, ' ').replace(/\b\w/g, c => c.toUpperCase())).join(' / ');
}

function extractHintsFromChat(html) {
  if (!html) return { suggestedRoutes: [] };
  const $ = cheerio.load(html);
  const text = $('body').text();
  const suggestedRoutes = new Set();
  // Find path-like tokens in text, e.g., /services/ai, /pricing, /contact
  (text.match(/\/[a-z0-9][a-z0-9\-\/]{1,80}/gi) || []).forEach(tok => {
    try {
      const url = new URL(tok, CFG.siteStartUrl);
      if (url.hostname === CFG.siteDomain) {
        let pn = url.pathname;
        if (pn.length > 1) suggestedRoutes.add(pn.replace(/\/$/, ''));
      }
    } catch {}
  });
  // Also collect anchor hrefs from the HTML itself
  $('a[href]').each((_, a) => {
    const href = $(a).attr('href');
    try {
      const url = new URL(href, CFG.siteStartUrl);
      if (url.hostname === CFG.siteDomain) {
        let pn = url.pathname;
        if (pn.length > 1) suggestedRoutes.add(pn.replace(/\/$/, ''));
      }
    } catch {}
  });
  return { suggestedRoutes: Array.from(suggestedRoutes).slice(0, 100) };
}

function main() {
  ensureDir(OUT_DIR);
  const actions = [];

  let crawl = { pages: [], discovered: [] };
  try { crawl = JSON.parse(fs.readFileSync(CRAWL_FILE, 'utf8')); } catch {}

  // Derive broken/missing from crawl
  const brokenPaths = new Set();
  for (const p of (crawl.pages || [])) {
    const status = typeof p.status === 'number' ? p.status : 0;
    if (status >= 400 || status < 0) {
      try {
        const u = new URL(p.url);
        if (u.hostname === CFG.siteDomain) {
          const pathname = u.pathname.replace(/\/$/, '');
          if (pathname && pathname !== '/') brokenPaths.add(pathname);
        }
      } catch {}
    }
  }

  // Extract hints from chat
  let chatHtml = '';
  try { chatHtml = fs.readFileSync(CHAT_FILE, 'utf8'); } catch {}
  const chatHints = extractHintsFromChat(chatHtml);

  // Create actions for broken paths (create missing pages)
  Array.from(brokenPaths).slice(0, 50).forEach(pn => {
    actions.push({
      type: 'create_page',
      path: pn,
      title: titleFromPath(pn),
      content: `Autogenerated page for ${pn}. This page was created based on crawl findings and the product specification chat at ${CFG.chatUrl}.`
    });
  });

  // Homepage advertise discovered pages
  const advertisePages = (crawl.discovered || [])
    .map(u => { try { return new URL(u).pathname; } catch { return null; } })
    .filter(Boolean)
    .filter(pn => pn && pn !== '/')
    .slice(0, 50);
  actions.push({ type: 'homepage_advertise', pages: advertisePages });

  fs.writeFileSync(ACTIONS_FILE, JSON.stringify({
    timestamp: new Date().toISOString(),
    actions
  }, null, 2));

  console.log(`Spec-dev analyzer wrote ${actions.length} action(s) â†’ ${ACTIONS_FILE}`);
}

main();


