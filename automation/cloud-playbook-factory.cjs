#!/usr/bin/env node

'use strict';

/*
  Cloud Playbook Factory
  - Generates a Playbook page from latest crawl signals.
  - Writes under pages/reports/playbooks/
  - Updates public/automation/content-registry.json and homepage latest block
*/

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) { fs.mkdirSync(dirPath, { recursive: true }); }

function safeReadJson(file, fallback) {
  try { if (fs.existsSync(file)) return JSON.parse(fs.readFileSync(file, 'utf8')); } catch {}
  return fallback;
}

function readLatestCrawl() {
  const dir = path.join(process.cwd(), 'automation', 'logs');
  if (!fs.existsSync(dir)) return null;
  const files = fs.readdirSync(dir).filter(f => f.startsWith('cloud-crawl-') && f.endsWith('.json')).sort();
  if (!files.length) return null;
  try { return JSON.parse(fs.readFileSync(path.join(dir, files[files.length-1]), 'utf8')); } catch { return null; }
}

function tsxPage({ title, description, bodyHtml }) {
  return `import Head from 'next/head';

export default function Page() {
  return (
    <div className="min-h-screen bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${description}" />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
      <main className="container mx-auto px-6 py-12 prose prose-invert">
        <h1 className="text-3xl font-extrabold">${title}</h1>
        <div className="mt-4" dangerouslySetInnerHTML={{ __html: ${'`'}${'${bodyHtml}'}${'`'} }} />
        <p className="mt-6 text-white/60 text-sm">Auto-generated by Cloud Playbook Factory.</p>
      </main>
    </div>
  );
}
`;
}

function timestampSlug(prefix) {
  const d = new Date();
  const y = d.getUTCFullYear();
  const m = String(d.getUTCMonth() + 1).padStart(2,'0');
  const day = String(d.getUTCDate()).padStart(2,'0');
  const hh = String(d.getUTCHours()).padStart(2,'0');
  const mm = String(d.getUTCMinutes()).padStart(2,'0');
  const ss = String(d.getUTCSeconds()).padStart(2,'0');
  return `${prefix}-${y}-${m}-${day}-${hh}${mm}${ss}`;
}

function buildPlaybook(snippet) {
  const steps = [
    'Define objectives, KPIs, and guardrails.',
    'Inventory data, models, tools, and constraints.',
    'Design evaluation and feedback loops upfront.',
    'Implement smallest viable slice with telemetry.',
    'Iterate, measure, and harden for production.'
  ];
  const body = [
    `<p>Signal source: <a class=\"text-cyan-300 underline\" href=\"${snippet.url}\" target=\"_blank\" rel=\"noopener\">${snippet.url}</a></p>`,
    '<h2>Purpose</h2>',
    '<p>Operational steps to execute reliably with measurable outcomes.</p>',
    '<h2>Checklist</h2>',
    `<ol>${steps.map(s => `<li>${s}</li>`).join('')}</ol>`,
    '<h2>Notes</h2>',
    `<p class=\"text-white/75\">${String(snippet.excerpt || '').slice(0, 300)}</p>`
  ].join('');
  return body;
}

function loadRegistryMerged() {
  const p = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  const reg = safeReadJson(p, {});
  if (!reg || typeof reg !== 'object') return { items: [] };
  if (!Array.isArray(reg.items)) reg.items = [];
  return reg;
}

function saveRegistryMerged(reg) {
  const p = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  ensureDir(path.dirname(p));
  fs.writeFileSync(p, JSON.stringify(reg, null, 2), 'utf8');
}

function updateHomepageLatest(entries) {
  const hp = path.join(process.cwd(), 'pages', 'index.tsx');
  if (!fs.existsSync(hp)) return;
  let content = fs.readFileSync(hp, 'utf8');
  const start = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_START */}';
  const end = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_END */}';
  if (!content.includes(start) || !content.includes(end)) return;
  const list = entries.map(e => `            <a href=\"${e.route}\" className=\"group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30 tilt-on-hover\">\n              <div className=\"pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100\" />\n              <h3 className=\"text-lg font-semibold\">${e.title}</h3>\n              <p className=\"mt-1 text-sm text-white/75\">Freshly published by autonomous agents.</p>\n              <div className=\"mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90\">Open <span aria-hidden>→</span></div>\n            </a>`).join('\n');
  const block = `\n <section className=\"mx-auto max-w-7xl px-6 pb-14\">\n   <h2 className=\"text-center text-2xl font-bold tracking-wide text-white/90\">Latest Autonomous Content</h2>\n   <div className=\"mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n${list}\n   </div>\n </section>\n `;
  const pattern = new RegExp(`${start}[\\s\\S]*?${end}`);
  content = content.replace(pattern, `${start}\n${block}${end}`);
  fs.writeFileSync(hp, content, 'utf8');
}

function main() {
  const crawl = readLatestCrawl();
  if (!crawl || !Array.isArray(crawl.results) || !crawl.results.length) {
    console.log('cloud-playbook-factory: no crawl results; skipping');
    return;
  }
  const top = [...crawl.results].sort((a,b) => b.length - a.length)[0];
  const title = 'Playbook — Autonomous Delivery';
  const desc = 'A practical step-by-step playbook for reliable autonomous delivery.';
  const slug = timestampSlug('playbook');
  const file = path.join(process.cwd(), 'pages', 'reports', 'playbooks', `${slug}.tsx`);
  ensureDir(path.dirname(file));
  const bodyHtml = buildPlaybook({ url: top.url, excerpt: top.text });
  fs.writeFileSync(file, tsxPage({ title, description: desc, bodyHtml }), 'utf8');

  const entry = { title, route: `/reports/playbooks/${slug}`, filePath: file };
  const reg = loadRegistryMerged();
  const seen = new Set((reg.items || []).map(i => i.href));
  if (!seen.has(entry.route)) {
    reg.items.unshift({ title: entry.title, href: entry.route, desc: 'New autonomous content', createdAt: new Date().toISOString(), source: 'cloud-playbook-factory' });
    reg.items = reg.items.slice(0, 80);
    saveRegistryMerged(reg);
  }
  updateHomepageLatest([entry]);
  console.log('cloud-playbook-factory: created', path.relative(process.cwd(), file));
}

if (require.main === module) {
  try { main(); } catch (e) { console.error('cloud-playbook-factory failed:', e); process.exitCode = 1; }
}

module.exports = { main };


