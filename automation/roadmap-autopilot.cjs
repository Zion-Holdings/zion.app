#!/usr/bin/env node
/* eslint-disable no-console */
const fs = require('fs-extra');
const path = require('path');
const https = require('https');

function ghRequest(pathname, token) {
  return new Promise((resolve, reject) => {
    const req = https.request({
      hostname: 'api.github.com',
      path: pathname,
      method: 'GET',
      headers: {
        'User-Agent': 'zion-autopilot',
        Accept: 'application/vnd.github+json',
        Authorization: token ? `Bearer ${token}` : undefined,
      },
    }, (res) => {
      let data = '';
      res.on('data', (d) => (data += d));
      res.on('end', () => {
        try { resolve(JSON.parse(data)); } catch { resolve([]); }
      });
    });
    req.on('error', reject);
    req.end();
  });
}

async function main() {
  const repoRoot = process.cwd();
  const repo = process.env.GITHUB_REPOSITORY || 'Zion-Holdings/zion.app';
  const token = process.env.GITHUB_TOKEN || process.env.GH_TOKEN || '';
  const outDir = path.join(repoRoot, 'docs');
  const logsDir = path.join(repoRoot, 'automation_logs');
  await fs.ensureDir(outDir);
  await fs.ensureDir(logsDir);

  let issues = [];
  let prs = [];
  try {
    issues = await ghRequest(`/repos/${repo}/issues?state=open&per_page=50`, token);
    prs = await ghRequest(`/repos/${repo}/pulls?state=open&per_page=50`, token);
  } catch (e) {
    // no token or error; proceed with empty
  }

  const now = new Date();
  const dateSlug = now.toISOString().slice(0, 10);

  const roadmapLines = [
    `# Roadmap (Auto) - ${dateSlug}`,
    '',
    '## Open Issues',
    ...(issues.filter(i => !i.pull_request).map(i => `- [#${i.number}] ${i.title}`)),
    '',
    '## Open PRs',
    ...(prs.map(p => `- [#${p.number}] ${p.title}`)),
    '',
    'Generated by Roadmap Autopilot.',
  ];

  const file = path.join(outDir, 'roadmap-auto.md');
  await fs.writeFile(file, roadmapLines.join('\n'), 'utf-8');

  const status = {
    ranAt: now.toISOString(),
    openIssues: issues.filter(i => !i.pull_request).length,
    openPRs: prs.length,
    file: path.relative(repoRoot, file),
  };
  await fs.writeJson(path.join(logsDir, 'roadmap-autopilot-status.json'), status, { spaces: 2 });
  console.log('Roadmap Autopilot completed');
}

main().catch(err => { console.error(err); process.exit(1); });