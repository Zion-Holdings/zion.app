#!/usr/bin/env node
"use strict";

<<<<<<< HEAD
const { spawnSync, spawn } = require("child_process");
const fs = require("fs");
const path = require("path");
const cron = require("node-cron");

class RedundancyAutomationSystem {
  constructor() {
    this.config = {
      pm2: {
        processes: ["zion-auto-sync", "zion-auto-sync-cron"],
        healthCheckInterval: 30000, // 30 seconds
        restartAttempts: 3,
        restartDelay: 5000 // 5 seconds
      },
      githubActions: {
        workflows: ["marketing-sync", "sync-health"],
        checkInterval: 60000, // 1 minute
        maxFailures: 3
      },
      netlify: {
        functions: this.loadNetlifyFunctions(),
        healthCheckInterval: 120000, // 2 minutes
        maxFailures: 2
      },
      logging: {
        enabled: true,
        logFile: "logs/redundancy-automation.log",
        maxLogSize: 10 * 1024 * 1024, // 10MB
        maxLogFiles: 5
      }
    };
    
    this.stats = {
      pm2: { checks: 0, failures: 0, restarts: 0 },
      githubActions: { checks: 0, failures: 0, triggers: 0 },
      netlify: { checks: 0, failures: 0, recoveries: 0 }
    };
    
    this.init();
  }

  init() {
    this.ensureLogDirectory();
    this.log("Redundancy Automation System initialized");
    this.startHealthChecks();
    this.startMonitoring();
  }

  ensureLogDirectory() {
    const logDir = path.dirname(this.config.logging.logFile);
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }
  }

  loadNetlifyFunctions() {
    try {
      const manifestPath = path.join(process.cwd(), "netlify/functions/functions-manifest.json");
      if (fs.existsSync(manifestPath)) {
        const manifest = JSON.parse(fs.readFileSync(manifestPath, "utf8"));
        return manifest.functions || [];
      }
    } catch (err) {
      this.log(`Error loading Netlify functions manifest: ${err.message}`);
    }
    return [];
  }

  log(message, level = "INFO") {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${level}] ${message}`;
    
    if (this.config.logging.enabled) {
      console.log(logEntry);
      try {
        fs.appendFileSync(this.config.logging.logFile, logEntry + "\n");
        this.rotateLogsIfNeeded();
      } catch (err) {
        console.error(`Log write failed: ${err.message}`);
      }
    }
  }

  rotateLogsIfNeeded() {
    try {
      const stats = fs.statSync(this.config.logging.logFile);
      if (stats.size > this.config.logging.maxLogSize) {
        for (let i = this.config.logging.maxLogFiles - 1; i > 0; i--) {
          const oldFile = `${this.config.logging.logFile}.${i}`;
          const newFile = `${this.config.logging.logFile}.${i + 1}`;
          if (fs.existsSync(oldFile)) {
            fs.renameSync(oldFile, newFile);
          }
        }
        fs.renameSync(this.config.logging.logFile, `${this.config.logging.logFile}.1`);
        fs.writeFileSync(this.config.logging.logFile, "");
      }
    } catch (err) {
      // Ignore rotation errors
    }
  }

  runCommand(command, args = [], options = {}) {
    const result = spawnSync(command, args, {
      cwd: options.cwd || process.cwd(),
      env: process.env,
      shell: false,
      encoding: "utf8",
      maxBuffer: 1024 * 1024 * 10
    });
    
    return {
      status: result.status,
      stdout: result.stdout || "",
      stderr: result.stderr || "",
      success: result.status === 0
    };
  }

  // PM2 Redundancy Management
  async checkPM2Health() {
    this.stats.pm2.checks++;
    
    try {
      const status = this.runCommand("pm2", ["status", "--no-daemon"]);
      if (!status.success) {
        this.log(`PM2 status check failed: ${status.stderr}`, "ERROR");
        this.stats.pm2.failures++;
        await this.recoverPM2();
        return false;
      }

      // Check if all expected processes are running
      const processes = this.config.pm2.processes;
      for (const processName of processes) {
        if (!status.stdout.includes(processName)) {
          this.log(`PM2 process ${processName} not found, restarting...`, "WARN");
          await this.restartPM2Process(processName);
        }
      }

      return true;
    } catch (err) {
      this.log(`PM2 health check error: ${err.message}`, "ERROR");
      this.stats.pm2.failures++;
      return false;
    }
  }

  async restartPM2Process(processName) {
    this.log(`Restarting PM2 process: ${processName}`);
    
    for (let attempt = 1; attempt <= this.config.pm2.restartAttempts; attempt++) {
      try {
        const result = this.runCommand("pm2", ["restart", processName]);
        if (result.success) {
          this.log(`Successfully restarted ${processName} on attempt ${attempt}`);
          this.stats.pm2.restarts++;
          return true;
        } else {
          this.log(`Restart attempt ${attempt} failed for ${processName}: ${result.stderr}`, "WARN");
          if (attempt < this.config.pm2.restartAttempts) {
            await new Promise(resolve => setTimeout(resolve, this.config.pm2.restartDelay));
          }
        }
      } catch (err) {
        this.log(`Restart error for ${processName}: ${err.message}`, "ERROR");
      }
    }

    // If all attempts failed, try to start the process
    this.log(`All restart attempts failed for ${processName}, trying to start...`);
    const startResult = this.runCommand("pm2", ["start", "ecosystem.pm2.cjs", "--update-env"]);
    if (startResult.success) {
      this.log(`Successfully started ${processName} via ecosystem`);
      return true;
    }
    
    return false;
  }

  async recoverPM2() {
    this.log("Attempting PM2 recovery...");
    
    try {
      // Kill all PM2 processes
      this.runCommand("pm2", ["kill"]);
      
      // Wait a moment
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Start fresh from ecosystem
      const result = this.runCommand("pm2", ["start", "ecosystem.pm2.cjs", "--update-env"]);
      if (result.success) {
        this.log("PM2 recovery successful");
        return true;
      } else {
        this.log(`PM2 recovery failed: ${result.stderr}`, "ERROR");
        return false;
      }
    } catch (err) {
      this.log(`PM2 recovery error: ${err.message}`, "ERROR");
      return false;
=======
const { spawnSync, execSync } = require("child_process");
const fs = require("fs");
const path = require("path");
const https = require("https");

class RedundancyAutomationSystem {
  constructor() {
    this.workspace = process.cwd();
    this.logDir = path.join(__dirname, "logs");
    this.logFile = path.join(this.logDir, "redundancy-automation.log");
    this.ensureLogDir();
    this.redundancyStatus = {
      pm2: { status: "unknown", lastCheck: null, redundancyActive: false },
      githubActions: { status: "unknown", lastCheck: null, redundancyActive: false },
      netlifyFunctions: { status: "unknown", lastCheck: null, redundancyActive: false }
    };
  }

  ensureLogDir() {
    if (!fs.existsSync(this.logDir)) {
      fs.mkdirSync(this.logDir, { recursive: true });
    }
  }

  log(message, level = "INFO") {
    const timestamp = new Date().toISOString();
    const line = `[${timestamp}] [${level}] ${message}`;
    console.log(line);
    fs.appendFileSync(this.logFile, line + "\n");
  }

  async runCommand(command, args = [], options = {}) {
    return new Promise((resolve) => {
      const result = spawnSync(command, args, {
        cwd: options.cwd || this.workspace,
        env: process.env,
        shell: false,
        encoding: "utf8",
        maxBuffer: 1024 * 1024 * 20,
        ...options
      });
      resolve({
        status: result.status,
        stdout: result.stdout?.toString() || "",
        stderr: result.stderr?.toString() || ""
      });
    });
  }

  // PM2 Redundancy Management
  async checkPM2Status() {
    try {
      this.log("üîç Checking PM2 automation status...");
      
      // Check if PM2 is running
      const pm2Status = await this.runCommand("pm2", ["status"]);
      if (pm2Status.status !== 0) {
        this.log("‚ùå PM2 not running, starting redundancy...", "WARN");
        await this.activatePM2Redundancy();
        return;
      }

      // Check specific PM2 processes
      const zionAutoSync = await this.runCommand("pm2", ["jlist"]);
      if (zionAutoSync.status === 0) {
        const processes = JSON.parse(zionAutoSync.stdout);
        const autoSyncProcesses = processes.filter(p => 
          p.name === "zion-auto-sync" || p.name === "zion-auto-sync-cron"
        );

        if (autoSyncProcesses.length === 0) {
          this.log("‚ö†Ô∏è PM2 automation processes not found, activating redundancy", "WARN");
          await this.activatePM2Redundancy();
        } else {
          this.log(`‚úÖ PM2 automation running: ${autoSyncProcesses.length} processes`);
          this.redundancyStatus.pm2.status = "healthy";
          this.redundancyStatus.pm2.redundancyActive = false;
        }
      }

      this.redundancyStatus.pm2.lastCheck = new Date();
    } catch (error) {
      this.log(`‚ùå PM2 status check failed: ${error.message}`, "ERROR");
      await this.activatePM2Redundancy();
    }
  }

  async activatePM2Redundancy() {
    try {
      this.log("üöÄ Activating PM2 redundancy automation...");
      
      // Create redundancy PM2 ecosystem
      const redundancyEcosystem = {
        apps: [
          {
            name: "zion-auto-sync-redundancy",
            script: path.join(__dirname, "pm2-auto-sync.js"),
            interpreter: "node",
            cwd: this.workspace,
            watch: false,
            autorestart: true,
            max_restarts: 15,
            exp_backoff_restart_delay: 1000,
            instances: 2,
            env: {
              NODE_ENV: "production",
              AUTO_SYNC_REMOTE: process.env.AUTO_SYNC_REMOTE || "origin",
              AUTO_SYNC_BRANCH: process.env.AUTO_SYNC_BRANCH || "main",
              AUTO_SYNC_STRATEGY: process.env.AUTO_SYNC_STRATEGY || "hardreset",
              AUTO_SYNC_CLEAN: process.env.AUTO_SYNC_CLEAN || "1",
              AUTO_SYNC_GC: process.env.AUTO_SYNC_GC || "0",
              REDUNDANCY_MODE: "true"
            },
            log_date_format: "YYYY-MM-DD HH:mm:ss Z",
            error_file: path.join(this.logDir, "pm2-redundancy-error.log"),
            out_file: path.join(this.logDir, "pm2-redundancy-out.log"),
            time: true
          },
          {
            name: "zion-auto-sync-cron-redundancy",
            script: path.join(__dirname, "pm2-auto-sync.js"),
            interpreter: "node",
            cwd: this.workspace,
            watch: false,
            autorestart: false,
            instances: 1,
            cron_restart: "*/5 * * * *", // Every 5 minutes for redundancy
            env: {
              NODE_ENV: "production",
              AUTO_SYNC_REMOTE: process.env.AUTO_SYNC_REMOTE || "origin",
              AUTO_SYNC_BRANCH: process.env.AUTO_SYNC_BRANCH || "main",
              AUTO_SYNC_STRATEGY: process.env.AUTO_SYNC_STRATEGY || "hardreset",
              AUTO_SYNC_CLEAN: process.env.AUTO_SYNC_CLEAN || "1",
              AUTO_SYNC_GC: process.env.AUTO_SYNC_GC || "0",
              REDUNDANCY_MODE: "true"
            },
            log_date_format: "YYYY-MM-DD HH:mm:ss Z",
            error_file: path.join(this.logDir, "pm2-cron-redundancy-error.log"),
            out_file: path.join(this.logDir, "pm2-cron-redundancy-out.log"),
            time: true
          }
        ]
      };

      // Write redundancy ecosystem file
      const ecosystemPath = path.join(__dirname, "ecosystem.redundancy.cjs");
      fs.writeFileSync(ecosystemPath, `module.exports = ${JSON.stringify(redundancyEcosystem, null, 2)};`);

      // Start redundancy processes
      await this.runCommand("pm2", ["start", ecosystemPath, "--update-env"]);
      
      this.log("‚úÖ PM2 redundancy activated");
      this.redundancyStatus.pm2.status = "redundancy_active";
      this.redundancyStatus.pm2.redundancyActive = true;
    } catch (error) {
      this.log(`‚ùå PM2 redundancy activation failed: ${error.message}`, "ERROR");
>>>>>>> origin/cursor/automate-deployment-redundancy-and-clean-up-5d6d
    }
  }

  // GitHub Actions Redundancy Management
<<<<<<< HEAD
  async checkGitHubActionsHealth() {
    this.stats.githubActions.checks++;
    
    try {
      // Check if workflows are properly configured
      const workflowsDir = path.join(process.cwd(), ".github/workflows");
      if (!fs.existsSync(workflowsDir)) {
        this.log("GitHub workflows directory not found", "ERROR");
        this.stats.githubActions.failures++;
        return false;
      }

      // Check each workflow file
      for (const workflow of this.config.githubActions.workflows) {
        const workflowFile = path.join(workflowsDir, `${workflow}.yml`);
        if (!fs.existsSync(workflowFile)) {
          this.log(`GitHub workflow ${workflow}.yml not found`, "ERROR");
          this.stats.githubActions.failures++;
          continue;
        }

        // Validate workflow syntax
        const workflowContent = fs.readFileSync(workflowFile, "utf8");
        if (!this.validateWorkflowSyntax(workflowContent)) {
          this.log(`GitHub workflow ${workflow}.yml has syntax issues`, "WARN");
        }
      }

      return true;
    } catch (err) {
      this.log(`GitHub Actions health check error: ${err.message}`, "ERROR");
      this.stats.githubActions.failures++;
      return false;
    }
  }

  validateWorkflowSyntax(content) {
    try {
      // Basic YAML validation
      if (!content.includes("name:") || !content.includes("on:")) {
        return false;
      }
      
      // Check for common syntax issues
      const lines = content.split("\n");
      let braceCount = 0;
      
      for (const line of lines) {
        if (line.includes("{")) braceCount++;
        if (line.includes("}")) braceCount--;
      }
      
      return braceCount === 0;
    } catch (err) {
      return false;
    }
  }

  async triggerGitHubWorkflow(workflowName) {
    this.log(`Triggering GitHub workflow: ${workflowName}`);
    
    try {
      // Use GitHub CLI if available
      const ghResult = this.runCommand("gh", ["workflow", "run", workflowName]);
      if (ghResult.success) {
        this.log(`Successfully triggered ${workflowName} via GitHub CLI`);
        this.stats.githubActions.triggers++;
        return true;
      }

      // Fallback: manual trigger via git push
      this.log(`GitHub CLI not available, using manual trigger for ${workflowName}`);
      const triggerFile = `.github/workflows/${workflowName}-trigger.txt`;
      fs.writeFileSync(triggerFile, `Manual trigger: ${new Date().toISOString()}`);
      
      const gitResult = this.runCommand("git", ["add", triggerFile]);
      if (gitResult.success) {
        this.runCommand("git", ["commit", "-m", `Trigger ${workflowName} workflow`]);
        this.runCommand("git", ["push", "origin", "main"]);
        this.log(`Manually triggered ${workflowName} via git push`);
        this.stats.githubActions.triggers++;
        return true;
      }

      return false;
    } catch (err) {
      this.log(`Error triggering workflow ${workflowName}: ${err.message}`, "ERROR");
      return false;
=======
  async checkGitHubActionsStatus() {
    try {
      this.log("üîç Checking GitHub Actions automation status...");
      
      // Check if workflows are properly configured
      const workflowsDir = path.join(this.workspace, ".github", "workflows");
      if (!fs.existsSync(workflowsDir)) {
        this.log("‚ùå GitHub Actions workflows directory not found", "ERROR");
        await this.activateGitHubActionsRedundancy();
        return;
      }

      // Check specific workflow files
      const requiredWorkflows = ["marketing-sync.yml", "sync-health.yml"];
      const missingWorkflows = [];

      for (const workflow of requiredWorkflows) {
        const workflowPath = path.join(workflowsDir, workflow);
        if (!fs.existsSync(workflowPath)) {
          missingWorkflows.push(workflow);
        }
      }

      if (missingWorkflows.length > 0) {
        this.log(`‚ö†Ô∏è Missing GitHub Actions workflows: ${missingWorkflows.join(", ")}`, "WARN");
        await this.activateGitHubActionsRedundancy();
      } else {
        this.log("‚úÖ GitHub Actions workflows configured");
        this.redundancyStatus.githubActions.status = "healthy";
        this.redundancyStatus.githubActions.redundancyActive = false;
      }

      this.redundancyStatus.githubActions.lastCheck = new Date();
    } catch (error) {
      this.log(`‚ùå GitHub Actions status check failed: ${error.message}`, "ERROR");
      await this.activateGitHubActionsRedundancy();
    }
  }

  async activateGitHubActionsRedundancy() {
    try {
      this.log("üöÄ Activating GitHub Actions redundancy...");
      
      const workflowsDir = path.join(this.workspace, ".github", "workflows");
      if (!fs.existsSync(workflowsDir)) {
        fs.mkdirSync(workflowsDir, { recursive: true });
      }

      // Create enhanced marketing-sync workflow
      const enhancedMarketingSync = {
        name: "Enhanced Marketing Sync (Redundancy)",
        on: {
          schedule: [
            { cron: "0 */6 * * *" }, // Every 6 hours
            { cron: "30 */12 * * *" } // Every 12 hours at 30 minutes
          ],
          workflow_dispatch: null
        },
        permissions: { contents: "write" },
        jobs: {
          "run-marketing-sync": {
            runs_on: "ubuntu-latest",
            steps: [
              {
                name: "Checkout repository",
                uses: "actions/checkout@v4"
              },
              {
                name: "Setup Node.js",
                uses: "actions/setup-node@v4",
                with: { "node-version": "20" }
              },
              {
                name: "Run enhanced marketing-sync",
                env: {
                  LINKEDIN_ACCESS_TOKEN: "${{ secrets.LINKEDIN_ACCESS_TOKEN }}",
                  LINKEDIN_URN: "${{ secrets.LINKEDIN_URN }}",
                  IG_USER_ID: "${{ secrets.IG_USER_ID }}",
                  IG_ACCESS_TOKEN: "${{ secrets.IG_ACCESS_TOKEN }}",
                  REDUNDANCY_MODE: "true"
                },
                run: "node automation/marketing-sync.js"
              },
              {
                name: "Commit and push changes",
                run: `
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  if [ -n "$(git status --porcelain)" ]; then
                    git add -A
                    git commit -m "chore(marketing): enhanced redundancy sync update"
                    git push origin HEAD:main
                  fi
                `
              }
            ]
          }
        }
      };

      // Create enhanced sync-health workflow
      const enhancedSyncHealth = {
        name: "Enhanced Sync Health (Redundancy)",
        on: {
          schedule: [
            { cron: "*/10 * * * *" }, // Every 10 minutes
            { cron: "*/5 * * * *" }   // Every 5 minutes for redundancy
          ],
          workflow_dispatch: null
        },
        permissions: { contents: "write" },
        jobs: {
          "check-sync": {
            runs_on: "ubuntu-latest",
            steps: [
              {
                name: "Checkout repository",
                uses: "actions/checkout@v4",
                with: { "fetch-depth": 0 }
              },
              {
                name: "Setup Node.js",
                uses: "actions/setup-node@v4",
                with: { "node-version": "20" }
              },
              {
                name: "Run enhanced pm2-auto-sync",
                env: {
                  AUTO_SYNC_STRATEGY: "hardreset",
                  AUTO_SYNC_CLEAN: "0",
                  REDUNDANCY_MODE: "true"
                },
                run: "node automation/pm2-auto-sync.js || true"
              },
              {
                name: "Push if repository is ahead",
                run: `
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  AHEAD=$(git rev-list --left-right --count HEAD...origin/main | awk '{print $1}')
                  if [ "$AHEAD" != "0" ]; then
                    git push origin HEAD:main
                  fi
                `
              }
            ]
          }
        }
      };

      // Write enhanced workflow files
      fs.writeFileSync(
        path.join(workflowsDir, "marketing-sync-enhanced.yml"),
        JSON.stringify(enhancedMarketingSync, null, 2)
      );
      
      fs.writeFileSync(
        path.join(workflowsDir, "sync-health-enhanced.yml"),
        JSON.stringify(enhancedSyncHealth, null, 2)
      );

      this.log("‚úÖ GitHub Actions redundancy activated");
      this.redundancyStatus.githubActions.status = "redundancy_active";
      this.redundancyStatus.githubActions.redundancyActive = true;
    } catch (error) {
      this.log(`‚ùå GitHub Actions redundancy activation failed: ${error.message}`, "ERROR");
>>>>>>> origin/cursor/automate-deployment-redundancy-and-clean-up-5d6d
    }
  }

  // Netlify Functions Redundancy Management
<<<<<<< HEAD
  async checkNetlifyFunctionsHealth() {
    this.stats.netlify.checks++;
    
    try {
      const functions = this.config.netlify.functions;
      if (functions.length === 0) {
        this.log("No Netlify functions found", "WARN");
        return false;
      }

      let healthyFunctions = 0;
      let failedFunctions = 0;

      for (const functionName of functions) {
        if (await this.checkFunctionHealth(functionName)) {
          healthyFunctions++;
        } else {
          failedFunctions++;
        }
      }

      const healthPercentage = (healthyFunctions / functions.length) * 100;
      this.log(`Netlify functions health: ${healthPercentage.toFixed(1)}% (${healthyFunctions}/${functions.length})`);

      if (healthPercentage < 80) {
        this.log("Netlify functions health below threshold, initiating recovery", "WARN");
        await this.recoverNetlifyFunctions();
        return false;
      }

      return true;
    } catch (err) {
      this.log(`Netlify functions health check error: ${err.message}`, "ERROR");
      this.stats.netlify.failures++;
      return false;
    }
  }

  async checkFunctionHealth(functionName) {
    try {
      const functionPath = path.join(process.cwd(), "netlify/functions", functionName);
      
      if (!fs.existsSync(functionPath)) {
        this.log(`Netlify function ${functionName} not found`, "WARN");
        return false;
      }

      // Check if function has required files
      const requiredFiles = ["index.js", "index.mjs", "index.ts"];
      const hasRequiredFile = requiredFiles.some(file => fs.existsSync(path.join(functionPath, file)));
      
      if (!hasRequiredFile) {
        this.log(`Netlify function ${functionName} missing required files`, "WARN");
        return false;
      }

      return true;
    } catch (err) {
      this.log(`Error checking function ${functionName}: ${err.message}`, "WARN");
      return false;
    }
  }

  async recoverNetlifyFunctions() {
    this.log("Attempting Netlify functions recovery...");
    
    try {
      // Regenerate functions manifest
      const manifestResult = this.runCommand("node", ["scripts/generate-netlify-functions-manifest.cjs"]);
      if (manifestResult.success) {
        this.log("Netlify functions manifest regenerated");
      }

      // Trigger Netlify rebuild
      const netlifyResult = this.runCommand("netlify", ["build"]);
      if (netlifyResult.success) {
        this.log("Netlify rebuild successful");
        this.stats.netlify.recoveries++;
        return true;
      } else {
        this.log(`Netlify rebuild failed: ${netlifyResult.stderr}`, "ERROR");
        return false;
      }
    } catch (err) {
      this.log(`Netlify functions recovery error: ${err.message}`, "ERROR");
      return false;
    }
  }

  // System Monitoring
  startHealthChecks() {
    // PM2 health checks
    setInterval(async () => {
      await this.checkPM2Health();
    }, this.config.pm2.healthCheckInterval);

    // GitHub Actions health checks
    setInterval(async () => {
      await this.checkGitHubActionsHealth();
    }, this.config.githubActions.checkInterval);

    // Netlify functions health checks
    setInterval(async () => {
      await this.checkNetlifyFunctionsHealth();
    }, this.config.netlify.healthCheckInterval);

    this.log("Health checks started");
  }

  startMonitoring() {
    // System status monitoring
    setInterval(() => {
      this.logSystemStatus();
    }, 300000); // Every 5 minutes

    // Memory and performance monitoring
    setInterval(() => {
      this.monitorSystemResources();
    }, 60000); // Every minute

    this.log("System monitoring started");
  }

  logSystemStatus() {
    const status = {
      timestamp: new Date().toISOString(),
      stats: this.stats,
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      config: {
        pm2: { processes: this.config.pm2.processes.length },
        githubActions: { workflows: this.config.githubActions.workflows.length },
        netlify: { functions: this.config.netlify.functions.length }
      }
    };

    this.log(`System Status: ${JSON.stringify(status, null, 2)}`);
  }

  monitorSystemResources() {
    const memUsage = process.memoryUsage();
    const memUsageMB = {
      rss: Math.round(memUsage.rss / 1024 / 1024),
      heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024),
      heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),
      external: Math.round(memUsage.external / 1024 / 1024)
    };

    if (memUsageMB.heapUsed > 500) { // 500MB threshold
      this.log(`High memory usage detected: ${memUsageMB.heapUsed}MB`, "WARN");
    }

    if (memUsageMB.rss > 1000) { // 1GB threshold
      this.log(`High RSS memory usage: ${memUsageMB.rss}MB`, "WARN");
    }
  }

  // Emergency Recovery
  async emergencyRecovery() {
    this.log("Initiating emergency recovery...", "ERROR");
    
    try {
      // Stop all PM2 processes
      this.runCommand("pm2", ["kill"]);
      
      // Wait for cleanup
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // Restart PM2 ecosystem
      const pm2Result = this.runCommand("pm2", ["start", "ecosystem.pm2.cjs", "--update-env"]);
      
      // Trigger GitHub Actions recovery
      for (const workflow of this.config.githubActions.workflows) {
        await this.triggerGitHubWorkflow(workflow);
      }
      
      // Rebuild Netlify functions
      await this.recoverNetlifyFunctions();
      
      this.log("Emergency recovery completed");
      return true;
    } catch (err) {
      this.log(`Emergency recovery failed: ${err.message}`, "ERROR");
      return false;
    }
  }

  // Graceful shutdown
  async shutdown() {
    this.log("Shutting down Redundancy Automation System...");
    
    try {
      // Stop all health checks
      clearInterval(this.pm2Interval);
      clearInterval(this.githubInterval);
      clearInterval(this.netlifyInterval);
      
      // Final status report
      this.logSystemStatus();
      
      this.log("Redundancy Automation System shutdown complete");
      process.exit(0);
    } catch (err) {
      this.log(`Shutdown error: ${err.message}`, "ERROR");
      process.exit(1);
    }
  }
}

// Main execution
if (require.main === module) {
  const redundancySystem = new RedundancyAutomationSystem();
  
  // Handle graceful shutdown
  process.on("SIGINT", () => redundancySystem.shutdown());
  process.on("SIGTERM", () => redundancySystem.shutdown());
  process.on("uncaughtException", (err) => {
    redundancySystem.log(`Uncaught exception: ${err.message}`, "ERROR");
    redundancySystem.emergencyRecovery().then(() => {
      process.exit(1);
    });
  });
  
  process.on("unhandledRejection", (reason, promise) => {
    redundancySystem.log(`Unhandled rejection at ${promise}: ${reason}`, "ERROR");
  });
}

module.exports = RedundancyAutomationSystem;
=======
  async checkNetlifyFunctionsStatus() {
    try {
      this.log("üîç Checking Netlify Functions automation status...");
      
      // Check if Netlify functions directory exists
      const functionsDir = path.join(this.workspace, "netlify", "functions");
      if (!fs.existsSync(functionsDir)) {
        this.log("‚ùå Netlify functions directory not found", "ERROR");
        await this.activateNetlifyFunctionsRedundancy();
        return;
      }

      // Check functions manifest
      const manifestPath = path.join(functionsDir, "functions-manifest.json");
      if (!fs.existsSync(manifestPath)) {
        this.log("‚ö†Ô∏è Netlify functions manifest not found", "WARN");
        await this.activateNetlifyFunctionsRedundancy();
        return;
      }

      // Check if functions are properly configured
      const manifest = JSON.parse(fs.readFileSync(manifestPath, "utf8"));
      if (!manifest.functions || manifest.functions.length === 0) {
        this.log("‚ö†Ô∏è No Netlify functions configured", "WARN");
        await this.activateNetlifyFunctionsRedundancy();
        return;
      }

      this.log(`‚úÖ Netlify functions configured: ${manifest.functions.length} functions`);
      this.redundancyStatus.netlifyFunctions.status = "healthy";
      this.redundancyStatus.netlifyFunctions.redundancyActive = false;
      this.redundancyStatus.netlifyFunctions.lastCheck = new Date();
    } catch (error) {
      this.log(`‚ùå Netlify Functions status check failed: ${error.message}`, "ERROR");
      await this.activateNetlifyFunctionsRedundancy();
    }
  }

  async activateNetlifyFunctionsRedundancy() {
    try {
      this.log("üöÄ Activating Netlify Functions redundancy...");
      
      const functionsDir = path.join(this.workspace, "netlify", "functions");
      if (!fs.existsSync(functionsDir)) {
        fs.mkdirSync(functionsDir, { recursive: true });
      }

      // Create redundancy functions
      const redundancyFunctions = [
        {
          name: "redundancy-monitor",
          code: `
            exports.handler = async (event, context) => {
              return {
                statusCode: 200,
                body: JSON.stringify({
                  message: "Redundancy monitor active",
                  timestamp: new Date().toISOString(),
                  status: "healthy"
                })
              };
            };
          `
        },
        {
          name: "redundancy-health-check",
          code: `
            exports.handler = async (event, context) => {
              const healthStatus = {
                timestamp: new Date().toISOString(),
                status: "healthy",
                redundancy: {
                  pm2: true,
                  githubActions: true,
                  netlifyFunctions: true
                },
                uptime: process.uptime()
              };
              
              return {
                statusCode: 200,
                body: JSON.stringify(healthStatus)
              };
            };
          `
        },
        {
          name: "redundancy-sync-trigger",
          code: `
            exports.handler = async (event, context) => {
              // This function can trigger sync operations
              const { trigger } = JSON.parse(event.body || "{}");
              
              let result = { success: false, message: "Unknown trigger" };
              
              switch (trigger) {
                case "pm2-sync":
                  result = { success: true, message: "PM2 sync triggered" };
                  break;
                case "github-sync":
                  result = { success: true, message: "GitHub sync triggered" };
                  break;
                case "netlify-sync":
                  result = { success: true, message: "Netlify sync triggered" };
                  break;
                default:
                  result = { success: false, message: "Invalid trigger" };
              }
              
              return {
                statusCode: 200,
                body: JSON.stringify({
                  ...result,
                  timestamp: new Date().toISOString()
                })
              };
            };
          `
        }
      ];

      // Write redundancy functions
      for (const func of redundancyFunctions) {
        const funcPath = path.join(functionsDir, `${func.name}.js`);
        fs.writeFileSync(funcPath, func.code);
      }

      // Update functions manifest
      const manifestPath = path.join(functionsDir, "functions-manifest.json");
      const existingManifest = fs.existsSync(manifestPath) 
        ? JSON.parse(fs.readFileSync(manifestPath, "utf8"))
        : { generatedAt: new Date().toISOString(), functions: [] };
      
      existingManifest.functions.push(...redundancyFunctions.map(f => f.name));
      existingManifest.generatedAt = new Date().toISOString();
      
      fs.writeFileSync(manifestPath, JSON.stringify(existingManifest, null, 2));

      this.log("‚úÖ Netlify Functions redundancy activated");
      this.redundancyStatus.netlifyFunctions.status = "redundancy_active";
      this.redundancyStatus.netlifyFunctions.redundancyActive = true;
    } catch (error) {
      this.log(`‚ùå Netlify Functions redundancy activation failed: ${error.message}`, "ERROR");
    }
  }

  // Main redundancy orchestration
  async runRedundancyCheck() {
    this.log("üöÄ Starting comprehensive redundancy automation check...");
    
    try {
      // Check all automation systems
      await Promise.all([
        this.checkPM2Status(),
        this.checkGitHubActionsStatus(),
        this.checkNetlifyFunctionsStatus()
      ]);

      // Generate redundancy report
      await this.generateRedundancyReport();
      
      this.log("‚úÖ Redundancy automation check completed");
    } catch (error) {
      this.log(`‚ùå Redundancy check failed: ${error.message}`, "ERROR");
    }
  }

  async generateRedundancyReport() {
    try {
      const report = {
        timestamp: new Date().toISOString(),
        redundancyStatus: this.redundancyStatus,
        summary: {
          totalSystems: 3,
          healthySystems: Object.values(this.redundancyStatus).filter(s => s.status === "healthy").length,
          redundancyActive: Object.values(this.redundancyStatus).filter(s => s.redundancyActive).length,
          needsAttention: Object.values(this.redundancyStatus).filter(s => s.status === "unknown").length
        }
      };

      const reportPath = path.join(this.logDir, "redundancy-report.json");
      fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

      this.log(`üìä Redundancy report generated: ${reportPath}`);
      this.log(`üìà Summary: ${report.summary.healthySystems}/3 healthy, ${report.summary.redundancyActive} redundancy active`);
    } catch (error) {
      this.log(`‚ùå Failed to generate redundancy report: ${error.message}`, "ERROR");
    }
  }

  // Continuous monitoring mode
  async startContinuousMonitoring(intervalMinutes = 15) {
    this.log(`üîÑ Starting continuous redundancy monitoring (${intervalMinutes} minute intervals)...`);
    
    const intervalMs = intervalMinutes * 60 * 1000;
    
    // Initial check
    await this.runRedundancyCheck();
    
    // Set up continuous monitoring
    setInterval(async () => {
      this.log("üîÑ Running scheduled redundancy check...");
      await this.runRedundancyCheck();
    }, intervalMs);
  }
}

// CLI interface
if (require.main === module) {
  const system = new RedundancyAutomationSystem();
  const command = process.argv[2];

  switch (command) {
    case "check":
      system.runRedundancyCheck();
      break;
    case "monitor":
      const interval = parseInt(process.argv[3]) || 15;
      system.startContinuousMonitoring(interval);
      break;
    case "status":
      console.log(JSON.stringify(system.redundancyStatus, null, 2));
      break;
    default:
      console.log(`
Redundancy Automation System

Usage:
  node redundancy-automation-system.cjs check     - Run one-time redundancy check
  node redundancy-automation-system.cjs monitor   - Start continuous monitoring (15 min intervals)
  node redundancy-automation-system.cjs monitor 30 - Start continuous monitoring (30 min intervals)
  node redundancy-automation-system.cjs status    - Show current redundancy status

This system provides redundancy for:
- PM2 automation processes
- GitHub Actions workflows  
- Netlify Functions automations
      `);
  }
}

module.exports = RedundancyAutomationSystem;
>>>>>>> origin/cursor/automate-deployment-redundancy-and-clean-up-5d6d
