#!/usr/bin/env node
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();
const PATTERNS = [
  { name: 'Generic API Key', re: /api[_-]?key\s*[:=]\s*["'][A-Za-z0-9_\-]{16,}["']/i },
  { name: 'Bearer Token', re: /Bearer\s+[A-Za-z0-9_\-\.]{16,}/ },
  { name: 'AWS Access Key', re: /AKIA[0-9A-Z]{16}/ },
  { name: 'Private Key Block', re: /-----BEGIN (?:RSA|OPENSSH|EC) PRIVATE KEY-----/ },
];

function walk(dir) {
  const out = [];
  for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
    if (e.name === 'node_modules' || e.name === '.git' || e.name === '.next') continue;
    const full = path.join(dir, e.name);
    if (e.isDirectory()) out.push(...walk(full));
    else out.push(full);
  }
  return out;
}

function scan(file) {
  try {
    const text = fs.readFileSync(file, 'utf8');
    const hits = [];
    for (const p of PATTERNS) {
      if (p.re.test(text)) hits.push(p.name);
    }
    return hits;
  } catch {
    return [];
  }
}

function main() {
  const files = walk(ROOT).filter((f) => /\.(ts|tsx|js|jsx|json|md|env|yml|yaml|sh|cjs|mjs)$/i.test(f));
  const findings = [];
  for (const f of files) {
    const hits = scan(f);
    if (hits.length) findings.push({ file: f.replace(ROOT, ''), patterns: hits });
  }
  const docsDir = path.join(ROOT, 'docs');
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir, { recursive: true });
  const md = ['# Secrets Scan Report', '', 'Regex-based heuristic scan (use GH Advanced Security for full coverage).', ''];
  if (findings.length === 0) md.push('No obvious secrets detected.');
  else findings.forEach((f) => md.push(`- ${f.file}: ${f.patterns.join(', ')}`));
  md.push('', '_Generated by automation/secrets-scan.cjs_');
  fs.writeFileSync(path.join(docsDir, 'secrets-scan.json'), JSON.stringify(findings, null, 2));
  fs.writeFileSync(path.join(docsDir, 'secrets-scan.md'), md.join('\n'));
  console.log('secrets-scan: updated docs/secrets-scan.*');
}

if (require.main === module) main();