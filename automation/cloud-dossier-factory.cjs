#!/usr/bin/env node

'use strict';

/*
  Cloud Dossier Factory (New)
  - Consumes latest `automation/logs/cloud-dossier-crawl-*.json`
  - Generates diversified TSX dossiers under `pages/reports/dossiers/`
  - Updates `public/automation/content-registry.json` (items array)
  - Injects a small promo block into homepage Latest section markers, if present
*/

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) { fs.mkdirSync(dirPath, { recursive: true }); }

function readLatestDossierCrawl() {
  const logsDir = path.join(process.cwd(), 'automation', 'logs');
  if (!fs.existsSync(logsDir)) return null;
  const files = fs.readdirSync(logsDir).filter((f) => f.startsWith('cloud-dossier-crawl-') && f.endsWith('.json')).sort();
  if (files.length === 0) return null;
  try { return JSON.parse(fs.readFileSync(path.join(logsDir, files[files.length - 1]), 'utf8')); } catch { return null; }
}

function tsxPage({ title, description, bodyHtml }) {
  return `import Head from 'next/head';

export default function Page() {
  return (
    <div className=\"min-h-screen bg-slate-950 text-white\">
      <Head>
        <title>${title}</title>
        <meta name=\"description\" content=\"${description}\" />
        <meta property=\"og:title\" content=\"${title}\" />
        <meta property=\"og:description\" content=\"${description}\" />
        <meta name=\"twitter:card\" content=\"summary_large_image\" />
      </Head>
      <main className=\"container mx-auto px-6 py-12 prose prose-invert\">
        <h1 className=\"text-3xl font-extrabold\">${title}</h1>
        <div className=\"mt-4\">${bodyHtml}</div>
        <p className=\"mt-6 text-white/60 text-sm\">Auto-generated by Cloud Dossier Factory.</p>
      </main>
    </div>
  );
}
`;
}

function pickTop(results, max = 4) {
  return [...results].filter((r) => (r.text || '').length > 140).sort((a, b) => b.length - a.length).slice(0, max);
}

function normalizeTitleFromUrl(url) {
  try {
    const u = new URL(url);
    const parts = u.pathname.replace(/\/$/, '').split('/').filter(Boolean);
    const last = parts[parts.length - 1] || 'overview';
    return last.replace(/[-_]/g, ' ').replace(/\b\w/g, (m) => m.toUpperCase());
  } catch { return 'Site Overview'; }
}

function createDossier(snippet, index) {
  const stamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 16);
  const slug = `dossier-${stamp}-${index}`;
  const filePath = path.join(process.cwd(), 'pages', 'reports', 'dossiers', `${slug}.tsx`);
  ensureDir(path.dirname(filePath));
  const title = `Dossier — ${normalizeTitleFromUrl(snippet.url)}`;
  const description = 'An intelligence brief derived from live site crawls.';
  const preview = String(snippet.text || '').slice(0, 600).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  const bodyHtml = `<p>Source: <a className=\"text-cyan-300 underline\" href=\"${snippet.url}\" target=\"_blank\" rel=\"noopener\">${snippet.url}</a></p><p className=\"text-white/80\">${preview}</p>`;
  fs.writeFileSync(filePath, tsxPage({ title, description, bodyHtml }), 'utf8');
  return { title, route: `/reports/dossiers/${slug}`, filePath };
}

function loadRegistryMerged() {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  try { const parsed = JSON.parse(fs.readFileSync(registryPath, 'utf8')); return parsed && typeof parsed === 'object' ? parsed : { items: [] }; }
  catch { return { items: [] }; }
}

function saveRegistryMerged(reg) {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  ensureDir(path.dirname(registryPath));
  fs.writeFileSync(registryPath, JSON.stringify(reg, null, 2));
}

function updateRegistry(entries) {
  const reg = loadRegistryMerged();
  if (!Array.isArray(reg.items)) reg.items = [];
  const now = new Date().toISOString();
  const seen = new Set(reg.items.map((i) => i.href));
  for (const e of entries) {
    if (!seen.has(e.route)) {
      reg.items.unshift({ title: e.title, href: e.route, desc: 'Autonomous dossier', createdAt: now, source: 'cloud-dossier-factory' });
    }
  }
  reg.items = reg.items.slice(0, 100);
  saveRegistryMerged(reg);
}

function injectHomepage(entries) {
  const homepagePath = path.join(process.cwd(), 'pages', 'index.tsx');
  if (!fs.existsSync(homepagePath)) return;
  let content = fs.readFileSync(homepagePath, 'utf8');
  const start = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_START */}';
  const end = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_END */}';
  if (!content.includes(start) || !content.includes(end)) return;
  const list = entries.map((e) => `            <a href=\"${e.route}\" className=\"group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30 tilt-on-hover\">
              <div className=\\\"pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100\\\" />
              <h3 className=\\\"text-lg font-semibold\\\">${e.title}</h3>
              <p className=\\\"mt-1 text-sm text-white/75\\\">Freshly published dossier.</p>
              <div className=\\\"mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90\\\">Open <span aria-hidden>→</span></div>
            </a>`).join('\n');
  const block = `\n <section className=\"mx-auto max-w-7xl px-6 pb-14\">\n   <h2 className=\"text-center text-2xl font-bold tracking-wide text-white/90\">Latest Autonomous Content</h2>\n   <div className=\"mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n${list}\n   </div>\n </section>\n `;
  const pattern = new RegExp(`${start}[\s\S]*?${end}`);
  content = content.replace(pattern, `${start}\n${block}${end}`);
  fs.writeFileSync(homepagePath, content, 'utf8');
}

function main() {
  const crawl = readLatestDossierCrawl();
  if (!crawl || !Array.isArray(crawl.results) || crawl.results.length === 0) {
    console.log('cloud-dossier-factory: no crawl results; skipping.');
    return;
  }
  const top = pickTop(crawl.results, 3);
  const created = top.map((s, i) => createDossier(s, i));
  updateRegistry(created);
  injectHomepage(created);
  console.log(`cloud-dossier-factory: created ${created.length} dossier page(s).`);
}

if (require.main === module) {
  try { main(); } catch (e) { console.error('cloud-dossier-factory failed:', e); process.exitCode = 1; }
}

module.exports = { main };

#!/usr/bin/env node

'use strict';

/*
  Cloud Dossier Factory (New)
  - Consumes latest `automation/logs/cloud-dossier-crawl-*.json`
  - Generates diversified TSX dossiers under `pages/reports/dossiers/`
  - Updates `public/automation/content-registry.json` (items array)
  - Injects a small promo block into homepage Latest section markers, if present
*/

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) { fs.mkdirSync(dirPath, { recursive: true }); }

function readLatestDossierCrawl() {
  const logsDir = path.join(process.cwd(), 'automation', 'logs');
  if (!fs.existsSync(logsDir)) return null;
  const files = fs.readdirSync(logsDir).filter((f) => f.startsWith('cloud-dossier-crawl-') && f.endsWith('.json')).sort();
  if (files.length === 0) return null;
  try { return JSON.parse(fs.readFileSync(path.join(logsDir, files[files.length - 1]), 'utf8')); } catch { return null; }
}

function tsxPage({ title, description, bodyHtml }) {
  return `import Head from 'next/head';

export default function Page() {
  return (
    <div className="min-h-screen bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${description}" />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
      <main className="container mx-auto px-6 py-12 prose prose-invert">
        <h1 className="text-3xl font-extrabold">${title}</h1>
        <div className="mt-4">${bodyHtml}</div>
        <p className="mt-6 text-white/60 text-sm">Auto-generated by Cloud Dossier Factory.</p>
      </main>
    </div>
  );
}
`;
}

function pickTop(results, max = 4) {
  return [...results].filter((r) => (r.text || '').length > 140).sort((a, b) => b.length - a.length).slice(0, max);
}

function normalizeTitleFromUrl(url) {
  try {
    const u = new URL(url);
    const parts = u.pathname.replace(/\/$/, '').split('/').filter(Boolean);
    const last = parts[parts.length - 1] || 'overview';
    return last.replace(/[-_]/g, ' ').replace(/\b\w/g, (m) => m.toUpperCase());
  } catch { return 'Site Overview'; }
}

function createDossier(snippet, index) {
  const stamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 16);
  const slug = `dossier-${stamp}-${index}`;
  const filePath = path.join(process.cwd(), 'pages', 'reports', 'dossiers', `${slug}.tsx`);
  ensureDir(path.dirname(filePath));
  const title = `Dossier — ${normalizeTitleFromUrl(snippet.url)}`;
  const description = 'An intelligence brief derived from live site crawls.';
  const preview = String(snippet.text || '').slice(0, 600).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  const bodyHtml = `<p>Source: <a class="text-cyan-300 underline" href="${snippet.url}" target="_blank" rel="noopener">${snippet.url}</a></p><p class="text-white/80">${preview}</p>`;
  fs.writeFileSync(filePath, tsxPage({ title, description, bodyHtml }), 'utf8');
  return { title, route: `/reports/dossiers/${slug}`, filePath };
}

function loadRegistryMerged() {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  try { const parsed = JSON.parse(fs.readFileSync(registryPath, 'utf8')); return parsed && typeof parsed === 'object' ? parsed : { items: [] }; }
  catch { return { items: [] }; }
}

function saveRegistryMerged(reg) {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  ensureDir(path.dirname(registryPath));
  fs.writeFileSync(registryPath, JSON.stringify(reg, null, 2));
}

function updateRegistry(entries) {
  const reg = loadRegistryMerged();
  if (!Array.isArray(reg.items)) reg.items = [];
  const now = new Date().toISOString();
  const seen = new Set(reg.items.map((i) => i.href));
  for (const e of entries) {
    if (!seen.has(e.route)) {
      reg.items.unshift({ title: e.title, href: e.route, desc: 'Autonomous dossier', createdAt: now, source: 'cloud-dossier-factory' });
    }
  }
  reg.items = reg.items.slice(0, 100);
  saveRegistryMerged(reg);
}

function injectHomepage(entries) {
  const homepagePath = path.join(process.cwd(), 'pages', 'index.tsx');
  if (!fs.existsSync(homepagePath)) return;
  let content = fs.readFileSync(homepagePath, 'utf8');
  const start = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_START */}';
  const end = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_END */}';
  if (!content.includes(start) || !content.includes(end)) return;
  const list = entries.map((e) => `            <a href="${e.route}" className="group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30 tilt-on-hover">
              <div className=\"pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100\" />
              <h3 className=\"text-lg font-semibold\">${e.title}</h3>
              <p className=\"mt-1 text-sm text-white/75\">Freshly published dossier.</p>
              <div className=\"mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90\">Open <span aria-hidden>→</span></div>
            </a>`).join('\n');
  const block = `\n <section className=\"mx-auto max-w-7xl px-6 pb-14\">\n   <h2 className=\"text-center text-2xl font-bold tracking-wide text-white/90\">Latest Autonomous Content</h2>\n   <div className=\"mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n${list}\n   </div>\n </section>\n `;
  const pattern = new RegExp(`${start}[\s\S]*?${end}`);
  content = content.replace(pattern, `${start}\n${block}${end}`);
  fs.writeFileSync(homepagePath, content, 'utf8');
}

function main() {
  const crawl = readLatestDossierCrawl();
  if (!crawl || !Array.isArray(crawl.results) || crawl.results.length === 0) {
    console.log('cloud-dossier-factory: no crawl results; skipping.');
    return;
  }
  const top = pickTop(crawl.results, 3);
  const created = top.map((s, i) => createDossier(s, i));
  updateRegistry(created);
  injectHomepage(created);
  console.log(`cloud-dossier-factory: created ${created.length} dossier page(s).`);
}

if (require.main === module) {
  try { main(); } catch (e) { console.error('cloud-dossier-factory failed:', e); process.exitCode = 1; }
}

module.exports = { main };


