#!/usr/bin/env node
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();
const NEXT_DIR = path.join(ROOT, '.next');

function listFiles(dir) {
  const out = [];
  if (!fs.existsSync(dir)) return out;
  for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
    const full = path.join(dir, e.name);
    if (e.isDirectory()) out.push(...listFiles(full));
    else out.push(full);
  }
  return out;
}

function main() {
  const targets = [
    path.join(NEXT_DIR, 'static'),
    path.join(NEXT_DIR, 'server'),
  ];
  const files = targets.flatMap(listFiles);
  const entries = files.map((f) => ({ file: f.replace(ROOT + path.sep, ''), size: fs.statSync(f).size }))
    .filter((e) => /\.(js|css|json|html)$/.test(e.file))
    .sort((a,b) => b.size - a.size);
  const total = entries.reduce((a, e) => a + e.size, 0);
  const docs = path.join(ROOT, 'docs');
  if (!fs.existsSync(docs)) fs.mkdirSync(docs, { recursive: true });
  const human = (n) => { const u=['B','KB','MB','GB']; let i=0,v=n; while(v>1024&&i<u.length-1){v/=1024;i++;} return `${v.toFixed(1)} ${u[i]}`; };
  const md = ['# Bundle Size Report', '', `Total: ${human(total)} (${total} bytes)`, '', '## Top Files', ''];
  entries.slice(0, 50).forEach((e) => md.push(`- ${e.file}: ${human(e.size)} (${e.size} bytes)`));
  md.push('', '_Generated by automation/bundle-size-report.cjs_');
  fs.writeFileSync(path.join(docs, 'bundle-size.json'), JSON.stringify({ total, entries }, null, 2));
  fs.writeFileSync(path.join(docs, 'bundle-size.md'), md.join('\n'));
  console.log('bundle-size-report: updated docs/bundle-size.*');
}

if (require.main === module) main();