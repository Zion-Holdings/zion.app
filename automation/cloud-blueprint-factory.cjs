#!/usr/bin/env node

'use strict';

/*
  Cloud Blueprint Factory
  - Generates a Reference Architecture blueprint page from latest crawl signals.
  - Writes under pages/reports/blueprints/
  - Updates registry and homepage latest.
*/

const fs = require('fs');
const path = require('path');

function ensureDir(d){ fs.mkdirSync(d, { recursive: true }); }
function readLatest(){
  const dir = path.join(process.cwd(),'automation','logs');
  if (!fs.existsSync(dir)) return null;
  const files = fs.readdirSync(dir).filter(f=>f.startsWith('cloud-crawl-')&&f.endsWith('.json')).sort();
  if (!files.length) return null;
  try{ return JSON.parse(fs.readFileSync(path.join(dir, files[files.length-1]),'utf8')); }catch{ return null; }
}

function tsx({title, desc, body}){
  return `import Head from 'next/head';

export default function Page(){
  return (
    <div className="min-h-screen bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="${desc}" />
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${desc}" />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
      <main className="container mx-auto px-6 py-12 prose prose-invert">
        <h1 className="text-3xl font-extrabold">${title}</h1>
        <div className="mt-4" dangerouslySetInnerHTML={{ __html: ${'`'}${'${body}'}${'`'} }} />
        <p className="mt-6 text-white/60 text-sm">Auto-generated by Cloud Blueprint Factory.</p>
      </main>
    </div>
  );
}
`;
}

function slug(prefix){ const d=new Date();return `${prefix}-${d.getUTCFullYear()}-${String(d.getUTCMonth()+1).padStart(2,'0')}-${String(d.getUTCDate()).padStart(2,'0')}-${String(d.getUTCHours()).padStart(2,'0')}${String(d.getUTCMinutes()).padStart(2,'0')}${String(d.getUTCSeconds()).padStart(2,'0')}`; }

function registry(){
  const p=path.join(process.cwd(),'public','automation','content-registry.json');
  try{ const r=JSON.parse(fs.readFileSync(p,'utf8')); if (!Array.isArray(r.items)) r.items=[]; return {p,r}; }catch{ return {p, r:{items:[]}} }
}

function homepage(entries){
  const hp=path.join(process.cwd(),'pages','index.tsx');
  if(!fs.existsSync(hp))return; let c=fs.readFileSync(hp,'utf8');
  const s='{/* AUTO-GENERATED: HOME_LATEST_CONTENT_START */}', e='{/* AUTO-GENERATED: HOME_LATEST_CONTENT_END */}';
  if(!c.includes(s)||!c.includes(e))return;
  const list=entries.map(x=>`            <a href=\"${x.route}\" className=\"group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30 tilt-on-hover\">\n              <div className=\"pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100\" />\n              <h3 className=\"text-lg font-semibold\">${x.title}</h3>\n              <p className=\"mt-1 text-sm text-white/75\">Freshly published by autonomous agents.</p>\n              <div className=\"mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90\">Open <span aria-hidden>→</span></div>\n            </a>`).join('\n');
  const block=`\n <section className=\"mx-auto max-w-7xl px-6 pb-14\">\n   <h2 className=\"text-center text-2xl font-bold tracking-wide text-white/90\">Latest Autonomous Content</h2>\n   <div className=\"mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n${list}\n   </div>\n </section>\n `;
  c=c.replace(new RegExp(`${s}[\\s\\S]*?${e}`), `${s}\n${block}${e}`);
  fs.writeFileSync(hp,c,'utf8');
}

function main(){
  const crawl=readLatest(); if(!crawl||!Array.isArray(crawl.results)||!crawl.results.length){ console.log('cloud-blueprint-factory: no crawl'); return; }
  const src=crawl.results[0];
  const title='Reference Architecture — Autonomous Content Mesh';
  const desc='High-level blueprint for an autonomous content mesh with evaluation-in-the-loop.';
  const body=[
    `<p>Signal source: <a class=\"text-cyan-300 underline\" href=\"${src.url}\" target=\"_blank\" rel=\"noopener\">${src.url}</a></p>`,
    '<h2>Components</h2>',
    '<ul><li>Ingestion & normalization</li><li>Knowledge index</li><li>Generation & evaluation</li><li>Publishing</li><li>Observability</li></ul>',
    '<h2>Flows</h2>',
    '<ol><li>Collect</li><li>Synthesize</li><li>Review</li><li>Publish</li><li>Measure</li></ol>'
  ].join('');
  const id=slug('blueprint');
  const file=path.join(process.cwd(),'pages','reports','blueprints',`${id}.tsx`);
  ensureDir(path.dirname(file));
  fs.writeFileSync(file, tsx({title, desc, body}), 'utf8');
  const entry={ title, route:`/reports/blueprints/${id}`, filePath:file };
  const {p, r}=registry();
  const seen=new Set((r.items||[]).map(i=>i.href));
  if(!seen.has(entry.route)){ r.items=[{ title:entry.title, href:entry.route, desc:'New autonomous content', createdAt:new Date().toISOString(), source:'cloud-blueprint-factory' }, ...(r.items||[])].slice(0,80); fs.writeFileSync(p, JSON.stringify(r, null, 2), 'utf8'); }
  homepage([entry]);
  console.log('cloud-blueprint-factory: created', path.relative(process.cwd(), file));
}

if(require.main===module){ try{ main(); }catch(e){ console.error('cloud-blueprint-factory failed:', e); process.exitCode=1; } }

module.exports={ main };


