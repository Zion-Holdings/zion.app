#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const ROOT = path.join(__dirname, '..');
const PAGES_DIR = path.join(ROOT, 'pages');
const OUT_DIR = path.join(ROOT, 'data', 'reports', 'spec-dev');
const ACTIONS_FILE = path.join(OUT_DIR, 'spec-dev-actions.json');

function ensureDir(p) { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }

function componentNameFromPath(pn) {
  const trimmed = pn.replace(/\/$/, '');
  const parts = trimmed.split('/').filter(Boolean);
  const name = parts.join('-') || 'home';
  return name.replace(/(^|[-_])(\w)/g, (_, __, c) => c.toUpperCase()).replace(/[^A-Za-z0-9]/g, '') + 'Page';
}

function generatePageTsx(title, body) {
  return `import Head from 'next/head';

export default function ${title.replace(/[^A-Za-z0-9]/g, '')}() {
  return (
    <>
      <Head>
        <title>${title}</title>
        <meta name="description" content="${title} - Autogenerated based on product specifications" />
      </Head>
      <main style={{ padding: '2rem', maxWidth: 960, margin: '0 auto' }}>
        <h1 style={{ fontSize: '2rem', marginBottom: '1rem' }}>${title}</h1>
        <p style={{ lineHeight: 1.7 }}>
          ${body.replace(/`/g, '\\`')}
        </p>
      </main>
    </>
  );
}
`;
}

function writePageForPath(pn, title, content) {
  let rel = pn;
  if (!rel.startsWith('/')) rel = '/' + rel;
  rel = rel.replace(/\/$/, '');
  const isIndex = rel.split('/').filter(Boolean).length === 1;
  const dir = isIndex ? path.join(PAGES_DIR, rel) : path.join(PAGES_DIR, path.dirname(rel));
  const file = isIndex ? path.join(dir, 'index.tsx') : path.join(dir, path.basename(rel) + '.tsx');
  ensureDir(path.dirname(file));
  if (fs.existsSync(file)) {
    return { file, created: false };
  }
  const comp = componentNameFromPath(rel);
  const code = generatePageTsx(title || comp, content || title || comp);
  fs.writeFileSync(file, code);
  return { file, created: true };
}

function main() {
  if (!fs.existsSync(ACTIONS_FILE)) { console.log('No spec-dev actions found, skipping applier'); return; }
  const data = JSON.parse(fs.readFileSync(ACTIONS_FILE, 'utf8'));
  const actions = data.actions || [];
  const created = [];
  for (const a of actions) {
    if (a.type === 'create_page' && a.path) {
      const res = writePageForPath(a.path, a.title || 'New Page', a.content || '');
      if (res.created) created.push(res.file);
    }
  }
  ensureDir(OUT_DIR);
  const reg = path.join(OUT_DIR, 'applier-summary.json');
  fs.writeFileSync(reg, JSON.stringify({ timestamp: new Date().toISOString(), created }, null, 2));
  console.log(`Spec-dev applier created ${created.length} page file(s)`);
}

main();