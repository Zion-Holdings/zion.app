#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function listFilesRecursively(rootDir, includeDirs, ignorePatterns) {
  const files = [];
  function walk(current) {
    const name = path.basename(current);
    const rel = path.relative(rootDir, current);
    if (ignorePatterns.some((p) => rel.includes(p) || name === p)) return;
    const stat = fs.statSync(current);
    if (stat.isDirectory()) {
      const entries = fs.readdirSync(current);
      for (const entry of entries) walk(path.join(current, entry));
    } else {
      files.push(current);
    }
  }
  for (const dir of includeDirs) {
    const abs = path.join(rootDir, dir);
    if (fs.existsSync(abs)) walk(abs);
  }
  return files;
}

function ensureDir(p) {
  try { fs.mkdirSync(p, { recursive: true }); } catch {}
}

function formatDuration(days) {
  if (days < 1) return `${Math.round(days * 24)}h`;
  if (days < 30) return `${Math.round(days)}d`;
  const months = Math.round(days / 30);
  return `${months}mo`;
}

function main() {
  const repoRoot = path.resolve(__dirname, '..');
  const now = Date.now();
  const maxAgeDays = Number(process.env.STALE_MAX_AGE_DAYS || 60);
  const includeDirs = (process.env.STALE_INCLUDE_DIRS || 'pages,docs,components').split(',').map((s) => s.trim());
  const ignore = ['.git', '.next', 'node_modules', 'out', 'public', 'netlify', '.cache'];

  const files = listFilesRecursively(repoRoot, includeDirs, ignore);
  const stale = [];
  const fresh = [];

  for (const file of files) {
    try {
      const stat = fs.statSync(file);
      const ageMs = now - stat.mtimeMs;
      const ageDays = ageMs / (1000 * 60 * 60 * 24);
      const rel = path.relative(repoRoot, file);
      const entry = { path: rel, ageDays: Number(ageDays.toFixed(2)), lastModified: new Date(stat.mtimeMs).toISOString(), size: stat.size };
      if (ageDays >= maxAgeDays) stale.push(entry);
      else fresh.push(entry);
    } catch {}
  }

  stale.sort((a, b) => b.ageDays - a.ageDays);

  const reportDir = path.join(repoRoot, 'data', 'reports', 'stale-content');
  ensureDir(reportDir);
  const ts = new Date().toISOString().replace(/[:]/g, '-');
  const reportPath = path.join(reportDir, `report-${ts}.json`);
  const summary = {
    generatedAt: new Date().toISOString(),
    maxAgeDays,
    includeDirs,
    totals: { scanned: files.length, stale: stale.length, fresh: fresh.length },
    topStale: stale.slice(0, 50)
  };
  fs.writeFileSync(reportPath, JSON.stringify({ summary, stale, fresh }, null, 2));

  // Update docs summary
  const docsPath = path.join(repoRoot, 'docs', 'STALE_CONTENT.md');
  ensureDir(path.dirname(docsPath));
  const top = stale.slice(0, 100);
  const lines = [];
  lines.push('# Stale Content Report');
  lines.push('');
  lines.push(`Generated: ${summary.generatedAt}`);
  lines.push(`Max Age Threshold: ${maxAgeDays} days`);
  lines.push('');
  lines.push(`Total scanned: ${files.length}`);
  lines.push(`Stale files: ${stale.length}`);
  lines.push('');
  lines.push('Top stale files:');
  lines.push('');
  for (const item of top) {
    lines.push(`- ${item.path} â€” ${formatDuration(item.ageDays)} old (last modified ${item.lastModified})`);
  }
  lines.push('');
  lines.push('This file is auto-generated by stale-content-auditor.');
  fs.writeFileSync(docsPath, lines.join('\n'));

  console.log('Stale Content Auditor complete.');
  console.log('Report:', path.relative(repoRoot, reportPath));
  console.log('Summary:', path.relative(repoRoot, docsPath));
}

main();