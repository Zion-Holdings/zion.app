#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const glob = require('glob');

function ensureDir(p) { fs.mkdirSync(p, { recursive: true }); }
function read(file) { try { return fs.readFileSync(file, 'utf8'); } catch { return ''; } }
function write(file, content) { ensureDir(path.dirname(file)); fs.writeFileSync(file, content); }

function extractComponents(source, filePath) {
  const components = [];
  const lines = source.split(/\r?\n/);

  const componentNameSeen = new Set();

  // Heuristic: function declarations
  const fnDecl = /export\s+(default\s+)?function\s+([A-Z][A-Za-z0-9_]*)\s*\(([^)]*)\)/g;
  let m;
  while ((m = fnDecl.exec(source))) {
    const name = m[2];
    const params = m[3] || '';
    if (!componentNameSeen.has(name)) {
      componentNameSeen.add(name);
      components.push({ name, params, props: [], filePath });
    }
  }

  // Heuristic: const Component = (props: Props) =>
  const constArrow = /export\s+(const|let|var)\s+([A-Z][A-Za-z0-9_]*)\s*=\s*\(([^)]*)\)\s*=>/g;
  while ((m = constArrow.exec(source))) {
    const name = m[2];
    const params = m[3] || '';
    if (!componentNameSeen.has(name)) {
      componentNameSeen.add(name);
      components.push({ name, params, props: [], filePath });
    }
  }

  // Heuristic: interface SomethingProps { ... }
  const interfaces = {};
  const ifaceRe = /export\s+interface\s+([A-Za-z0-9_]*Props)\s*\{([\s\S]*?)\}/g;
  while ((m = ifaceRe.exec(source))) {
    const ifaceName = m[1];
    const body = m[2];
    const props = body
      .split(/\n/)
      .map(l => l.trim())
      .filter(l => l && !l.startsWith('//'))
      .map(l => l.replace(/;$/, ''))
      .map(l => {
        const mm = l.match(/([A-Za-z0-9_?]+)\s*:\s*([^;]+)/);
        if (mm) return { name: mm[1], type: mm[2] };
        return null;
      })
      .filter(Boolean);
    interfaces[ifaceName] = props;
  }

  // Attempt to link params type to interface props
  for (const c of components) {
    const params = c.params;
    // e.g. (props: CardProps)
    const typeMatch = params.match(/:\s*([A-Za-z0-9_]+Props)/);
    if (typeMatch) {
      const t = typeMatch[1];
      if (interfaces[t]) c.props = interfaces[t];
    } else {
      // Try to parse inline destructured props: ({ title, onClick }: { title: string; onClick?: () => void })
      const inline = params.match(/\{([^}]*)\}\s*:\s*\{([\s\S]*?)\}/);
      if (inline) {
        const body = inline[2];
        const props = body
          .split(/\n/)
          .map(l => l.trim())
          .filter(l => l && !l.startsWith('//'))
          .map(l => l.replace(/;$/, ''))
          .map(l => {
            const mm = l.match(/([A-Za-z0-9_?]+)\s*:\s*([^;]+)/);
            if (mm) return { name: mm[1], type: mm[2] };
            return null;
          })
          .filter(Boolean);
        c.props = props;
      }
    }
  }

  return components;
}

function generateMarkdown(all) {
  const lines = [];
  lines.push('# Components Catalogue');
  lines.push('');
  lines.push('Autogenerated by components-docs-generator.');
  lines.push('');
  for (const { name, filePath, props } of all) {
    lines.push(`## ${name}`);
    lines.push('');
    lines.push(`File: \`${filePath.replace(/^.*\/(components\/)/, '$1')}\`\`);
    if (props && props.length) {
      lines.push('');
      lines.push('| Prop | Type |');
      lines.push('| --- | --- |');
      for (const p of props) {
        lines.push(`| ${p.name} | ${p.type.replace(/\|/g, '\\|')} |`);
      }
    } else {
      lines.push('');
      lines.push('_No explicit props detected._');
    }
    lines.push('');
  }
  return lines.join('\n');
}

function generateHtml(all) {
  const rows = all.map(({ name, filePath, props }) => {
    const rel = filePath.replace(process.cwd() + path.sep, '');
    const propRows = (props || []).map(p => `<tr><td>${p.name}</td><td><code>${escapeHtml(p.type)}</code></td></tr>`).join('') || '<tr><td colspan="2"><em>No explicit props detected</em></td></tr>';
    return `
      <section class="card">
        <h2>${name}</h2>
        <div class="muted">${rel}</div>
        <table><thead><tr><th>Prop</th><th>Type</th></tr></thead><tbody>${propRows}</tbody></table>
      </section>
    `;
  }).join('\n');

  return `<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Components Catalogue</title>
  <style>
    body{font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#0f172a;color:#e5e7eb;padding:24px}
    a{color:#67e8f9}
    .badge{display:inline-block;padding:2px 8px;border-radius:999px;background:#0ea5e9;color:white;font-size:12px;margin-left:8px}
    .muted{color:#9ca3af;font-size:12px;margin:4px 0 10px}
    .card{background:#111827;border:1px solid #1f2937;border-radius:12px;padding:16px;margin:12px 0}
    table{width:100%;border-collapse:collapse;margin-top:8px}
    th,td{border:1px solid #1f2937;padding:8px;text-align:left}
    th{background:#0b1220}
  </style>
</head>
<body>
  <h1>Components Catalogue <span class="badge">${all.length} components</span></h1>
  <p>Autonomously generated. Source: <code>components/</code>.</p>
  ${rows}
</body>
</html>`;
}

function escapeHtml(s){return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')}

(function main(){
  const componentsRoot = path.join(process.cwd(), 'components');
  const files = glob.sync('**/*.{tsx,jsx,ts,js}', { cwd: componentsRoot, absolute: true, dot: false, nodir: true });
  const all = [];
  for (const file of files) {
    const src = read(file);
    if (!src) continue;
    const found = extractComponents(src, file);
    for (const c of found) all.push(c);
  }

  // Sort and de-dup by name+file
  const uniq = new Map();
  for (const c of all) {
    uniq.set(`${c.name}::${c.filePath}`, c);
  }
  const list = Array.from(uniq.values()).sort((a,b)=>a.name.localeCompare(b.name));

  const md = generateMarkdown(list);
  const html = generateHtml(list);

  write(path.join(process.cwd(), 'docs', 'components.md'), md);
  write(path.join(process.cwd(), 'public', 'reports', 'components', 'index.html'), html);

  console.log(`[components-docs-generator] generated ${list.length} components`);
})();