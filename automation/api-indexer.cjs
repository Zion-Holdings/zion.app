#!/usr/bin/env node
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();
const API_DIR = path.join(ROOT, 'pages', 'api');

function walk(dir) {
  const out = [];
  if (!fs.existsSync(dir)) return out;
  for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
    const full = path.join(dir, e.name);
    if (e.isDirectory()) out.push(...walk(full));
    else out.push(full);
  }
  return out;
}

function toApiRoute(file) {
  const rel = file.replace(API_DIR, '').replace(/\\/g, '/');
  if (!/\.(tsx|jsx|ts|js)$/.test(rel)) return null;
  let route = rel.replace(/\.(tsx|jsx|ts|js)$/, '');
  if (route.endsWith('/index')) route = route.slice(0, -('/index'.length));
  route = '/api' + route;
  return route;
}

function detectMethods(file) {
  try {
    const src = fs.readFileSync(file, 'utf8');
    const methods = new Set();
    const regex = /req\.method\s*===\s*["'](GET|POST|PUT|PATCH|DELETE|OPTIONS|HEAD)["']/g;
    let m;
    while ((m = regex.exec(src))) methods.add(m[1]);
    if (methods.size === 0) {
      // If Next handler without explicit method checks, assume all
      if (/export\s+default\s+function\s+handler/.test(src)) return ['GET'];
    }
    return Array.from(methods).sort();
  } catch {
    return [];
  }
}

function toMarkdown(entries) {
  const lines = ['# API Index', '', 'Auto-generated from Next.js API routes.', ''];
  for (const e of entries) {
    const ms = e.methods.length ? e.methods.join(', ') : 'unknown';
    lines.push(`- ${e.route} â€” methods: ${ms}`);
  }
  lines.push('', '_Generated by automation/api-indexer.cjs_');
  return lines.join('\n');
}

function main() {
  const files = walk(API_DIR);
  const entries = files
    .map((f) => ({ file: f, route: toApiRoute(f) }))
    .filter((e) => e.route)
    .map((e) => ({ ...e, methods: detectMethods(e.file) }))
    .sort((a, b) => a.route.localeCompare(b.route));

  const docsDir = path.join(ROOT, 'docs');
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir, { recursive: true });
  fs.writeFileSync(path.join(docsDir, 'api-index.json'), JSON.stringify(entries, null, 2));
  fs.writeFileSync(path.join(docsDir, 'api-index.md'), toMarkdown(entries));
  console.log('api-indexer: updated docs/api-index.*');
}

if (require.main === module) main();