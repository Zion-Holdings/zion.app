#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function ensureDir(p) { fs.mkdirSync(p, { recursive: true }); }

function toPagePath(route) {
  // Normalize leading slash
  let r = route.trim();
  if (!r.startsWith('/')) r = '/' + r;
  // Remove query/hash
  r = r.split('#')[0].split('?')[0];
  // Remove trailing slash for file name
  if (r !== '/' && r.endsWith('/')) r = r.slice(0, -1);
  // Next pages path: '/foo/bar' -> 'pages/foo/bar.tsx'
  const rel = r === '/' ? 'index' : r.slice(1);
  const file = path.join('pages', rel + (rel.endsWith('/index') ? '' : '' ) + '.tsx');
  return file;
}

function futuristTemplate(title, message, ctaHref) {
  return `import Head from 'next/head';
import Link from 'next/link';

export default function Placeholder() {
  return (
    <div className="relative min-h-screen overflow-hidden bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="Autogenerated placeholder page to resolve a broken internal link. Futuristic template." />
      </Head>
      <div aria-hidden className="pointer-events-none absolute inset-0 -z-10">
        <div className="absolute -top-24 -left-24 h-[38rem] w-[38rem] rounded-full bg-fuchsia-500/20 blur-3xl animate-float" />
        <div className="absolute top-1/4 -right-32 h-[30rem] w-[30rem] rounded-full bg-cyan-400/20 blur-3xl animate-float-slow" />
        <div className="absolute bottom-0 left-1/4 h-[26rem] w-[26rem] rounded-full bg-violet-400/10 blur-2xl animate-float-fast" />
        <div className="absolute inset-0 opacity-[0.08] [background:radial-gradient(circle_at_center,rgba(255,255,255,0.35)_0,rgba(255,255,255,0)_60%),linear-gradient(90deg,rgba(255,255,255,0.12)_1px,transparent_1px),linear-gradient(0deg,rgba(255,255,255,0.12)_1px,transparent_1px)] bg-[size:100%_100%,3rem_3rem,3rem_3rem] animate-grid" />
      </div>
      <main className="relative z-10 mx-auto max-w-5xl px-6 py-20 text-center">
        <h1 className="text-5xl font-extrabold gradient-text">${title}</h1>
        <p className="mx-auto mt-4 max-w-2xl text-white/80">${message}</p>
        <div className="mt-8 flex justify-center">
          <Link href="${ctaHref}"><a className="rounded-xl bg-gradient-to-r from-fuchsia-500 to-cyan-500 px-6 py-3 font-semibold shadow-[0_0_30px_rgba(34,211,238,0.35)] hover:shadow-[0_0_40px_rgba(34,211,238,0.6)] transition-shadow">Go Home</a></Link>
        </div>
      </main>
    </div>
  );
}
`;
}

function createPlaceholder(routePath) {
  const filePath = path.resolve(process.cwd(), toPagePath(routePath));
  const dir = path.dirname(filePath);
  ensureDir(dir);
  if (!fs.existsSync(filePath)) {
    const title = routePath === '/' ? 'Home' : routePath.replace(/^\//, '').split('/').map(s => s[0]?.toUpperCase() + s.slice(1)).join(' Â· ');
    const message = 'This page was autogenerated to fix a broken internal link. You can customize it later.';
    const content = futuristTemplate(title, message, '/');
    fs.writeFileSync(filePath, content, 'utf8');
    return { created: true, filePath };
  }
  return { created: false, filePath };
}

function main() {
  const workspaceRoot = path.resolve(__dirname, '..');
  const reportPath = path.join(workspaceRoot, 'public', 'automation', 'broken-links.json');
  const data = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
  const routes = Array.isArray(data.internalMissingRoutes) ? data.internalMissingRoutes : [];

  const results = [];
  for (const r of routes) {
    // Only act on internal routes
    if (!r.startsWith('/')) continue;
    // Skip dynamic-like placeholders
    if (r.includes(':')) continue;
    results.push({ route: r, ...createPlaceholder(r) });
  }

  // Also ensure common top-level pages exist
  const common = ['/services', '/products', '/contact'];
  for (const r of common) results.push({ route: r, ...createPlaceholder(r) });

  const outPath = path.join(workspaceRoot, 'public', 'automation', 'link-fixes.json');
  fs.writeFileSync(outPath, JSON.stringify({ generatedAt: new Date().toISOString(), results }, null, 2));
  console.log(`Link fixer completed. Created/verified ${results.length} pages. Details: public/automation/link-fixes.json`);
}

main();