#!/bin/bash

# Ultimate Redundancy Automation System Startup Script
# This script provides comprehensive redundancy for all automation systems:
# - PM2 process management
# - GitHub Actions workflows
# - Netlify functions
# - Health monitoring and auto-recovery

set -e

<<<<<<< HEAD
# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_DIR="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$WORKSPACE_DIR/automation/logs"
PID_FILE="$LOG_DIR/ultimate-redundancy.pid"
LOG_FILE="$LOG_DIR/ultimate-redundancy.log"
CONFIG_FILE="$WORKSPACE_DIR/automation/redundancy-config.json"

=======
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-2064
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
<<<<<<< HEAD
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/automation/logs"
PID_FILE="$PROJECT_ROOT/automation/ultimate-redundancy.pid"
=======
WORKSPACE_DIR="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$WORKSPACE_DIR/automation/logs"
PID_FILE="$LOG_DIR/ultimate-redundancy.pid"
LOCK_FILE="$LOG_DIR/ultimate-redundancy.lock"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-2064

# Ensure log directory exists
mkdir -p "$LOG_DIR"

# Logging function
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")
            echo -e "${GREEN}[$timestamp] [INFO]${NC} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[$timestamp] [WARN]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[$timestamp] [ERROR]${NC} $message"
            ;;
        "DEBUG")
            echo -e "${BLUE}[$timestamp] [DEBUG]${NC} $message"
            ;;
    esac
    
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# Check if system is already running
is_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
<<<<<<< HEAD
            log "INFO" "Ultimate redundancy system is already running (PID: $pid)"
=======
            log "WARN" "Ultimate redundancy system already running with PID $pid"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-2064
            return 0
        else
            # PID file exists but process is dead, clean up
            rm -f "$PID_FILE"
            return 1
        fi
    fi
    return 1
}

<<<<<<< HEAD
    echo ""
    echo "Usage: $0 {start|stop|restart|status|logs|health-check|recover}"
    echo ""
    echo "Commands:"
    echo "  start        Start the ultimate redundancy system"
    echo "  stop         Stop the ultimate redundancy system"
    echo "  restart      Restart the ultimate redundancy system"
    echo "  status       Show system status"
    echo "  logs         Show system logs"
    echo "  health-check Perform comprehensive health check"
    echo "  recover      Perform system recovery"
    echo "  help         Show this help message"
    echo ""
    echo "This script manages comprehensive redundancy for:"
    echo "  • PM2 process management"
    echo "  • GitHub Actions workflows"
    echo "  • Netlify Functions"
    echo "  • Ultimate redundancy automation system"
}

# Main script logic
case "${1:-help}" in
=======
    log "INFO" "PM2 redundancy services started successfully"
}

# Start GitHub Actions redundancy
start_github_redundancy() {
    log "INFO" "Starting GitHub Actions redundancy monitoring..."
    
    cd "$PROJECT_ROOT"
    
    # Check workflow files
    local workflows=(
        ".github/workflows/marketing-sync.yml"
        ".github/workflows/sync-health.yml"
        ".github/workflows/marketing-sync-backup.yml"
        ".github/workflows/sync-health-backup.yml"
    )
    
    for workflow in "${workflows[@]}"; do
        if [ -f "$workflow" ]; then
            log "INFO" "Found workflow: $workflow"
        else
            log "WARN" "Missing workflow: $workflow"
        fi
    done
    
    # Start GitHub Actions redundancy manager
    if [ -f "automation/enhanced-github-actions-redundancy.cjs" ]; then
        log "INFO" "Starting GitHub Actions redundancy manager..."
        pm2 start automation/enhanced-github-actions-redundancy.cjs --name "github-actions-redundancy" || {
            log "WARN" "Failed to start GitHub Actions redundancy manager"
        }
    fi
    
    log "INFO" "GitHub Actions redundancy monitoring started"
}

# Start Netlify Functions redundancy
start_netlify_redundancy() {
    log "INFO" "Starting Netlify Functions redundancy monitoring..."
=======
# Check if locked
check_lock() {
    if [ -f "$LOCK_FILE" ]; then
        local lock_pid=$(cat "$LOCK_FILE")
        if ps -p "$lock_pid" > /dev/null 2>&1; then
            log "ERROR" "System is locked by process $lock_pid"
            return 1
        else
            log "WARN" "Stale lock file found, removing"
            rm -f "$LOCK_FILE"
        fi
    fi
    return 0
}

# Acquire lock
acquire_lock() {
    echo $$ > "$LOCK_FILE"
    log "INFO" "Lock acquired"
}

# Release lock
release_lock() {
    rm -f "$LOCK_FILE"
    log "INFO" "Lock released"
}

# Check system requirements
check_requirements() {
    log "INFO" "Checking system requirements..."
    
    # Check Node.js
    if ! command -v node >/dev/null 2>&1; then
        error_exit "Node.js is not installed"
    fi
    
    # Check npm
    if ! command -v npm >/dev/null 2>&1; then
        error_exit "npm is not installed"
    fi
    
    # Check PM2
    if ! command -v pm2 >/dev/null 2>&1; then
        log "WARN" "PM2 is not installed, installing..."
        npm install -g pm2 || error_exit "Failed to install PM2"
    fi
    
    # Check git
    if ! command -v git >/dev/null 2>&1; then
        error_exit "git is not installed"
    fi
    
    log "INFO" "System requirements satisfied"
}

# Start PM2 redundancy services
start_pm2_redundancy() {
    log "INFO" "Starting PM2 redundancy services..."
    
    cd "$WORKSPACE_DIR"
    
    # Start all PM2 ecosystems
    local ecosystems=(
        "ecosystem.pm2.cjs"
        "ecosystem.redundancy.cjs"
        "ecosystem.comprehensive-redundancy.cjs"
        "ecosystem.ultimate-redundancy.pm2.cjs"
    )
    
    for ecosystem in "${ecosystems[@]}"; do
        if [ -f "$ecosystem" ]; then
            log "INFO" "Starting PM2 ecosystem: $ecosystem"
            pm2 start "$ecosystem" --update-env || log "WARN" "Failed to start $ecosystem"
        fi
    done
    
    # Install PM2 logrotate if not already installed
    pm2 install pm2-logrotate 2>/dev/null || true
    pm2 set pm2-logrotate:max_size 10M || true
    pm2 set pm2-logrotate:retain 30 || true
    pm2 set pm2-logrotate:compress true || true
    
    # Save PM2 configuration
    pm2 save || log "WARN" "Failed to save PM2 configuration"
    
    log "INFO" "PM2 redundancy services started"
}

# Start GitHub Actions redundancy
start_github_redundancy() {
    log "INFO" "Starting GitHub Actions redundancy..."
    
    cd "$WORKSPACE_DIR"
    
    # Check if workflows directory exists
    if [ -d ".github/workflows" ]; then
        # Ensure backup workflows exist
        local workflows=(
            "marketing-sync.yml"
            "sync-health.yml"
        )
        
        for workflow in "${workflows[@]}"; do
            local workflow_path=".github/workflows/$workflow"
            local backup_path=".github/workflows/${workflow%.yml}-backup.yml"
            
            if [ -f "$workflow_path" ] && [ ! -f "$backup_path" ]; then
                log "INFO" "Creating backup for $workflow"
                cp "$workflow_path" "$backup_path"
            fi
        done
        
        log "INFO" "GitHub Actions redundancy configured"
    else
        log "WARN" "GitHub workflows directory not found"
    fi
}

# Start Netlify functions redundancy
start_netlify_redundancy() {
    log "INFO" "Starting Netlify functions redundancy..."
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-2064
    
    cd "$PROJECT_ROOT"
    
<<<<<<< HEAD
    # Check Netlify functions manifest
    if [ ! -f "netlify/functions/functions-manifest.json" ]; then
        log "WARN" "Netlify functions manifest missing, regenerating..."
        if [ -f "scripts/generate-netlify-functions-manifest.cjs" ]; then
            node scripts/generate-netlify-functions-manifest.cjs || {
                log "ERROR" "Failed to regenerate Netlify functions manifest"
                return 1
            }
        fi
    fi
    
    # Start Netlify Functions redundancy manager
    if [ -f "automation/enhanced-netlify-functions-redundancy.cjs" ]; then
        log "INFO" "Starting Netlify Functions redundancy manager..."
        pm2 start automation/enhanced-netlify-functions-redundancy.cjs --name "netlify-functions-redundancy" || {
            log "WARN" "Failed to start Netlify Functions redundancy manager"
        }
    fi
    
    log "INFO" "Netlify Functions redundancy monitoring started"
}

# Start Git sync redundancy
start_git_redundancy() {
    log "INFO" "Starting Git sync redundancy..."
    
    cd "$PROJECT_ROOT"
    
    # Check git status
    if ! git status > /dev/null 2>&1; then
        log "ERROR" "Git repository not accessible"
        return 1
    fi
    
    # Start Git sync redundancy
    if [ -f "automation/redundancy-git-sync.cjs" ]; then
        log "INFO" "Starting Git sync redundancy..."
        pm2 start automation/redundancy-git-sync.cjs --name "git-sync-redundancy" || {
            log "WARN" "Failed to start Git sync redundancy"
        }
    fi
    
    log "INFO" "Git sync redundancy started"
}

# Start build monitoring redundancy
start_build_redundancy() {
    log "INFO" "Starting build monitoring redundancy..."
    
    cd "$PROJECT_ROOT"
    
    # Start build monitoring
    if [ -f "automation/redundancy-build-monitor.cjs" ]; then
        log "INFO" "Starting build monitoring..."
        pm2 start automation/redundancy-build-monitor.cjs --name "build-monitor-redundancy" || {
            log "WARN" "Failed to start build monitoring"
        }
    fi
    
    log "INFO" "Build monitoring redundancy started"
}

# Start ultimate redundancy master
start_ultimate_master() {
    log "INFO" "Starting ultimate redundancy master..."
    
    cd "$PROJECT_ROOT"
    
    if [ -f "automation/ultimate-redundancy-master.cjs" ]; then
        log "INFO" "Starting ultimate redundancy master system..."
        pm2 start automation/ultimate-redundancy-master.cjs --name "ultimate-redundancy-master" || {
            log "ERROR" "Failed to start ultimate redundancy master"
            return 1
        }
    else
        log "ERROR" "Ultimate redundancy master script not found"
=======
# Start the ultimate redundancy system
start_system() {
    log "INFO" "Starting Ultimate Redundancy Automation System..."
    
    if is_running; then
        log "WARN" "System is already running (PID: $(cat "$PID_FILE"))"
        return 1
    fi
    
    # Change to workspace directory
    cd "$WORKSPACE_DIR"
    
    # Check if Node.js is available
    if ! command -v node &> /dev/null; then
        log "ERROR" "Node.js is not installed or not in PATH"
        return 1
    fi
    
    # Check if PM2 is available
    if ! command -v pm2 &> /dev/null; then
        log "WARN" "PM2 is not installed, installing globally..."
        npm install -g pm2
    fi
    
    # Ensure all required directories exist
    mkdir -p "$LOG_DIR"
    mkdir -p "$WORKSPACE_DIR/automation/backups"
    
    # Start the ultimate redundancy master
    log "INFO" "Starting Ultimate Redundancy Master..."
    nohup node automation/ultimate-redundancy-master.cjs start > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # Save PID
    echo "$pid" > "$PID_FILE"
    
    # Wait a moment and check if it started successfully
    sleep 3
    if kill -0 "$pid" 2>/dev/null; then
        log "INFO" "Ultimate Redundancy System started successfully (PID: $pid)"
        
        # Start PM2 processes if not already running
        log "INFO" "Ensuring PM2 processes are running..."
        pm2 start ecosystem.pm2.cjs --update-env || true
        pm2 start ecosystem.redundancy.cjs --update-env || true
        pm2 start ecosystem.comprehensive-redundancy.cjs --update-env || true
        
        # Install PM2 logrotate if not already installed
        pm2 install pm2-logrotate || true
        pm2 set pm2-logrotate:max_size 10M || true
        pm2 set pm2-logrotate:retain 30 || true
        pm2 set pm2-logrotate:compress true || true
        pm2 save || true
        
        log "INFO" "PM2 processes configured and started"
        
        # Start additional redundancy processes
        log "INFO" "Starting additional redundancy processes..."
        node automation/enhanced-pm2-redundancy.cjs start || true
        node automation/enhanced-github-actions-redundancy.cjs start || true
        node automation/enhanced-netlify-functions-redundancy.cjs start || true
        
        log "INFO" "All redundancy systems started successfully"
        return 0
    else
        log "ERROR" "Failed to start Ultimate Redundancy System"
        rm -f "$PID_FILE"
        return 1
    fi
    
    log "INFO" "Ultimate redundancy master started successfully"
}

# Stop the system
stop_system() {
    log "INFO" "Stopping Ultimate Redundancy Automation System..."
    
    if ! is_running; then
        log "WARN" "System is not running"
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    
    # Stop the main process
    if kill -0 "$pid" 2>/dev/null; then
        log "INFO" "Stopping main process (PID: $pid)..."
        kill "$pid"
        
        # Wait for graceful shutdown
        local count=0
        while kill -0 "$pid" 2>/dev/null && [ $count -lt 10 ]; do
            sleep 1
            count=$((count + 1))
        done
        
        # Force kill if still running
        if kill -0 "$pid" 2>/dev/null; then
            log "WARN" "Force killing process (PID: $pid)..."
            kill -9 "$pid"
        fi
    fi
    
    # Stop PM2 processes
    log "INFO" "Stopping PM2 processes..."
    pm2 stop ecosystem.pm2.cjs || true
    pm2 stop ecosystem.redundancy.cjs || true
    pm2 stop ecosystem.comprehensive-redundancy.cjs || true
    
    # Stop additional redundancy processes
    log "INFO" "Stopping additional redundancy processes..."
    node automation/enhanced-pm2-redundancy.cjs stop || true
    node automation/enhanced-github-actions-redundancy.cjs stop || true
    node automation/enhanced-netlify-functions-redundancy.cjs stop || true
    
    # Clean up PID file
    rm -f "$PID_FILE"
    
    log "INFO" "Ultimate Redundancy System stopped successfully"
}

# Restart the system
restart_system() {
    log "INFO" "Restarting Ultimate Redundancy Automation System..."
    stop_system
    sleep 2
    start_system
}

# Show system status
show_status() {
    log "INFO" "Ultimate Redundancy System Status:"
    echo
    
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo -e "${GREEN}✓ System is RUNNING${NC} (PID: $pid)"
        
        # Show PM2 status
        echo
        echo "PM2 Processes Status:"
        pm2 status --no-daemon || echo "PM2 not available"
        
        # Show main redundancy system status
        echo
        echo "Main Redundancy System Status:"
        if [ -f "$PID_FILE" ]; then
            local pid=$(cat "$PID_FILE")
            if kill -0 "$pid" 2>/dev/null; then
                echo -e "${GREEN}✓ Ultimate Redundancy Master: RUNNING${NC}"
            else
                echo -e "${RED}✗ Ultimate Redundancy Master: DEAD${NC}"
            fi
        else
            log "WARN" "PID file exists but process is not running"
        fi
    test)
        test
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|logs|test}"
        echo ""
        echo "Commands:"
        echo "  start   - Start the ultimate redundancy system"
        echo "  stop    - Stop the ultimate redundancy system"
        echo "  restart - Restart the ultimate redundancy system"
        echo "  status  - Show system status"
        echo "  logs    - Show system logs"
        echo "  test    - Test system requirements"
        exit 1
        ;;
esac
=======
        
        # Show log file info
        echo
        echo "Log Information:"
        if [ -f "$LOG_FILE" ]; then
            local log_size=$(du -h "$LOG_FILE" | cut -f1)
            local log_lines=$(wc -l < "$LOG_FILE")
            echo "Log file: $LOG_FILE"
            echo "Size: $log_size"
            echo "Lines: $log_lines"
        else
            echo "No log file found"
        fi
        
    else
        echo -e "${RED}✗ System is NOT RUNNING${NC}"
    fi
    
    echo
    echo "Configuration:"
    echo "Workspace: $WORKSPACE_DIR"
    echo "Log directory: $LOG_DIR"
    echo "PID file: $PID_FILE"
}

# Show logs
show_logs() {
    local lines="${1:-50}"
    
    if [ -f "$LOG_FILE" ]; then
        log "INFO" "Showing last $lines lines of log file:"
        echo
        tail -n "$lines" "$LOG_FILE"
    else
        log "WARN" "Log file not found: $LOG_FILE"
=======
    # Check if Netlify functions directory exists
    if [ -d "netlify/functions" ]; then
        # Regenerate functions manifest
        if [ -f "scripts/generate-netlify-functions-manifest.cjs" ]; then
            log "INFO" "Regenerating Netlify functions manifest"
            node scripts/generate-netlify-functions-manifest.cjs || log "WARN" "Failed to regenerate manifest"
        fi
        
        log "INFO" "Netlify functions redundancy configured"
    else
        log "WARN" "Netlify functions directory not found"
    fi
}

# Start automation redundancy services
start_automation_redundancy() {
    log "INFO" "Starting automation redundancy services..."
    
    cd "$WORKSPACE_DIR"
    
    # Start key redundancy scripts
    local redundancy_scripts=(
        "automation/pm2-redundancy-monitor.cjs"
        "automation/comprehensive-redundancy-orchestrator.cjs"
        "automation/github-actions-redundancy-manager.cjs"
        "automation/netlify-functions-redundancy-manager.cjs"
    )
    
    for script in "${redundancy_scripts[@]}"; do
        if [ -f "$script" ]; then
            log "INFO" "Starting redundancy script: $script"
            node "$script" start > "$LOG_DIR/$(basename "$script" .cjs).log" 2>&1 &
            local pid=$!
            log "INFO" "Started $script with PID $pid"
        fi
    done
    
    # Start monitoring scripts
    local monitoring_scripts=(
        "automation/redundancy-health-monitor.cjs"
        "automation/redundancy-build-monitor.cjs"
        "automation/continuous-build-monitor.cjs"
    )
    
    for script in "${monitoring_scripts[@]}"; do
        if [ -f "$script" ]; then
            log "INFO" "Starting monitoring script: $script"
            node "$script" start > "$LOG_DIR/$(basename "$script" .cjs).log" 2>&1 &
            local pid=$!
            log "INFO" "Started $script with PID $pid"
        fi
    done
    
    log "INFO" "Automation redundancy services started"
}

# Start the ultimate redundancy master
start_ultimate_master() {
    log "INFO" "Starting ultimate redundancy master..."
    
    cd "$WORKSPACE_DIR"
    
    if [ -f "automation/ultimate-redundancy-master.cjs" ]; then
        # Start in continuous monitoring mode
        node automation/ultimate-redundancy-master.cjs monitor > "$LOG_DIR/ultimate-redundancy-master.log" 2>&1 &
        local master_pid=$!
        echo "$master_pid" > "$PID_FILE"
        log "INFO" "Ultimate redundancy master started with PID $master_pid"
    else
        error_exit "Ultimate redundancy master script not found"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-2064
    fi
}

# Generate health report
generate_report() {
    log "INFO" "Generating health report..."
    
    if is_running; then
        cd "$WORKSPACE_DIR"
        node automation/ultimate-redundancy-master.cjs report
    else
        log "ERROR" "System is not running, cannot generate report"
        return 1
    fi
}

# Test the system
test_system() {
    log "INFO" "Testing Ultimate Redundancy System..."
    
    if ! is_running; then
        log "ERROR" "System is not running, cannot test"
        return 1
    fi
    
    cd "$WORKSPACE_DIR"
    
<<<<<<< HEAD
    # Test PM2 redundancy
    log "INFO" "Testing PM2 redundancy..."
    node automation/enhanced-pm2-redundancy.cjs status || true
    
    # Test GitHub Actions redundancy
    log "INFO" "Testing GitHub Actions redundancy..."
    node automation/enhanced-github-actions-redundancy.cjs status || true
    
    # Test Netlify functions redundancy
    log "INFO" "Testing Netlify functions redundancy..."
    node automation/enhanced-netlify-functions-redundancy.cjs status || true
    
    # Test main system
    log "INFO" "Testing main redundancy system..."
    node automation/ultimate-redundancy-master.cjs health || true
    
    log "INFO" "System test completed"
}

# Show help
show_help() {
    echo "Ultimate Redundancy Automation System"
    echo "===================================="
    echo
    echo "This system provides comprehensive redundancy for all automation systems:"
    echo "  - PM2 process management"
    echo "  - GitHub Actions workflows"
    echo "  - Netlify functions"
    echo "  - Health monitoring and auto-recovery"
    echo
    echo "Usage: $0 <command>"
    echo
    echo "Commands:"
    echo "  start     - Start the ultimate redundancy system"
    echo "  stop      - Stop the system"
    echo "  restart   - Restart the system"
    echo "  status    - Show system status"
    echo "  logs      - Show log output (default: last 50 lines)"
    echo "  report    - Generate health report"
    echo "  test      - Test all redundancy systems"
    echo "  help      - Show this help message"
    echo
    echo "Examples:"
    echo "  $0 start                    # Start the system"
    echo "  $0 status                   # Check status"
    echo "  $0 logs 100                 # Show last 100 log lines"
    echo "  $0 test                     # Test all systems"
=======
    # Check PM2 status
    if command -v pm2 >/dev/null 2>&1; then
        local pm2_status=$(pm2 status 2>/dev/null || echo "PM2 not running")
        log "INFO" "PM2 Status: $pm2_status"
    fi
    
    # Check if processes are running
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            log "INFO" "Ultimate redundancy master is running (PID: $pid)"
        else
            log "ERROR" "Ultimate redundancy master is not running"
            return 1
        fi
    fi
    
    # Check log files
    local log_count=$(find "$LOG_DIR" -name "*.log" | wc -l)
    log "INFO" "Found $log_count log files"
    
    log "INFO" "Health check completed"
    return 0
}

# Stop all services
stop_services() {
    log "INFO" "Stopping all redundancy services..."
    
    cd "$WORKSPACE_DIR"
    
    # Stop PM2 processes
    if command -v pm2 >/dev/null 2>&1; then
        pm2 stop all 2>/dev/null || true
        log "INFO" "PM2 processes stopped"
    fi
    
    # Kill background processes
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            kill "$pid" 2>/dev/null || true
            log "INFO" "Killed process $pid"
        fi
        rm -f "$PID_FILE"
    fi
    
    # Kill any remaining node processes from our scripts
    pkill -f "ultimate-redundancy-master.cjs" 2>/dev/null || true
    pkill -f "redundancy.*\.cjs" 2>/dev/null || true
    
    log "INFO" "All services stopped"
}

# Show status
show_status() {
    log "INFO" "Showing system status..."
    
    cd "$WORKSPACE_DIR"
    
    echo -e "${BLUE}=== ULTIMATE REDUNDANCY SYSTEM STATUS ===${NC}"
    
    # PM2 Status
    if command -v pm2 >/dev/null 2>&1; then
        echo -e "${YELLOW}PM2 Status:${NC}"
        pm2 status 2>/dev/null || echo "PM2 not running"
        echo
    fi
    
    # Process Status
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            echo -e "${GREEN}Ultimate Redundancy Master: RUNNING (PID: $pid)${NC}"
        else
            echo -e "${RED}Ultimate Redundancy Master: NOT RUNNING${NC}"
        fi
    else
        echo -e "${RED}Ultimate Redundancy Master: NOT RUNNING${NC}"
    fi
    echo
    
    # Log Files
    echo -e "${YELLOW}Recent Log Files:${NC}"
    find "$LOG_DIR" -name "*.log" -type f -exec ls -lh {} \; 2>/dev/null | head -10 || echo "No log files found"
    echo
    
    # System Health
    if health_check >/dev/null 2>&1; then
        echo -e "${GREEN}System Health: HEALTHY${NC}"
    else
        echo -e "${RED}System Health: UNHEALTHY${NC}"
    fi
}

# Show logs
show_logs() {
    local lines="${1:-50}"
    log "INFO" "Showing last $lines lines of logs..."
    
    if [ -f "$LOG_DIR/ultimate-redundancy.log" ]; then
        tail -n "$lines" "$LOG_DIR/ultimate-redundancy.log"
    else
        log "WARN" "No log file found"
    fi
}

# Main function
main() {
    local command="${1:-start}"
    
    case "$command" in
        start)
            if check_running; then
                log "INFO" "System already running"
                exit 0
            fi
            
            if ! check_lock; then
                error_exit "Cannot acquire lock"
            fi
            
            acquire_lock
            
            log "INFO" "Starting Ultimate Redundancy System..."
            
            check_requirements
            start_pm2_redundancy
            start_github_redundancy
            start_netlify_redundancy
            start_automation_redundancy
            start_ultimate_master
            
            # Wait a moment for services to start
            sleep 5
            
            if health_check; then
                log "INFO" "Ultimate Redundancy System started successfully"
                echo -e "${GREEN}Ultimate Redundancy System is now running!${NC}"
            else
                error_exit "System failed health check"
            fi
            
            release_lock
            ;;
            
        stop)
            log "INFO" "Stopping Ultimate Redundancy System..."
            stop_services
            log "INFO" "System stopped"
            ;;
            
        restart)
            log "INFO" "Restarting Ultimate Redundancy System..."
            stop_services
            sleep 2
            "$0" start
            ;;
            
        status)
            show_status
            ;;
            
        logs)
            show_logs "$2"
            ;;
            
        health)
            if health_check; then
                echo -e "${GREEN}System is healthy${NC}"
                exit 0
            else
                echo -e "${RED}System is unhealthy${NC}"
                exit 1
            fi
            ;;
            
        check)
            log "INFO" "Running system check..."
            cd "$WORKSPACE_DIR"
            if [ -f "automation/ultimate-redundancy-master.cjs" ]; then
                node automation/ultimate-redundancy-master.cjs check
            else
                error_exit "Ultimate redundancy master script not found"
            fi
            ;;
            
        *)
            echo -e "${BLUE}Ultimate Redundancy System - Usage:${NC}"
            echo "  $0 [command]"
            echo
            echo "Commands:"
            echo "  start     - Start the redundancy system"
            echo "  stop      - Stop the redundancy system"
            echo "  restart   - Restart the redundancy system"
            echo "  status    - Show system status"
            echo "  logs [n]  - Show last n lines of logs (default: 50)"
            echo "  health    - Check system health"
            echo "  check     - Run comprehensive system check"
            echo
            echo "Examples:"
            echo "  $0 start"
            echo "  $0 status"
            echo "  $0 logs 100"
            echo "  $0 health"
            exit 1
            ;;
    esac
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-2064
}

# Main execution
case "${1:-help}" in
    start)
        start_system
        ;;
    stop)
        stop_system
        ;;
    restart)
        restart_system
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$2"
        ;;
    report)
        generate_report
        ;;
    test)
        test_system
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        log "ERROR" "Unknown command: $1"
        show_help
        exit 1
        ;;
esac
