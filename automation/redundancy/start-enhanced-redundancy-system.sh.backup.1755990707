#!/bin/bash

<<<<<<< HEAD
# Enhanced Redundancy System Startup Script
# This script provides comprehensive redundancy for all PM2, GitHub Actions, and Netlify Functions automations
=======
# Enhanced Redundancy Automation System Startup Script
# This script starts the comprehensive redundancy system for all PM2, GitHub Actions, and Netlify Functions automations
>>>>>>> origin/cursor/automate-deployment-redundancy-and-clean-up-a700

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
LOG_DIR="$PROJECT_ROOT/automation/logs"
<<<<<<< HEAD
ENHANCED_ORCHESTRATOR="$SCRIPT_DIR/enhanced-master-redundancy-orchestrator.cjs"

# Ensure log directory exists
mkdir -p "$LOG_DIR"

# Logging function
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")
            echo -e "${GREEN}[$timestamp] [INFO]${NC} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[$timestamp] [WARN]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[$timestamp] [ERROR]${NC} $message"
            ;;
        "DEBUG")
            echo -e "${BLUE}[$timestamp] [DEBUG]${NC} $message"
            ;;
        *)
            echo -e "${CYAN}[$timestamp] [LOG]${NC} $message"
            ;;
    esac
    
    # Also write to log file
    echo "[$timestamp] [$level] $message" >> "$LOG_DIR/enhanced-redundancy-startup.log"
}

# Check if Node.js is available
check_node() {
    if ! command -v node &> /dev/null; then
        log "ERROR" "Node.js is not installed or not in PATH"
        exit 1
    fi
    
    local node_version=$(node --version | cut -d'v' -f2)
    local major_version=$(echo "$node_version" | cut -d'.' -f1)
    
    if [ "$major_version" -lt 18 ]; then
        log "ERROR" "Node.js version 18 or higher is required. Current version: $node_version"
        exit 1
    fi
    
    log "INFO" "Node.js version $node_version detected"
}

# Check if required dependencies are installed
check_dependencies() {
    log "INFO" "Checking dependencies..."
    
    # Check if node-cron is available
    if ! node -e "require('node-cron')" &> /dev/null; then
        log "WARN" "node-cron not found, installing..."
        cd "$PROJECT_ROOT"
        npm install node-cron
    fi
    
    # Check if PM2 is available
    if ! command -v pm2 &> /dev/null; then
        log "WARN" "PM2 not found, installing..."
        npm install -g pm2
    fi
    
    log "INFO" "All dependencies are available"
}

# Check system resources
check_system_resources() {
    log "INFO" "Checking system resources..."
    
    # Check available memory
    local available_mem=$(free -m | awk 'NR==2{printf "%.0f", $7}')
    if [ "$available_mem" -lt 512 ]; then
        log "WARN" "Low memory available: ${available_mem}MB (recommended: 512MB+)"
    else
        log "INFO" "Available memory: ${available_mem}MB"
    fi
    
    # Check available disk space
    local available_disk=$(df -m "$PROJECT_ROOT" | awk 'NR==2{printf "%.0f", $4}')
    if [ "$available_disk" -lt 1024 ]; then
        log "WARN" "Low disk space available: ${available_disk}MB (recommended: 1GB+)"
    else
        log "INFO" "Available disk space: ${available_disk}MB"
    fi
    
    # Check CPU load
    local cpu_load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    log "INFO" "Current CPU load: $cpu_load"
}

# Start the enhanced redundancy system
start_system() {
    log "INFO" "Starting Enhanced Redundancy System..."
    
    cd "$PROJECT_ROOT"
    
    # Check if system is already running
    if pgrep -f "enhanced-master-redundancy-orchestrator" > /dev/null; then
        log "WARN" "Enhanced redundancy system appears to be already running"
        read -p "Do you want to restart it? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log "INFO" "Restarting enhanced redundancy system..."
            stop_system
        else
            log "INFO" "System startup cancelled"
            return 0
        fi
    fi
    
    # Start the enhanced master orchestrator
    log "INFO" "Launching enhanced master orchestrator..."
    nohup node "$ENHANCED_ORCHESTRATOR" start > "$LOG_DIR/enhanced-orchestrator.log" 2>&1 &
    local orchestrator_pid=$!
    
    # Wait for startup
    log "INFO" "Waiting for system startup..."
    sleep 10
    
    # Check if orchestrator is running
    if kill -0 "$orchestrator_pid" 2>/dev/null; then
        log "INFO" "Enhanced redundancy system started successfully (PID: $orchestrator_pid)"
        echo "$orchestrator_pid" > "$LOG_DIR/enhanced-redundancy.pid"
        
        # Wait a bit more for full initialization
        sleep 15
        
        # Check system status
        check_system_status
    else
        log "ERROR" "Failed to start enhanced redundancy system"
        return 1
    fi
}

# Stop the enhanced redundancy system
stop_system() {
    log "INFO" "Stopping Enhanced Redundancy System..."
    
    # Stop orchestrator if running
    if [ -f "$LOG_DIR/enhanced-redundancy.pid" ]; then
        local orchestrator_pid=$(cat "$LOG_DIR/enhanced-redundancy.pid")
        if kill -0 "$orchestrator_pid" 2>/dev/null; then
            log "INFO" "Stopping orchestrator (PID: $orchestrator_pid)..."
            kill "$orchestrator_pid"
            
            # Wait for graceful shutdown
            local count=0
            while kill -0 "$orchestrator_pid" 2>/dev/null && [ $count -lt 30 ]; do
                sleep 1
                count=$((count + 1))
            done
            
            # Force kill if still running
            if kill -0 "$orchestrator_pid" 2>/dev/null; then
                log "WARN" "Force killing orchestrator..."
                kill -9 "$orchestrator_pid"
            fi
        fi
        
        rm -f "$LOG_DIR/enhanced-redundancy.pid"
    fi
    
    # Stop any remaining PM2 processes
    if command -v pm2 &> /dev/null; then
        log "INFO" "Stopping PM2 backup processes..."
        pm2 stop all 2>/dev/null || true
        pm2 delete all 2>/dev/null || true
    fi
    
    log "INFO" "Enhanced redundancy system stopped"
}

# Check system status
check_system_status() {
    log "INFO" "Checking system status..."
    
    if [ -f "$LOG_DIR/enhanced-redundancy.pid" ]; then
        local orchestrator_pid=$(cat "$LOG_DIR/enhanced-redundancy.pid")
        if kill -0 "$orchestrator_pid" 2>/dev/null; then
            log "INFO" "Enhanced redundancy system is running (PID: $orchestrator_pid)"
            
            # Get detailed status
            cd "$PROJECT_ROOT"
            if node "$ENHANCED_ORCHESTRATOR" status > /dev/null 2>&1; then
                log "INFO" "System status check completed successfully"
            else
                log "WARN" "System status check failed"
            fi
        else
            log "ERROR" "Enhanced redundancy system is not running"
            return 1
        fi
    else
        log "ERROR" "No PID file found - system may not be running"
        return 1
    fi
}

# Show system logs
show_logs() {
    log "INFO" "Recent system logs:"
    echo "----------------------------------------"
    
    if [ -f "$LOG_DIR/enhanced-master-redundancy.log" ]; then
        echo "Master Orchestrator Logs:"
        tail -n 20 "$LOG_DIR/enhanced-master-redundancy.log"
        echo
    fi
    
    if [ -f "$LOG_DIR/enhanced-pm2-redundancy.log" ]; then
        echo "PM2 Redundancy Logs:"
        tail -n 15 "$LOG_DIR/enhanced-pm2-redundancy.log"
        echo
    fi
    
    if [ -f "$LOG_DIR/enhanced-github-actions-redundancy.log" ]; then
        echo "GitHub Actions Redundancy Logs:"
        tail -n 15 "$LOG_DIR/enhanced-github-actions-redundancy.log"
        echo
    fi
    
    if [ -f "$LOG_DIR/enhanced-netlify-functions-redundancy.log" ]; then
        echo "Netlify Functions Redundancy Logs:"
        tail -n 15 "$LOG_DIR/enhanced-netlify-functions-redundancy.log"
        echo
    fi
    
    echo "----------------------------------------"
}

# Emergency recovery
emergency_recovery() {
    log "WARN" "Initiating emergency recovery..."
    
    # Stop everything
    stop_system
    
    # Wait for cleanup
    sleep 10
    
    # Clear any stale processes
    pkill -f "enhanced-master-redundancy-orchestrator" 2>/dev/null || true
    pkill -f "enhanced-pm2-redundancy-manager" 2>/dev/null || true
    pkill -f "enhanced-github-actions-redundancy-manager" 2>/dev/null || true
    pkill -f "enhanced-netlify-functions-redundancy-manager" 2>/dev/null || true
    
    # Clear PM2 processes
    if command -v pm2 &> /dev/null; then
        pm2 kill 2>/dev/null || true
        pm2 start ecosystem.pm2.cjs 2>/dev/null || true
    fi
    
    # Wait for system to stabilize
    sleep 15
    
    # Restart the system
    start_system
}

# Main function
main() {
    local command="${1:-start}"
    
    log "INFO" "Enhanced Redundancy System Management Script"
    log "INFO" "Project Root: $PROJECT_ROOT"
    log "INFO" "Script Directory: $SCRIPT_DIR"
    log "INFO" "Log Directory: $LOG_DIR"
    
    case "$command" in
        "start")
            check_node
            check_dependencies
            check_system_resources
            start_system
            ;;
        "stop")
            stop_system
            ;;
        "restart")
            stop_system
            sleep 5
            start_system
            ;;
        "status")
            check_system_status
            ;;
        "logs")
            show_logs
            ;;
        "emergency")
            emergency_recovery
            ;;
        "help"|"--help"|"-h")
            echo "Enhanced Redundancy System Management Script"
            echo
            echo "Usage: $0 [command]"
            echo
            echo "Commands:"
            echo "  start     - Start the enhanced redundancy system"
            echo "  stop      - Stop the enhanced redundancy system"
            echo "  restart   - Restart the enhanced redundancy system"
            echo "  status    - Check system status"
            echo "  logs      - Show recent system logs"
            echo "  emergency - Perform emergency recovery"
            echo "  help      - Show this help message"
            echo
            echo "The enhanced redundancy system provides comprehensive backup for:"
            echo "  - PM2 automation processes"
            echo "  - GitHub Actions workflows"
            echo "  - Netlify Functions"
            echo
            ;;
        *)
            log "ERROR" "Unknown command: $command"
            log "INFO" "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
}

# Handle script interruption
trap 'log "WARN" "Script interrupted"; exit 1' INT TERM

# Run main function with all arguments
=======
REDUNDANCY_DIR="$SCRIPT_DIR"
ENHANCED_ORCHESTRATOR="$REDUNDANCY_DIR/enhanced-master-redundancy-orchestrator.cjs"

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    print_status $BLUE "🔍 Checking prerequisites..."
    
    # Check if Node.js is available
    if ! command -v node &> /dev/null; then
        print_status $RED "❌ Node.js is not installed or not in PATH"
        exit 1
    fi
    
    # Check Node.js version
    local node_version=$(node --version | cut -d'v' -f2)
    local required_version="20.18.1"
    
    if ! node -e "
        const current = process.version.slice(1).split('.').map(Number);
        const required = '$required_version'.split('.').map(Number);
        const isCompatible = current[0] > required[0] || 
                           (current[0] === required[0] && current[1] > required[1]) ||
                           (current[0] === required[0] && current[1] === required[1] && current[2] >= required[2]);
        process.exit(isCompatible ? 0 : 1);
    "; then
        print_status $RED "❌ Node.js version $node_version is below required version $required_version"
        exit 1
    fi
    
    print_status $GREEN "✅ Node.js version $node_version is compatible"
    
    # Check if npm is available
    if ! command -v npm &> /dev/null; then
        print_status $RED "❌ npm is not installed or not in PATH"
        exit 1
    fi
    
    print_status $GREEN "✅ npm is available"
    
    # Check if PM2 is available
    if ! command -v pm2 &> /dev/null; then
        print_status $YELLOW "⚠️  PM2 is not installed, will attempt to install it"
        npm install -g pm2 || {
            print_status $RED "❌ Failed to install PM2"
            exit 1
        }
    fi
    
    print_status $GREEN "✅ PM2 is available"
    
    # Check if required directories exist
    if [ ! -d "$PROJECT_ROOT" ]; then
        print_status $RED "❌ Project root directory not found: $PROJECT_ROOT"
        exit 1
    fi
    
    if [ ! -d "$REDUNDANCY_DIR" ]; then
        print_status $RED "❌ Redundancy directory not found: $REDUNDANCY_DIR"
        exit 1
    fi
    
    # Create log directory if it doesn't exist
    mkdir -p "$LOG_DIR"
    
    print_status $GREEN "✅ All prerequisites satisfied"
}

# Function to install dependencies
install_dependencies() {
    print_status $BLUE "📦 Installing dependencies..."
    
    cd "$PROJECT_ROOT"
    
    # Install node-cron if not already installed
    if ! node -e "require('node-cron')" 2>/dev/null; then
        print_status $YELLOW "Installing node-cron..."
        npm install node-cron || {
            print_status $RED "❌ Failed to install node-cron"
            exit 1
        }
    fi
    
    print_status $GREEN "✅ Dependencies installed"
}

# Function to start the enhanced redundancy system
start_enhanced_system() {
    print_status $BLUE "🚀 Starting Enhanced Redundancy Automation System..."
    
    cd "$PROJECT_ROOT"
    
    # Check if the enhanced orchestrator exists
    if [ ! -f "$ENHANCED_ORCHESTRATOR" ]; then
        print_status $RED "❌ Enhanced orchestrator not found: $ENHANCED_ORCHESTRATOR"
        exit 1
    fi
    
    # Start the enhanced master redundancy orchestrator
    print_status $CYAN "🎯 Launching Enhanced Master Redundancy Orchestrator..."
    
    # Create a startup script that will run the orchestrator
    local startup_script="$REDUNDANCY_DIR/startup-enhanced-orchestrator.js"
    
    cat > "$startup_script" << 'EOF'
#!/usr/bin/env node
'use strict';

const EnhancedMasterRedundancyOrchestrator = require('./enhanced-master-redundancy-orchestrator.cjs');

async function main() {
    console.log('🚀 Enhanced Redundancy Automation System Starting...');
    
    try {
        const orchestrator = new EnhancedMasterRedundancyOrchestrator();
        
        // Start all enhanced managers
        await orchestrator.startAllEnhancedManagers();
        
        // Start enhanced health monitoring
        await orchestrator.startEnhancedHealthMonitoring();
        
        console.log('✅ Enhanced Redundancy Automation System started successfully');
        console.log('📊 System is now monitoring and managing all automation redundancies');
        console.log('🔍 Health checks will run every 2 minutes');
        console.log('📈 Full system health checks will run every 30 minutes');
        console.log('🔍 Comprehensive audits will run every 2 hours');
        console.log('🧹 Daily maintenance will run at 2 AM');
        
        // Keep the process running
        process.on('SIGINT', async () => {
            console.log('\n🛑 Received SIGINT, shutting down gracefully...');
            await orchestrator.stopAllEnhancedManagers();
            process.exit(0);
        });
        
        process.on('SIGTERM', async () => {
            console.log('\n🛑 Received SIGTERM, shutting down gracefully...');
            await orchestrator.stopAllEnhancedManagers();
            process.exit(0);
        });
        
        // Log system status every 5 minutes
        setInterval(async () => {
            try {
                const status = await orchestrator.getEnhancedStatus();
                console.log(`📊 System Status: ${status.systemHealth} | Emergency Mode: ${status.emergencyMode} | Uptime: ${Math.floor(status.uptime / 60)}m`);
            } catch (error) {
                console.error('❌ Failed to get system status:', error.message);
            }
        }, 5 * 60 * 1000);
        
    } catch (error) {
        console.error('❌ Failed to start Enhanced Redundancy Automation System:', error);
        process.exit(1);
    }
}

main().catch(error => {
    console.error('❌ Fatal error in Enhanced Redundancy Automation System:', error);
    process.exit(1);
});
EOF
    
    chmod +x "$startup_script"
    
    # Start the system in the background
    print_status $CYAN "🎯 Starting enhanced redundancy orchestrator in background..."
    
    nohup node "$startup_script" > "$LOG_DIR/enhanced-redundancy-startup.log" 2>&1 &
    local pid=$!
    
    # Wait a moment for the system to start
    sleep 3
    
    # Check if the process is running
    if kill -0 $pid 2>/dev/null; then
        print_status $GREEN "✅ Enhanced Redundancy Automation System started successfully (PID: $pid)"
        echo $pid > "$REDUNDANCY_DIR/enhanced-redundancy.pid"
        
        # Show initial status
        print_status $CYAN "📊 Checking initial system status..."
        sleep 2
        
        if [ -f "$LOG_DIR/enhanced-redundancy-startup.log" ]; then
            tail -n 20 "$LOG_DIR/enhanced-redundancy-startup.log" | while read line; do
                if [[ $line == *"✅"* ]]; then
                    print_status $GREEN "$line"
                elif [[ $line == *"❌"* ]]; then
                    print_status $RED "$line"
                elif [[ $line == *"⚠️"* ]]; then
                    print_status $YELLOW "$line"
                else
                    print_status $CYAN "$line"
                fi
            done
        fi
        
    else
        print_status $RED "❌ Failed to start Enhanced Redundancy Automation System"
        exit 1
    fi
}

# Function to show system information
show_system_info() {
    print_status $BLUE "📋 Enhanced Redundancy Automation System Information"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "🎯 Purpose: Comprehensive redundancy coverage for all automation systems"
    echo "🔧 Components: PM2, GitHub Actions, Netlify Functions"
    echo "📁 Project Root: $PROJECT_ROOT"
    echo "📁 Redundancy Dir: $REDUNDANCY_DIR"
    echo "📁 Log Directory: $LOG_DIR"
    echo "🚀 Enhanced Orchestrator: $ENHANCED_ORCHESTRATOR"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
}

# Function to check if system is already running
check_if_running() {
    local pid_file="$REDUNDANCY_DIR/enhanced-redundancy.pid"
    
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if kill -0 $pid 2>/dev/null; then
            print_status $YELLOW "⚠️  Enhanced Redundancy Automation System is already running (PID: $pid)"
            read -p "Do you want to restart it? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                print_status $BLUE "🔄 Stopping existing system..."
                kill $pid 2>/dev/null || true
                rm -f "$pid_file"
                sleep 2
            else
                print_status $BLUE "ℹ️  System already running, exiting"
                exit 0
            fi
        else
            print_status $YELLOW "⚠️  Found stale PID file, removing..."
            rm -f "$pid_file"
        fi
    fi
}

# Main execution
main() {
    echo ""
    print_status $PURPLE "🚀 Enhanced Redundancy Automation System Startup"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    show_system_info
    
    # Check if system is already running
    check_if_running
    
    # Check prerequisites
    check_prerequisites
    
    # Install dependencies
    install_dependencies
    
    # Start the enhanced system
    start_enhanced_system
    
    echo ""
    print_status $GREEN "🎉 Enhanced Redundancy Automation System startup completed!"
    echo ""
    print_status $CYAN "📊 To monitor the system:"
    echo "   • View logs: tail -f $LOG_DIR/enhanced-redundancy-startup.log"
    echo "   • Check status: pm2 status"
    echo "   • View backup workflows: ls -la .github/workflows/backup/"
    echo "   • View backup functions: ls -la netlify/functions/backup/"
    echo ""
    print_status $CYAN "🛑 To stop the system:"
    echo "   • Run: $REDUNDANCY_DIR/stop-enhanced-redundancy-system.sh"
    echo "   • Or manually: kill \$(cat $REDUNDANCY_DIR/enhanced-redundancy.pid)"
    echo ""
}

# Run main function
>>>>>>> origin/cursor/automate-deployment-redundancy-and-clean-up-a700
main "$@"