const fs = require('fs');
const path = require('path');
const fse = require('fs-extra');

function walkDir(dir, filterFn) {
  const out = [];
  for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {
    const abs = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      out.push(...walkDir(abs, filterFn));
    } else if (!filterFn || filterFn(abs)) {
      out.push(abs);
    }
  }
  return out;
}

function bytesToKb(n) {
  return Math.round((n / 1024) * 10) / 10;
}

function main() {
  const repoRoot = path.resolve(__dirname, '..');
  const publicDir = path.join(repoRoot, 'public');
  const stylesDir = path.join(repoRoot, 'styles');

  const imageExts = new Set(['.jpg', '.jpeg', '.png', '.gif', '.webp', '.avif', '.svg']);

  const publicFiles = fse.pathExistsSync(publicDir) ? walkDir(publicDir) : [];
  const images = publicFiles.filter(f => imageExts.has(path.extname(f).toLowerCase()));
  const otherAssets = publicFiles.filter(f => !images.includes(f));

  const imageStats = images.map(f => ({ file: f, bytes: fs.statSync(f).size }));
  const totalImageBytes = imageStats.reduce((a, b) => a + b.bytes, 0);
  const topImages = [...imageStats].sort((a, b) => b.bytes - a.bytes).slice(0, 15);

  const styleFiles = fse.pathExistsSync(stylesDir) ? walkDir(stylesDir, f => f.endsWith('.css')) : [];
  const styleStats = styleFiles.map(f => ({ file: f, bytes: fs.statSync(f).size }));
  const totalCssBytes = styleStats.reduce((a, b) => a + b.bytes, 0);

  const report = {
    generatedAt: new Date().toISOString(),
    totals: {
      imagesKb: bytesToKb(totalImageBytes),
      cssKb: bytesToKb(totalCssBytes),
      assetCount: publicFiles.length,
      imagesCount: images.length,
      cssFiles: styleFiles.length
    },
    largestImages: topImages.map(t => ({ relative: path.relative(repoRoot, t.file), kb: bytesToKb(t.bytes) })),
    cssFiles: styleStats.map(s => ({ relative: path.relative(repoRoot, s.file), kb: bytesToKb(s.bytes) }))
  };

  const outDir = path.join(repoRoot, 'docs', 'reports');
  fse.ensureDirSync(outDir);
  const jsonPath = path.join(outDir, 'performance_budget.json');
  const mdPath = path.join(outDir, 'performance_budget.md');

  fs.writeFileSync(jsonPath, JSON.stringify(report, null, 2));

  const lines = [];
  lines.push('# Performance Budget Report');
  lines.push('');
  lines.push(`- Total images: ${report.totals.imagesCount} (~${report.totals.imagesKb} KB)`);
  lines.push(`- Total CSS: ${report.totals.cssFiles} files (~${report.totals.cssKb} KB)`);
  lines.push(`- Other public assets: ${report.totals.assetCount - report.totals.imagesCount}`);
  lines.push('');
  lines.push('## Largest Images');
  for (const img of report.largestImages) {
    lines.push(`- ${img.relative} â€” ${img.kb} KB`);
  }
  lines.push('');
  lines.push('---');
  lines.push('Generated by performance-budget-reporter.cjs');

  fs.writeFileSync(mdPath, lines.join('\n'));

  console.log('Performance budget report generated at', path.relative(repoRoot, mdPath));
}

if (require.main === module) {
  try {
    main();
    process.exit(0);
  } catch (e) {
    console.error('performance-budget-reporter failed:', e);
    process.exit(1);
  }
}