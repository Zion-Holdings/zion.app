#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const REPORT_DIR = path.join(__dirname, '..', 'data', 'reports', 'app-growth');
const PROPOSALS_DIR = path.join(REPORT_DIR, 'proposals');
const STATE_FILE = path.join(REPORT_DIR, 'known-app-pages.json');
const PAGES_DIR = path.join(__dirname, '..', 'pages');
const METADATA_DIR = path.join(__dirname, '..', 'data', 'page-metadata');

function ensureDir(p) { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }

function listPages(baseDir) {
  const pages = [];
  function walk(dir, rel = '') {
    for (const entry of fs.readdirSync(dir)) {
      const full = path.join(dir, entry);
      const relPath = path.join(rel, entry);
      const stat = fs.statSync(full);
      if (stat.isDirectory()) {
        if (entry === 'api') continue;
        walk(full, relPath);
      } else if (entry.endsWith('.tsx') || entry.endsWith('.ts') || entry.endsWith('.jsx') || entry.endsWith('.js')) {
        const base = path.basename(entry, path.extname(entry));
        if (base.startsWith('_')) continue;
        pages.push('/' + relPath
          .replace(/index\.(tsx|ts|jsx|js)$/,'')
          .replace(/\.(tsx|ts|jsx|js)$/,'')
          .replace(/\\/g,'/')
        );
      }
    }
  }
  if (fs.existsSync(baseDir)) walk(baseDir);
  return Array.from(new Set(pages.map(p => p.replace(/\/$/, '') || '/'))).sort();
}

function safeSlug(name) {
  return name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '').slice(0, 80);
}

function collectMetadata() {
  const items = [];
  if (!fs.existsSync(METADATA_DIR)) return items;
  for (const file of fs.readdirSync(METADATA_DIR)) {
    if (!file.endsWith('.json')) continue;
    const content = JSON.parse(fs.readFileSync(path.join(METADATA_DIR, file), 'utf8'));
    const base = path.basename(file, '.json');
    const slug = safeSlug(base);
    items.push({ file, slug, meta: content });
  }
  return items;
}

function main() {
  ensureDir(REPORT_DIR);
  ensureDir(PROPOSALS_DIR);

  const allPages = listPages(PAGES_DIR);
  const known = fs.existsSync(STATE_FILE) ? JSON.parse(fs.readFileSync(STATE_FILE, 'utf8')) : { createdRoutes: [] };
  const knownSet = new Set(known.createdRoutes || []);

  const metadataItems = collectMetadata();

  const desired = [];
  for (const item of metadataItems) {
    const candidate = `/auto/${item.slug}`;
    const exists = allPages.includes(candidate) || knownSet.has(candidate);
    if (!exists) {
      desired.push({
        route: candidate,
        slug: item.slug,
        title: item.meta.title || item.slug,
        description: item.meta.description || 'Auto-generated page',
        source: item.file
      });
    }
  }

  // Limit batch size to avoid flooding; propose up to 5 at a time
  const batch = desired.slice(0, 5);

  const actions = [];
  if (batch.length > 0) {
    actions.push('generate_new_app_pages');
    actions.push('update_navigation_for_app_growth');
    actions.push('update_homepage_with_feature_sections');
    actions.push('advertise_new_features_in_home');
    actions.push('update_sitemap_after_new_pages');
  } else {
    actions.push('update_homepage_with_feature_sections');
    actions.push('advertise_new_features_in_home');
  }

  const report = {
    timestamp: new Date().toISOString(),
    discoveredPages: allPages,
    proposedPages: batch,
    actions
  };
  fs.writeFileSync(path.join(REPORT_DIR, 'app-growth-actions.json'), JSON.stringify(report, null, 2));

  const proposal = [
    '# App Growth Proposal',
    '',
    `Generated at: ${new Date().toISOString()}`,
    '',
    '## Proposed New Pages',
    ...(batch.length ? batch.map(p => `- ${p.route} (${p.title}) from ${p.source}`) : ['(none)']),
    '',
    '## Planned Homepage & Navigation Updates',
    '- Add navigation links for new pages',
    '- Add a New Features section on Enhanced Home',
    '- Add promotional badges and CTAs',
    '- Update sitemap'
  ].join('\n');
  fs.writeFileSync(path.join(PROPOSALS_DIR, `proposal-${Date.now()}.md`), proposal);

  // Do not mark as known until actually generated by agents; keep state as is
  fs.writeFileSync(STATE_FILE, JSON.stringify({ createdRoutes: Array.from(knownSet) }, null, 2));

  console.log(`App-growth analyzer: ${actions.length} action(s), ${batch.length} proposed page(s)`);
}

main();