const fs = require('fs');
const path = require('path');

function forecast({ circulation, globalQuorumPct, regions, regionalFloorPct }) {
  const globalRequired = Math.ceil(circulation * globalQuorumPct);
  const perRegion = regions.map((r) => ({
    region: r,
    minVotes: Math.ceil(circulation * regionalFloorPct),
  }));
  return { globalRequired, perRegion };
}

(function main() {
  const startedAt = new Date().toISOString();
  const params = { circulation: 100000000, globalQuorumPct: 0.1, regions: ['LATAM','MENA','EU','APAC'], regionalFloorPct: 0.02 };
  const result = forecast(params);

  const docsDir = path.resolve(__dirname, '../../../docs');
  fs.mkdirSync(docsDir, { recursive: true });
  const mdPath = path.join(docsDir, 'governance-quorum-forecast.md');
  const md = [
    '# Governance Quorum Forecast',
    '',
    `Global required votes: ${result.globalRequired.toLocaleString()}`,
    '',
    'Regional floors:',
    ...result.perRegion.map(r => `- ${r.region}: ${r.minVotes.toLocaleString()}`),
    '',
    '_Generated by Cloud Automations_'
  ].join('\n');
  fs.writeFileSync(mdPath, md);

  const status = {
    name: 'Governance Quorum Forecaster',
    key: 'governance-quorum-forecaster',
    startedAt,
    finishedAt: new Date().toISOString(),
    success: true,
    metrics: { output: '/docs/governance-quorum-forecast.md', globalRequired: result.globalRequired },
    error: null,
  };
  const outDir = path.resolve(__dirname, '../../../data/cloud-automations');
  fs.mkdirSync(outDir, { recursive: true });
  fs.writeFileSync(path.join(outDir, 'governance-quorum-forecaster.json'), JSON.stringify(status, null, 2));
  console.log('[governance-quorum-forecaster] ok');
})();