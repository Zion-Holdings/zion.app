#!/usr/bin/env node
<<<<<<< HEAD

/**
 * Comprehensive Automation Orchestrator
 * Provides redundancy and orchestration for all PM2, GitHub Actions, and Netlify Functions automations
 * 
 * This system ensures:
 * - All automations are running and healthy
 * - Automatic recovery from failures
 * - Comprehensive monitoring and reporting
 * - Fallback mechanisms for critical services
 */

const fs = require('fs');
const path = require('path');
const { exec, execSync } = require('child_process');
const cron = require('node-cron');

class ComprehensiveAutomationOrchestrator {
    constructor() {
        this.config = {
            checkInterval: 45000, // 45 seconds
            healthCheckInterval: 90000, // 1.5 minutes
            recoveryTimeout: 300000, // 5 minutes
            maxRetries: 3,
            retryDelay: 10000, // 10 seconds
            logDir: path.join(__dirname, 'logs'),
            pidFile: path.join(__dirname, 'comprehensive-automation-orchestrator.pid'),
            statusFile: path.join(__dirname, 'comprehensive-automation-orchestrator-status.json'),
            backupDir: path.join(__dirname, 'backups', 'automation')
        };
        
        this.status = {
            started: new Date().toISOString(),
            lastHealthCheck: null,
            automations: {
                pm2: {
                    healthy: false,
                    processes: [],
                    ecosystemFiles: [],
                    lastCheck: null,
                    errors: []
                },
                githubActions: {
                    healthy: false,
                    workflows: [],
                    lastCheck: null,
                    errors: []
                },
                netlifyFunctions: {
                    healthy: false,
                    functions: [],
                    manifest: null,
                    lastCheck: null,
                    errors: []
                },
                scripts: {
                    healthy: false,
                    scripts: [],
                    lastCheck: null,
                    errors: []
                }
            },
            recoveryAttempts: 0,
            totalRecoveries: 0,
            systemHealth: 'unknown',
            errors: []
        };
        
        this.recoveryQueue = [];
        this.isRecovering = false;
        this.healthCheckTimer = null;
        this.mainTimer = null;
        
        this.ensureDirectories();
        this.loadStatus();
        this.discoverAutomations();
    }
    
    ensureDirectories() {
        if (!fs.existsSync(this.config.logDir)) {
            fs.mkdirSync(this.config.logDir, { recursive: true });
        }
        if (!fs.existsSync(this.config.backupDir)) {
            fs.mkdirSync(this.config.backupDir, { recursive: true });
        }
    }
    
    log(level, message, data = null) {
        const timestamp = new Date().toISOString();
        const logEntry = {
            timestamp,
            level,
            message,
            data
        };
        
        console.log(`[${timestamp}] [${level}] ${message}`);
        
        // Write to log file
        const logFile = path.join(this.config.logDir, 'comprehensive-automation-orchestrator.log');
        fs.appendFileSync(logFile, JSON.stringify(logEntry) + '\n');
        
        // Update status
        if (level === 'ERROR') {
            this.status.errors.push(logEntry);
            if (this.status.errors.length > 100) {
                this.status.errors = this.status.errors.slice(-100);
            }
        }
    }
    
    loadStatus() {
        try {
            if (fs.existsSync(this.config.statusFile)) {
                const savedStatus = JSON.parse(fs.readFileSync(this.config.statusFile, 'utf8'));
                this.status = { ...this.status, ...savedStatus };
                this.log('INFO', 'Status loaded from file');
            }
        } catch (error) {
            this.log('WARN', 'Could not load status file', error.message);
        }
    }
    
    saveStatus() {
        try {
            this.status.lastHealthCheck = new Date().toISOString();
            fs.writeFileSync(this.config.statusFile, JSON.stringify(this.status, null, 2));
        } catch (error) {
            this.log('ERROR', 'Could not save status file', error.message);
        }
    }
    
    discoverAutomations() {
        this.log('INFO', 'Discovering automations...');
        
        // Discover PM2 ecosystem files
        this.discoverPM2Ecosystems();
        
        // Discover GitHub Actions workflows
        this.discoverGitHubActionsWorkflows();
        
        // Discover Netlify Functions
        this.discoverNetlifyFunctions();
        
        // Discover automation scripts
        this.discoverAutomationScripts();
        
        this.log('INFO', 'Automation discovery completed');
    }
    
    discoverPM2Ecosystems() {
        try {
            const workspaceDir = path.join(__dirname, '..');
            const ecosystemFiles = fs.readdirSync(workspaceDir)
                .filter(file => file.startsWith('ecosystem') && file.endsWith('.cjs'));
            
            this.status.automations.pm2.ecosystemFiles = ecosystemFiles.map(file => ({
                name: file,
                path: path.join(workspaceDir, file),
                lastModified: fs.statSync(path.join(workspaceDir, file)).mtime.toISOString()
            }));
            
            this.log('INFO', `Discovered ${ecosystemFiles.length} PM2 ecosystem files`);
        } catch (error) {
            this.log('ERROR', 'Failed to discover PM2 ecosystems', error.message);
        }
    }
    
    discoverGitHubActionsWorkflows() {
        try {
            const workflowsDir = path.join(__dirname, '..', '.github', 'workflows');
            if (!fs.existsSync(workflowsDir)) {
                this.log('WARN', 'GitHub Actions workflows directory not found');
                return;
            }
            
            const workflowFiles = fs.readdirSync(workflowsDir).filter(f => f.endsWith('.yml'));
            this.status.automations.githubActions.workflows = workflowFiles.map(file => ({
                name: file,
                path: path.join(workflowsDir, file),
                lastModified: fs.statSync(path.join(workflowsDir, file)).mtime.toISOString()
            }));
            
            this.log('INFO', `Discovered ${workflowFiles.length} GitHub Actions workflows`);
        } catch (error) {
            this.log('ERROR', 'Failed to discover GitHub Actions workflows', error.message);
        }
    }
    
    discoverNetlifyFunctions() {
        try {
            const functionsDir = path.join(__dirname, '..', 'netlify', 'functions');
            if (!fs.existsSync(functionsDir)) {
                this.log('WARN', 'Netlify Functions directory not found');
                return;
            }
            
            const manifestPath = path.join(functionsDir, 'functions-manifest.json');
            if (fs.existsSync(manifestPath)) {
                const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
                this.status.automations.netlifyFunctions.manifest = manifest;
                this.status.automations.netlifyFunctions.functions = manifest.functions || [];
            }
            
            this.log('INFO', `Discovered ${this.status.automations.netlifyFunctions.functions.length} Netlify Functions`);
        } catch (error) {
            this.log('ERROR', 'Failed to discover Netlify Functions', error.message);
        }
    }
    
    discoverAutomationScripts() {
        try {
            const automationDir = __dirname;
            const scriptFiles = fs.readdirSync(automationDir)
                .filter(file => file.endsWith('.cjs') || file.endsWith('.js'))
                .filter(file => !file.includes('test') && !file.includes('example'));
            
            this.status.automations.scripts.scripts = scriptFiles.map(file => ({
                name: file,
                path: path.join(automationDir, file),
                lastModified: fs.statSync(path.join(automationDir, file)).mtime.toISOString()
            }));
            
            this.log('INFO', `Discovered ${scriptFiles.length} automation scripts`);
        } catch (error) {
            this.log('ERROR', 'Failed to discover automation scripts', error.message);
        }
    }
    
    async checkPM2Health() {
        try {
            this.log('INFO', 'Checking PM2 health...');
            
            // Check if PM2 is running
            const pm2Status = execSync('pm2 status --json', { encoding: 'utf8' });
            const pm2Data = JSON.parse(pm2Status);
            
            this.status.automations.pm2.processes = pm2Data.map(proc => ({
                name: proc.name,
                status: proc.pm2_env.status,
                pm_id: proc.pm_id,
                pm_cwd: proc.pm2_env.pm_cwd,
                restart_time: proc.pm2_env.restart_time,
                uptime: proc.pm2_env.pm_uptime,
                memory: proc.monit.memory,
                cpu: proc.monit.cpu
            }));
            
            // Check if all processes are online
            const offlineProcesses = this.status.automations.pm2.processes.filter(p => p.status !== 'online');
            this.status.automations.pm2.healthy = offlineProcesses.length === 0;
            this.status.automations.pm2.lastCheck = new Date().toISOString();
            
            if (!this.status.automations.pm2.healthy) {
                this.log('WARN', `PM2 health check failed: ${offlineProcesses.length} processes offline`);
                offlineProcesses.forEach(proc => {
                    this.log('WARN', `Process ${proc.name} is ${proc.status}`);
                });
                
                // Queue recovery for offline processes
                offlineProcesses.forEach(proc => {
                    this.queueRecovery('pm2', proc);
                });
            } else {
                this.log('INFO', 'PM2 health check passed');
            }
            
        } catch (error) {
            this.log('ERROR', 'PM2 health check failed', error.message);
            this.status.automations.pm2.healthy = false;
            this.status.automations.pm2.lastCheck = new Date().toISOString();
            this.status.automations.pm2.errors.push(error.message);
            
            // Try to start PM2 if it's not running
            this.queueRecovery('pm2', { name: 'pm2-daemon', error: error.message });
        }
    }
    
    async checkGitHubActionsHealth() {
        try {
            this.log('INFO', 'Checking GitHub Actions health...');
            
            if (this.status.automations.githubActions.workflows.length === 0) {
                this.log('WARN', 'No GitHub Actions workflows found');
                this.status.automations.githubActions.healthy = false;
                return;
            }
            
            // Check if workflows are valid YAML
            let validWorkflows = 0;
            for (const workflow of this.status.automations.githubActions.workflows) {
                try {
                    const content = fs.readFileSync(workflow.path, 'utf8');
                    // Basic YAML validation
                    if (content.includes('name:') && content.includes('on:') && content.includes('jobs:')) {
                        validWorkflows++;
                    } else {
                        this.log('WARN', `Workflow ${workflow.name} appears to be invalid`);
                    }
                } catch (error) {
                    this.log('ERROR', `Could not read workflow ${workflow.name}`, error.message);
                }
            }
            
            this.status.automations.githubActions.healthy = validWorkflows === this.status.automations.githubActions.workflows.length;
            this.status.automations.githubActions.lastCheck = new Date().toISOString();
            
            if (!this.status.automations.githubActions.healthy) {
                this.log('WARN', 'GitHub Actions health check failed');
                this.queueRecovery('githubActions', { error: 'Invalid workflows detected' });
            } else {
                this.log('INFO', 'GitHub Actions health check passed');
            }
            
        } catch (error) {
            this.log('ERROR', 'GitHub Actions health check failed', error.message);
            this.status.automations.githubActions.healthy = false;
            this.status.automations.githubActions.lastCheck = new Date().toISOString();
            this.status.automations.githubActions.errors.push(error.message);
        }
    }
    
    async checkNetlifyFunctionsHealth() {
        try {
            this.log('INFO', 'Checking Netlify Functions health...');
            
            if (this.status.automations.netlifyFunctions.functions.length === 0) {
                this.log('WARN', 'No Netlify Functions found');
                this.status.automations.netlifyFunctions.healthy = false;
                return;
            }
            
            // Check if manifest is recent (within last hour)
            if (this.status.automations.netlifyFunctions.manifest) {
                const manifestAge = Date.now() - new Date(this.status.automations.netlifyFunctions.manifest.generatedAt).getTime();
                const isRecent = manifestAge < 3600000; // 1 hour
                
                this.status.automations.netlifyFunctions.healthy = isRecent;
                this.status.automations.netlifyFunctions.lastCheck = new Date().toISOString();
                
                if (!isRecent) {
                    this.log('WARN', 'Netlify Functions manifest is outdated');
                    this.queueRecovery('netlifyFunctions', { error: 'Manifest outdated' });
                } else {
                    this.log('INFO', 'Netlify Functions health check passed');
                }
            } else {
                this.status.automations.netlifyFunctions.healthy = false;
                this.queueRecovery('netlifyFunctions', { error: 'No manifest found' });
            }
            
        } catch (error) {
            this.log('ERROR', 'Netlify Functions health check failed', error.message);
            this.status.automations.netlifyFunctions.healthy = false;
            this.status.automations.netlifyFunctions.lastCheck = new Date().toISOString();
            this.status.automations.netlifyFunctions.errors.push(error.message);
        }
    }
    
    async checkScriptsHealth() {
        try {
            this.log('INFO', 'Checking automation scripts health...');
            
            if (this.status.automations.scripts.scripts.length === 0) {
                this.log('WARN', 'No automation scripts found');
                this.status.automations.scripts.healthy = false;
                return;
            }
            
            // Check if scripts are valid JavaScript
            let validScripts = 0;
            for (const script of this.status.automations.scripts.scripts) {
                try {
                    // Basic syntax check
                    execSync(`node -c "${script.path}"`, { stdio: 'pipe' });
                    validScripts++;
                } catch (error) {
                    this.log('WARN', `Script ${script.name} has syntax errors`);
                }
            }
            
            this.status.automations.scripts.healthy = validScripts === this.status.automations.scripts.scripts.length;
            this.status.automations.scripts.lastCheck = new Date().toISOString();
            
            if (!this.status.automations.scripts.healthy) {
                this.log('WARN', 'Automation scripts health check failed');
                this.queueRecovery('scripts', { error: 'Invalid scripts detected' });
            } else {
                this.log('INFO', 'Automation scripts health check passed');
            }
            
        } catch (error) {
            this.log('ERROR', 'Automation scripts health check failed', error.message);
            this.status.automations.scripts.healthy = false;
            this.status.automations.scripts.lastCheck = new Date().toISOString();
            this.status.automations.scripts.errors.push(error.message);
        }
    }
    
    async performHealthCheck() {
        this.log('INFO', 'Starting comprehensive health check...');
        
        await Promise.all([
            this.checkPM2Health(),
            this.checkGitHubActionsHealth(),
            this.checkNetlifyFunctionsHealth(),
            this.checkScriptsHealth()
        ]);
        
        // Calculate overall system health
        const overallHealth = this.status.automations.pm2.healthy && 
                             this.status.automations.githubActions.healthy && 
                             this.status.automations.netlifyFunctions.healthy &&
                             this.status.automations.scripts.healthy;
        
        this.status.systemHealth = overallHealth ? 'healthy' : 'unhealthy';
        
        this.saveStatus();
        this.log('INFO', 'Health check completed');
    }
    
    queueRecovery(type, target) {
        const recovery = {
            id: Date.now() + Math.random(),
            type,
            target,
            timestamp: new Date().toISOString(),
            attempts: 0,
            maxAttempts: this.config.maxRetries
        };
        
        this.recoveryQueue.push(recovery);
        this.log('INFO', `Recovery queued for ${type}`, recovery);
        
        // Process recovery queue if not already processing
        if (!this.isRecovering) {
            this.processRecoveryQueue();
        }
    }
    
    async processRecoveryQueue() {
        if (this.isRecovering || this.recoveryQueue.length === 0) {
            return;
        }
        
        this.isRecovering = true;
        this.log('INFO', `Processing recovery queue (${this.recoveryQueue.length} items)`);
        
        while (this.recoveryQueue.length > 0 && this.status.recoveryAttempts < 2) {
            const recovery = this.recoveryQueue.shift();
            this.status.recoveryAttempts++;
            
            try {
                await this.performRecovery(recovery);
            } catch (error) {
                this.log('ERROR', `Recovery failed for ${recovery.type}`, error.message);
                
                // Re-queue if max attempts not reached
                if (recovery.attempts < recovery.maxAttempts) {
                    recovery.attempts++;
                    recovery.timestamp = new Date().toISOString();
                    this.recoveryQueue.push(recovery);
                }
            }
            
            this.status.recoveryAttempts--;
        }
        
        this.isRecovering = false;
        
        if (this.recoveryQueue.length > 0) {
            this.log('INFO', `${this.recoveryQueue.length} recoveries still queued`);
            // Schedule next processing
            setTimeout(() => this.processRecoveryQueue(), this.config.retryDelay);
        }
    }
    
    async performRecovery(recovery) {
        this.log('INFO', `Performing recovery for ${recovery.type}`, recovery);
        
        switch (recovery.type) {
            case 'pm2':
                await this.recoverPM2(recovery.target);
                break;
            case 'githubActions':
                await this.recoverGitHubActions(recovery.target);
                break;
            case 'netlifyFunctions':
                await this.recoverNetlifyFunctions(recovery.target);
                break;
            case 'scripts':
                await this.recoverScripts(recovery.target);
                break;
            default:
                this.log('WARN', `Unknown recovery type: ${recovery.type}`);
        }
        
        this.status.totalRecoveries++;
        this.saveStatus();
    }
    
    async recoverPM2(target) {
        try {
            if (target.name === 'pm2-daemon') {
                // PM2 daemon is down, try to restart
                this.log('INFO', 'Restarting PM2 daemon...');
                execSync('pm2 kill', { stdio: 'pipe' });
                
                // Try to start with the main ecosystem file
                const mainEcosystem = this.status.automations.pm2.ecosystemFiles.find(f => f.name === 'ecosystem.pm2.cjs');
                if (mainEcosystem) {
                    execSync(`pm2 start ${mainEcosystem.path}`, { stdio: 'pipe' });
                } else {
                    execSync('pm2 start ecosystem.pm2.cjs', { stdio: 'pipe' });
                }
            } else {
                // Individual process is down, restart it
                this.log('INFO', `Restarting PM2 process: ${target.name}`);
                execSync(`pm2 restart ${target.name}`, { stdio: 'pipe' });
            }
            
            this.log('INFO', `PM2 recovery completed for ${target.name}`);
        } catch (error) {
            this.log('ERROR', `PM2 recovery failed for ${target.name}`, error.message);
            throw error;
        }
    }
    
    async recoverGitHubActions(target) {
        try {
            this.log('INFO', 'Recovering GitHub Actions workflows...');
            
            // Backup current workflows
            const workflowsDir = path.join(__dirname, '..', '.github', 'workflows');
            const backupDir = path.join(this.config.backupDir, 'workflows', new Date().toISOString().split('T')[0]);
            
            if (!fs.existsSync(backupDir)) {
                fs.mkdirSync(backupDir, { recursive: true });
            }
            
            const workflowFiles = fs.readdirSync(workflowsDir).filter(f => f.endsWith('.yml'));
            for (const file of workflowFiles) {
                const source = path.join(workflowsDir, file);
                const backup = path.join(backupDir, file);
                fs.copyFileSync(source, backup);
            }
            
            this.log('INFO', 'GitHub Actions recovery completed');
        } catch (error) {
            this.log('ERROR', 'GitHub Actions recovery failed', error.message);
            throw error;
        }
    }
    
    async recoverNetlifyFunctions(target) {
        try {
            this.log('INFO', 'Recovering Netlify Functions...');
            
            // Regenerate functions manifest
            const manifestScript = path.join(__dirname, '..', 'scripts', 'generate-netlify-functions-manifest.cjs');
            if (fs.existsSync(manifestScript)) {
                execSync(`node ${manifestScript}`, { stdio: 'pipe' });
                this.log('INFO', 'Netlify Functions manifest regenerated');
            }
            
            this.log('INFO', 'Netlify Functions recovery completed');
        } catch (error) {
            this.log('ERROR', 'Netlify Functions recovery failed', error.message);
            throw error;
        }
    }
    
    async recoverScripts(target) {
        try {
            this.log('INFO', 'Recovering automation scripts...');
            
            // Backup current scripts
            const backupDir = path.join(this.config.backupDir, 'scripts', new Date().toISOString().split('T')[0]);
            if (!fs.existsSync(backupDir)) {
                fs.mkdirSync(backupDir, { recursive: true });
            }
            
            for (const script of this.status.automations.scripts.scripts) {
                const source = script.path;
                const backup = path.join(backupDir, script.name);
                fs.copyFileSync(source, backup);
            }
            
            this.log('INFO', 'Automation scripts recovery completed');
        } catch (error) {
            this.log('ERROR', 'Automation scripts recovery failed', error.message);
            throw error;
        }
    }
    
    start() {
        this.log('INFO', 'Starting Comprehensive Automation Orchestrator...');
        
        // Write PID file
        fs.writeFileSync(this.config.pidFile, process.pid.toString());
        
        // Start health check timer
        this.healthCheckTimer = setInterval(() => {
            this.performHealthCheck();
        }, this.config.healthCheckInterval);
        
        // Start main monitoring timer
        this.mainTimer = setInterval(() => {
            this.monitor();
        }, this.config.checkInterval);
        
        // Perform initial health check
        this.performHealthCheck();
        
        this.log('INFO', 'Comprehensive Automation Orchestrator started successfully');
        
        // Handle graceful shutdown
        process.on('SIGINT', () => this.shutdown());
        process.on('SIGTERM', () => this.shutdown());
    }
    
    async monitor() {
        try {
            // Check overall system health
            if (this.status.systemHealth === 'unhealthy') {
                this.log('WARN', 'System health check failed, triggering recovery...');
                // Trigger comprehensive recovery
                if (!this.status.automations.pm2.healthy) {
                    this.queueRecovery('pm2', { name: 'system-wide', error: 'PM2 health check failed' });
                }
                if (!this.status.automations.githubActions.healthy) {
                    this.queueRecovery('githubActions', { error: 'GitHub Actions health check failed' });
                }
                if (!this.status.automations.netlifyFunctions.healthy) {
                    this.queueRecovery('netlifyFunctions', { error: 'Netlify Functions health check failed' });
                }
                if (!this.status.automations.scripts.healthy) {
                    this.queueRecovery('scripts', { error: 'Scripts health check failed' });
                }
            }
            
            // Process recovery queue
            if (this.recoveryQueue.length > 0) {
                this.processRecoveryQueue();
            }
            
        } catch (error) {
            this.log('ERROR', 'Monitoring error', error.message);
        }
    }
    
    async shutdown() {
        this.log('INFO', 'Shutting down Comprehensive Automation Orchestrator...');
        
        // Clear timers
        if (this.healthCheckTimer) {
            clearInterval(this.healthCheckTimer);
        }
        if (this.mainTimer) {
            clearInterval(this.mainTimer);
        }
        
        // Remove PID file
        if (fs.existsSync(this.config.pidFile)) {
            fs.unlinkSync(this.config.pidFile);
        }
        
        // Save final status
        this.saveStatus();
        
        this.log('INFO', 'Comprehensive Automation Orchestrator shutdown complete');
        process.exit(0);
    }
    
    getStatus() {
        return {
            ...this.status,
            recoveryQueueLength: this.recoveryQueue.length,
            isRecovering: this.isRecovering,
            uptime: Date.now() - new Date(this.status.started).getTime()
        };
    }
    
    generateReport() {
        const report = {
            timestamp: new Date().toISOString(),
            system: 'Comprehensive Automation Orchestrator',
            status: this.getStatus(),
            summary: {
                overallHealth: this.status.systemHealth,
                pm2Processes: this.status.automations.pm2.processes.length,
                githubWorkflows: this.status.automations.githubActions.workflows.length,
                netlifyFunctions: this.status.automations.netlifyFunctions.functions.length,
                automationScripts: this.status.automations.scripts.scripts.length,
                totalRecoveries: this.status.totalRecoveries,
                pendingRecoveries: this.recoveryQueue.length
            }
        };
        
        return report;
    }
}

// CLI interface
if (require.main === module) {
    const orchestrator = new ComprehensiveAutomationOrchestrator();
    
    const command = process.argv[2];
    
    switch (command) {
        case 'start':
            orchestrator.start();
            break;
        case 'status':
            console.log(JSON.stringify(orchestrator.getStatus(), null, 2));
            break;
        case 'report':
            console.log(JSON.stringify(orchestrator.generateReport(), null, 2));
            break;
        case 'health':
            orchestrator.performHealthCheck().then(() => {
                console.log('Health check completed');
                process.exit(0);
            }).catch(error => {
                console.error('Health check failed:', error);
                process.exit(1);
            });
            break;
        default:
            console.log('Usage: node comprehensive-automation-orchestrator.cjs [start|status|report|health]');
            process.exit(1);
    }
=======
"use strict";

const { spawnSync, execSync } = require("child_process");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");

class ComprehensiveAutomationOrchestrator {
  constructor() {
    this.config = {
      automation: {
        pm2: {
          ecosystems: [
            "ecosystem.pm2.cjs",
            "ecosystem.redundancy.cjs",
            "ecosystem.comprehensive-redundancy.cjs",
            "ecosystem.redundancy.pm2.cjs"
          ],
          processes: [
            "zion-auto-sync",
            "zion-auto-sync-cron",
            "redundancy-automation-system",
            "redundancy-health-monitor",
            "redundancy-git-sync",
            "redundancy-build-monitor",
            "master-redundancy-orchestrator",
            "enhanced-pm2-redundancy",
            "enhanced-github-actions-redundancy",
            "enhanced-netlify-functions-redundancy"
          ],
          healthCheckInterval: 20000,
          maxRestartAttempts: 8,
          restartDelay: 4000,
          autoRecovery: true,
          processMonitoring: true,
          logRotation: true
        },
        githubActions: {
          workflows: [
            ".github/workflows/marketing-sync.yml",
            ".github/workflows/sync-health.yml",
            ".github/workflows/marketing-sync-backup.yml",
            ".github/workflows/sync-health-backup.yml"
          ],
          healthCheckInterval: 45000,
          maxFailureThreshold: 4,
          autoTrigger: true,
          backupTriggers: true,
          workflowValidation: true,
          apiHealthCheck: true,
          fallbackScripts: [
            "automation/marketing-sync.js",
            "automation/git-sync.cjs",
            "automation/pm2-auto-sync.js"
          ]
        },
        netlifyFunctions: {
          manifestFile: "netlify/functions/functions-manifest.json",
          healthCheckInterval: 90000,
          maxFailureThreshold: 3,
          autoRegenerate: true,
          deploymentCheck: true,
          logRotation: true,
          functionCount: 100,
          criticalFunctions: [
            "netlify-auto-healer-runner",
            "continuous-orchestrator",
            "automation-matrix",
            "ai-trends-radar-runner",
            "content-freshness-score-runner"
          ]
        },
        npmScripts: {
          build: ["build", "build:heal", "build:smart", "build:auto-fix"],
          lint: ["lint", "fix:all", "type-check"],
          automation: ["automation:all", "redundancy:start", "git:sync"],
          monitoring: ["health:start", "build:monitor", "security:scan"]
        },
        logging: {
          logDir: "automation/logs",
          maxLogSize: 25 * 1024 * 1024,
          maxLogFiles: 60,
          compression: true,
          rotation: true
        },
        monitoring: {
          enabled: true,
          interval: 20000,
          alertThreshold: 4,
          autoRestart: true,
          loadBalancing: true,
          healthDashboard: true,
          performanceMetrics: true
        },
        recovery: {
          autoRecovery: true,
          maxRecoveryAttempts: 12,
          recoveryDelay: 4000,
          fallbackStrategies: true,
          backupSystems: true,
          intelligentRecovery: true
        }
      }
    };
    
    this.ensureLogDirectory();
    this.initializeMonitoring();
    this.startComprehensiveMonitoring();
  }

  ensureLogDirectory() {
    if (!fs.existsSync(this.config.automation.logging.logDir)) {
      fs.mkdirSync(this.config.automation.logging.logDir, { recursive: true });
    }
  }

  log(message, level = "INFO") {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${level}] ${message}`;
    console.log(logEntry);
    
    const logFile = path.join(this.config.automation.logging.logDir, `comprehensive-automation-${new Date().toISOString().split('T')[0]}.log`);
    fs.appendFileSync(logFile, logEntry + "\n");
  }

  async runCommand(command, args = [], options = {}) {
    return new Promise((resolve) => {
      const result = spawnSync(command, args, {
        cwd: process.cwd(),
        env: process.env,
        shell: false,
        encoding: "utf8",
        maxBuffer: 1024 * 1024 * 50,
        ...options
      });
      
      resolve({
        status: result.status,
        stdout: result.stdout || "",
        stderr: result.stderr || "",
        error: result.error
      });
    });
  }

  async checkPM2ComprehensiveHealth() {
    this.log("🔍 Checking comprehensive PM2 automation health...");
    
    try {
      const result = await this.runCommand("pm2", ["status", "--no-daemon"]);
      
      if (result.status !== 0) {
        this.log("❌ PM2 status check failed", "ERROR");
        return this.recoverPM2AutomationSystem();
      }

      const processes = this.config.automation.pm2.processes;
      let healthyCount = 0;
      let failedProcesses = [];

      for (const processName of processes) {
        try {
          const processResult = await this.runCommand("pm2", ["show", processName]);
          if (processResult.status === 0 && processResult.stdout.includes("online")) {
            healthyCount++;
          } else {
            failedProcesses.push(processName);
          }
        } catch (error) {
          failedProcesses.push(processName);
        }
      }

      this.log(`✅ PM2 Automation Health: ${healthyCount}/${processes.length} processes healthy`);

      if (failedProcesses.length > 0) {
        this.log(`⚠️ Failed automation processes: ${failedProcesses.join(", ")}`, "WARN");
        await this.recoverPM2AutomationProcesses(failedProcesses);
      }

      return healthyCount === processes.length;
    } catch (error) {
      this.log(`❌ PM2 automation health check error: ${error.message}`, "ERROR");
      return false;
    }
  }

  async recoverPM2AutomationSystem() {
    this.log("🔄 Attempting PM2 automation system recovery...");
    
    try {
      // Try to resurrect PM2
      await this.runCommand("pm2", ["resurrect"]);
      
      // Start comprehensive redundancy ecosystem
      await this.runCommand("pm2", ["start", "ecosystem.comprehensive-redundancy.cjs"]);
      
      // Save PM2 configuration
      await this.runCommand("pm2", ["save"]);
      
      this.log("✅ PM2 automation system recovery completed");
      return true;
    } catch (error) {
      this.log(`❌ PM2 automation recovery failed: ${error.message}`, "ERROR");
      return false;
    }
  }

  async recoverPM2AutomationProcesses(failedProcesses) {
    this.log(`🔄 Recovering ${failedProcesses.length} failed PM2 automation processes...`);
    
    for (const processName of failedProcesses) {
      try {
        await this.runCommand("pm2", ["restart", processName]);
        this.log(`✅ Restarted automation process ${processName}`);
      } catch (error) {
        this.log(`❌ Failed to restart ${processName}: ${error.message}`, "ERROR");
        
        // Try to start from ecosystem files
        for (const ecosystemFile of this.config.automation.pm2.ecosystems) {
          if (fs.existsSync(ecosystemFile)) {
            try {
              await this.runCommand("pm2", ["start", ecosystemFile, "--only", processName]);
              this.log(`✅ Started ${processName} from ${ecosystemFile}`);
              break;
            } catch (startError) {
              continue;
            }
          }
        }
      }
    }
  }

  async checkGitHubActionsComprehensiveHealth() {
    this.log("🔍 Checking comprehensive GitHub Actions automation health...");
    
    try {
      // Check workflow files exist and are valid
      for (const workflow of this.config.automation.githubActions.workflows) {
        if (!fs.existsSync(workflow)) {
          this.log(`⚠️ Missing workflow: ${workflow}`, "WARN");
          continue;
        }
        
        // Validate workflow syntax
        try {
          const workflowContent = fs.readFileSync(workflow, 'utf8');
          if (workflowContent.includes('name:') && workflowContent.includes('on:')) {
            this.log(`✅ Workflow ${workflow} is valid`);
          } else {
            this.log(`⚠️ Workflow ${workflow} may have syntax issues`, "WARN");
          }
        } catch (error) {
          this.log(`❌ Error reading workflow ${workflow}: ${error.message}`, "ERROR");
        }
      }

      // Check GitHub API connectivity
      try {
        const result = await this.runCommand("curl", ["-s", "-o", "/dev/null", "-w", "%{http_code}", "https://api.github.com"]);
        if (result.status === 0 && result.stdout === "200") {
          this.log("✅ GitHub API connectivity: OK");
        } else {
          this.log("⚠️ GitHub API connectivity: Issues detected", "WARN");
        }
      } catch (error) {
        this.log("❌ GitHub API connectivity check failed", "ERROR");
      }

      // Check fallback scripts
      for (const fallbackScript of this.config.automation.githubActions.fallbackScripts) {
        if (fs.existsSync(fallbackScript)) {
          this.log(`✅ Fallback script ${fallbackScript} exists`);
        } else {
          this.log(`⚠️ Fallback script ${fallbackScript} missing`, "WARN");
        }
      }

      return true;
    } catch (error) {
      this.log(`❌ GitHub Actions automation health check error: ${error.message}`, "ERROR");
      return false;
    }
  }

  async checkNetlifyFunctionsComprehensiveHealth() {
    this.log("🔍 Checking comprehensive Netlify Functions automation health...");
    
    try {
      if (!fs.existsSync(this.config.automation.netlifyFunctions.manifestFile)) {
        this.log("❌ Netlify functions manifest not found", "ERROR");
        return false;
      }

      const manifest = JSON.parse(fs.readFileSync(this.config.automation.netlifyFunctions.manifestFile, 'utf8'));
      
      if (manifest.functions && Array.isArray(manifest.functions)) {
        const functionCount = manifest.functions.length;
        this.log(`✅ Netlify Functions: ${functionCount} functions found`);
        
        if (functionCount < this.config.automation.netlifyFunctions.functionCount) {
          this.log(`⚠️ Function count below threshold: ${functionCount}/${this.config.automation.netlifyFunctions.functionCount}`, "WARN");
        }
        
        // Check for critical functions
        const criticalFunctions = this.config.automation.netlifyFunctions.criticalFunctions;
        
        for (const criticalFunc of criticalFunctions) {
          if (manifest.functions.includes(criticalFunc)) {
            this.log(`✅ Critical function ${criticalFunc}: OK`);
          } else {
            this.log(`⚠️ Critical function ${criticalFunc}: Missing`, "WARN");
          }
        }
      } else {
        this.log("❌ Invalid functions manifest format", "ERROR");
        return false;
      }

      return true;
    } catch (error) {
      this.log(`❌ Netlify Functions automation health check error: ${error.message}`, "ERROR");
      return false;
    }
  }

  async checkNpmScriptsHealth() {
    this.log("🔍 Checking npm scripts automation health...");
    
    try {
      const packageJsonPath = "package.json";
      if (!fs.existsSync(packageJsonPath)) {
        this.log("❌ package.json not found", "ERROR");
        return false;
      }

      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      const scripts = packageJson.scripts || {};
      
      let healthyCount = 0;
      let totalCount = 0;
      
      // Check build scripts
      for (const buildScript of this.config.automation.npmScripts.build) {
        if (scripts[buildScript]) {
          this.log(`✅ Build script ${buildScript}: OK`);
          healthyCount++;
        } else {
          this.log(`⚠️ Build script ${buildScript}: Missing`, "WARN");
        }
        totalCount++;
      }
      
      // Check lint scripts
      for (const lintScript of this.config.automation.npmScripts.lint) {
        if (scripts[lintScript]) {
          this.log(`✅ Lint script ${lintScript}: OK`);
          healthyCount++;
        } else {
          this.log(`⚠️ Lint script ${lintScript}: Missing`, "WARN");
        }
        totalCount++;
      }
      
      // Check automation scripts
      for (const autoScript of this.config.automation.npmScripts.automation) {
        if (scripts[autoScript]) {
          this.log(`✅ Automation script ${autoScript}: OK`);
          healthyCount++;
        } else {
          this.log(`⚠️ Automation script ${autoScript}: Missing`, "WARN");
        }
        totalCount++;
      }
      
      // Check monitoring scripts
      for (const monitorScript of this.config.automation.npmScripts.monitoring) {
        if (scripts[monitorScript]) {
          this.log(`✅ Monitoring script ${monitorScript}: OK`);
          healthyCount++;
        } else {
          this.log(`⚠️ Monitoring script ${monitorScript}: Missing`, "WARN");
        }
        totalCount++;
      }

      this.log(`✅ NPM Scripts Health: ${healthyCount}/${totalCount} scripts healthy`);
      return healthyCount === totalCount;
    } catch (error) {
      this.log(`❌ NPM scripts health check error: ${error.message}`, "ERROR");
      return false;
    }
  }

  async performComprehensiveAutomationHealthCheck() {
    this.log("🚀 Starting comprehensive automation health check...");
    
    const results = {
      pm2: await this.checkPM2ComprehensiveHealth(),
      githubActions: await this.checkGitHubActionsComprehensiveHealth(),
      netlifyFunctions: await this.checkNetlifyFunctionsComprehensiveHealth(),
      npmScripts: await this.checkNpmScriptsHealth(),
      timestamp: new Date().toISOString()
    };

    const overallHealth = results.pm2 && results.githubActions && results.netlifyFunctions && results.npmScripts;
    
    this.log(`📊 Comprehensive Automation Health Status: ${overallHealth ? '✅ HEALTHY' : '❌ UNHEALTHY'}`);
    this.log(`   PM2: ${results.pm2 ? '✅' : '❌'}`);
    this.log(`   GitHub Actions: ${results.githubActions ? '✅' : '❌'}`);
    this.log(`   Netlify Functions: ${results.netlifyFunctions ? '✅' : '❌'}`);
    this.log(`   NPM Scripts: ${results.npmScripts ? '✅' : '❌'}`);

    if (!overallHealth) {
      this.log("🔄 Initiating comprehensive automation recovery procedures...");
      await this.performComprehensiveAutomationRecovery(results);
    }

    return results;
  }

  async performComprehensiveAutomationRecovery(healthResults) {
    this.log("🔄 Starting comprehensive automation recovery...");
    
    if (!healthResults.pm2) {
      await this.recoverPM2AutomationSystem();
    }
    
    if (!healthResults.githubActions) {
      this.log("🔄 GitHub Actions recovery: Manual intervention may be required");
      // Try to restore from backups
      await this.restoreGitHubActionsWorkflows();
    }
    
    if (!healthResults.netlifyFunctions) {
      this.log("🔄 Netlify Functions recovery: Regenerating manifest...");
      try {
        await this.runCommand("npm", ["run", "netlify:manifest"]);
        this.log("✅ Netlify functions manifest regenerated");
      } catch (error) {
        this.log(`❌ Failed to regenerate manifest: ${error.message}`, "ERROR");
      }
    }
    
    if (!healthResults.npmScripts) {
      this.log("🔄 NPM Scripts recovery: Checking package.json integrity...");
      await this.validatePackageJson();
    }
  }

  async restoreGitHubActionsWorkflows() {
    this.log("🔄 Attempting to restore GitHub Actions workflows from backups...");
    
    const backupMappings = [
      { backup: ".github/workflows/marketing-sync-backup.yml", original: ".github/workflows/marketing-sync.yml" },
      { backup: ".github/workflows/sync-health-backup.yml", original: ".github/workflows/sync-health.yml" }
    ];
    
    for (const mapping of backupMappings) {
      if (fs.existsSync(mapping.backup) && !fs.existsSync(mapping.original)) {
        try {
          fs.copyFileSync(mapping.backup, mapping.original);
          this.log(`✅ Restored ${mapping.original} from backup`);
        } catch (error) {
          this.log(`❌ Failed to restore ${mapping.original}: ${error.message}`, "ERROR");
        }
      }
    }
  }

  async validatePackageJson() {
    this.log("🔍 Validating package.json integrity...");
    
    try {
      const packageJsonPath = "package.json";
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      
      // Check for required fields
      const requiredFields = ['name', 'version', 'scripts', 'dependencies'];
      for (const field of requiredFields) {
        if (!packageJson[field]) {
          this.log(`⚠️ Missing required field: ${field}`, "WARN");
        }
      }
      
      // Check for critical scripts
      const criticalScripts = ['build', 'dev', 'start'];
      for (const script of criticalScripts) {
        if (!packageJson.scripts[script]) {
          this.log(`⚠️ Missing critical script: ${script}`, "WARN");
        }
      }
      
      this.log("✅ Package.json validation completed");
    } catch (error) {
      this.log(`❌ Package.json validation failed: ${error.message}`, "ERROR");
    }
  }

  async startComprehensiveMonitoring() {
    this.log("🚀 Starting comprehensive automation monitoring...");
    
    setInterval(async () => {
      await this.performComprehensiveAutomationHealthCheck();
    }, this.config.automation.monitoring.interval);

    // Initial health check
    await this.performComprehensiveAutomationHealthCheck();
  }

  initializeMonitoring() {
    this.log("🔧 Initializing comprehensive automation monitoring system...");
    
    // Ensure PM2 is running
    try {
      execSync("pm2 ping", { stdio: 'pipe' });
      this.log("✅ PM2 daemon is running");
    } catch (error) {
      this.log("⚠️ PM2 daemon not running, attempting to start...");
      try {
        execSync("pm2 start", { stdio: 'pipe' });
        this.log("✅ PM2 daemon started");
      } catch (startError) {
        this.log(`❌ Failed to start PM2 daemon: ${startError.message}`, "ERROR");
      }
    }
  }

  async generateAutomationHealthReport() {
    const healthResults = await this.performComprehensiveAutomationHealthCheck();
    
    const report = {
      timestamp: new Date().toISOString(),
      overallHealth: healthResults.pm2 && healthResults.githubActions && healthResults.netlifyFunctions && healthResults.npmScripts,
      systems: {
        pm2: {
          status: healthResults.pm2 ? 'HEALTHY' : 'UNHEALTHY',
          processes: this.config.automation.pm2.processes.length,
          ecosystems: this.config.automation.pm2.ecosystems
        },
        githubActions: {
          status: healthResults.githubActions ? 'HEALTHY' : 'UNHEALTHY',
          workflows: this.config.automation.githubActions.workflows,
          fallbackScripts: this.config.automation.githubActions.fallbackScripts
        },
        netlifyFunctions: {
          status: healthResults.netlifyFunctions ? 'HEALTHY' : 'UNHEALTHY',
          manifestFile: this.config.automation.netlifyFunctions.manifestFile,
          criticalFunctions: this.config.automation.netlifyFunctions.criticalFunctions
        },
        npmScripts: {
          status: healthResults.npmScripts ? 'HEALTHY' : 'UNHEALTHY',
          buildScripts: this.config.automation.npmScripts.build,
          automationScripts: this.config.automation.npmScripts.automation
        }
      },
      monitoring: {
        interval: this.config.automation.monitoring.interval,
        autoRecovery: this.config.automation.monitoring.autoRestart,
        loadBalancing: this.config.automation.monitoring.loadBalancing
      }
    };

    const reportFile = path.join(this.config.automation.logging.logDir, `comprehensive-automation-report-${new Date().toISOString().split('T')[0]}.json`);
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
    
    this.log(`📊 Automation health report generated: ${reportFile}`);
    return report;
  }
}

// CLI Interface
if (require.main === module) {
  const orchestrator = new ComprehensiveAutomationOrchestrator();
  
  const command = process.argv[2];
  
  switch (command) {
    case 'start':
      orchestrator.log("🚀 Comprehensive Automation Orchestrator started");
      break;
    case 'health':
      orchestrator.performComprehensiveAutomationHealthCheck();
      break;
    case 'report':
      orchestrator.generateAutomationHealthReport();
      break;
    case 'recover':
      orchestrator.performComprehensiveAutomationRecovery({ pm2: false, githubActions: false, netlifyFunctions: false, npmScripts: false });
      break;
    default:
      orchestrator.log("Usage: node comprehensive-automation-orchestrator.cjs [start|health|report|recover]");
      orchestrator.log("Starting in monitoring mode...");
      break;
  }
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b
}

module.exports = ComprehensiveAutomationOrchestrator;