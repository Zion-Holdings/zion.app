#!/usr/bin/env node
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();

function walk(dir) {
  const out = [];
  for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
    const full = path.join(dir, e.name);
    if (e.isDirectory()) out.push(...walk(full));
    else out.push(full);
  }
  return out;
}

function isMarkdown(file) {
  return /\.(md|mdx)$/i.test(file);
}

function findLinks(content) {
  const links = [];
  const regex = /\[[^\]]+\]\(([^)]+)\)/g;
  let m;
  while ((m = regex.exec(content))) links.push(m[1]);
  return links;
}

function main() {
  const files = walk(ROOT).filter(isMarkdown);
  const results = [];
  for (const f of files) {
    const text = fs.readFileSync(f, 'utf8');
    const links = findLinks(text);
    for (const l of links) {
      if (/^https?:\/\//i.test(l)) continue; // skip external
      const target = path.resolve(path.dirname(f), l.split('#')[0]);
      const exists = fs.existsSync(target);
      if (!exists) results.push({ file: f.replace(ROOT, ''), link: l });
    }
  }
  const docsDir = path.join(ROOT, 'docs');
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir, { recursive: true });
  const md = ['# Markdown Link Report', '', 'Auto-generated link validity for relative links.', ''];
  if (results.length === 0) md.push('No broken relative links found.');
  else results.forEach((r) => md.push(`- ${r.file}: ${r.link}`));
  md.push('', '_Generated by automation/markdown-link-check.cjs_');
  fs.writeFileSync(path.join(docsDir, 'link-report.json'), JSON.stringify(results, null, 2));
  fs.writeFileSync(path.join(docsDir, 'link-report.md'), md.join('\n'));
  console.log('markdown-link-check: updated docs/link-report.*');
}

if (require.main === module) main();