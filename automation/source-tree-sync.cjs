#!/usr/bin/env node
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();

function buildZionSourceMap() {
  return [
    { name: 'core', path: '/core', type: 'folder', children: [
      { name: 'auth', path: '/core/auth', type: 'folder' },
      { name: 'user', path: '/core/user', type: 'folder' },
      { name: 'marketplace', path: '/core/marketplace', type: 'folder' },
      { name: 'payments', path: '/core/payments', type: 'folder' },
      { name: 'messaging', path: '/core/messaging', type: 'folder' },
      { name: 'analytics', path: '/core/analytics', type: 'folder' },
      { name: 'roles', path: '/core/roles', type: 'folder' },
      { name: 'talent', path: '/core/talent', type: 'folder' },
      { name: 'client', path: '/core/client', type: 'folder' },
    ]},
    { name: 'ai', path: '/ai', type: 'folder', children: [
      { name: 'gpt', path: '/ai/gpt', type: 'folder' },
      { name: 'resume-generator', path: '/ai/resume-generator', type: 'folder' },
      { name: 'proposal-writer', path: '/ai/proposal-writer', type: 'folder' },
      { name: 'contract-writer', path: '/ai/contract-writer', type: 'folder' },
      { name: 'assistant', path: '/ai/assistant', type: 'folder' },
      { name: 'prompts', path: '/ai/prompts', type: 'folder' },
    ]},
    { name: 'dao', path: '/dao', type: 'folder', children: [
      { name: 'proposals', path: '/dao/proposals', type: 'folder' },
      { name: 'voting', path: '/dao/voting', type: 'folder' },
      { name: 'quorum', path: '/dao/quorum', type: 'folder' },
      { name: 'staking', path: '/dao/staking', type: 'folder' },
      { name: 'snapshot-integration', path: '/dao/snapshot-integration', type: 'folder' },
    ]},
    { name: 'token', path: '/token', type: 'folder', children: [
      { name: 'rewards', path: '/token/rewards', type: 'folder' },
      { name: 'pricing-engine', path: '/token/pricing-engine', type: 'folder' },
      { name: 'escrow', path: '/token/escrow', type: 'folder' },
      { name: 'payout-engine', path: '/token/payout-engine', type: 'folder' },
      { name: 'wallet', path: '/token/wallet', type: 'folder' },
    ]},
    { name: 'academy', path: '/academy', type: 'folder', children: [
      { name: 'courses', path: '/academy/courses', type: 'folder' },
      { name: 'certifications', path: '/academy/certifications', type: 'folder' },
      { name: 'quiz', path: '/academy/quiz', type: 'folder' },
      { name: 'video', path: '/academy/video', type: 'folder' },
      { name: 'ai-tutor', path: '/academy/ai-tutor', type: 'folder' },
    ]},
    { name: 'governance', path: '/governance', type: 'folder', children: [
      { name: 'manifesto', path: '/governance/manifesto', type: 'folder' },
      { name: 'constitution', path: '/governance/constitution', type: 'folder' },
      { name: 'roadmap', path: '/governance/roadmap', type: 'folder' },
      { name: 'changelog', path: '/governance/changelog', type: 'folder' },
    ]},
    { name: 'deployments', path: '/deployments', type: 'folder', children: [
      { name: 'multiverse', path: '/deployments/multiverse', type: 'folder' },
      { name: 'subdomains', path: '/deployments/subdomains', type: 'folder' },
      { name: 'config-templates', path: '/deployments/config-templates', type: 'folder' },
      { name: 'environments', path: '/deployments/environments', type: 'folder' },
    ]},
    { name: 'api', path: '/api', type: 'folder', children: [
      { name: 'docs', path: '/api/docs', type: 'folder' },
      { name: 'partners', path: '/api/partners', type: 'folder' },
      { name: 'integrations', path: '/api/integrations', type: 'folder' },
      { name: 'webhooks', path: '/api/webhooks', type: 'folder' },
    ]},
  ];
}

function ensureDirectory(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

function deployBasicTemplate(dirPath) {
  ensureDirectory(dirPath);
  const keepFile = path.join(dirPath, '.keep');
  if (!fs.existsSync(keepFile)) fs.writeFileSync(keepFile, '');
  const readmeFile = path.join(dirPath, 'README.md');
  if (!fs.existsSync(readmeFile)) {
    const title = path.basename(dirPath);
    fs.writeFileSync(readmeFile, `# ${title}\n\nAuto-generated by source-tree-sync.\n`);
  }
}

function markExistence(node) {
  const absolute = path.join(ROOT, node.path);
  const exists = fs.existsSync(absolute);
  const out = { ...node, exists };
  if (node.children && node.children.length) {
    out.children = node.children.map(markExistence);
  }
  return out;
}

function toMarkdown(nodes) {
  const lines = ['# Zion OS Source Tree', '', 'Legend: [x] exists, [ ] planned', ''];
  function walk(list, depth) {
    for (const n of list) {
      const checkbox = n.exists ? '[x]' : '[ ]';
      const indent = '  '.repeat(depth);
      lines.push(`${indent}- ${checkbox} ${n.path}`);
      if (n.children && n.children.length) walk(n.children, depth + 1);
    }
  }
  walk(nodes, 0);
  lines.push('', '_Auto-generated by automation/source-tree-sync.cjs_');
  return lines.join('\n');
}

function main() {
  const nodes = buildZionSourceMap();
  // Ensure directories and minimal templates for top-level children
  for (const top of nodes) {
    const topDir = path.join(ROOT, top.path);
    ensureDirectory(topDir);
    if (top.children) {
      for (const child of top.children) {
        deployBasicTemplate(path.join(ROOT, child.path));
      }
    }
  }
  // Mark existence and write docs
  const withExists = nodes.map(markExistence);
  const docsDir = path.join(ROOT, 'docs');
  ensureDirectory(docsDir);
  fs.writeFileSync(path.join(docsDir, 'source-map.json'), JSON.stringify(withExists, null, 2));
  fs.writeFileSync(path.join(docsDir, 'source-tree.md'), toMarkdown(withExists));
  console.log('source-tree-sync: updated docs/source-map.json and docs/source-tree.md');
}

if (require.main === module) {
  main();
}