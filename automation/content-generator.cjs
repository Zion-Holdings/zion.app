#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

function toSlug(name) {
  return name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
}

function writeFileSafe(filePath, content) {
  ensureDir(path.dirname(filePath));
  fs.writeFileSync(filePath, content);
  console.log(`âœ… Wrote ${path.relative(process.cwd(), filePath)}`);
}

function blogTemplate(title, description) {
  return `import type { NextPage } from 'next';
import Head from 'next/head';

const BlogPost: NextPage = () => {
  return (
    <>
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
      </Head>
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">${title}</h1>
        <div className="prose max-w-none">
          <p>Generated blog content for ${title}.</p>
        </div>
      </div>
    </>
  );
};

export default BlogPost;
`;
}

function pageTemplate(title, description) {
  return `import type { NextPage } from 'next';
import Head from 'next/head';

const Page: NextPage = () => {
  return (
    <>
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
      </Head>
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">${title}</h1>
        <p>Autogenerated page: ${description}</p>
      </div>
    </>
  );
};

export default Page;
`;
}

function componentTemplate(name) {
  return `import React from 'react';

interface ${name}Props {}

const ${name}: React.FC<${name}Props> = () => {
  return (
    <div className="">
      {/* Autogenerated component ${name} */}
    </div>
  );
};

export default ${name};
`;
}

function main() {
  // Usage: node automation/content-generator.cjs <type> <name> [--title Title] [--description Desc] [--dir pages/auto]
  const args = process.argv.slice(2);
  if (args.length < 2) {
    console.log('Usage: node automation/content-generator.cjs <blog|page|component> <name> [--title Title] [--description Desc] [--dir pages/auto]');
    process.exit(1);
  }

  const type = args[0];
  const rawName = args[1];
  const titleArgIndex = args.indexOf('--title');
  const descArgIndex = args.indexOf('--description');
  const dirArgIndex = args.indexOf('--dir');

  const title = titleArgIndex !== -1 ? args[titleArgIndex + 1] : rawName;
  const description = descArgIndex !== -1 ? args[descArgIndex + 1] : `Generated ${type} for ${rawName}`;
  const outDir = dirArgIndex !== -1 ? args[dirArgIndex + 1] : 'pages/auto';

  const nameSlug = toSlug(rawName);
  const projectRoot = path.resolve(__dirname, '..');

  if (type === 'blog') {
    const filePath = path.join(projectRoot, outDir, `${nameSlug}.tsx`);
    writeFileSafe(filePath, blogTemplate(title, description));
  } else if (type === 'page') {
    const filePath = path.join(projectRoot, outDir, `${nameSlug}.tsx`);
    writeFileSafe(filePath, pageTemplate(title, description));
  } else if (type === 'component') {
    // Components go under components/ by default unless custom dir
    const targetDir = outDir || 'components';
    const componentName = rawName.replace(/[^a-zA-Z0-9]/g, '_');
    const filePath = path.join(projectRoot, targetDir, `${componentName}.tsx`);
    writeFileSafe(filePath, componentTemplate(componentName));
  } else {
    console.log(`Unknown type: ${type}`);
    process.exit(1);
  }
}

main();
