#!/usr/bin/env node
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();

function dirSize(dir) {
  let total = 0;
  for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
    const full = path.join(dir, e.name);
    try {
      if (e.isDirectory()) total += dirSize(full);
      else total += fs.statSync(full).size;
    } catch {}
  }
  return total;
}

function main() {
  const entries = fs.readdirSync(ROOT, { withFileTypes: true })
    .filter((e) => e.isDirectory() && !['.git', 'node_modules', '.next', 'out'].includes(e.name))
    .map((e) => {
      const p = path.join(ROOT, e.name);
      return { path: `/${e.name}`, sizeBytes: dirSize(p) };
    })
    .sort((a, b) => b.sizeBytes - a.sizeBytes);

  const docsDir = path.join(ROOT, 'docs');
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir, { recursive: true });
  const human = (n) => {
    const units = ['B','KB','MB','GB']; let i = 0; let v = n; while (v > 1024 && i < units.length-1) { v/=1024; i++; } return `${v.toFixed(1)} ${units[i]}`;
  };
  const md = ['# Repository Size Report', '', 'Directory sizes (top-level).', ''];
  entries.forEach((e) => md.push(`- ${e.path}: ${human(e.sizeBytes)} (${e.sizeBytes} bytes)`));
  md.push('', '_Generated by automation/repo-size-report.cjs_');
  fs.writeFileSync(path.join(docsDir, 'repo-size.json'), JSON.stringify(entries, null, 2));
  fs.writeFileSync(path.join(docsDir, 'repo-size.md'), md.join('\n'));
  console.log('repo-size-report: updated docs/repo-size.*');
}

if (require.main === module) main();