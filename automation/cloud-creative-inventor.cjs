#!/usr/bin/env node

'use strict';

/*
  Cloud Creative Inventor (New)
  - Extends cloud content generation with diversified artifacts:
    Guides and Feature Sheets derived from live site crawl signals
  - Outputs deterministic, compilable TSX pages without external API calls
  - Registers new content into public/automation/content-registry.json
  - Updates homepage "Latest Autonomous Content" section between markers

  This does NOT modify or replace existing automations; it complements them.
*/

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) {
  fs.mkdirSync(dirPath, { recursive: true });
}

function readLatestCrawl() {
  const logsDir = path.join(process.cwd(), 'automation', 'logs');
  if (!fs.existsSync(logsDir)) return null;
  const files = fs
    .readdirSync(logsDir)
    .filter((f) => f.startsWith('cloud-crawl-') && f.endsWith('.json'))
    .sort();
  if (files.length === 0) return null;
  const latest = path.join(logsDir, files[files.length - 1]);
  try {
    return JSON.parse(fs.readFileSync(latest, 'utf8'));
  } catch {
    return null;
  }
}

function tsxPage({ title, description, bodyHtml }) {
  return `import Head from 'next/head';

export default function Page() {
  return (
    <div className="min-h-screen bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${description}" />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
      <main className="container mx-auto px-6 py-12 prose prose-invert">
        <h1 className="text-3xl font-extrabold">${title}</h1>
        <div className="mt-4" dangerouslySetInnerHTML={{ __html: ${JSON.stringify(bodyHtml)} }} />
        <p className="mt-6 text-white/60 text-sm">Auto-generated by Cloud Creative Inventor.</p>
      </main>
    </div>
  );
}
`;
}

function loadRegistry() {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  try {
    return JSON.parse(fs.readFileSync(registryPath, 'utf8'));
  } catch {
    return { items: [] };
  }
}

function saveRegistry(reg) {
  const dir = path.join(process.cwd(), 'public', 'automation');
  ensureDir(dir);
  fs.writeFileSync(path.join(dir, 'content-registry.json'), JSON.stringify(reg, null, 2));
}

function normalizeTitleFromUrl(url) {
  try {
    const u = new URL(url);
    const parts = u.pathname.replace(/\/$/, '').split('/').filter(Boolean);
    if (parts.length === 0) return 'Homepage Overview';
    const last = parts[parts.length - 1]
      .replace(/[-_]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim()
      .replace(/\b\w/g, (m) => m.toUpperCase());
    return last.length > 2 ? last : 'Site Overview';
  } catch {
    return 'Site Overview';
  }
}

function pickTop(results, max = 5) {
  return [...results]
    .filter((r) => (r.text || '').length > 120)
    .sort((a, b) => b.length - a.length)
    .slice(0, max);
}

function createGuide(snippets) {
  const stamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 16);
  const slug = `guide-${stamp}`;
  const filePath = path.join(process.cwd(), 'pages', 'reports', 'guides', `${slug}.tsx`);
  ensureDir(path.dirname(filePath));
  const title = `Guide — Signals & Paths ${stamp.replace('T', ' ')}`;
  const description = 'A practical guide synthesized from live site signals and paths.';
  const items = snippets
    .map((s) => {
      const t = normalizeTitleFromUrl(s.url);
      const preview = (s.text || '').slice(0, 240).replace(/</g, '&lt;').replace(/>/g, '&gt;');
      return `<li><strong>${t}</strong> — <a class="text-cyan-300 underline" href="${s.url}" target="_blank" rel="noopener">Source</a><br/><span class="text-white/70 text-sm">${preview}</span></li>`;
    })
    .join('\n');
  const bodyHtml = `<p>Concise walkthrough of prominent areas detected on the live site.</p><ol class="list-decimal pl-6">${items}</ol>`;
  fs.writeFileSync(filePath, tsxPage({ title, description, bodyHtml }));
  return { title, route: `/reports/guides/${slug}`, filePath };
}

function createFeatureSheet(snippets) {
  const stamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 16);
  const slug = `feature-${stamp}`;
  const filePath = path.join(process.cwd(), 'pages', 'reports', 'features', `${slug}.tsx`);
  ensureDir(path.dirname(filePath));
  const title = `Feature Sheet — Opportunities ${stamp.replace('T', ' ')}`;
  const description = 'Feature opportunities and value statements derived from autonomous research.';
  const rows = snippets
    .slice(0, 3)
    .map((s, i) => {
      const t = normalizeTitleFromUrl(s.url);
      const benefit = ['Faster discovery', 'Improved relevance', 'Higher engagement'][i % 3];
      const cap = ['Curation', 'Automation', 'Insights'][i % 3];
      return `<div class="rounded-xl border border-white/10 p-4 my-3">
  <div class="text-base font-semibold">${t}</div>
  <div class="text-sm text-white/70">Capability: ${cap} • Benefit: ${benefit}</div>
  <div class="mt-1 text-xs text-white/60">Source: <a class="text-cyan-300 underline" href="${s.url}" target="_blank" rel="noopener">${s.url}</a></div>
</div>`;
    })
    .join('\n');
  const bodyHtml = `<p>Structured features based on recent crawl highlights.</p>${rows}`;
  fs.writeFileSync(filePath, tsxPage({ title, description, bodyHtml }));
  return { title, route: `/reports/features/${slug}`, filePath };
}

function updateRegistryWithNewEntries(entries) {
  const registry = loadRegistry();
  const now = new Date().toISOString();
  for (const e of entries) {
    registry.items.unshift({
      title: e.title,
      href: e.route,
      desc: 'New autonomous content',
      createdAt: now,
      source: 'cloud-creative-inventor'
    });
  }
  registry.items = registry.items.slice(0, 80);
  saveRegistry(registry);
}

function updateHomepageLatestSection(entries) {
  const homepagePath = path.join(process.cwd(), 'pages', 'index.tsx');
  if (!fs.existsSync(homepagePath)) return;
  let content = fs.readFileSync(homepagePath, 'utf8');
  const start = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_START */}';
  const end = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_END */}';
  const list = entries
    .map(
      (e) => `            <a href="${e.route}" className="group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30 tilt-on-hover">
              <div className=\"pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100\" />
              <h3 className=\"text-lg font-semibold\">${e.title}</h3>
              <p className=\"mt-1 text-sm text-white/75\">Freshly published by autonomous agents.</p>
              <div className=\"mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90\">Open <span aria-hidden>→</span></div>
            </a>`
    )
    .join('\n');
  const block = `\n <section className=\"mx-auto max-w-7xl px-6 pb-14\">\n   <h2 className=\"text-center text-2xl font-bold tracking-wide text-white/90\">Latest Autonomous Content</h2>\n   <div className=\"mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n${list}\n   </div>\n </section>\n `;
  const pattern = new RegExp(`${start}[\s\S]*?${end}`);
  if (content.includes(start) && content.includes(end)) {
    content = content.replace(pattern, `${start}\n${block}${end}`);
    fs.writeFileSync(homepagePath, content);
  }
}

function main() {
  const crawl = readLatestCrawl();
  if (!crawl || !Array.isArray(crawl.results) || crawl.results.length === 0) {
    console.log('No crawl results found. Skipping creative content.');
    return;
  }
  const top = pickTop(crawl.results, 6);
  const created = [];
  if (top.length >= 2) created.push(createGuide(top.slice(0, 4)));
  if (top.length >= 1) created.push(createFeatureSheet(top.slice(0, 3)));
  if (created.length > 0) {
    updateRegistryWithNewEntries(created);
    updateHomepageLatestSection(created.slice(0, 6));
  }
  console.log(`Cloud Creative Inventor created ${created.length} page(s).`);
}

if (require.main === module) {
  main();
}

module.exports = { main };


