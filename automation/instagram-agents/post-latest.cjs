#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const axios = require('axios');

const LOG_DIR = path.join(__dirname, '..', 'logs');
const LOG_FILE = path.join(LOG_DIR, 'instagram-post.log');
const STATE_FILE = path.join(__dirname, 'post-index.json');
const CAPTIONS_FILE = path.join(__dirname, 'captions.json');

function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function log(message) {
  ensureDir(LOG_DIR);
  const line = `[${new Date().toISOString()}] ${message}\n`;
  console.log(message);
  fs.appendFileSync(LOG_FILE, line);
}

function readCaptions() {
  try {
    if (!fs.existsSync(CAPTIONS_FILE)) return [];
    const data = JSON.parse(fs.readFileSync(CAPTIONS_FILE, 'utf8'));
    return Array.isArray(data.captions) ? data.captions.filter(Boolean) : [];
  } catch (e) {
    log(`‚ö†Ô∏è Failed to read captions: ${e.message}`);
    return [];
  }
}

function getNextIndex(total) {
  if (total === 0) return 0;
  try {
    if (!fs.existsSync(STATE_FILE)) return 0;
    const state = JSON.parse(fs.readFileSync(STATE_FILE, 'utf8'));
    const next = ((state.lastIndex ?? -1) + 1) % total;
    return next;
  } catch {
    return 0;
  }
}

function saveIndex(index) {
  try {
    fs.writeFileSync(STATE_FILE, JSON.stringify({ lastIndex: index, updatedAt: new Date().toISOString() }, null, 2));
  } catch (e) {
    log(`‚ö†Ô∏è Failed to persist state: ${e.message}`);
  }
}

function buildImageUrl(titleForText) {
  // Prefer provided image URL; otherwise generate a branded placeholder using dummyimage
  const envUrl = process.env.IG_IMAGE_URL;
  if (envUrl && /^https?:\/\//.test(envUrl)) return envUrl;
  const text = encodeURIComponent(`${titleForText || 'Zion Tech Group'} ‚Äî Modern, Secure, Fast`);
  // 1200x628 OpenGraph-friendly image, dark blue bg (#0a2540) with white text
  return `https://dummyimage.com/1200x628/0a2540/ffffff.png&text=${text}`;
}

async function postToInstagram({ userId, accessToken, imageUrl, caption }) {
  const apiBase = 'https://graph.facebook.com/v20.0';
  // Step 1: Create media container
  const createUrl = `${apiBase}/${encodeURIComponent(userId)}/media`;
  const createParams = { image_url: imageUrl, caption, access_token: accessToken };
  const createRes = await axios.post(createUrl, null, { params: createParams });
  if (!createRes.data || !createRes.data.id) throw new Error('Failed to create media container');
  const creationId = createRes.data.id;
  log(`‚úÖ Created media container: ${creationId}`);

  // Step 2: Publish media
  const publishUrl = `${apiBase}/${encodeURIComponent(userId)}/media_publish`;
  const publishRes = await axios.post(publishUrl, null, { params: { creation_id: creationId, access_token: accessToken } });
  if (!publishRes.data || !publishRes.data.id) throw new Error('Failed to publish media');
  const mediaId = publishRes.data.id;
  log(`üì£ Published media: ${mediaId}`);

  // Step 3: Try to fetch permalink
  try {
    const mediaGet = await axios.get(`${apiBase}/${encodeURIComponent(mediaId)}`, { params: { fields: 'permalink', access_token: accessToken } });
    const permalink = mediaGet.data && mediaGet.data.permalink;
    if (permalink) log(`üîó Permalink: ${permalink}`);
  } catch (e) {
    log(`‚ÑπÔ∏è Could not fetch permalink: ${e.response?.data?.error?.message || e.message}`);
  }
}

async function main() {
  try {
    const IG_USER_ID = process.env.IG_USER_ID || process.env.IG_BUSINESS_ACCOUNT_ID; // required
    const IG_ACCESS_TOKEN = process.env.IG_ACCESS_TOKEN; // required

    if (!IG_USER_ID || !IG_ACCESS_TOKEN) {
      log('‚ùå Missing IG_USER_ID/IG_ACCESS_TOKEN in environment. Skipping post.');
      process.exit(0);
    }

    const appUrl = process.env.APP_MARKETING_URL || 'https://ziontechgroup.com';
    const captions = readCaptions();

    // Fallback professional caption if none generated by factory
    const fallbackCaption = [
      'Experience the next generation of productivity with Zion.\n',
      '‚Ä¢ Modern design and intuitive UX\n‚Ä¢ Secure architecture for peace of mind\n‚Ä¢ Fast performance to accelerate your work',
      `\nExplore more: ${appUrl}`,
      '\n#ZionTechGroup #Productivity #SaaS #WebApp #Automation #Innovation'
    ].join('\n');

    const index = getNextIndex(captions.length || 1);
    const selected = captions.length > 0 ? captions[index] : fallbackCaption;

    // Try to extract a title line for the image text
    const firstLine = (selected.split('\n')[0] || 'Zion Tech Group').replace(/^#+\s*/, '').trim();
    const imageUrl = buildImageUrl(firstLine);

    log(`üìù Using caption index ${index} (${captions.length} available).`);
    await postToInstagram({ userId: IG_USER_ID, accessToken: IG_ACCESS_TOKEN, imageUrl, caption: selected });
    saveIndex(index);
    log('‚úÖ Instagram post complete');
  } catch (e) {
    const msg = e.response?.data?.error?.message || e.message;
    log(`‚ùå Post failed: ${msg}`);
    process.exitCode = 1;
  }
}

if (require.main === module) {
  main();
}


