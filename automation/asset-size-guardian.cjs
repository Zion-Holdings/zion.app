#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');

const WORKSPACE = process.cwd();
const PUBLIC_DIR = path.join(WORKSPACE, 'public');
const REPORT_DIR = path.join(PUBLIC_DIR, 'reports', 'perf');
const DOCS_DIR = path.join(WORKSPACE, 'docs', 'reports');

function ensureDir(dir) { fs.mkdirSync(dir, { recursive: true }); }
function sizeOf(filePath) { try { return fs.statSync(filePath).size; } catch { return 0; } }
function isFile(p) { try { return fs.statSync(p).isFile(); } catch { return false; } }

function* walk(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  for (const entry of entries) {
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) yield* walk(full);
    else yield full;
  }
}

function classify(ext) {
  const e = ext.toLowerCase();
  if (['.png', '.jpg', '.jpeg', '.gif', '.webp', '.svg', '.avif'].includes(e)) return 'image';
  if (['.js', '.mjs', '.cjs', '.ts'].includes(e)) return 'script';
  if (['.css'].includes(e)) return 'style';
  if (['.json'].includes(e)) return 'data';
  return 'other';
}

(function main(){
  const log = (m) => console.log(`[asset-size-guardian] ${m}`);

  if (!fs.existsSync(PUBLIC_DIR)) {
    log('No public/ directory; nothing to scan');
    process.exit(0);
  }

  ensureDir(REPORT_DIR);
  ensureDir(DOCS_DIR);

  const items = [];
  for (const file of walk(PUBLIC_DIR)) {
    const rel = path.relative(PUBLIC_DIR, file);
    const bytes = sizeOf(file);
    items.push({
      path: rel.replace(/\\/g, '/'),
      bytes,
      kb: Number((bytes / 1024).toFixed(2)),
      type: classify(path.extname(file))
    });
  }

  items.sort((a, b) => b.bytes - a.bytes);

  const reportPath = path.join(REPORT_DIR, 'assets.json');
  fs.writeFileSync(reportPath, JSON.stringify({ generatedAt: new Date().toISOString(), count: items.length, items }, null, 2));

  const top = items.slice(0, 25);
  const mdLines = [
    '# Asset Size Report',
    '',
    `Generated: ${new Date().toISOString()}`,
    '',
    `Total assets scanned: ${items.length}`,
    '',
    'Top 25 largest assets:',
    '',
    '| Size (KB) | Type | Path |',
    '|-----------|------|------|',
    ...top.map(it => `| ${it.kb} | ${it.type} | ${it.path} |`),
    '',
    '_This report is auto-generated by Asset Size Guardian._'
  ];
  const mdPath = path.join(DOCS_DIR, 'assets.md');
  fs.writeFileSync(mdPath, mdLines.join('\n'));

  log(`Wrote ${path.relative(WORKSPACE, reportPath)} and ${path.relative(WORKSPACE, mdPath)}`);
})();