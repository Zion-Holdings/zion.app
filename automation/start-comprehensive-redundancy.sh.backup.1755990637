#!/bin/bash

# Comprehensive Redundancy Automation Startup Script
<<<<<<< HEAD
# This script manages the comprehensive redundancy automation system

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_DIR="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$WORKSPACE_DIR/automation/logs"
PID_FILE="$LOG_DIR/comprehensive-redundancy.pid"
LOG_FILE="$LOG_DIR/comprehensive-redundancy.log"

# Ensure log directory exists
mkdir -p "$LOG_DIR"
=======
# This script starts all redundancy automation systems for PM2, GitHub Actions, and Netlify Functions

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$SCRIPT_DIR/logs"
PID_DIR="$SCRIPT_DIR/pids"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-964e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
<<<<<<< HEAD
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] $message${NC}"
}

# Function to check if the system is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        else
            # PID file exists but process is dead
            rm -f "$PID_FILE"
=======
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}"
}

# Function to check if a process is running
is_process_running() {
    local pid_file=$1
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            rm -f "$pid_file"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-964e
            return 1
        fi
    fi
    return 1
}

<<<<<<< HEAD
# Function to start the system
start() {
    print_status "$BLUE" "Starting Comprehensive Redundancy Automation System..."
    
    if is_running; then
        print_status "$YELLOW" "System is already running (PID: $(cat "$PID_FILE"))"
        return 0
    fi
    
    cd "$WORKSPACE_DIR"
    
    # Check if Node.js is available
    if ! command -v node &> /dev/null; then
        print_status "$RED" "Error: Node.js is not installed or not in PATH"
        return 1
    fi
    
    # Check if required dependencies are installed
    if [ ! -f "package.json" ]; then
        print_status "$RED" "Error: package.json not found. Are you in the correct directory?"
        return 1
    fi
    
    # Install dependencies if node_modules doesn't exist
    if [ ! -d "node_modules" ]; then
        print_status "$BLUE" "Installing dependencies..."
        npm install
    fi
    
    # Start the comprehensive redundancy system
    print_status "$BLUE" "Launching comprehensive redundancy automation..."
    
    # Start in background and capture PID
    nohup node automation/comprehensive-redundancy-automation.cjs start > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # Save PID to file
    echo "$pid" > "$PID_FILE"
    
    # Wait a moment to see if it starts successfully
    sleep 2
    
    if kill -0 "$pid" 2>/dev/null; then
        print_status "$GREEN" "✅ Comprehensive Redundancy Automation System started successfully (PID: $pid)"
        print_status "$BLUE" "Logs are being written to: $LOG_FILE"
        print_status "$BLUE" "Use './automation/start-comprehensive-redundancy.sh status' to check status"
        print_status "$BLUE" "Use './automation/start-comprehensive-redundancy.sh logs' to view logs"
    else
        print_status "$RED" "❌ Failed to start Comprehensive Redundancy Automation System"
        rm -f "$PID_FILE"
=======
# Function to start a process and save its PID
start_process() {
    local name=$1
    local command=$2
    local pid_file="$PID_DIR/$name.pid"
    
    if is_process_running "$pid_file"; then
        print_status "$YELLOW" "$name is already running (PID: $(cat "$pid_file"))"
        return 0
    fi
    
    print_status "$BLUE" "Starting $name..."
    
    # Create log directory if it doesn't exist
    mkdir -p "$LOG_DIR"
    
    # Start the process in background and save PID
    nohup node "$command" > "$LOG_DIR/$name.log" 2>&1 &
    local pid=$!
    echo "$pid" > "$pid_file"
    
    # Wait a moment to check if it started successfully
    sleep 2
    if ps -p "$pid" > /dev/null 2>&1; then
        print_status "$GREEN" "$name started successfully (PID: $pid)"
        return 0
    else
        print_status "$RED" "$name failed to start"
        rm -f "$pid_file"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-964e
        return 1
    fi
}

<<<<<<< HEAD
    
    # PM2 status
    if command_exists pm2; then
        echo "PM2 Status:"
        pm2 status --no-daemon 2>/dev/null || echo "PM2 not running"
        echo
    fi
    
    # Redundancy system status
    if [ -f "$LOG_DIR/redundancy-system.pid" ]; then
        local pid=$(cat "$LOG_DIR/redundancy-system.pid")
        if kill -0 "$pid" 2>/dev/null; then
            echo "Redundancy System: Running (PID: $pid)"
        else
            echo "Redundancy System: Not running"
        fi
    else
        echo "Redundancy System: Not running"
    fi
    echo
    
    # Recent logs
    echo "Recent Logs:"
    tail -n 10 "$LOG_DIR/comprehensive-redundancy.log" 2>/dev/null || echo "No logs found"
}

# Function to show system health
show_health() {
    log "INFO" "Running system health check..."
    if check_system_health; then
        log "SUCCESS" "System is healthy"
    else
        log "ERROR" "System health check failed"
        exit 1
=======
# Function to stop a process
stop_process() {
    local name=$1
    local pid_file="$PID_DIR/$name.pid"
    
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        print_status "$BLUE" "Stopping $name (PID: $pid)..."
        
        if kill "$pid" 2>/dev/null; then
            print_status "$GREEN" "$name stopped successfully"
        else
            print_status "$YELLOW" "$name was not running"
        fi
        
        rm -f "$pid_file"
    else
        print_status "$YELLOW" "$name is not running"
    fi
}

# Function to restart a process
restart_process() {
    local name=$1
    print_status "$BLUE" "Restarting $name..."
    stop_process "$name"
    sleep 2
    start_process "$name" "$2"
}

# Function to check process status
check_status() {
    local name=$1
    local pid_file="$PID_DIR/$name.pid"
    
    if is_process_running "$pid_file"; then
        local pid=$(cat "$pid_file")
        print_status "$GREEN" "$name is running (PID: $pid)"
        return 0
    else
        print_status "$RED" "$name is not running"
        return 1
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-964e
    fi
}

# Function to show logs
show_logs() {
<<<<<<< HEAD
    log "INFO" "Showing recent logs..."
    if [ -f "$LOG_DIR/comprehensive-redundancy.log" ]; then
        tail -n 50 "$LOG_DIR/comprehensive-redundancy.log"
    else
        echo "No logs found"
    fi
}

# Function to start the entire system
start_system() {
    log "INFO" "Starting comprehensive redundancy system..."
    
    # Check prerequisites
    if ! command_exists node; then
        log "ERROR" "Node.js is not installed"
        exit 1
    fi
    
    if ! command_exists npm; then
        log "ERROR" "NPM is not installed"
        exit 1
    fi
    
    if ! command_exists pm2; then
        log "WARN" "PM2 is not installed, installing..."
        npm install -g pm2
    fi
    
    # Start PM2 processes
    start_pm2_processes
    
    # Check workflows and functions
    check_github_workflows
    check_netlify_functions
    check_npm_scripts
    
    # Start redundancy system
    start_redundancy_system
    
    # Wait for system to stabilize
    sleep 5
    
    # Perform health check
    if check_system_health; then
        log "SUCCESS" "Comprehensive redundancy system started successfully"
        log "INFO" "System is now monitoring all automations"
        log "INFO" "Use '$0 status' to check system status"
        log "INFO" "Use '$0 health' to run health check"
        log "INFO" "Use '$0 logs' to view logs"
    else
        log "ERROR" "System health check failed after startup"
        exit 1
    fi
}

# Main script logic
case "${1:-start}" in
    start)
        start_system
        ;;
    stop)
        stop_system
        ;;
    restart)
        restart_system
        ;;
    status)
        show_status
        ;;
    health)
        show_health
        ;;
    logs)
        show_logs
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|health|logs}"
        echo
        echo "Commands:"
        echo "  start   - Start the comprehensive redundancy system"
        echo "  stop    - Stop the comprehensive redundancy system"
        echo "  restart - Restart the comprehensive redundancy system"
        echo "  status  - Show system status"
        echo "  health  - Run system health check"
        echo "  logs    - Show recent logs"
        echo
        echo "This script provides redundancy for:"
        echo "  - PM2 process management"
        echo "  - GitHub Actions workflows"
        echo "  - Netlify functions"
        echo "  - NPM scripts and automation"
        exit 1
        ;;
esac
=======
# Function to stop the system
stop() {
    print_status "$BLUE" "Stopping Comprehensive Redundancy Automation System..."
    
    if ! is_running; then
        print_status "$YELLOW" "System is not running"
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    
    # Try graceful shutdown first
    print_status "$BLUE" "Sending graceful shutdown signal to PID $pid..."
    
    # Send SIGTERM
    kill -TERM "$pid" 2>/dev/null || true
    
    # Wait for graceful shutdown (up to 30 seconds)
    local count=0
    while kill -0 "$pid" 2>/dev/null && [ $count -lt 30 ]; do
        sleep 1
        count=$((count + 1))
    done
    
    # Force kill if still running
    if kill -0 "$pid" 2>/dev/null; then
        print_status "$YELLOW" "Force killing process $pid..."
        kill -KILL "$pid" 2>/dev/null || true
        sleep 1
    fi
    
    # Clean up PID file
    if [ -f "$PID_FILE" ]; then
        rm -f "$PID_FILE"
    fi
    
    print_status "$GREEN" "✅ Comprehensive Redundancy Automation System stopped"
}

# Function to restart the system
restart() {
    print_status "$BLUE" "Restarting Comprehensive Redundancy Automation System..."
    stop
    sleep 2
    start
}

# Function to check status
status() {
    print_status "$BLUE" "Comprehensive Redundancy Automation System Status:"
    echo
    
    if is_running; then
        local pid=$(cat "$PID_FILE")
        print_status "$GREEN" "✅ System is RUNNING (PID: $pid)"
        
        # Check if the process is actually responding
        if command -v node &> /dev/null; then
            cd "$WORKSPACE_DIR"
            print_status "$BLUE" "Checking system health..."
            node automation/comprehensive-redundancy-automation.cjs status 2>/dev/null || {
                print_status "$YELLOW" "⚠️ System is running but health check failed"
            }
        fi
    else
        print_status "$RED" "❌ System is NOT RUNNING"
    fi
    
    echo
    print_status "$BLUE" "Log file: $LOG_FILE"
    print_status "$BLUE" "PID file: $PID_FILE"
}

# Function to show logs
logs() {
    if [ -f "$LOG_FILE" ]; then
        print_status "$BLUE" "Showing recent logs from: $LOG_FILE"
        echo "----------------------------------------"
        tail -n 50 "$LOG_FILE"
        echo "----------------------------------------"
        print_status "$BLUE" "Use 'tail -f $LOG_FILE' to follow logs in real-time"
    else
        print_status "$YELLOW" "No log file found at: $LOG_FILE"
    fi
}

# Function to show real-time logs
follow_logs() {
    if [ -f "$LOG_FILE" ]; then
        print_status "$BLUE" "Following logs in real-time from: $LOG_FILE"
        print_status "$YELLOW" "Press Ctrl+C to stop following logs"
        tail -f "$LOG_FILE"
    else
        print_status "$YELLOW" "No log file found at: $LOG_FILE"
    fi
}

# Function to check system health
health() {
    print_status "$BLUE" "Checking Comprehensive Redundancy Automation System Health..."
    
    if ! is_running; then
        print_status "$RED" "❌ System is not running"
        return 1
    fi
    
    cd "$WORKSPACE_DIR"
    
    if command -v node &> /dev/null; then
        print_status "$BLUE" "Running health check..."
        node automation/comprehensive-redundancy-automation.cjs health
    else
        print_status "$RED" "❌ Node.js not available for health check"
        return 1
    fi
}

# Function to run build
build() {
    print_status "$BLUE" "Running build with Comprehensive Redundancy Automation..."
    
    if ! is_running; then
        print_status "$YELLOW" "System is not running, starting it first..."
        start
        sleep 3
    fi
    
    cd "$WORKSPACE_DIR"
    
    if command -v node &> /dev/null; then
        print_status "$BLUE" "Running build process..."
        node automation/comprehensive-redundancy-automation.cjs build
    else
        print_status "$RED" "❌ Node.js not available for build"
        return 1
    fi
}

# Function to run build with recovery
build_recovery() {
    print_status "$BLUE" "Running build with recovery using Comprehensive Redundancy Automation..."
    
    if ! is_running; then
        print_status "$YELLOW" "System is not running, starting it first..."
        start
        sleep 3
    fi
    
    cd "$WORKSPACE_DIR"
    
    if command -v node &> /dev/null; then
        print_status "$BLUE" "Running build with recovery..."
        node automation/comprehensive-redundancy-automation.cjs build:recovery
    else
        print_status "$RED" "❌ Node.js not available for build recovery"
=======
    local name=$1
    local log_file="$LOG_DIR/$name.log"
    
    if [ -f "$log_file" ]; then
        print_status "$BLUE" "Showing logs for $name:"
        echo "----------------------------------------"
        tail -n 50 "$log_file"
        echo "----------------------------------------"
    else
        print_status "$YELLOW" "No log file found for $name"
    fi
}

# Function to show all statuses
show_all_status() {
    print_status "$BLUE" "Comprehensive Redundancy System Status:"
    echo "================================================"
    
    local all_healthy=true
    
    # Check PM2 Redundancy Manager
    if check_status "pm2-redundancy-manager"; then
        echo "✅ PM2 Redundancy Manager: RUNNING"
    else
        echo "❌ PM2 Redundancy Manager: STOPPED"
        all_healthy=false
    fi
    
    # Check GitHub Actions Redundancy Manager
    if check_status "github-actions-redundancy-manager"; then
        echo "✅ GitHub Actions Redundancy Manager: RUNNING"
    else
        echo "❌ GitHub Actions Redundancy Manager: STOPPED"
        all_healthy=false
    fi
    
    # Check Netlify Functions Redundancy Manager
    if check_status "netlify-functions-redundancy-manager"; then
        echo "✅ Netlify Functions Redundancy Manager: RUNNING"
    else
        echo "❌ Netlify Functions Redundancy Manager: STOPPED"
        all_healthy=false
    fi
    
    # Check Master Redundancy Orchestrator
    if check_status "master-redundancy-orchestrator"; then
        echo "✅ Master Redundancy Orchestrator: RUNNING"
    else
        echo "❌ Master Redundancy Orchestrator: STOPPED"
        all_healthy=false
    fi
    
    echo "================================================"
    
    if [ "$all_healthy" = true ]; then
        print_status "$GREEN" "All redundancy systems are running"
    else
        print_status "$RED" "Some redundancy systems are not running"
    fi
}

# Function to start all redundancy systems
start_all() {
    print_status "$BLUE" "Starting Comprehensive Redundancy Automation System..."
    
    # Create necessary directories
    mkdir -p "$LOG_DIR" "$PID_DIR"
    
    # Start PM2 Redundancy Manager
    start_process "pm2-redundancy-manager" "automation/pm2-redundancy-manager.cjs"
    
    # Start GitHub Actions Redundancy Manager
    start_process "github-actions-redundancy-manager" "automation/github-actions-redundancy-manager.cjs"
    
    # Start Netlify Functions Redundancy Manager
    start_process "netlify-functions-redundancy-manager" "automation/netlify-functions-redundancy-manager.cjs"
    
    # Start Master Redundancy Orchestrator
    start_process "master-redundancy-orchestrator" "automation/master-redundancy-orchestrator.cjs"
    
    print_status "$GREEN" "All redundancy systems started successfully"
    
    # Show status after startup
    sleep 3
    show_all_status
}

# Function to stop all redundancy systems
stop_all() {
    print_status "$BLUE" "Stopping Comprehensive Redundancy Automation System..."
    
    stop_process "master-redundancy-orchestrator"
    stop_process "netlify-functions-redundancy-manager"
    stop_process "github-actions-redundancy-manager"
    stop_process "pm2-redundancy-manager"
    
    print_status "$GREEN" "All redundancy systems stopped successfully"
}

# Function to restart all redundancy systems
restart_all() {
    print_status "$BLUE" "Restarting Comprehensive Redundancy Automation System..."
    stop_all
    sleep 3
    start_all
}

# Function to check system health
check_health() {
    print_status "$BLUE" "Running comprehensive health check..."
    
    # Check if all processes are running
    local all_healthy=true
    
    for process in "pm2-redundancy-manager" "github-actions-redundancy-manager" "netlify-functions-redundancy-manager" "master-redundancy-orchestrator"; do
        if ! check_status "$process" > /dev/null; then
            all_healthy=false
        fi
    done
    
    if [ "$all_healthy" = true ]; then
        print_status "$GREEN" "Health check passed: All systems are running"
        
        # Run health checks on each manager
        print_status "$BLUE" "Running individual system health checks..."
        
        # PM2 health check
        if is_process_running "$PID_DIR/pm2-redundancy-manager.pid"; then
            local pid=$(cat "$PID_DIR/pm2-redundancy-manager.pid")
            print_status "$GREEN" "PM2 Redundancy Manager health check passed"
        fi
        
        # GitHub Actions health check
        if is_process_running "$PID_DIR/github-actions-redundancy-manager.pid"; then
            local pid=$(cat "$PID_DIR/github-actions-redundancy-manager.pid")
            print_status "$GREEN" "GitHub Actions Redundancy Manager health check passed"
        fi
        
        # Netlify Functions health check
        if is_process_running "$PID_DIR/netlify-functions-redundancy-manager.pid"; then
            local pid=$(cat "$PID_DIR/netlify-functions-redundancy-manager.pid")
            print_status "$GREEN" "Netlify Functions Redundancy Manager health check passed"
        fi
        
        # Master Orchestrator health check
        if is_process_running "$PID_DIR/master-redundancy-orchestrator.pid"; then
            local pid=$(cat "$PID_DIR/master-redundancy-orchestrator.pid")
            print_status "$GREEN" "Master Redundancy Orchestrator health check passed"
        fi
        
    else
        print_status "$RED" "Health check failed: Some systems are not running"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-964e
        return 1
    fi
}

# Function to show help
show_help() {
<<<<<<< HEAD
    echo "Comprehensive Redundancy Automation System Management Script"
    echo
    echo "Usage: $0 {start|stop|restart|status|logs|follow-logs|health|build|build-recovery|help}"
    echo
    echo "Commands:"
    echo "  start           Start the comprehensive redundancy automation system"
    echo "  stop            Stop the comprehensive redundancy automation system"
    echo "  restart         Restart the comprehensive redundancy automation system"
    echo "  status          Show the current status of the system"
    echo "  logs            Show recent logs"
    echo "  follow-logs     Follow logs in real-time"
    echo "  health          Run a health check on the system"
    echo "  build           Run build process with redundancy monitoring"
    echo "  build-recovery  Run build with recovery using redundancy system"
    echo "  help            Show this help message"
    echo
    echo "Examples:"
    echo "  $0 start        # Start the system"
    echo "  $0 status       # Check system status"
    echo "  $0 logs         # View recent logs"
    echo "  $0 build        # Run build with monitoring"
    echo
    echo "Log files:"
    echo "  Main log: $LOG_FILE"
    echo "  PID file: $PID_FILE"
}

# Main script logic
case "${1:-}" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    logs)
        logs
        ;;
    follow-logs)
        follow_logs
        ;;
    health)
        health
        ;;
    build)
        build
        ;;
    build-recovery)
        build_recovery
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_status "$RED" "Error: Unknown command '$1'"
        echo
        show_help
        exit 1
        ;;
esac

exit 0
=======
    echo "Comprehensive Redundancy Automation Startup Script"
    echo "=================================================="
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  start       Start all redundancy systems (default)"
    echo "  stop        Stop all redundancy systems"
    echo "  restart     Restart all redundancy systems"
    echo "  status      Show status of all systems"
    echo "  health      Run comprehensive health check"
    echo "  logs <name> Show logs for a specific system"
    echo "  help        Show this help message"
    echo ""
    echo "System Names:"
    echo "  pm2-redundancy-manager"
    echo "  github-actions-redundancy-manager"
    echo "  netlify-functions-redundancy-manager"
    echo "  master-redundancy-orchestrator"
    echo ""
    echo "Examples:"
    echo "  $0 start                    # Start all systems"
    echo "  $0 status                   # Show all statuses"
    echo "  $0 logs pm2-redundancy-manager  # Show PM2 manager logs"
    echo "  $0 health                   # Run health check"
}

# Main script logic
main() {
    local command=${1:-start}
    
    # Change to project root directory
    cd "$PROJECT_ROOT" || {
        print_status "$RED" "Failed to change to project root directory"
        exit 1
    }
    
    case "$command" in
        start)
            start_all
            ;;
        stop)
            stop_all
            ;;
        restart)
            restart_all
            ;;
        status)
            show_all_status
            ;;
        health)
            check_health
            ;;
        logs)
            local system_name=$2
            if [ -z "$system_name" ]; then
                print_status "$RED" "Please specify a system name for logs"
                echo "Available systems: pm2-redundancy-manager, github-actions-redundancy-manager, netlify-functions-redundancy-manager, master-redundancy-orchestrator"
                exit 1
            fi
            show_logs "$system_name"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_status "$RED" "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# Trap signals for graceful shutdown
trap 'print_status "$YELLOW" "Received interrupt signal, shutting down gracefully..."; stop_all; exit 0' INT TERM

# Run main function
main "$@"
>>>>>>> origin/cursor/automate-automation-redundancy-and-build-improvement-964e
