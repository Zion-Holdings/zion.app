#!/usr/bin/env node
/* eslint-disable no-console */
const { spawnSync } = require('child_process');
const fs = require('fs-extra');
const path = require('path');

function runOutdated() {
  const res = spawnSync('npm', ['outdated', '--json'], { encoding: 'utf-8' });
  if (res.status !== 0 && !res.stdout) return {};
  try { return JSON.parse(res.stdout || '{}'); } catch { return {}; }
}

async function main() {
  const repoRoot = process.cwd();
  const docsDir = path.join(repoRoot, 'docs');
  const logsDir = path.join(repoRoot, 'automation_logs');
  await fs.ensureDir(docsDir);
  await fs.ensureDir(logsDir);

  const outdated = runOutdated();
  const keys = Object.keys(outdated || {});
  const dateSlug = new Date().toISOString().slice(0,10);
  const mdLines = [
    `# Dependency Report - ${dateSlug}`,
    '',
    keys.length ? '| Package | Current | Wanted | Latest | Type |' : 'All dependencies are up to date.',
    keys.length ? '|---|---:|---:|---:|---|' : '',
    ...keys.map(k => `| ${k} | ${outdated[k].current} | ${outdated[k].wanted} | ${outdated[k].latest} | ${outdated[k].type} |`),
    '',
    'Generated by Dependency Report Autopilot.'
  ];

  const file = path.join(docsDir, `dependency-report-${dateSlug}.md`);
  await fs.writeFile(file, mdLines.join('\n'), 'utf-8');

  await fs.writeJson(path.join(logsDir, 'dependency-report-status.json'), {
    ranAt: new Date().toISOString(),
    totalOutdated: keys.length,
    file: path.relative(repoRoot, file),
  }, { spaces: 2 });
  console.log('Dependency Report Autopilot completed');
}

main().catch(err => { console.error(err); process.exit(1); });