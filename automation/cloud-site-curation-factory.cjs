#!/usr/bin/env node

'use strict';

/*
  Cloud Site Curation Factory (New)
  - Creates lightweight curated roundup pages from recent crawl
  - Designed to diversify content types without replacing existing systems
*/

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) { fs.mkdirSync(dirPath, { recursive: true }); }

function readLatestCrawl() {
  const logsDir = path.join(process.cwd(), 'automation', 'logs');
  if (!fs.existsSync(logsDir)) return null;
  const files = fs.readdirSync(logsDir).filter((f) => f.startsWith('cloud-crawl-') && f.endsWith('.json')).sort();
  if (files.length === 0) return null;
  try { return JSON.parse(fs.readFileSync(path.join(logsDir, files[files.length - 1]), 'utf8')); } catch { return null; }
}

function tsxPage({ title, description, items }) {
  const list = items.map((it) => `<li class=\"py-1\"><a class=\"text-cyan-300 underline\" href=\"${it.url}\" target=\"_blank\" rel=\"noopener\">${it.label}</a><span class=\"ml-2 text-white/60 text-xs\">${it.meta}</span></li>`).join('\n');
  return `import Head from 'next/head';

export default function Page() {
  return (
    <div className="min-h-screen bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
      </Head>
      <main className="container mx-auto px-6 py-12 prose prose-invert">
        <h1 className="text-3xl font-extrabold">${title}</h1>
        <p className="text-white/70">${description}</p>
        <ul className="mt-4">${list}</ul>
        <p className="mt-6 text-white/60 text-sm">Auto-generated by Cloud Site Curation Factory.</p>
      </main>
    </div>
  );
}
`;
}

function normalizeTitleFromUrl(url) {
  try {
    const u = new URL(url);
    const base = u.pathname.replace(/\/$/, '').split('/').filter(Boolean).pop() || 'index';
    return base.replace(/[-_]/g, ' ').replace(/\b\w/g, (m) => m.toUpperCase());
  } catch { return 'Document'; }
}

function main() {
  const crawl = readLatestCrawl();
  if (!crawl || !Array.isArray(crawl.results) || crawl.results.length < 3) {
    console.log('Not enough crawl results for curation.');
    return;
  }
  const top = [...crawl.results].sort((a, b) => b.length - a.length).slice(0, 8);
  const items = top.map((r) => ({ url: r.url, label: normalizeTitleFromUrl(r.url), meta: `${Math.min(20000, r.length)} chars` }));
  const stamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 16);
  const slug = `roundup-${stamp}`;
  const filePath = path.join(process.cwd(), 'pages', 'reports', 'innovations', `${slug}.tsx`);
  ensureDir(path.dirname(filePath));
  const title = `Autonomous Roundup â€” ${stamp.replace('T', ' ')}`;
  const description = 'A curated set of recent highlights detected across the live app.';
  fs.writeFileSync(filePath, tsxPage({ title, description, items }));

  // Register
  const regDir = path.join(process.cwd(), 'public', 'automation');
  ensureDir(regDir);
  const regPath = path.join(regDir, 'content-registry.json');
  let reg = { items: [] };
  try { reg = JSON.parse(fs.readFileSync(regPath, 'utf8')); } catch {}
  reg.items.unshift({ title, href: `/reports/innovations/${slug}`, desc: 'New autonomous content', createdAt: new Date().toISOString(), source: 'cloud-site-curation-factory' });
  reg.items = reg.items.slice(0, 80);
  fs.writeFileSync(regPath, JSON.stringify(reg, null, 2));
}

if (require.main === module) { main(); }

module.exports = { main };


