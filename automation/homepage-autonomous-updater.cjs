#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const repoRoot = path.resolve(__dirname, '..');
const indexPath = path.join(repoRoot, 'pages', 'index.tsx');
const changelogPath = path.join(repoRoot, 'docs', 'CHANGELOG_AI.md');

const START_MARK = '{/* AUTO-GENERATED: HOME_UPDATER_START */}';
const END_MARK = '{/* AUTO-GENERATED: HOME_UPDATER_END */}';

function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (err) {
    return null;
  }
}

function requireFile(filePath) {
  const content = readFile(filePath);
  if (content === null) {
    console.error('[homepage-updater] Failed to read file:', filePath);
    process.exit(1);
  }
  return content;
}

function writeFileIfChanged(filePath, nextContent) {
  const current = requireFile(filePath);
  if (current === nextContent) {
    console.log('[homepage-updater] No changes needed.');
    return false;
  }
  fs.writeFileSync(filePath, nextContent, 'utf8');
  console.log('[homepage-updater] Updated file:', filePath);
  return true;
}

function parseLatestChangelogHighlights(maxItems = 4) {
  const content = readFile(changelogPath);
  if (!content) return [];

  // Simple parse: find first "### Features" section and collect list items
  const lines = content.split(/\r?\n/);
  const featuresIndex = lines.findIndex((l) => l.trim().toLowerCase().startsWith('### features'));
  if (featuresIndex === -1) return [];

  const items = [];
  for (let i = featuresIndex + 1; i < lines.length; i++) {
    const line = lines[i];
    if (line.trim().startsWith('### ')) break; // next section
    const match = line.match(/^\s*-\s+(.*)$/);
    if (match && match[1]) {
      // Strip trailing commit hashes in parentheses for clarity
      const cleaned = match[1].replace(/\s*\([a-f0-9]{6,}\)\s*$/i, '').trim();
      items.push(cleaned);
      if (items.length >= maxItems) break;
    }
  }
  return items;
}

function buildExploreTiles() {
  const tiles = [
    { href: '/automation', label: 'Automation Status — live agents & reports' },
    { href: '/newsroom', label: 'Newsroom — latest autonomous updates' },
    { href: '/site-health', label: 'Site Health — audits & insights' },
    { href: '/contact', label: 'Contact — discuss your use‑case' },
  ];
  const external = [
    { href: 'https://github.com/Zion-Holdings/zion.app/actions', label: 'CI Activity — autonomous workflows' },
  ];
  return [...tiles, ...external];
}

function generateAutogeneratedSection() {
  const tiles = buildExploreTiles();
  const highlights = parseLatestChangelogHighlights(4);
  const timestamp = new Date().toISOString();

  const lines = [];
  lines.push('<section className="mx-auto max-w-7xl px-6 pb-16">');
  lines.push('  <h2 className="text-center text-2xl font-bold tracking-wide text-white/90">Explore more</h2>');

  if (highlights.length > 0) {
    lines.push('  <div className="mx-auto mt-6 max-w-3xl rounded-xl border border-white/10 bg-white/5 p-4 text-sm text-white/80 backdrop-blur-md">');
    lines.push('    <div className="mb-2 font-semibold text-white">Latest improvements</div>');
    lines.push('    <ul className="list-disc pl-6">');
    for (const h of highlights) {
      lines.push(`      <li>${h}</li>`);
    }
    lines.push('    </ul>');
    lines.push(`    <div className="mt-2 text-[11px] text-white/60">Autonomously refreshed: ${timestamp}</div>`);
    lines.push('  </div>');
  }

  lines.push('  <div className="mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">');
  lines.push('');
  for (const item of tiles) {
    const isExternal = item.href.startsWith('http');
    if (isExternal) {
      lines.push(`            <a href="${item.href}" target="_blank" rel="noopener" className="bg-white/5 hover:bg-white/10 rounded-lg p-4 transition-colors border border-white/10"><span className="text-white/90">${item.label}</span></a>`);
      lines.push('  ');
      lines.push('');
    } else {
      lines.push(`            <Link href="${item.href}"><a className="bg-white/5 hover:bg-white/10 rounded-lg p-4 transition-colors border border-white/10"><span className="text-white/90">${item.label}</span></a></Link>`);
      lines.push('  ');
      lines.push('');
    }
  }
  lines.push('  </div>');
  lines.push('</section>');
  return lines.join('\n');
}

function updateIndexPage() {
  const source = requireFile(indexPath);

  const startIndex = source.indexOf(START_MARK);
  const endIndex = source.indexOf(END_MARK);

  if (startIndex === -1 || endIndex === -1 || endIndex <= startIndex) {
    console.error('[homepage-updater] Marker comments not found or malformed in pages/index.tsx');
    process.exit(1);
  }

  const before = source.slice(0, startIndex + START_MARK.length);
  const after = source.slice(endIndex);

  const generated = generateAutogeneratedSection();

  const next = [
    before,
    '\n',
    generated,
    '\n',
    after,
  ].join('');

  const changed = writeFileIfChanged(indexPath, next);
  return changed;
}

function stageCommitPushIfCI() {
  const isCI = !!process.env.CI;
  if (!isCI) return;

  try {
    const { execSync } = require('child_process');
    execSync('git config user.name "github-actions[bot]"');
    execSync('git config user.email "41898282+github-actions[bot]@users.noreply.github.com"');
    execSync('git add pages/index.tsx');
    const diff = execSync('git diff --cached --quiet || echo changed').toString().trim();
    if (diff.includes('changed')) {
      execSync('git commit -m "chore(homepage): autonomous content refresh"');
      execSync('git push');
      console.log('[homepage-updater] Changes committed and pushed.');
    } else {
      console.log('[homepage-updater] No staged changes to commit.');
    }
  } catch (err) {
    console.error('[homepage-updater] Git commit/push failed:', err.message);
  }
}

(function main() {
  console.log('[homepage-updater] Starting homepage auto-update');
  const changed = updateIndexPage();
  if (changed) {
    console.log('[homepage-updater] Homepage content updated.');
  }
  stageCommitPushIfCI();
})();