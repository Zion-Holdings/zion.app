#!/usr/bin/env node
"use strict";

const { spawnSync, execSync } = require("child_process");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");

class UltimateRedundancyMaster {
  constructor() {
<<<<<<< HEAD
    this.workspace = process.cwd();
    this.logDir = path.join(this.workspace, "automation/logs");
    this.logFile = path.join(this.logDir, "ultimate-redundancy-master.log");
    this.ensureLogDir();
    
    this.config = {
      // All PM2 Ecosystems
      pm2Ecosystems: [
        "ecosystem.pm2.cjs",
        "ecosystem.redundancy.cjs", 
        "ecosystem.comprehensive-redundancy.cjs",
        "ecosystem.ultimate-redundancy.pm2.cjs",
        "ecosystem.fast-ads.local.cjs",
        "ecosystem.cron.local.cjs"
      ],
      
      // All PM2 Process Groups
      pm2ProcessGroups: {
        core: ["zion-auto-sync", "zion-auto-sync-cron"],
        redundancy: [
=======
    this.config = {
      pm2: {
        ecosystemFiles: [
          "ecosystem.pm2.cjs",
          "ecosystem.redundancy.cjs", 
          "ecosystem.comprehensive-redundancy.cjs",
          "ecosystem.redundancy.pm2.cjs"
        ],
        processes: [
          "zion-auto-sync",
          "zion-auto-sync-cron",
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b
          "redundancy-automation-system",
          "redundancy-health-monitor",
          "redundancy-git-sync", 
          "redundancy-build-monitor",
<<<<<<< HEAD
          "pm2-redundancy-monitor",
          "comprehensive-redundancy-orchestrator"
        ],
        fastads: ["fast-ads-orchestrator", "fast-ads-scheduler"],
        cron: ["cron-automation-system", "cron-scheduler"],
        enhanced: [
          "enhanced-pm2-redundancy-manager",
          "enhanced-github-actions-redundancy-manager",
          "enhanced-netlify-functions-redundancy-manager"
        ],
        comprehensive: [
          "comprehensive-pm2-redundancy",
          "comprehensive-github-actions-redundancy",
          "comprehensive-netlify-functions-redundancy"
        ]
      },
      
      // All GitHub Actions Workflows
      githubWorkflows: [
        "marketing-sync.yml",
        "sync-health.yml",
        "marketing-sync-backup.yml",
        "sync-health-backup.yml"
      ],
      
      // All Netlify Functions from manifest
      netlifyFunctions: [
        "a11y-alt-text-runner",
        "adaptive-orchestrator",
        "ai-changelog-runner",
        "ai-trends-radar-runner",
        "anchor-links-auto-fixer",
        "auto-discovery-runner",
        "auto-scheduler",
        "automation-matrix",
        "autonomous-invention-orchestrator",
        "autonomous-meta-orchestrator",
        "broken-image-scanner",
        "broken-image-scanner-runner",
        "canonical-auditor",
        "cloud_deep_research",
        "cloud_orchestrator",
        "code-smell-audit-runner",
        "component-coupling-graph-runner",
        "component-props-docs-runner",
        "component-size-report",
        "content-freshness-score-runner",
        "continuous-front-runner",
        "continuous-orchestrator",
        "dead-code-audit",
        "dead-code-report",
        "deps-auto-upgrade-runner",
        "docs-index-runner",
        "docs-search-index-runner",
        "duplicate-media-finder-runner",
        "external-link-check-runner",
        "fast-front-promoter",
        "fast-orchestrator",
        "feature-advertiser",
        "features-capabilities-benefits-advertiser",
        "front-ads-promoter",
        "front-enhancer",
        "front-index-futurizer",
        "front-index-orchestrator",
        "front-index-scheduler",
        "front-maximizer",
        "front-visionary-expander",
        "frontpage-enhancer",
        "frontpage-scheduler",
        "headers-enforcer",
        "home-visionary-expander",
        "homepage-advertiser-scheduler",
        "homepage-enhancer",
        "homepage-updater",
        "homepage-updater-scheduler",
        "homepage_advertiser",
        "hyper-front-index-accelerator",
        "image-optimizer-runner",
        "innovation-lab",
        "innovations-promoter",
        "intelligent-meta-orchestrator",
        "internal-link-graph-runner",
        "knowledge-pack-runner",
        "license-compliance-auditor",
        "link-and-health-scheduler",
        "link-crawler",
        "maintenance-scheduler",
        "marketing-and-features-promo",
        "marketing-scheduler",
        "media-og-and-optimize",
        "metadata-optimizer-runner",
        "netlify-auto-healer-runner",
        "newsroom-auto-publisher",
        "newsroom-runner",
        "og-image-update-runner",
        "orphan-pages-detector",
        "pagespeed-insights-runner",
        "readme-advertiser",
        "repo-knowledge-graph-runner",
        "repo-radar-and-graph",
        "repo-radar-runner",
        "revenue-ideas-lab",
        "roadmap-curator",
        "robots-auditor",
        "schedule-content-index",
        "schedule-homepage",
        "schedule-knowledge-graph",
        "schedule-site-health",
        "security-audit",
        "security-audit-runner",
        "seo-audit-runner",
        "site-404-map-runner",
        "site-crawler",
        "sitemap_runner",
        "stale-content-auditor-runner",
        "todo-scanner-runner",
        "todo-summary-runner",
        "topic-cluster-builder-runner",
        "topics-map-runner",
        "trigger-all-and-commit",
        "ui-enhancer",
        "ultrafast-front-orchestrator",
        "ultrafast-orchestrator",
        "unused-media-scanner"
      ],
      
      // All automation scripts
      automationScripts: [
        "pm2-auto-sync.js",
        "marketing-sync.js",
        "git-sync.cjs",
        "redundancy-automation-system.cjs",
        "redundancy-health-monitor.cjs",
        "redundancy-git-sync.cjs",
        "redundancy-build-monitor.cjs",
        "pm2-redundancy-monitor.cjs",
        "comprehensive-redundancy-orchestrator.cjs",
        "github-actions-redundancy-manager.cjs",
        "netlify-functions-redundancy-manager.cjs",
        "pm2-redundancy-manager.cjs",
        "ultimate-redundancy-master.cjs",
        "build-failure-recovery.cjs",
        "comprehensive-github-actions-redundancy.cjs",
        "comprehensive-monitoring-dashboard.cjs",
        "comprehensive-netlify-functions-redundancy.cjs",
        "comprehensive-pm2-redundancy.cjs",
        "comprehensive-redundancy-system.cjs",
        "continuous-build-monitor.cjs",
        "enhanced-git-sync-orchestrator.cjs",
        "enhanced-github-actions-redundancy.cjs",
        "enhanced-netlify-functions-redundancy.cjs",
        "enhanced-netlify-healer.cjs",
        "enhanced-pm2-redundancy.cjs",
        "footer-injector.cjs",
        "git-sync-cron.sh",
        "git-sync.cjs",
        "github-actions-backup-manager.cjs",
        "github-actions-redundancy.cjs",
        "netlify-functions-redundancy.cjs",
        "nextjs-page-validator.cjs",
        "master-build-orchestrator.cjs",
        "master-redundancy-orchestrator.cjs",
        "pre-build-health-check.cjs",
        "redundancy-config.json"
      ]
    };
    
    this.status = {
      pm2: { healthy: false, processes: [], ecosystems: [] },
      github: { healthy: false, workflows: [], backups: [] },
      netlify: { healthy: false, functions: [], manifest: null },
      automation: { healthy: false, scripts: [], logs: [] }
    };
  }

  ensureLogDir() {
    if (!fs.existsSync(this.logDir)) {
      fs.mkdirSync(this.logDir, { recursive: true });
=======
          "master-redundancy-orchestrator",
          "enhanced-pm2-redundancy",
          "enhanced-github-actions-redundancy",
          "enhanced-netlify-functions-redundancy",
          "redundancy-automation-system",
          "redundancy-health-monitor",
          "redundancy-git-sync",
          "redundancy-build-monitor"
        ],
        healthCheckInterval: 15000,
        maxRestartAttempts: 10,
        restartDelay: 3000,
        autoRecovery: true,
        processMonitoring: true,
        logRotation: true
      },
      githubActions: {
        workflows: [
          ".github/workflows/marketing-sync.yml",
          ".github/workflows/sync-health.yml",
          ".github/workflows/marketing-sync-backup.yml",
          ".github/workflows/sync-health-backup.yml"
        ],
        healthCheckInterval: 30000,
        maxFailureThreshold: 5,
        autoTrigger: true,
        backupTriggers: true,
        workflowValidation: true,
        apiHealthCheck: true
      },
      netlifyFunctions: {
        manifestFile: "netlify/functions/functions-manifest.json",
        healthCheckInterval: 60000,
        maxFailureThreshold: 3,
        autoRegenerate: true,
        deploymentCheck: true,
        logRotation: true,
        functionCount: 100
      },
      logging: {
        logDir: "automation/logs",
        maxLogSize: 20 * 1024 * 1024,
        maxLogFiles: 50,
        compression: true
      },
      monitoring: {
        enabled: true,
        interval: 15000,
        alertThreshold: 5,
        autoRestart: true,
        loadBalancing: true,
        healthDashboard: true
      },
      recovery: {
        autoRecovery: true,
        maxRecoveryAttempts: 10,
        recoveryDelay: 5000,
        fallbackStrategies: true,
        backupSystems: true
      }
    };
    
    this.ensureLogDirectory();
    this.initializeMonitoring();
    this.startUltimateMonitoring();
  }

  ensureLogDirectory() {
    if (!fs.existsSync(this.config.logging.logDir)) {
      fs.mkdirSync(this.config.logging.logDir, { recursive: true });
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b
    }
  }

  log(message, level = "INFO") {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${level}] ${message}`;
    console.log(logEntry);
    
<<<<<<< HEAD
    try {
      fs.appendFileSync(this.logFile, logEntry + "\n");
    } catch (error) {
      console.error("Failed to write to log file:", error.message);
    }
  }

  async executeCommand(command, args = [], options = {}) {
    return new Promise((resolve) => {
      const child = spawn(command, args, {
        stdio: 'pipe',
        shell: true,
        ...options
      });
      
      let stdout = '';
      let stderr = '';
      
      child.stdout.on('data', (data) => {
        stdout += data.toString();
      });
      
      child.stderr.on('data', (data) => {
        stderr += data.toString();
      });
      
      child.on('close', (code) => {
        resolve({
          code,
          stdout: stdout.trim(),
          stderr: stderr.trim(),
          success: code === 0
        });
      });
    });
  }

  async checkPM2Status() {
    this.log("Checking PM2 status...");
    
    try {
      // Check PM2 daemon
      const pm2Status = await this.executeCommand('pm2', ['status']);
      if (!pm2Status.success) {
        this.log("PM2 daemon not running, starting...", "WARN");
        await this.executeCommand('pm2', ['start']);
      }
      
      // Check all ecosystems
      for (const ecosystem of this.config.pm2Ecosystems) {
        const ecosystemPath = path.join(this.workspace, ecosystem);
        if (fs.existsSync(ecosystemPath)) {
          this.log(`Checking ecosystem: ${ecosystem}`);
          
          // Try to start/restart ecosystem
          const result = await this.executeCommand('pm2', ['start', ecosystem, '--update-env']);
          if (result.success) {
            this.log(`Successfully started ecosystem: ${ecosystem}`);
          } else {
            this.log(`Failed to start ecosystem: ${ecosystem}`, "ERROR");
          }
        }
      }
      
      // Check process groups
      const pm2List = await this.executeCommand('pm2', ['list']);
      if (pm2List.success) {
        this.status.pm2.processes = pm2List.stdout.split('\n').filter(line => line.trim());
        this.status.pm2.healthy = this.status.pm2.processes.length > 0;
      }
      
    } catch (error) {
      this.log(`PM2 check failed: ${error.message}`, "ERROR");
    }
  }

  async checkGitHubActions() {
    this.log("Checking GitHub Actions workflows...");
    
    try {
      const workflowsDir = path.join(this.workspace, '.github/workflows');
      if (fs.existsSync(workflowsDir)) {
        const workflows = fs.readdirSync(workflowsDir).filter(file => file.endsWith('.yml'));
        
        for (const workflow of workflows) {
          const workflowPath = path.join(workflowsDir, workflow);
          const content = fs.readFileSync(workflowPath, 'utf8');
          
          // Check if workflow has proper triggers
          if (content.includes('schedule:') || content.includes('workflow_dispatch:')) {
            this.log(`Workflow ${workflow} has proper triggers`);
          } else {
            this.log(`Workflow ${workflow} missing triggers`, "WARN");
          }
          
          // Check for backup workflows
          if (workflow.includes('backup')) {
            this.status.github.backups.push(workflow);
          } else {
            this.status.github.workflows.push(workflow);
          }
        }
        
        this.status.github.healthy = this.status.github.workflows.length > 0;
      }
      
    } catch (error) {
      this.log(`GitHub Actions check failed: ${error.message}`, "ERROR");
    }
    
    // Store health results
    this.healthHistory.set(Date.now(), healthResults);
    
    // Clean up old health history (keep last 100 entries)
    const healthKeys = Array.from(this.healthHistory.keys()).sort((a, b) => b - a);
    if (healthKeys.length > 100) {
      healthKeys.slice(100).forEach(key => this.healthHistory.delete(key));
    }
    
    // Update last health check timestamp
    this.lastHealthCheck.set('overall', Date.now());
    
    this.log(`Health check completed. Overall status: ${healthResults.overall}`);
    return healthResults;
  }

  async checkNetlifyFunctions() {
    this.log("Checking Netlify functions...");
    
    try {
      const manifestPath = path.join(this.workspace, 'netlify/functions/functions-manifest.json');
      if (fs.existsSync(manifestPath)) {
        const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
        this.status.netlify.manifest = manifest;
        this.status.netlify.functions = manifest.functions || [];
        
        // Check if functions directory exists
        const functionsDir = path.join(this.workspace, 'netlify/functions');
        if (fs.existsSync(functionsDir)) {
          const functionFiles = fs.readdirSync(functionsDir).filter(file => file.endsWith('.js') || file.endsWith('.cjs'));
          this.log(`Found ${functionFiles.length} function files`);
        }
        
        this.status.netlify.healthy = this.status.netlify.functions.length > 0;
      }
      
    } catch (error) {
      this.log(`Netlify functions check failed: ${error.message}`, "ERROR");
    }
  }

  async checkAutomationScripts() {
    this.log("Checking automation scripts...");
    
    try {
      const automationDir = path.join(this.workspace, 'automation');
      if (fs.existsSync(automationDir)) {
        const scripts = fs.readdirSync(automationDir).filter(file => 
          file.endsWith('.js') || file.endsWith('.cjs') || file.endsWith('.sh')
        );
        
        this.status.automation.scripts = scripts;
        
        // Check log files
        const logsDir = path.join(automationDir, 'logs');
        if (fs.existsSync(logsDir)) {
          const logFiles = fs.readdirSync(logsDir).filter(file => file.endsWith('.log'));
          this.status.automation.logs = logFiles;
        }
        
        this.status.automation.healthy = this.status.automation.scripts.length > 0;
      }
      
    } catch (error) {
      this.log(`Automation scripts check failed: ${error.message}`, "ERROR");
    }
  }

  async createRedundancyBackups() {
    this.log("Creating redundancy backups...");
    
    try {
      const backupDir = path.join(this.workspace, 'automation/backups/ultimate-redundancy');
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      
      // Backup PM2 ecosystems
      for (const ecosystem of this.config.pm2Ecosystems) {
        const sourcePath = path.join(this.workspace, ecosystem);
        if (fs.existsSync(sourcePath)) {
          const backupPath = path.join(backupDir, `${ecosystem}.${timestamp}.backup`);
          fs.copyFileSync(sourcePath, backupPath);
          this.log(`Backed up ${ecosystem}`);
        }
      }
      
      // Backup GitHub workflows
      const workflowsDir = path.join(this.workspace, '.github/workflows');
      if (fs.existsSync(workflowsDir)) {
        const workflowsBackupDir = path.join(backupDir, 'github-workflows', timestamp);
        fs.mkdirSync(workflowsBackupDir, { recursive: true });
        
        const workflows = fs.readdirSync(workflowsDir);
        for (const workflow of workflows) {
          const sourcePath = path.join(workflowsDir, workflow);
          const backupPath = path.join(workflowsBackupDir, workflow);
          fs.copyFileSync(sourcePath, backupPath);
        }
        this.log("Backed up GitHub workflows");
      }
      
      // Backup Netlify functions manifest
      const manifestPath = path.join(this.workspace, 'netlify/functions/functions-manifest.json');
      if (fs.existsSync(manifestPath)) {
        const backupPath = path.join(backupDir, `functions-manifest.${timestamp}.backup`);
        fs.copyFileSync(manifestPath, backupPath);
        this.log("Backed up Netlify functions manifest");
      }
      
      this.log("Redundancy backups created successfully");
      
    } catch (error) {
      this.log(`Failed to create redundancy backups: ${error.message}`, "ERROR");
    }
  }

  async startRedundancyServices() {
    this.log("Starting redundancy services...");
    
    try {
      // Start PM2 redundancy processes
      const pm2RedundancyScripts = [
        'pm2-redundancy-monitor.cjs',
        'comprehensive-redundancy-orchestrator.cjs',
        'github-actions-redundancy-manager.cjs',
        'netlify-functions-redundancy-manager.cjs'
      ];
      
      for (const script of pm2RedundancyScripts) {
        const scriptPath = path.join(this.workspace, 'automation', script);
        if (fs.existsSync(scriptPath)) {
          this.log(`Starting ${script}`);
          await this.executeCommand('node', [scriptPath, 'start']);
        }
      }
      
      // Start monitoring processes
      const monitoringScripts = [
        'redundancy-health-monitor.cjs',
        'redundancy-build-monitor.cjs',
        'continuous-build-monitor.cjs'
      ];
      
      for (const script of monitoringScripts) {
        const scriptPath = path.join(this.workspace, 'automation', script);
        if (fs.existsSync(scriptPath)) {
          this.log(`Starting ${script}`);
          await this.executeCommand('node', [scriptPath, 'start']);
        }
      }
      
      this.log("Redundancy services started");
      
    } catch (error) {
      this.log(`Failed to start redundancy services: ${error.message}`, "ERROR");
=======
    const logFile = path.join(this.config.logging.logDir, `ultimate-redundancy-${new Date().toISOString().split('T')[0]}.log`);
    fs.appendFileSync(logFile, logEntry + "\n");
  }

  async runCommand(command, args = [], options = {}) {
    return new Promise((resolve) => {
      const result = spawnSync(command, args, {
        cwd: process.cwd(),
        env: process.env,
        shell: false,
        encoding: "utf8",
        maxBuffer: 1024 * 1024 * 50,
        ...options
      });
      
      resolve({
        status: result.status,
        stdout: result.stdout || "",
        stderr: result.stderr || "",
        error: result.error
      });
    });
  }

  async checkPM2UltimateHealth() {
    this.log("🔍 Checking ultimate PM2 process health...");
    
    try {
      const result = await this.runCommand("pm2", ["status", "--no-daemon"]);
      
      if (result.status !== 0) {
        this.log("❌ PM2 status check failed", "ERROR");
        return this.recoverPM2System();
      }

      const processes = this.config.pm2.processes;
      let healthyCount = 0;
      let failedProcesses = [];

      for (const processName of processes) {
        try {
          const processResult = await this.runCommand("pm2", ["show", processName]);
          if (processResult.status === 0 && processResult.stdout.includes("online")) {
            healthyCount++;
          } else {
            failedProcesses.push(processName);
          }
        } catch (error) {
          failedProcesses.push(processName);
        }
      }

      this.log(`✅ PM2 Health: ${healthyCount}/${processes.length} processes healthy`);

      if (failedProcesses.length > 0) {
        this.log(`⚠️ Failed processes: ${failedProcesses.join(", ")}`, "WARN");
        await this.recoverPM2Processes(failedProcesses);
      }

      return healthyCount === processes.length;
    } catch (error) {
      this.log(`❌ PM2 health check error: ${error.message}`, "ERROR");
      return false;
    }
  }

  async recoverPM2System() {
    this.log("🔄 Attempting PM2 system recovery...");
    
    try {
      // Try to resurrect PM2
      await this.runCommand("pm2", ["resurrect"]);
      
      // Start comprehensive redundancy ecosystem
      await this.runCommand("pm2", ["start", "ecosystem.comprehensive-redundancy.cjs"]);
      
      // Save PM2 configuration
      await this.runCommand("pm2", ["save"]);
      
      this.log("✅ PM2 system recovery completed");
      return true;
    } catch (error) {
      this.log(`❌ PM2 recovery failed: ${error.message}`, "ERROR");
      return false;
    }
  }

  async recoverPM2Processes(failedProcesses) {
    this.log(`🔄 Recovering ${failedProcesses.length} failed PM2 processes...`);
    
    for (const processName of failedProcesses) {
      try {
        await this.runCommand("pm2", ["restart", processName]);
        this.log(`✅ Restarted ${processName}`);
      } catch (error) {
        this.log(`❌ Failed to restart ${processName}: ${error.message}`, "ERROR");
        
        // Try to start from ecosystem files
        for (const ecosystemFile of this.config.pm2.ecosystemFiles) {
          if (fs.existsSync(ecosystemFile)) {
            try {
              await this.runCommand("pm2", ["start", ecosystemFile, "--only", processName]);
              this.log(`✅ Started ${processName} from ${ecosystemFile}`);
              break;
            } catch (startError) {
              continue;
            }
          }
        }
      }
    }
  }

  async checkGitHubActionsUltimateHealth() {
    this.log("🔍 Checking ultimate GitHub Actions health...");
    
    try {
      // Check workflow files exist
      for (const workflow of this.config.githubActions.workflows) {
        if (!fs.existsSync(workflow)) {
          this.log(`⚠️ Missing workflow: ${workflow}`, "WARN");
          continue;
        }
        
        // Validate workflow syntax
        try {
          const workflowContent = fs.readFileSync(workflow, 'utf8');
          if (workflowContent.includes('name:') && workflowContent.includes('on:')) {
            this.log(`✅ Workflow ${workflow} is valid`);
          } else {
            this.log(`⚠️ Workflow ${workflow} may have syntax issues`, "WARN");
          }
        } catch (error) {
          this.log(`❌ Error reading workflow ${workflow}: ${error.message}`, "ERROR");
        }
      }

      // Check GitHub API connectivity
      try {
        const result = await this.runCommand("curl", ["-s", "-o", "/dev/null", "-w", "%{http_code}", "https://api.github.com"]);
        if (result.status === 0 && result.stdout === "200") {
          this.log("✅ GitHub API connectivity: OK");
        } else {
          this.log("⚠️ GitHub API connectivity: Issues detected", "WARN");
        }
      } catch (error) {
        this.log("❌ GitHub API connectivity check failed", "ERROR");
      }

      return true;
    } catch (error) {
      this.log(`❌ GitHub Actions health check error: ${error.message}`, "ERROR");
      return false;
    }
  }

  async checkNetlifyFunctionsUltimateHealth() {
    this.log("🔍 Checking ultimate Netlify Functions health...");
    
    try {
      if (!fs.existsSync(this.config.netlifyFunctions.manifestFile)) {
        this.log("❌ Netlify functions manifest not found", "ERROR");
        return false;
      }

      const manifest = JSON.parse(fs.readFileSync(this.config.netlifyFunctions.manifestFile, 'utf8'));
      
      if (manifest.functions && Array.isArray(manifest.functions)) {
        const functionCount = manifest.functions.length;
        this.log(`✅ Netlify Functions: ${functionCount} functions found`);
        
        if (functionCount < this.config.netlifyFunctions.functionCount) {
          this.log(`⚠️ Function count below threshold: ${functionCount}/${this.config.netlifyFunctions.functionCount}`, "WARN");
        }
        
        // Check for critical functions
        const criticalFunctions = [
          "netlify-auto-healer-runner",
          "continuous-orchestrator",
          "automation-matrix"
        ];
        
        for (const criticalFunc of criticalFunctions) {
          if (manifest.functions.includes(criticalFunc)) {
            this.log(`✅ Critical function ${criticalFunc}: OK`);
          } else {
            this.log(`⚠️ Critical function ${criticalFunc}: Missing`, "WARN");
          }
        }
      } else {
        this.log("❌ Invalid functions manifest format", "ERROR");
        return false;
      }

      return true;
    } catch (error) {
      this.log(`❌ Netlify Functions health check error: ${error.message}`, "ERROR");
      return false;
    }
  }

  async performComprehensiveHealthCheck() {
    this.log("🚀 Starting comprehensive health check...");
    
    const results = {
      pm2: await this.checkPM2UltimateHealth(),
      githubActions: await this.checkGitHubActionsUltimateHealth(),
      netlifyFunctions: await this.checkNetlifyFunctionsUltimateHealth(),
      timestamp: new Date().toISOString()
    };

    const overallHealth = results.pm2 && results.githubActions && results.netlifyFunctions;
    
    this.log(`📊 Comprehensive Health Status: ${overallHealth ? '✅ HEALTHY' : '❌ UNHEALTHY'}`);
    this.log(`   PM2: ${results.pm2 ? '✅' : '❌'}`);
    this.log(`   GitHub Actions: ${results.githubActions ? '✅' : '❌'}`);
    this.log(`   Netlify Functions: ${results.netlifyFunctions ? '✅' : '❌'}`);

    if (!overallHealth) {
      this.log("🔄 Initiating comprehensive recovery procedures...");
      await this.performComprehensiveRecovery(results);
    }

    return results;
  }

  async performComprehensiveRecovery(healthResults) {
    this.log("🔄 Starting comprehensive recovery...");
    
    if (!healthResults.pm2) {
      await this.recoverPM2System();
    }
    
    if (!healthResults.githubActions) {
      this.log("🔄 GitHub Actions recovery: Manual intervention may be required");
    }
    
    if (!healthResults.netlifyFunctions) {
      this.log("🔄 Netlify Functions recovery: Regenerating manifest...");
      try {
        await this.runCommand("npm", ["run", "netlify:manifest"]);
        this.log("✅ Netlify functions manifest regenerated");
      } catch (error) {
        this.log(`❌ Failed to regenerate manifest: ${error.message}`, "ERROR");
      }
    }
  }

  async startUltimateMonitoring() {
    this.log("🚀 Starting ultimate redundancy monitoring...");
    
    setInterval(async () => {
      await this.performComprehensiveHealthCheck();
    }, this.config.monitoring.interval);

    // Initial health check
    await this.performComprehensiveHealthCheck();
  }

  initializeMonitoring() {
    this.log("🔧 Initializing ultimate redundancy monitoring system...");
    
    // Ensure PM2 is running
    try {
      execSync("pm2 ping", { stdio: 'pipe' });
      this.log("✅ PM2 daemon is running");
    } catch (error) {
      this.log("⚠️ PM2 daemon not running, attempting to start...");
      try {
        execSync("pm2 start", { stdio: 'pipe' });
        this.log("✅ PM2 daemon started");
      } catch (startError) {
        this.log(`❌ Failed to start PM2 daemon: ${startError.message}`, "ERROR");
      }
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b
    }
  }

  async generateHealthReport() {
<<<<<<< HEAD
    this.log("Generating health report...");
    
    const report = {
      timestamp: new Date().toISOString(),
      overallHealth: this.status.pm2.healthy && this.status.github.healthy && this.status.netlify.healthy && this.status.automation.healthy,
      pm2: {
        healthy: this.status.pm2.healthy,
        ecosystems: this.config.pm2Ecosystems,
        processes: this.status.pm2.processes.length,
        status: this.status.pm2
      },
      github: {
        healthy: this.status.github.healthy,
        workflows: this.status.github.workflows,
        backups: this.status.github.backups,
        status: this.status.github
      },
      netlify: {
        healthy: this.status.netlify.healthy,
        functions: this.status.netlify.functions.length,
        manifest: this.status.netlify.manifest ? 'Present' : 'Missing',
        status: this.status.netlify
      },
      automation: {
        healthy: this.status.automation.healthy,
        scripts: this.status.automation.scripts.length,
        logs: this.status.automation.logs.length,
        status: this.status.automation
      }
    };
    
    const reportPath = path.join(this.workspace, 'automation/logs/ultimate-redundancy-health-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    this.log(`Health report generated: ${reportPath}`);
    return report;
  }

  async runFullCheck() {
    this.log("=== ULTIMATE REDUNDANCY MASTER - FULL SYSTEM CHECK ===");
    
    await this.checkPM2Status();
    await this.checkGitHubActions();
    await this.checkNetlifyFunctions();
    await this.checkAutomationScripts();
    await this.createRedundancyBackups();
    await this.startRedundancyServices();
    
    const report = await this.generateHealthReport();
    
    this.log("=== CHECK COMPLETE ===");
    this.log(`Overall Health: ${report.overallHealth ? 'HEALTHY' : 'UNHEALTHY'}`);
    this.log(`PM2: ${report.pm2.healthy ? 'HEALTHY' : 'UNHEALTHY'} (${report.pm2.processes} processes)`);
    this.log(`GitHub Actions: ${report.github.healthy ? 'HEALTHY' : 'UNHEALTHY'} (${report.github.workflows.length} workflows)`);
    this.log(`Netlify Functions: ${report.netlify.healthy ? 'HEALTHY' : 'UNHEALTHY'} (${report.netlify.functions} functions)`);
    this.log(`Automation Scripts: ${report.automation.healthy ? 'HEALTHY' : 'UNHEALTHY'} (${report.automation.scripts.length} scripts)`);
    
    return report;
  }

  async startContinuousMonitoring() {
    this.log("Starting continuous monitoring...");
    
    // Run full check every 5 minutes
    setInterval(async () => {
      await this.runFullCheck();
    }, 5 * 60 * 1000);
    
    // Run initial check
    await this.runFullCheck();
    
    this.log("Continuous monitoring started");
  }
}

// Main execution
if (require.main === module) {
  const orchestrator = new UltimateRedundancyMaster();
  const command = process.argv[2] || 'check';
  
  switch (command) {
    case 'check':
      orchestrator.runFullCheck().then(() => process.exit(0));
      break;
    case 'monitor':
      orchestrator.startContinuousMonitoring();
      break;
    case 'start':
      orchestrator.startRedundancyServices().then(() => process.exit(0));
      break;
    case 'backup':
      orchestrator.createRedundancyBackups().then(() => process.exit(0));
      break;
    case 'health':
      orchestrator.generateHealthReport().then(() => process.exit(0));
      break;
    default:
      console.log(`
Ultimate Redundancy Master - Usage:
  node ultimate-redundancy-master.cjs [command]

Commands:
  check     - Run full system check
  monitor   - Start continuous monitoring
  start     - Start redundancy services
  backup    - Create redundancy backups
  health    - Generate health report

Examples:
  node ultimate-redundancy-master.cjs check
  node ultimate-redundancy-master.cjs monitor
      `);
      process.exit(1);
=======
    const healthResults = await this.performComprehensiveHealthCheck();
    
    const report = {
      timestamp: new Date().toISOString(),
      overallHealth: healthResults.pm2 && healthResults.githubActions && healthResults.netlifyFunctions,
      systems: {
        pm2: {
          status: healthResults.pm2 ? 'HEALTHY' : 'UNHEALTHY',
          processes: this.config.pm2.processes.length,
          ecosystemFiles: this.config.pm2.ecosystemFiles
        },
        githubActions: {
          status: healthResults.githubActions ? 'HEALTHY' : 'UNHEALTHY',
          workflows: this.config.githubActions.workflows,
          autoTrigger: this.config.githubActions.autoTrigger
        },
        netlifyFunctions: {
          status: healthResults.netlifyFunctions ? 'HEALTHY' : 'UNHEALTHY',
          manifestFile: this.config.netlifyFunctions.manifestFile,
          autoRegenerate: this.config.netlifyFunctions.autoRegenerate
        }
      },
      monitoring: {
        interval: this.config.monitoring.interval,
        autoRecovery: this.config.monitoring.autoRestart,
        loadBalancing: this.config.monitoring.loadBalancing
      }
    };

    const reportFile = path.join(this.config.logging.logDir, `ultimate-redundancy-report-${new Date().toISOString().split('T')[0]}.json`);
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
    
    this.log(`📊 Health report generated: ${reportFile}`);
    return report;
  }
}

// CLI Interface
if (require.main === module) {
  const master = new UltimateRedundancyMaster();
  
  const command = process.argv[2];
  
  switch (command) {
    case 'start':
      master.log("🚀 Ultimate Redundancy Master started");
      break;
    case 'health':
      master.performComprehensiveHealthCheck();
      break;
    case 'report':
      master.generateHealthReport();
      break;
    case 'recover':
      master.performComprehensiveRecovery({ pm2: false, githubActions: false, netlifyFunctions: false });
      break;
    default:
      master.log("Usage: node ultimate-redundancy-master.cjs [start|health|report|recover]");
      master.log("Starting in monitoring mode...");
      break;
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b
  }
}

module.exports = UltimateRedundancyMaster;