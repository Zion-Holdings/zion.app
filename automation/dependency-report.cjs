#!/usr/bin/env node
/* eslint-disable */
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

function getOutdated() {
  try {
    const out = execSync('npm outdated --json', { stdio: ['ignore', 'pipe', 'ignore'] }).toString();
    return JSON.parse(out);
  } catch (e) {
    // npm outdated exits non-zero when updates exist; try parse output
    try { return JSON.parse(e.stdout.toString()); } catch { return {}; }
  }
}

function toMarkdown(map) {
  const lines = ['# Dependencies Report', '', 'Auto-generated from npm outdated.', ''];
  const names = Object.keys(map).sort();
  if (names.length === 0) {
    lines.push('No outdated dependencies found.');
  } else {
    for (const name of names) {
      const i = map[name];
      lines.push(`- ${name}: current ${i.current}, wanted ${i.wanted}, latest ${i.latest}`);
    }
  }
  lines.push('', '_Generated by automation/dependency-report.cjs_');
  return lines.join('\n');
}

function main() {
  const data = getOutdated();
  const docsDir = path.join(process.cwd(), 'docs');
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir, { recursive: true });
  fs.writeFileSync(path.join(docsDir, 'dependencies-report.json'), JSON.stringify(data, null, 2));
  fs.writeFileSync(path.join(docsDir, 'dependencies-report.md'), toMarkdown(data));
  console.log('dependency-report: updated docs/dependencies-report.*');
}

if (require.main === module) main();