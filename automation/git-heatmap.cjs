#!/usr/bin/env node
/* eslint-disable */
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

function getFileChangeCounts(limit = 500) {
  try {
    const log = execSync(`git log -n ${limit} --name-only --pretty=format:`, { stdio: ['ignore', 'pipe', 'ignore'] }).toString();
    const lines = log.split(/\r?\n/).filter(Boolean);
    const counts = new Map();
    for (const f of lines) {
      if (!f || f.startsWith('.')) continue;
      if (f.startsWith('package-lock.json')) continue;
      counts.set(f, (counts.get(f) || 0) + 1);
    }
    return Array.from(counts.entries()).sort((a, b) => b[1] - a[1]);
  } catch {
    return [];
  }
}

function toMarkdown(entries, topN = 50) {
  const lines = ['# Git Change Heatmap', '', 'Top frequently changed files (recent history).', ''];
  const top = entries.slice(0, topN);
  for (const [file, count] of top) {
    lines.push(`- ${file}: ${count}`);
  }
  lines.push('', '_Generated by automation/git-heatmap.cjs_');
  return lines.join('\n');
}

function main() {
  const entries = getFileChangeCounts(1000);
  const docsDir = path.join(process.cwd(), 'docs');
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir, { recursive: true });
  fs.writeFileSync(path.join(docsDir, 'git-heatmap.json'), JSON.stringify(entries, null, 2));
  fs.writeFileSync(path.join(docsDir, 'git-heatmap.md'), toMarkdown(entries));
  console.log('git-heatmap: updated docs/git-heatmap.*');
}

if (require.main === module) main();