#!/usr/bin/env node

/*
  Cloud Content Factory
  - Consumes crawl results to ideate and generate diversified content stubs:
    insights, guides, update posts, feature rows, and innovations
  - Writes new TSX pages under pages/reports/updates and pages/reports/innovations
  - Appends entries to public/automation/content-registry.json for front-page ads

  Notes:
  - This factory emits deterministic skeletons; richer text can be filled by existing
    on-site generators or later LLM enhancement passes (keeps CI deterministic).
*/

const fs = require('fs');
const path = require('path');

function ensureDir(dirPath) {
  fs.mkdirSync(dirPath, { recursive: true });
}

function readLatestCrawl() {
  const logsDir = path.join(process.cwd(), 'automation', 'logs');
  if (!fs.existsSync(logsDir)) return null;
  const files = fs.readdirSync(logsDir).filter((f) => f.startsWith('cloud-crawl-') && f.endsWith('.json')).sort();
  if (files.length === 0) return null;
  const latest = path.join(logsDir, files[files.length - 1]);
  try { return JSON.parse(fs.readFileSync(latest, 'utf8')); } catch { return null; }
}

function slugify(s) {
  return s.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').slice(0, 64);
}

function tsxPage({ title, description, bodyHtml }) {
  return `import Head from 'next/head';

export default function Page() {
  return (
    <div className="min-h-screen bg-slate-950 text-white">
      <Head>
        <title>${title}</title>
        <meta name="description" content="${description}" />
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${description}" />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
      <main className="container mx-auto px-6 py-12 prose prose-invert">
        <h1 className="text-3xl font-extrabold">${title}</h1>
        <div className="mt-4">${bodyHtml}</div>
        <p className="mt-6 text-white/60 text-sm">Auto-generated by Cloud Content Factory.</p>
      </main>
    </div>
  );
}
`;
}

function loadRegistry() {
  const registryPath = path.join(process.cwd(), 'public', 'automation', 'content-registry.json');
  try { return JSON.parse(fs.readFileSync(registryPath, 'utf8')); } catch { return { items: [] }; }
}

function saveRegistry(reg) {
  const dir = path.join(process.cwd(), 'public', 'automation');
  ensureDir(dir);
  fs.writeFileSync(path.join(dir, 'content-registry.json'), JSON.stringify(reg, null, 2));
}

function pickTopCrawlSnippets(results, max = 5) {
  const sorted = [...results].sort((a, b) => b.length - a.length);
  return sorted.slice(0, max).map((r) => ({ url: r.url, excerpt: r.text.slice(0, 240) }));
}

function createUpdatePost(snippet) {
  const stamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 16);
  const slug = `update-${stamp}`;
  const filePath = path.join(process.cwd(), 'pages', 'reports', 'updates', `${slug}.tsx`);
  ensureDir(path.dirname(filePath));
  const title = `Autonomous Update — ${stamp.replace('T', ' ')}`;
  const description = 'Fresh autonomous update synthesized from recent site signals.';
  const bodyHtml = `<p>Signal source: <a class="text-cyan-300 underline" href="${snippet.url}" target="_blank" rel="noopener">${snippet.url}</a></p><p class="text-white/70">${snippet.excerpt}</p>`;
  fs.writeFileSync(filePath, tsxPage({ title, description, bodyHtml }));
  return { title, route: `/reports/updates/${slug}`, filePath };
}

function createInnovationInsight(snippet) {
  const stamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 16);
  const slug = `insight-${stamp}`;
  const filePath = path.join(process.cwd(), 'pages', 'reports', 'innovations', `${slug}.tsx`);
  ensureDir(path.dirname(filePath));
  const title = `Innovation Insight — ${stamp.replace('T', ' ')}`;
  const description = 'An inventive insight derived from autonomous research.';
  const bodyHtml = `<ul class="list-disc pl-6"><li>Opportunity: Transform recurring signals into structured guides</li><li>Idea: Build a feature row summarizing value, capability, and link to details</li><li>Source: <a class="text-cyan-300 underline" href="${snippet.url}" target="_blank" rel="noopener">${snippet.url}</a></li></ul>`;
  fs.writeFileSync(filePath, tsxPage({ title, description, bodyHtml }));
  return { title, route: `/reports/innovations/${slug}`, filePath };
}

function updateRegistryWithNewEntries(entries) {
  const registry = loadRegistry();
  const now = new Date().toISOString();
  for (const e of entries) {
    registry.items.unshift({
      title: e.title,
      href: e.route,
      desc: 'New autonomous content',
      createdAt: now,
      source: 'cloud-content-factory'
    });
  }
  registry.items = registry.items.slice(0, 60);
  saveRegistry(registry);
}

function updateHomepageLatestSection(entries) {
  const homepagePath = path.join(process.cwd(), 'pages', 'index.tsx');
  if (!fs.existsSync(homepagePath)) return;
  let content = fs.readFileSync(homepagePath, 'utf8');
  const start = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_START */}';
  const end = '{/* AUTO-GENERATED: HOME_LATEST_CONTENT_END */}';
  const list = entries.map((e) => `            <a href="${e.route}" className="group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30 tilt-on-hover">
              <div className="pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100" />
              <h3 className="text-lg font-semibold">${e.title}</h3>
              <p className="mt-1 text-sm text-white/75">Freshly published by autonomous agents.</p>
              <div className="mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90">Open <span aria-hidden>→</span></div>
            </a>`).join('\n');
  const block = `\n <section className="mx-auto max-w-7xl px-6 pb-14">\n   <h2 className="text-center text-2xl font-bold tracking-wide text-white/90">Latest Autonomous Content</h2>\n   <div className="mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">\n${list}\n   </div>\n </section>\n `;
  const pattern = new RegExp(`${start}[\s\S]*?${end}`);
  content = content.replace(pattern, `${start}\n${block}${end}`);
  fs.writeFileSync(homepagePath, content);
}

function main() {
  const crawl = readLatestCrawl();
  if (!crawl || !Array.isArray(crawl.results) || crawl.results.length === 0) {
    console.log('No crawl results found. Skipping content creation.');
    return;
  }
  const snippets = pickTopCrawlSnippets(crawl.results, 4);
  const created = [];
  for (let i = 0; i < snippets.length; i++) {
    const s = snippets[i];
    if (i % 2 === 0) created.push(createUpdatePost(s));
    else created.push(createInnovationInsight(s));
  }
  updateRegistryWithNewEntries(created);
  updateHomepageLatestSection(created.slice(0, 6));
  console.log(`Created ${created.length} new pages.`);
}

if (require.main === module) {
  main();
}

module.exports = { main };


