#!/bin/bash

# Ultimate Redundancy Automation System Startup Script
# This script provides comprehensive control over all automation redundancies
# including PM2, GitHub Actions, and Netlify Functions

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
<<<<<<< HEAD
LOG_DIR="$SCRIPT_DIR/logs"
PID_FILE="$SCRIPT_DIR/ultimate-redundancy.pid"
LOG_FILE="$LOG_DIR/ultimate-redundancy.log"
=======
LOG_DIR="$PROJECT_ROOT/automation/logs"
PID_FILE="$PROJECT_ROOT/automation/ultimate-redundancy.pid"
LOCK_FILE="$PROJECT_ROOT/automation/ultimate-redundancy.lock"
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
<<<<<<< HEAD
    
    case "$level" in
        "INFO")
            echo -e "${GREEN}[$timestamp] [INFO]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "WARN")
            echo -e "${YELLOW}[$timestamp] [WARN]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "ERROR")
            echo -e "${RED}[$timestamp] [ERROR]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "DEBUG")
            echo -e "${BLUE}[$timestamp] [DEBUG]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        *)
            echo -e "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
=======
    
    case $level in
        "INFO")
            echo -e "${GREEN}[$timestamp] [INFO]${NC} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[$timestamp] [WARN]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[$timestamp] [ERROR]${NC} $message"
            ;;
        "DEBUG")
            echo -e "${BLUE}[$timestamp] [DEBUG]${NC} $message"
            ;;
        *)
            echo -e "[$timestamp] [$level] $message"
            ;;
    esac
    
    # Write to log file
    echo "[$timestamp] [$level] $message" >> "$LOG_DIR/ultimate-redundancy.log"
}

# Check if script is already running
check_lock() {
    if [ -f "$LOCK_FILE" ]; then
        local pid=$(cat "$LOCK_FILE" 2>/dev/null)
        if kill -0 "$pid" 2>/dev/null; then
            log "ERROR" "Ultimate redundancy system is already running with PID $pid"
            exit 1
        else
            log "WARN" "Removing stale lock file"
            rm -f "$LOCK_FILE"
        fi
    fi
}

# Create lock file
create_lock() {
    echo $$ > "$LOCK_FILE"
}

# Remove lock file
remove_lock() {
    rm -f "$LOCK_FILE"
}

# Ensure log directory exists
ensure_log_directory() {
    if [ ! -d "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR"
        log "INFO" "Created log directory: $LOG_DIR"
    fi
}

# Check system requirements
check_requirements() {
    log "INFO" "Checking system requirements..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        log "ERROR" "Node.js is not installed"
        exit 1
    fi
    
    # Check PM2
    if ! command -v pm2 &> /dev/null; then
        log "WARN" "PM2 is not installed, attempting to install..."
        npm install -g pm2 || {
            log "ERROR" "Failed to install PM2"
            exit 1
        }
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        log "ERROR" "npm is not installed"
        exit 1
    fi
    
    log "INFO" "System requirements check passed"
}

# Start PM2 redundancy system
start_pm2_redundancy() {
    log "INFO" "Starting PM2 redundancy system..."
    
    cd "$PROJECT_ROOT"
    
    # Start comprehensive redundancy ecosystem
    if [ -f "ecosystem.comprehensive-redundancy.cjs" ]; then
        log "INFO" "Starting comprehensive redundancy ecosystem..."
        pm2 start ecosystem.comprehensive-redundancy.cjs --update-env || {
            log "WARN" "Failed to start comprehensive ecosystem, trying fallback..."
            pm2 start ecosystem.redundancy.cjs --update-env || {
                log "ERROR" "Failed to start PM2 redundancy system"
                return 1
            }
        }
    else
        log "WARN" "Comprehensive ecosystem not found, starting basic redundancy..."
        pm2 start ecosystem.redundancy.cjs --update-env || {
            log "ERROR" "Failed to start basic PM2 redundancy system"
            return 1
        }
    fi
    
    # Install and configure PM2 logrotate
    log "INFO" "Configuring PM2 logrotate..."
    pm2 install pm2-logrotate || true
    pm2 set pm2-logrotate:max_size 20M || true
    pm2 set pm2-logrotate:retain 50 || true
    pm2 set pm2-logrotate:compress true || true
    pm2 set pm2-logrotate:workerInterval 60 || true
    pm2 set pm2-logrotate:rotateInterval '0 0 * * *' || true
    
    # Save PM2 configuration
    pm2 save || true
    
    log "INFO" "PM2 redundancy system started successfully"
    return 0
}

# Start GitHub Actions redundancy
start_github_actions_redundancy() {
    log "INFO" "Starting GitHub Actions redundancy system..."
    
    cd "$PROJECT_ROOT"
    
    # Check if GitHub Actions redundancy script exists
    if [ -f "automation/enhanced-github-actions-redundancy.cjs" ]; then
        log "INFO" "Starting enhanced GitHub Actions redundancy..."
        node automation/enhanced-github-actions-redundancy.cjs start || {
            log "WARN" "Failed to start enhanced GitHub Actions redundancy"
        }
    fi
    
    # Check if backup workflows exist and are valid
    if [ -f ".github/workflows/marketing-sync-backup.yml" ] && [ ! -f ".github/workflows/marketing-sync.yml" ]; then
        log "INFO" "Restoring marketing-sync workflow from backup..."
        cp .github/workflows/marketing-sync-backup.yml .github/workflows/marketing-sync.yml
    fi
    
    if [ -f ".github/workflows/sync-health-backup.yml" ] && [ ! -f ".github/workflows/sync-health.yml" ]; then
        log "INFO" "Restoring sync-health workflow from backup..."
        cp .github/workflows/sync-health-backup.yml .github/workflows/sync-health.yml
    fi
    
    log "INFO" "GitHub Actions redundancy system started"
}

# Start Netlify Functions redundancy
start_netlify_functions_redundancy() {
    log "INFO" "Starting Netlify Functions redundancy system..."
    
    cd "$PROJECT_ROOT"
    
    # Check if Netlify Functions redundancy script exists
    if [ -f "automation/enhanced-netlify-functions-redundancy.cjs" ]; then
        log "INFO" "Starting enhanced Netlify Functions redundancy..."
        node automation/enhanced-netlify-functions-redundancy.cjs start || {
            log "WARN" "Failed to start enhanced Netlify Functions redundancy"
        }
    fi
    
    # Regenerate functions manifest if needed
    if [ ! -f "netlify/functions/functions-manifest.json" ] || [ "$(find netlify/functions/functions-manifest.json -mtime +1 2>/dev/null)" ]; then
        log "INFO" "Regenerating Netlify Functions manifest..."
        npm run netlify:manifest || {
            log "WARN" "Failed to regenerate Netlify Functions manifest"
        }
    fi
    
    log "INFO" "Netlify Functions redundancy system started"
}

# Start ultimate redundancy master
start_ultimate_redundancy_master() {
    log "INFO" "Starting ultimate redundancy master..."
    
    cd "$PROJECT_ROOT"
    
    if [ -f "automation/ultimate-redundancy-master.cjs" ]; then
        log "INFO" "Starting ultimate redundancy master system..."
        nohup node automation/ultimate-redundancy-master.cjs start > "$LOG_DIR/ultimate-redundancy-master.log" 2>&1 &
        local master_pid=$!
        echo $master_pid > "$PID_FILE"
        log "INFO" "Ultimate redundancy master started with PID $master_pid"
    else
        log "WARN" "Ultimate redundancy master script not found"
    fi
}

# Start all redundancy systems
start_all() {
    log "INFO" "Starting ultimate redundancy system..."
    
    ensure_log_directory
    check_requirements
    
    # Start PM2 redundancy
    start_pm2_redundancy
    
    # Start GitHub Actions redundancy
    start_github_actions_redundancy
    
    # Start Netlify Functions redundancy
    start_netlify_functions_redundancy
    
    # Start ultimate redundancy master
    start_ultimate_redundancy_master
    
    log "INFO" "Ultimate redundancy system started successfully"
    
    # Show status
    sleep 2
    show_status
}

# Stop all redundancy systems
stop_all() {
    log "INFO" "Stopping ultimate redundancy system..."
    
    # Stop ultimate redundancy master
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            log "INFO" "Stopping ultimate redundancy master (PID: $pid)..."
            kill "$pid" || true
            rm -f "$PID_FILE"
        fi
    fi
    
    # Stop PM2 processes
    cd "$PROJECT_ROOT"
    log "INFO" "Stopping PM2 redundancy processes..."
    pm2 stop ecosystem.comprehensive-redundancy.cjs || true
    pm2 stop ecosystem.redundancy.cjs || true
    pm2 stop ecosystem.pm2.cjs || true
    
    log "INFO" "Ultimate redundancy system stopped"
}

# Restart all redundancy systems
restart_all() {
    log "INFO" "Restarting ultimate redundancy system..."
    stop_all
    sleep 2
    start_all
}

# Show system status
show_status() {
    log "INFO" "Ultimate redundancy system status:"
    
    cd "$PROJECT_ROOT"
    
    # PM2 status
    echo ""
    log "INFO" "=== PM2 Status ==="
    pm2 status --no-daemon || true
    
    # Process status
    echo ""
    log "INFO" "=== Process Status ==="
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            log "INFO" "Ultimate redundancy master: RUNNING (PID: $pid)"
        else
            log "WARN" "Ultimate redundancy master: NOT RUNNING (stale PID file)"
        fi
    else
        log "WARN" "Ultimate redundancy master: NOT RUNNING (no PID file)"
    fi
    
    # File status
    echo ""
    log "INFO" "=== File Status ==="
    local files=(
        "ecosystem.comprehensive-redundancy.cjs"
        "ecosystem.redundancy.cjs"
        "ecosystem.pm2.cjs"
        ".github/workflows/marketing-sync.yml"
        ".github/workflows/sync-health.yml"
        "netlify/functions/functions-manifest.json"
    )
    
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            log "INFO" "✅ $file exists"
        else
            log "WARN" "❌ $file missing"
        fi
    done
}

# Show logs
show_logs() {
    log "INFO" "Showing recent logs..."
    
    if [ -f "$LOG_DIR/ultimate-redundancy.log" ]; then
        echo ""
        log "INFO" "=== Ultimate Redundancy Logs ==="
        tail -50 "$LOG_DIR/ultimate-redundancy.log"
    fi
    
    if [ -f "$LOG_DIR/ultimate-redundancy-master.log" ]; then
        echo ""
        log "INFO" "=== Ultimate Redundancy Master Logs ==="
        tail -50 "$LOG_DIR/ultimate-redundancy-master.log"
    fi
    
    echo ""
    log "INFO" "=== PM2 Logs ==="
    pm2 logs --lines 20 --nostream || true
}

# Generate health report
generate_report() {
    log "INFO" "Generating health report..."
    
    cd "$PROJECT_ROOT"
    
    if [ -f "automation/ultimate-redundancy-master.cjs" ]; then
        node automation/ultimate-redundancy-master.cjs report || {
            log "WARN" "Failed to generate health report"
        }
    fi
    
    log "INFO" "Health report generated"
}

# Test redundancy systems
test_systems() {
    log "INFO" "Testing redundancy systems..."
    
    cd "$PROJECT_ROOT"
    
    if [ -f "automation/ultimate-redundancy-master.cjs" ]; then
        log "INFO" "Running comprehensive health check..."
        node automation/ultimate-redundancy-master.cjs health || {
            log "WARN" "Health check failed"
        }
    fi
    
    log "INFO" "System test completed"
}

# Main function
main() {
    local command="${1:-start}"
    
    case $command in
        "start")
            check_lock
            create_lock
            trap remove_lock EXIT
            start_all
            ;;
        "stop")
            stop_all
            remove_lock
            ;;
        "restart")
            check_lock
            create_lock
            trap remove_lock EXIT
            restart_all
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "report")
            generate_report
            ;;
        "test")
            test_systems
            ;;
        "help"|"--help"|"-h")
            echo "Usage: $0 [start|stop|restart|status|logs|report|test|help]"
            echo ""
            echo "Commands:"
            echo "  start   - Start all redundancy systems"
            echo "  stop    - Stop all redundancy systems"
            echo "  restart - Restart all redundancy systems"
            echo "  status  - Show system status"
            echo "  logs    - Show recent logs"
            echo "  report  - Generate health report"
            echo "  test    - Test redundancy systems"
            echo "  help    - Show this help message"
            ;;
        *)
            log "ERROR" "Unknown command: $command"
            log "INFO" "Use '$0 help' for usage information"
            exit 1
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b
            ;;
    esac
}

<<<<<<< HEAD
# Check if system is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        else
            rm -f "$PID_FILE"
            return 1
        fi
    fi
    return 1
}

# Start the ultimate redundancy system
start() {
    log "INFO" "🚀 Starting Ultimate Redundancy Automation System..."
    
    if is_running; then
        log "WARN" "System is already running (PID: $(cat "$PID_FILE"))"
        return 1
    fi
    
    cd "$PROJECT_ROOT"
    
    # Check if Node.js is available
    if ! command -v node &> /dev/null; then
        log "ERROR" "Node.js is not installed or not in PATH"
        return 1
    fi
    
    # Check if PM2 is available
    if ! command -v pm2 &> /dev/null; then
        log "WARN" "PM2 is not installed, installing globally..."
        npm install -g pm2
    fi
    
    # Start the ultimate redundancy system
    nohup node automation/ultimate-redundancy-automation-system.cjs start > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    echo "$pid" > "$PID_FILE"
    
    # Wait a moment to check if it started successfully
    sleep 2
    
    if kill -0 "$pid" 2>/dev/null; then
        log "INFO" "✅ Ultimate Redundancy System started successfully (PID: $pid)"
        
        # Start comprehensive PM2 ecosystem
        log "INFO" "🔄 Starting comprehensive PM2 ecosystem..."
        pm2 start ecosystem.comprehensive-redundancy.cjs --update-env
        
        # Save PM2 configuration
        pm2 save
        
        log "INFO" "✅ All systems started successfully"
        return 0
    else
        log "ERROR" "❌ Failed to start Ultimate Redundancy System"
        rm -f "$PID_FILE"
        return 1
    fi
}

# Stop the ultimate redundancy system
stop() {
    log "INFO" "🛑 Stopping Ultimate Redundancy Automation System..."
    
    if ! is_running; then
        log "WARN" "System is not running"
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    
    # Stop the ultimate redundancy process
    if kill -0 "$pid" 2>/dev/null; then
        kill "$pid"
        log "INFO" "✅ Ultimate Redundancy System stopped (PID: $pid)"
    fi
    
    # Stop all PM2 processes
    log "INFO" "🔄 Stopping all PM2 processes..."
    pm2 stop all 2>/dev/null || true
    pm2 delete all 2>/dev/null || true
    
    # Clean up PID file
    rm -f "$PID_FILE"
    
    log "INFO" "✅ All systems stopped successfully"
}

# Restart the ultimate redundancy system
restart() {
    log "INFO" "🔄 Restarting Ultimate Redundancy Automation System..."
    stop
    sleep 2
    start
}

# Check system status
status() {
    echo "🔍 Ultimate Redundancy Automation System Status"
    echo "=============================================="
    
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo -e "${GREEN}✅ System Status: RUNNING${NC}"
        echo "PID: $pid"
        echo "Log File: $LOG_FILE"
        
        # Check PM2 status
        echo ""
        echo "🔄 PM2 Status:"
        pm2 status 2>/dev/null || echo "PM2 not running or not installed"
        
        # Check log file size
        if [ -f "$LOG_FILE" ]; then
            local size=$(du -h "$LOG_FILE" | cut -f1)
            echo "Log Size: $size"
        fi
    else
        echo -e "${RED}❌ System Status: STOPPED${NC}"
    fi
}

# Show system logs
logs() {
    if [ -f "$LOG_FILE" ]; then
        echo "📋 Ultimate Redundancy System Logs"
        echo "================================="
        tail -n 50 "$LOG_FILE"
    else
        echo "❌ No log file found"
    fi
}

# Perform health check
health_check() {
    log "INFO" "🏥 Performing comprehensive health check..."
    
    cd "$PROJECT_ROOT"
    
    # Check if ultimate redundancy system is running
    if is_running; then
        log "INFO" "✅ Ultimate Redundancy System: RUNNING"
    else
        log "WARN" "⚠️ Ultimate Redundancy System: STOPPED"
    fi
    
    # Check PM2 status
    if command -v pm2 &> /dev/null; then
        log "INFO" "🔄 Checking PM2 processes..."
        pm2 status 2>/dev/null || log "WARN" "PM2 not running"
    else
        log "WARN" "⚠️ PM2 not installed"
    fi
    
    # Check Node.js processes
    log "INFO" "🔄 Checking Node.js processes..."
    local node_processes=$(ps aux | grep -v grep | grep "ultimate-redundancy-automation-system" | wc -l)
    log "INFO" "Node.js redundancy processes: $node_processes"
    
    # Check log files
    if [ -f "$LOG_FILE" ]; then
        local log_size=$(du -h "$LOG_FILE" | cut -f1)
        log "INFO" "Log file size: $log_size"
    fi
    
    log "INFO" "🏥 Health check completed"
}

# Perform system recovery
recover() {
    log "INFO" "🔄 Performing system recovery..."
    
    # Stop all systems
    stop
    
    # Wait for cleanup
    sleep 3
    
    # Start fresh
    start
    
    log "INFO" "✅ System recovery completed"
}

# Show help
show_help() {
    echo "Ultimate Redundancy Automation System"
    echo "===================================="
    echo ""
    echo "Usage: $0 {start|stop|restart|status|logs|health-check|recover}"
    echo ""
    echo "Commands:"
    echo "  start        Start the ultimate redundancy system"
    echo "  stop         Stop the ultimate redundancy system"
    echo "  restart      Restart the ultimate redundancy system"
    echo "  status       Show system status"
    echo "  logs         Show system logs"
    echo "  health-check Perform comprehensive health check"
    echo "  recover      Perform system recovery"
    echo "  help         Show this help message"
    echo ""
    echo "This script manages comprehensive redundancy for:"
    echo "  • PM2 process management"
    echo "  • GitHub Actions workflows"
    echo "  • Netlify Functions"
    echo "  • Ultimate redundancy automation system"
}

# Main script logic
case "${1:-help}" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    logs)
        logs
        ;;
    health-check)
        health_check
        ;;
    recover)
        recover
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "❌ Unknown command: $1"
        show_help
        exit 1
        ;;
esac
=======
# Run main function with all arguments
main "$@"
>>>>>>> origin/cursor/automate-redundancy-and-cleanup-d88b
