{
  "name": "bolt.new.zion.app",
  "version": "0.1.0",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "bin": {
    "deploy-zion-ipfs": "scripts/deploy-zion-ipfs.js"
  },
  "scripts": {
    "dev": "vite",
    "build": "NODE_ENV=production tsc && NODE_ENV=production vite build && node scripts/prerender.js",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "test": "jest",
    "test:watch": "jest --watch",
    "cypress:open": "cypress open",
    "cypress:run": "cypress run --browser electron",
    "audit": "npm audit --production",
    "clean:cache": "node scripts/clean-cache.js",
    "sitemap": "node scripts/generate-sitemap.mjs",
    "lint:a11y": "vitest run tests/Accessibility.test.tsx",
    "test:axe": "vitest run tests/Accessibility.test.tsx",
    "test:browserstack": "node scripts/pre-playwright-check.cjs --config=browserstack.config.ts",
    "test:playwright": "node scripts/pre-playwright-check.cjs",
    "seed": "prisma db seed",
    "es:index": "node scripts/index-elasticsearch.js",
    "devnet": "node scripts/start-devnet.js",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "prepare": "command -v husky >/dev/null 2>&1 && husky install || echo 'Husky not available, skipping git hooks setup'",
    "dev:optimize": "node scripts/replace-console-statements.cjs && npm run lint -- --fix",
    "deploy:optimize": "node scripts/replace-console-statements.cjs && npm run lint -- --fix && npm run build",
    "console:replace": "node scripts/replace-console-statements.cjs",
    "health:summary": "node scripts/project-health-summary.cjs",
    "fix:imports": "node scripts/fix-import-placement.cjs",
    "fix:logger-types": "node scripts/fix-logger-types.cjs",
    "fix:all": "npm run fix:imports && npm run fix:logger-types && npm run lint -- --fix",
    "clean:all": "rm -rf node_modules package-lock.json .next dist coverage && npm install",
    "env:check": "node scripts/validate-environment.cjs",
    "env:validate": "npx tsx scripts/validate-environment.ts",
    "env:validate-build": "node scripts/validate-environment.cjs",
    "env:prebuild-check": "node scripts/pre-build-check.cjs",
    "env:dev": "node scripts/check-dev-environment.cjs",
    "build:report": "npm run build && node scripts/build-performance-report.cjs",
    "build:media-kit": "node scripts/build-media-kit.cjs",
    "typecheck": "tsc --noEmit -p tsconfig.json",
    "test:node": "node -v",
    "check-updates": "ncu",
    "audit-vulnerabilities": "npm audit",
    "monitor:perf": "node scripts/perf/monitor.js",
    "migrate:check": "npx prisma migrate diff --from-schema-datamodel prisma/schema.prisma --to-schema-datamodel prisma/schema.prisma --script",
    "setup:auth0": "node scripts/setup-auth0.js",
    "migrate:auth0": "npm run setup:auth0 && npm run env:validate",
    "watchdog:start": "node scripts/watchdog.js",
    "watchdog:clear": "node scripts/clear-logs.js",
    "watchdog:status": "ps aux | grep watchdog || echo 'No watchdog process found'",
    "logs:clear": "npm run watchdog:clear",
    "logs:view": "tail -f logs/self-heal.log",
    "logs:scan": "node scripts/analyze-error-logs.cjs",
    "logs:summary": "node scripts/analyze-error-logs.cjs logs --dedupe --summary",
    "logs:levels": "node scripts/analyze-error-logs.cjs logs --summary",
    "logs:collect": "bash scripts/collect-logs.sh",
    "logs:monitor": "node scripts/error-monitor.cjs",
    "logs:monitor:export": "node scripts/error-monitor.cjs --export",
    "logs:health": "node scripts/error-monitor.cjs",
    "logs:collect:enhanced": "node scripts/enhanced-log-collector.cjs --analyze --export",
    "logs:auto": "npm run logs:collect:enhanced && npm run logs:summary",
    "logs:rotate": "node scripts/rotate-logs.cjs",
    "logs:purge": "node scripts/purge-old-logs.cjs",
    "logs:collect:clean": "node scripts/enhanced-log-collector.cjs --clean",
    "logs:health:summary": "node scripts/log-health-summary.cjs",
    "logs:monitor:realtime": "node scripts/realtime-log-monitor.cjs",
    "logs:monitor:dashboard": "node scripts/realtime-log-monitor.cjs",
    "env:check-placeholders": "node scripts/check-env-placeholders.cjs",
    "logs:enhanced": "node -e \"require('./src/utils/enhanced-logger.ts').logger.info('Enhanced logging test', 'system')\"",
    "monitor:resources": "echo 'CPU:' && ps -A -o %cpu | awk '{sum+=$1} END {print sum\"%\"}' && echo 'Memory:' && free -h || vm_stat",
    "logs:realtime": "node scripts/enhanced-log-monitoring.cjs",
    "logs:dashboard": "node scripts/log-dashboard-server.cjs",
    "logs:alerts": "node scripts/setup-log-alerts.cjs",
    "logs:performance": "node scripts/performance-log-analyzer.cjs",
    "logs:security": "node scripts/security-log-monitor.cjs",
    "monitor:enhanced": "npm run logs:realtime",
    "monitor:all": "concurrently \"npm run logs:realtime\" \"npm run logs:performance\" \"npm run logs:security\"",
    "analyze:react19": "node scripts/react19-bundle-analysis.cjs",
    "monitor:health": "curl -s https://ziontechgroup.netlify.app/api/health && echo ' - API Health: OK'",
    "monitor:build": "npm run bundle:analyze && npm run monitor:health",
    "perf:monitor": "node -e \"console.log('Enable with: localStorage.setItem(\\\"performance-monitoring\\\", \\\"true\\\"); window.location.reload();')\"",
    "performance:check": "node scripts/performance-monitor.cjs",
    "optimize:images": "find public -name '*.jpg' -o -name '*.png' | head -5",
    "optimize:minify": "node scripts/minify-public-assets.cjs",
    "quality:check": "npm run typecheck && npm run lint && npm run test",
    "pwa:validate": "node -e \"console.log('üîç Validating PWA configuration...'); const fs = require('fs'); const manifest = JSON.parse(fs.readFileSync('public/manifest.json', 'utf8')); console.log('‚úÖ Manifest valid:', manifest.name);\"",
    "seo:validate": "node -e \"console.log('üîç Validating SEO setup...'); console.log('‚úÖ SEO components ready');\"",
    "build:enhanced": "npm run quality:check && npm run pwa:validate && npm run build",
    "deploy:check": "npm run build:enhanced && npm run performance:check",
    "deploy:ready": "node scripts/deployment-ready-check.cjs",
    "deploy:checklist": "npm run deploy:ready && npm run perf:monitor",
    "analyze": "node scripts/analyze-build.cjs",
    "monitor": "node scripts/performance-monitor.cjs",
    "health": "node scripts/health-check.cjs",
    "clean": "rm -rf .next out node_modules/.cache",
    "reset": "npm run clean && npm install",
    "fresh": "npm run clean && npm install && npm run build",
    "i18n:audit": "node scripts/i18n-audit.cjs",
    "i18n:hardcoded": "node scripts/find-hardcoded-strings.cjs",
    "i18n:missing": "node scripts/check-missing-i18n-keys.cjs",
    "i18n:check": "npm run i18n:audit && npm run i18n:hardcoded",
    "i18n:report": "npm run i18n:check && echo 'i18n reports generated: i18n-audit-report.md and hardcoded-strings-report.md",
    "build:cache": "node scripts/cached-build.cjs",
    "errors:report": "node scripts/report-errors-to-cursor.cjs",
    "errors:autofix": "node scripts/cursor-autofix.cjs",
    "errors:report-codex": "node scripts/report-errors-to-codex.cjs",
    "growth:ideas": "node scripts/self-grow.js",
    "automation:start": "node automation/index.js",
    "automation:dev": "nodemon automation/index.js",
    "automation:stop": "pkill -f \"node automation/index.js\"",
    "automation:logs": "tail -f logs/automation.log",
    "automation:health": "curl http://localhost:3001/health",
    "automation:test": "cd automation && npm test",
    "automation:check": "node automation/performance/monitor.js",
    "automation:report": "node automation/scripts/generate-report.js",
    "automation:diagnose": "node automation/tests/system-diagnostic.js",
    "automation:test-slack": "node automation/tests/test-slack-connection.js",
    "automation:test-cursor": "node automation/tests/test-cursor-connection.js",
    "automation:test-monitoring": "node automation/tests/test-performance-monitoring.js",
    "optimize:bundle": "node scripts/optimize-bundle.cjs"
  },
  "prisma": {
    "seed": "ts-node prisma/seed.ts"
  },
  "dependencies": {
    "@chainsafe/libp2p-gossipsub": "^14.1.1",
    "@chainsafe/libp2p-noise": "^16.1.4",
    "@chakra-ui/react": "3.21.1",
    "@datadog/browser-logs": "^6.13.0",
    "@emotion/react": "11.14.0",
    "@emotion/styled": "11.14.1",
    "@google/model-viewer": "^4.1.0",
    "@helia/json": "^4.0.6",
    "@hookform/resolvers": "5.1.1",
    "@libp2p/identify": "^3.0.37",
    "@libp2p/tcp": "^10.1.17",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/core": "^2.0.1",
    "@orbitdb/core": "^3.0.2",
    "@prisma/client": "^6.11.1",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-radio-group": "^1.1.3",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@supabase/supabase-js": "^2.39.3",
    "@tanstack/react-query": "^5.17.19",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "cmdk": "^0.2.1",
    "date-fns": "^3.3.1",
    "embla-carousel-react": "^8.0.0-rc19",
    "framer-motion": "^11.0.3",
    "i18next": "^23.7.16",
    "i18next-browser-languagedetector": "^7.2.0",
    "input-otp": "^1.1.0",
    "jspdf": "^2.5.1",
    "jspdf-autotable": "^3.8.1",
    "lucide-react": "^0.323.0",
    "next-themes": "^0.2.1",
    "react": "^18.2.0",
    "react-day-picker": "^8.10.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.0",
    "react-helmet-async": "^2.0.4",
    "react-hook-form": "^7.50.1",
    "react-i18next": "^13.2.1",
    "react-markdown": "^9.0.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^6.22.0",
    "@reduxjs/toolkit": "^1.9.7",
    "recharts": "^2.12.0",
    "js-cookie": "^3.0.5",
    "next-i18next": "^14.0.0",
    "fuse.js": "^7.0.0",
    "lodash.debounce": "^4.0.8",
    "sonner": "^1.4.0",
    "react-hot-toast": "^2.4.1",
    "tailwind-merge": "^2.2.1",
    "js-cookie": "^3.0.5",
    "react-cookie-consent": "^8.1.0",
    "vaul": "^0.9.0",
    "zod": "^3.22.4",
    "@reduxjs/toolkit": "^1.9.7",
    "react-redux": "^9.2.0",
    "@stripe/stripe-js": "^2.3.0"
  },
  "devDependencies": {
    "@testing-library/cypress": "^8.0.2",
    "@testing-library/jest-dom": "^6.1.2",
    "@testing-library/react": "^14.1.2",
    "@testing-library/cypress": "^8.0.2",
    "@types/jest": "^29.5.3",
    "cypress": "^13.7.3",
    "cypress-real-events": "^1.12.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "ts-jest": "^29.1.1",
    "@types/node": "^20.11.17",
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.17",
    "cypress": "^11.2.0",
    "cypress-real-events": "^1.12.0",
    "eslint": "8.57.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jsdom": "^24.0.0",
    "postcss": "^8.4.35",
    "rimraf": "^5.0.5",
    "tailwindcss": "^3.4.1",
    "vite-plugin-windicss": "^1.9.0",
    "ts-jest": "^29.1.1",
    "typescript": "^5.2.2",
    "vite": "^5.0.8",
    "vitest": "^1.4.0",
    "@types/react-redux": "^7.1.25",
    "@playwright/test": "^1.41.2"
  },
  "peerDependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "overrides": {
    "superagent": "^9.0.0",
    "valtio": "^2.1.5"
  },
  "engines": {
    "node": ">=18.17.0"
  },
  "description": "[![Netlify Status](https://api.netlify.com/api/v1/badges/ziontechgroup.com/deploy-status)](https://app.netlify.com/sites/ziontechgroup.com/deploys)",
  "main": "babel.config.js",
  "directories": {
    "doc": "docs",
    "test": "tests"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Zion-Holdings/zion.app.git"
  },
  "bugs": {
    "url": "https://github.com/Zion-Holdings/zion.app/issues"
  },
  "homepage": "https://github.com/Zion-Holdings/zion.app#readme",
  "engines": {
    "node": ">=20.18.1",
    "npm": ">=10.0.0"
  },
  "scripts": {
    "pm2:start": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && pm2 start ecosystem.config.cjs --update-env",
    "pm2:stop": "pm2 stop ecosystem.config.cjs || true",
    "pm2:restart": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && (pm2 restart ecosystem.config.cjs || pm2 start ecosystem.config.cjs --update-env)",
    "pm2:status": "pm2 status",
    "pm2:logs": "pm2 logs --lines 200",
    "sitemap": "node scripts/generate-sitemap.js",
    "pm2:fastads:start": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && pm2 start ecosystem.fast-ads.local.cjs --update-env",
    "pm2:fastads:restart": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && (pm2 restart ecosystem.fast-ads.local.cjs || pm2 start ecosystem.fast-ads.local.cjs --update-env)",
    "pm2:fastads:stop": "pm2 stop ecosystem.fast-ads.local.cjs || true",
    "pm2:cron:start": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && pm2 start ecosystem.cron.local.cjs --update-env",
    "pm2:cron:restart": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && (pm2 restart ecosystem.cron.local.cjs || pm2 start ecosystem.cron.local.cjs --update-env)",
    "pm2:cron:stop": "pm2 stop ecosystem.cron.local.cjs || true",
    "pm2:bootstrap:logrotate": "pm2 install pm2-logrotate || true && pm2 set pm2-logrotate:max_size 10M && pm2 set pm2-logrotate:retain 30 && pm2 set pm2-logrotate:compress true && pm2 set pm2-logrotate:workerInterval 60 && pm2 set pm2-logrotate:rotateInterval '0 0 * * *'",
    "functions:run": "node scripts/run-netlify-functions-locally.cjs",
    "functions:run:execute": "node scripts/run-netlify-functions-locally.cjs --execute",
    "front:advertise": "node automation/front-index-advertiser.cjs",
    "deps:maintain": "node automation/dependency-update-orchestrator.cjs",
    "deps:cron:start": "bash automation/dependency-maintenance-cron.sh",
    "netlify:manifest": "node scripts/generate-netlify-functions-manifest.cjs",
    "netlify:trigger": "node scripts/trigger-netlify-automations.cjs",
    "readme:generate": "node scripts/generate-readme.js",
    "search:index": "node scripts/generate-search-index.js",
    "content:fix": "node automation/content-quality-fixer.cjs && node automation/content-quality-analyzer.cjs",
    "perf:monitor": "node scripts/performance-monitor.js",
    "perf:audit": "npm run perf:monitor",
    "dev": "NODE_OPTIONS=\"--max-old-space-size=4096 --openssl-legacy-provider\" next dev",
    "build": "NODE_OPTIONS=\"--max-old-space-size=6144 --openssl-legacy-provider\" next build",
    "prebuild": "npm run build:health-check && npm run netlify:manifest",
    "export": "rm -rf .next tsconfig.tsbuildinfo && mkdir -p .temp && mv pages/reports .temp/ 2>/dev/null || true && NODE_OPTIONS=\"--max-old-space-size=6144 --openssl-legacy-provider\" next build --no-lint && node scripts/export-static.js && mv .temp/reports pages/ 2>/dev/null || true && rm -rf .temp && echo 'Export completed. out/ directory contains static files.'",
    "start": "next start",
    "postbuild": "node automation/footer-injector.cjs || true",
    "lint": "eslint .",
    "type-check": "tsc --noEmit",
    "prepare": "git config core.hooksPath .husky || true",
    "fix:all": "npm run lint -- --fix || true",
    "build:heal": "npm run build || (npm run fix:all && npm run search:index || true && npm run build)",
    "ci:heal": "npm run fix:all && (npm run type-check || true) && npm run build:heal",
    "build:health-check": "node automation/pre-build-health-check.cjs",
    "build:validate": "node automation/nextjs-page-validator.cjs",
    "build:recovery": "node automation/build-failure-recovery.cjs",
    "build:smart": "npm run build:health-check && npm run build:auto-fix",
    "build:auto-fix": "npm run build || (npm run build:recovery && npm run build)",
    "build:monitor": "node automation/continuous-build-monitor.cjs",
    "build:guardian": "node automation/build-guardian.cjs",
    "build:orchestrator": "node automation/master-build-orchestrator.cjs",
    "build:orchestrator:start": "node automation/master-build-orchestrator.cjs",
    "build:orchestrator:status": "node -e \"const {MasterBuildOrchestrator} = require('./automation/master-build-orchestrator.cjs'); const o = new MasterBuildOrchestrator(); console.log(JSON.stringify(o.getStatus(), null, 2));\"",
    "build:smart:full": "node automation/master-build-orchestrator.cjs runSmartBuild",
    "security:scan": "node automation/security-scanner.cjs || true && (npm audit --audit-level=high || true)",
    "auto:intel": "node automation/intelligent-orchestrator.cjs run intelligent",
    "autonomous": "node automation/launch-enhanced-autonomous-system.js",
    "autonomous:dev": "nodemon automation/launch-enhanced-autonomous-system.js",
    "autonomous:status": "node automation/launch-autonomous-systems-clean.js status",
    "linkedin:run": "ts-node scripts/linkedin-automation.ts run",
    "linkedin:cron": "ts-node scripts/linkedin-automation.ts cron",
    "linkedin:generate": "ts-node scripts/linkedin-automation.ts generate",
    "linkedin:start": "npm run linkedin:cron",
    "linkedin:test": "ts-node scripts/test-linkedin-automation.ts",
    "mcp:start": "node mcp-automation-system.js",
    "mcp:client": "node mcp-client-integration.js",
    "mcp:orchestrator": "node automation/mcp-integration-orchestrator.js",
    "mcp:enhance": "node automation/mcp-integration-orchestrator.js enhance",
    "mcp:workflow": "node automation/mcp-integration-orchestrator.js workflow",
    "mcp:report": "node automation/mcp-integration-orchestrator.js report",
    "mcp:setup-cron": "node automation/mcp-integration-orchestrator.js setup-cron",
    "mcp:daily": "node automation/mcp-integration-orchestrator.js daily-workflow",
    "mcp:weekly": "node automation/mcp-integration-orchestrator.js weekly-audit",
    "mcp:monitor": "node automation/mcp-integration-orchestrator.js performance-monitor",
    "mcp:status": "node automation/mcp-integration-orchestrator.js status",
    "mcp:test": "node simple-mcp-test.js",
    "redundancy:start": "./automation/start-redundancy-system.sh start",
    "redundancy:stop": "./automation/start-redundancy-system.sh stop",
    "redundancy:restart": "./automation/start-redundancy-system.sh restart",
    "redundancy:status": "./automation/start-redundancy-system.sh status",
    "redundancy:logs": "./automation/start-redundancy-system.sh logs",
    "redundancy:pm2": "node automation/pm2-redundancy-monitor.cjs check",
    "redundancy:github": "node automation/redundancy/github-actions-redundancy-manager.cjs",
    "redundancy:netlify": "node automation/redundancy/netlify-functions-redundancy-manager.cjs",
    "redundancy:orchestrator": "node automation/master-redundancy-orchestrator.cjs",
    "google-docs:start": "node automation/launch-google-docs-automation.js",
    "google-docs:dev": "nodemon automation/launch-google-docs-automation.js",
    "google-docs:status": "node automation/check-google-docs-status.js",
    "google-docs:report": "node automation/generate-google-docs-report.js",
    "google-docs:test": "node automation/test-google-docs-automation.js",
    "cursor:memory": "node run-cursor-memory-automation.js && node automation/cursor-rules-generator.cjs",
    "cursor:memory:dev": "nodemon run-cursor-memory-automation.js",
    "cursor:memory:config": "node -e \"console.log(JSON.stringify(require('./cursor-memory-config.json'), null, 2))\"",
    "cursor:memory:status": "node -e \"const fs = require('fs'); const path = './cursor-memory/memory-summary.json'; try { const data = JSON.parse(fs.readFileSync(path, 'utf8')); console.log('Memory Status:'); console.log('- Total entries:', data.totalEntries); console.log('- Categories:', Object.keys(data.categories).length); console.log('- High confidence:', data.confidenceDistribution.high); } catch(e) { console.log('No memory data found'); }\"",
    "automation:factory": "node automation/automation-factory.cjs generate",
    "automation:factory:dev": "nodemon automation/ultimate-automation-factory-system.js",
    "service:factory": "node automation/service-factory/service-factory-orchestrator.cjs",
    "service:factory:full": "node automation/service-factory/service-factory-orchestrator.cjs full",
    "service:factory:create": "node automation/service-factory/service-factory-orchestrator.cjs create",
    "service:factory:analyze": "node automation/service-factory/service-factory-orchestrator.cjs analyze",
    "service:factory:list": "node automation/service-factory/service-factory-orchestrator.cjs list",
    "service:factory:health": "node automation/service-factory/service-factory-orchestrator.cjs health",
    "service:blueprint": "node automation/service-factory/service-blueprint-generator.cjs",
    "service:scaffold": "node automation/service-factory/service-scaffolder.cjs",
    "service:mvp": "node automation/service-factory/mvp-generator.cjs",
    "market:intelligence": "node automation/service-factory/market-intelligence.cjs",
    "opportunity:detect": "node automation/service-factory/opportunity-detector.cjs",
    "quality:check": "node automation/service-factory/quality-automation.cjs",
    "quality:report": "node automation/service-factory/quality-automation.cjs report",
    "deployment:create": "node automation/service-factory/deployment-orchestrator.cjs create",
    "deployment:deploy": "node automation/service-factory/deployment-orchestrator.cjs deploy",
    "deployment:list": "node automation/service-factory/deployment-orchestrator.cjs list",
    "dashboard:generate": "node automation/service-factory/service-factory-dashboard.cjs",
    "integration:test": "node automation/service-factory/integration-tester.cjs",
    "performance:optimize": "node automation/service-factory/performance-optimizer.cjs",
    "ultimate:run": "node automation/service-factory/ultimate-service-factory.cjs run",
    "ultimate:status": "node automation/service-factory/ultimate-service-factory.cjs status",
    "ultimate:health": "node automation/service-factory/ultimate-service-factory.cjs health",
    "catalog:update": "node automation/service-factory/service-catalog-manager.cjs update",
    "catalog:scan": "node automation/service-factory/service-catalog-manager.cjs scan",
    "catalog:reports": "node automation/service-factory/service-catalog-manager.cjs reports",
    "automation:orchestrator": "node automation/intelligent-orchestrator.cjs continuous",
    "automation:dashboard": "node automation/automation-dashboard.cjs start",
    "ai:research": "node automation/ai-trends-researcher.cjs",
    "ai:innovate": "node automation/innovation-orchestrator.cjs",
    "ai:cron:start": "bash automation/ai-trends-cron.sh start",
    "ai:cron:run": "bash automation/ai-trends-cron.sh run",
    "ai:cron:stop": "bash automation/ai-trends-cron.sh stop",
    "ai:cron:status": "bash automation/ai-trends-cron.sh status",
    "automation:all": "node automation/launch-all-automation.cjs start",
    "automation:status": "node automation/launch-all-automation.cjs status",
    "automation:report": "node automation/launch-all-automation.cjs report",
    "automation:git-sync": "node automation/git-sync.cjs",
    "git:sync": "node automation/advanced-git-sync.cjs",
    "git:sync:enhanced": "node automation/enhanced-git-sync-orchestrator.cjs",
    "git:health": "node automation/enhanced-git-sync-orchestrator.cjs health-check",
    "git:resolve": "node automation/enhanced-git-sync-orchestrator.cjs resolve-conflicts",
    "git:cleanup": "node automation/enhanced-git-sync-orchestrator.cjs cleanup-locks",
    "git:status": "node automation/enhanced-git-sync-orchestrator.cjs status",
    "git:report": "node automation/enhanced-git-sync-orchestrator.cjs report",
    "automation:improvement": "node automation/continuous-automation-improvement-system.js",
    "automation:guardian": "node automation/automation-guardian-10min.cjs",
    "automation:cloud": "node automation/cloud-autonomous-orchestrator.cjs",
    "automation:discover": "node automation/auto-discovery-runner.cjs",
    "redundancy:system": "node automation/redundancy-automation-system.cjs",
    "redundancy:health": "./automation/start-redundancy-system.sh health",
    "redundancy:git-sync": "node automation/redundancy-git-sync.cjs",
    "redundancy:build": "node automation/redundancy-build-monitor.cjs",
    "redundancy:pm2:stop": "pm2 stop ecosystem.redundancy.cjs",
    "redundancy:pm2:restart": "pm2 restart ecosystem.redundancy.cjs",
    "redundancy:pm2:status": "pm2 status",
    "automation:improvement:dev": "nodemon automation/continuous-automation-improvement-system.js",
    "automation:coordinator": "node automation/master-automation-coordinator.js",
    "automation:coordinator:dev": "nodemon automation/master-automation-coordinator.js",
    "automation:restart": "node automation/restart-all-automation.js",
    "automation:enhance": "node automation/enhance-all-automation.js",
    "automation:beautify": "node automation/beautify-ui.cjs",
    "autonomous:start": "node automation/launch-autonomous-systems-clean.js start",
    "autonomous:stop": "node automation/launch-autonomous-systems-clean.js stop",
    "autonomous:restart": "node automation/launch-autonomous-systems-clean.js restart",
    "autonomous:factory": "node automation/autonomous-error-monitoring-factory.js",
    "autonomous:orchestrator": "node automation/autonomous-automation-orchestrator.js",
    "autonomous:cron": "bash automation/autonomous-error-cron-system.sh run",
    "autonomous:cron:start": "bash automation/autonomous-error-cron-system.sh start",
    "autonomous:cron:stop": "bash automation/autonomous-error-cron-system.sh stop",
    "autonomous:cron:status": "bash automation/autonomous-error-cron-system.sh status",
    "autonomous:cron:fix": "bash automation/autonomous-error-cron-system.sh fix",
    "autonomous:all": "npm run autonomous:start & npm run autonomous:cron:start",
    "design:start": "node automation/launch-design-improvement-automation.js start",
    "design:navigation": "node automation/launch-design-improvement-automation.js navigation",
    "design:layout": "node automation/launch-design-improvement-automation.js layout",
    "design:visual": "node automation/launch-design-improvement-automation.js visual-design",
    "design:cycle": "node automation/launch-design-improvement-automation.js cycle",
    "design:status": "node automation/launch-design-improvement-automation.js status",
    "design:stop": "node automation/launch-design-improvement-automation.js stop",
    "design:all": "npm run design:layout && npm run design:navigation && npm run design:visual",
    "syntax:start": "node automation/syntax-fix-launcher.js start",
    "syntax:start:monitor": "node automation/syntax-fix-launcher.js start monitor",
    "syntax:start:orchestrator": "node automation/syntax-fix-launcher.js start orchestrator",
    "syntax:start:continuous": "node automation/syntax-fix-launcher.js start continuous",
    "syntax:stop": "node automation/syntax-fix-launcher.js stop",
    "syntax:status": "node automation/syntax-fix-launcher.js status",
    "syntax:quick-fix": "node automation/syntax-fix-launcher.js quick-fix",
    "syntax:build-check": "node automation/syntax-fix-launcher.js build-check",
    "syntax:monitor": "node automation/syntax-error-monitor.js",
    "syntax:monitor:watch": "node automation/syntax-error-monitor.js --watch",
    "syntax:orchestrator": "node automation/syntax-fix-orchestrator.js",
    "syntax:orchestrator:watch": "node automation/syntax-fix-orchestrator.js --watch",
    "syntax:continuous": "node automation/continuous-syntax-fix.js",
    "syntax:continuous:watch": "node automation/continuous-syntax-fix.js --watch",
    "syntax:all": "npm run syntax:start & npm run syntax:monitor & npm run syntax:orchestrator & npm run syntax:continuous",
    "linting:factory": "node automation/linting-autonomous-agents-factory.js",
    "linting:factory:dev": "nodemon automation/linting-autonomous-agents-factory.js",
    "linting:cron": "node automation/linting-cron-automation.js",
    "linting:cron:dev": "nodemon automation/linting-cron-automation.js",
    "linting:watcher": "node automation/linting-file-watcher.js",
    "linting:watcher:dev": "nodemon automation/linting-file-watcher.js",
    "linting:orchestrator": "node automation/lint-automation-manager.cjs start",
    "linting:orchestrator:dev": "nodemon automation/lint-automation-manager.cjs",
    "linting:all": "npm run linting:factory & npm run linting:cron & npm run linting:watcher & npm run linting:orchestrator",
    "linting:start": "npm run linting:orchestrator continuous",
    "linting:status": "npm run linting:orchestrator status",
    "linting:check": "npm run linting:orchestrator check",
    "linting:fix": "node automation/lint-error-fixer.cjs all",
    "healing:scan": "node automation/automation-error-scanner.cjs",
    "healing:fix": "node automation/automation-error-fixer.cjs",
    "healing:start": "node automation/self-healing-orchestrator.cjs",
    "healing:cron:start": "bash automation/self-healing-cron.sh start",
    "healing:cron:stop": "bash automation/self-healing-cron.sh stop",
    "healing:cron:status": "bash automation/self-healing-cron.sh status",
    "design:orchestrator": "node automation/design-orchestrator.cjs",
    "design:cron:start": "bash automation/design-cron.sh",
    "design:analyze": "node automation/design-analyzer.cjs && node automation/design-factory.cjs",
    "diversify": "node automation/diversification-orchestrator.cjs",
    "responsive:start": "node automation/responsive-content-orchestrator.cjs",
    "responsive:cron:start": "bash automation/responsive-content-cron.sh",
    "responsive:analyze": "node automation/responsive-content-analyzer.cjs && node automation/responsive-content-factory.cjs",
    "variation:start": "node automation/variation-orchestrator.cjs",
    "variation:analyze": "node automation/variation-analyzer.cjs && node automation/variation-factory.cjs",
    "monetization:start": "node automation/monetization-orchestrator.cjs",
    "monetization:cron:start": "bash automation/monetization-cron.sh",
    "monetization:analyze": "node automation/monetization-analyzer.cjs && node automation/monetization-factory.cjs",
    "frontend-sync:start": "node automation/frontend-sync-orchestrator.cjs",
    "frontend-sync:cron:start": "bash automation/frontend-sync-cron.sh",
    "frontend-sync:analyze": "node automation/frontend-sync-analyzer.cjs && node automation/frontend-sync-factory.cjs",
    "saas:start": "node automation/saas-services-orchestrator.cjs",
    "saas:cron:start": "bash automation/saas-services-cron.sh",
    "saas:analyze": "node automation/saas-services-analyzer.cjs && node automation/saas-services-factory.cjs",
    "homepage-promo:start": "node automation/homepage-promo-orchestrator.cjs",
    "homepage-promo:cron:start": "bash automation/homepage-promo-cron.sh",
    "homepage-promo:analyze": "node automation/homepage-promo-analyzer.cjs && node automation/homepage-promo-factory.cjs",
    "feature-marketing:start": "node automation/feature-marketing-orchestrator.cjs",
    "feature-marketing:cron:start": "bash automation/feature-marketing-cron.sh",
    "feature-marketing:analyze": "node automation/feature-marketing-analyzer.cjs && node automation/feature-marketing-factory.cjs",
    "linkedin:marketing:start": "node automation/linkedin-marketing-orchestrator.cjs",
    "linkedin:marketing:cron:start": "bash automation/linkedin-marketing-cron.sh",
    "linkedin:marketing:analyze": "node automation/linkedin-marketing-analyzer.cjs && node automation/linkedin-marketing-factory.cjs",
    "cursor:chat:start": "node automation/cursor-chat-orchestrator.cjs",
    "cursor:chat:cron:start": "bash automation/cursor-chat-cron.sh",
    "cursor:chat:analyze": "node automation/cursor-chat-analyzer.cjs && node automation/cursor-chat-factory.cjs",
    "links:start": "node automation/site-link-orchestrator.cjs",
    "links:cron:start": "bash automation/site-link-cron.sh",
    "links:scan": "node automation/site-link-crawler.cjs && node automation/site-link-fixer.cjs",
    "footer:inject": "node automation/footer-injector.cjs",
    "footer:cron": "bash automation/footer-cron.sh start",
    "promo:start": "node automation/site-promo-orchestrator.cjs",
    "promo:cron:start": "bash automation/site-promo-cron.sh",
    "promo:scan": "node automation/site-promo-analyzer.cjs && node automation/homepage-promo-applier.cjs",
    "spec-dev:start": "node automation/spec-dev-orchestrator.cjs",
    "spec-dev:cron:start": "bash automation/spec-dev-cron.sh",
    "spec-dev:scan": "node automation/spec-dev-chat-fetcher.cjs && node automation/spec-dev-site-crawler.cjs && node automation/spec-dev-analyzer.cjs && node automation/spec-dev-factory.cjs",
    "linkedin:pro:start": "node automation/linkedin-pro-orchestrator.cjs",
    "linkedin:pro:cron:start": "bash automation/linkedin-pro-cron.sh",
    "linkedin:pro:analyze": "node automation/linkedin-pro-analyzer.cjs && node automation/linkedin-pro-factory.cjs",
    "instagram:marketing:start": "node automation/instagram-marketing-orchestrator.cjs",
    "instagram:marketing:cron:start": "bash automation/instagram-marketing-cron.sh",
    "instagram:marketing:analyze": "node automation/instagram-marketing-analyzer.cjs && node automation/instagram-marketing-factory.cjs",
    "alignment:start": "node automation/alignment-orchestrator.cjs",
    "alignment:cron:start": "bash automation/alignment-cron.sh",
    "alignment:scan": "node automation/chat-fetcher.cjs && (node automation/google-doc-fetcher.cjs || true) && node automation/alignment-crawler.cjs && node automation/alignment-analyzer.cjs && node automation/alignment-factory.cjs && node automation/alignment-dev-factory.cjs",
    "maintenance:run": "node automation/site-maintenance-orchestrator.cjs",
    "maintenance:cron:start": "bash automation/site-maintenance-cron.sh start",
    "maintenance:cron:stop": "bash automation/site-maintenance-cron.sh stop",
    "maintenance:cron:status": "bash automation/site-maintenance-cron.sh status",
    "maintenance:cron:run": "bash automation/site-maintenance-cron.sh run",
    "health:start": "node automation/auto-health-monitor/index.mjs",
    "health:dev": "nodemon automation/auto-health-monitor/index.mjs",
    "automation:all:plus": "npm run automation:all & npm run health:start",
    "automation:pm2": "npm run pm2:start && npm run pm2:bootstrap:logrotate && pm2 save",
    "automation:pm2:restart": "npm run pm2:restart && npm run pm2:bootstrap:logrotate && pm2 save",
    "automation:pm2:status": "npm run pm2:status",
    "automation:pm2:logs": "npm run pm2:logs",
    "automation:pm2:report": "node scripts/pm2-schedulers-report.cjs",
    "automation:pm2:autostart": "node scripts/pm2-autostart.cjs",
    "automation:pm2:resurrect": "node scripts/pm2-resurrect-hook.cjs",
    "automation:pm2:fastads": "npm run pm2:fastads:start && npm run pm2:bootstrap:logrotate && pm2 save",
    "automation:pm2:cron": "npm run pm2:cron:start && npm run pm2:bootstrap:logrotate && pm2 save",
    "postautomation": "npm run automation:git-sync",
    "lint:staged": "lint-staged",
    "ui-evolution:start": "node automation/ui-evolution-launcher.js start",
    "ui-evolution:once": "node automation/ui-evolution-launcher.js once",
    "ui-evolution:analyze": "node automation/ui-evolution-launcher.js analyze",
    "ui-evolution:factory": "node automation/ui-evolution-launcher.js factory",
    "ui-evolution:beautify": "node automation/ui-evolution-launcher.js beautify",
    "ui-evolution:dashboard": "node automation/ui-evolution-launcher.js dashboard",
    "meta:factory": "node automation/autonomous-meta-factory.cjs",
    "meta:orchestrator": "node automation/autonomous-meta-orchestrator.cjs",
    "meta:cron:start": "bash automation/autonomous-meta-cron.sh",
    "venture:start": "node automation/venture-orchestrator.cjs continuous",
    "venture:once": "node automation/venture-orchestrator.cjs once",
    "venture:analyze": "node automation/venture-services-analyzer.cjs && node automation/venture-services-factory.cjs && node automation/ads-generator.cjs && node automation/service-sales-agents-factory.cjs",
    "venture:cron:start": "bash automation/venture-cron.sh start",
    "venture:cron:stop": "bash automation/venture-cron.sh stop",
    "venture:cron:status": "bash automation/venture-cron.sh status",
    "venture:report": "node automation/venture-orchestrator.cjs report",
    "frontend-sync:autonomous:start": "node automation/launch-frontend-sync-autonomous.js",
    "frontend-sync:autonomous:once": "node automation/frontend-sync-autonomous-orchestrator.cjs once 0",
    "frontend-sync:autonomous:cron": "bash automation/frontend-sync-autonomous-cron.sh",
    "git:pull": "node automation/git-pull-rebase.cjs",
    "git:cron:start": "bash automation/git-sync-cron.sh start",
    "git:cron:stop": "bash automation/git-sync-cron.sh stop",
    "git:cron:status": "bash automation/git-sync-cron.sh status",
    "homepage:update": "node automation/homepage-updater.cjs",
    "front:futurize": "node automation/front-futurizer.cjs",
    "front:futurize:cron": "node -e \"const cp=require('child_process'); setInterval(()=>cp.exec('node automation/front-futurizer.cjs',()=>{}), 1000*60*60*6)\"",
    "front:directory": "node automation/front-index-directory-builder.cjs",
    "front:continuous": "node automation/continuous-front-runner.cjs",
    "front:continuous:fast": "node -e \"const cp=require('child_process'); const run=()=>cp.exec('node automation/continuous-front-runner.cjs',()=>{}); run(); setInterval(run, 1000*60*5);\"",
    "ads:fast": "node automation/fast-advertising-orchestrator.cjs",
    "cloud:agents": "node automation/cloud-autonomous-agents-factory.cjs",
    "cloud:crawl": "node automation/cloud-site-crawler.cjs",
    "cloud:factory": "node automation/cloud-content-factory.cjs",
    "cloud:advertise": "node automation/cloud-content-advertiser.cjs",
    "cloud:continuous": "node scripts/continuous-cloud-agents.cjs",
    "gh:trigger": "node scripts/trigger-workflows.cjs",
    "gh:auto-heal": "node scripts/workflows-auto-healer.cjs && git add .github/workflows && git commit -m 'ci(auto-heal): normalize workflows [skip ci]' || true && git push origin HEAD",
    "redundancy:github": "node automation/redundancy/github-actions-redundancy-manager.cjs",
    "redundancy:netlify": "node automation/redundancy/netlify-functions-redundancy-manager.cjs",
    "redundancy:master": "node automation/redundancy/master-redundancy-orchestrator.cjs",
    "redundancy:report": "node automation/redundancy/master-redundancy-orchestrator.cjs report",
    "redundancy:comprehensive:start": "bash automation/start-comprehensive-redundancy.sh start",
    "redundancy:comprehensive:stop": "bash automation/start-comprehensive-redundancy.sh stop",
    "redundancy:comprehensive:restart": "bash automation/start-comprehensive-redundancy.sh restart",
    "redundancy:comprehensive:status": "bash automation/start-comprehensive-redundancy.sh status",
    "redundancy:comprehensive:logs": "bash automation/start-comprehensive-redundancy.sh logs",
    "redundancy:comprehensive:report": "bash automation/start-comprehensive-redundancy.sh report",
    "redundancy:comprehensive:test": "bash automation/start-comprehensive-redundancy.sh test",
    "redundancy:comprehensive:orchestrator": "node automation/comprehensive-redundancy-orchestrator.cjs",
    "redundancy:comprehensive:orchestrator:start": "node automation/comprehensive-redundancy-orchestrator.cjs start",
    "redundancy:comprehensive:orchestrator:stop": "node automation/comprehensive-redundancy-orchestrator.cjs stop",
    "redundancy:comprehensive:orchestrator:status": "node automation/comprehensive-redundancy-orchestrator.cjs status",
    "redundancy:comprehensive:orchestrator:report": "node automation/comprehensive-redundancy-orchestrator.cjs report",
    "redundancy:comprehensive:orchestrator:once": "node automation/comprehensive-redundancy-orchestrator.cjs once",
    "redundancy:ultimate:start": "bash automation/start-ultimate-redundancy.sh start",
    "redundancy:ultimate:stop": "bash automation/start-ultimate-redundancy.sh stop",
    "redundancy:ultimate:restart": "bash automation/start-ultimate-redundancy.sh restart",
    "redundancy:ultimate:status": "bash automation/start-ultimate-redundancy.sh status",
    "redundancy:ultimate:logs": "bash automation/start-ultimate-redundancy.sh logs",
    "redundancy:ultimate:test": "bash automation/start-ultimate-redundancy.sh test",
    "redundancy:ultimate:master": "node automation/ultimate-redundancy-master.cjs",
    "redundancy:ultimate:master:check": "node automation/ultimate-redundancy-master.cjs check",
    "redundancy:ultimate:master:start": "node automation/ultimate-redundancy-master.cjs start",
    "redundancy:ultimate:master:stop": "node automation/ultimate-redundancy-master.cjs stop",
    "redundancy:ultimate:master:restart": "node automation/ultimate-redundancy-master.cjs restart",
    "redundancy:ultimate:master:status": "node automation/ultimate-redundancy-master.cjs status",
<<<<<<< HEAD
    "redundancy:ultimate:master:report": "node automation/ultimate-redundancy-master.cjs report",
    "redundancy:ultimate:master:monitor": "node automation/ultimate-redundancy-master.cjs monitor",
    "redundancy:complete:start": "./automation/start-complete-redundancy.sh start",
    "redundancy:complete:stop": "./automation/start-complete-redundancy.sh stop",
    "redundancy:complete:restart": "./automation/start-complete-redundancy.sh restart",
    "redundancy:complete:status": "./automation/start-complete-redundancy.sh status",
    "redundancy:complete:health": "./automation/start-complete-redundancy.sh health",
    "redundancy:complete:logs": "./automation/start-complete-redundancy.sh logs",
    "redundancy:complete:check": "./automation/start-complete-redundancy.sh check",
    "redundancy:complete:pm2": "pm2 start ecosystem.complete-redundancy.pm2.cjs --update-env",
    "redundancy:complete:pm2:stop": "pm2 stop ecosystem.complete-redundancy.pm2.cjs",
    "redundancy:complete:pm2:restart": "pm2 restart ecosystem.complete-redundancy.pm2.cjs",
    "redundancy:complete:pm2:status": "pm2 status ecosystem.complete-redundancy.pm2.cjs"
=======
    "redundancy:ultimate:master:health": "node automation/ultimate-redundancy-master.cjs health",
    "redundancy:ultimate:v2:start": "bash automation/start-ultimate-redundancy-v2.sh start",
    "redundancy:ultimate:v2:stop": "bash automation/start-ultimate-redundancy-v2.sh stop",
    "redundancy:ultimate:v2:restart": "bash automation/start-ultimate-redundancy-v2.sh restart",
    "redundancy:ultimate:v2:status": "bash automation/start-ultimate-redundancy-v2.sh status",
    "redundancy:ultimate:v2:health": "bash automation/start-ultimate-redundancy-v2.sh health",
    "redundancy:ultimate:v2:logs": "bash automation/start-ultimate-redundancy-v2.sh logs",
    "redundancy:ultimate:v2:system": "node automation/ultimate-redundancy-system-v2.cjs start",
    "redundancy:ultimate:v2:system:stop": "node automation/ultimate-redundancy-system-v2.cjs stop",
    "redundancy:ultimate:v2:system:status": "node automation/ultimate-redundancy-system-v2.cjs status",
    "redundancy:ultimate:v2:system:health": "node automation/ultimate-redundancy-system-v2.cjs health",
    "redundancy:github:backup": "node automation/github-actions-backup-manager.cjs backup",
    "redundancy:github:restore": "node automation/github-actions-backup-manager.cjs restore",
    "redundancy:github:validate": "node automation/github-actions-backup-manager.cjs validate",
    "redundancy:github:sync": "node automation/github-actions-backup-manager.cjs sync",
    "redundancy:github:status": "node automation/github-actions-backup-manager.cjs status",
    "redundancy:github:cleanup": "node automation/github-actions-backup-manager.cjs cleanup",
    "redundancy:github:cycle": "node automation/github-actions-backup-manager.cjs cycle",
    "redundancy:netlify:scan": "node automation/netlify-functions-redundancy-manager.cjs scan",
    "redundancy:ultimate:v2:system:health": "node automation/ultimate-redundancy-system-v2.cjs health",
    "redundancy:netlify:validate": "node automation/netlify-functions-redundancy-manager.cjs validate",
    "redundancy:netlify:manifest": "node automation/netlify-functions-redundancy-manager.cjs manifest",
    "redundancy:netlify:deploy": "node automation/netlify-functions-redundancy-manager.cjs deploy",
    "redundancy:netlify:status": "node automation/netlify-functions-redundancy-manager.cjs status",
    "redundancy:netlify:health": "node automation/netlify-functions-redundancy-manager.cjs health",
    "redundancy:netlify:recover": "node automation/netlify-functions-redundancy-manager.cjs recover",
    "redundancy:netlify:maintenance": "node automation/netlify-functions-redundancy-manager.cjs maintenance",
    "redundancy:ultimate:v2:start": "bash automation/start-ultimate-redundancy-v2.sh start",
    "redundancy:ultimate:v2:stop": "bash automation/start-ultimate-redundancy-v2.sh stop",
    "redundancy:ultimate:v2:restart": "bash automation/start-ultimate-redundancy-v2.sh restart",
    "redundancy:ultimate:v2:status": "bash automation/start-ultimate-redundancy-v2.sh status",
    "redundancy:ultimate:v2:health": "bash automation/start-ultimate-redundancy-v2.sh health",
    "redundancy:ultimate:v2:logs": "bash automation/start-ultimate-redundancy-v2.sh logs",
    "redundancy:ultimate:v2:test": "bash automation/start-ultimate-redundancy-v2.sh test",
    "redundancy:ultimate:v2:system": "node automation/ultimate-redundancy-automation-system.cjs",
    "redundancy:ultimate:v2:pm2": "pm2 start ecosystem.ultimate-redundancy-v2.cjs --update-env",
    "redundancy:ultimate:v2:pm2:stop": "pm2 stop ecosystem.ultimate-redundancy-v2.cjs",
    "redundancy:ultimate:v2:pm2:restart": "pm2 restart ecosystem.ultimate-redundancy-v2.cjs",
    "redundancy:ultimate:v2:pm2:status": "pm2 status",
    "redundancy:ultimate:v2:pm2:logs": "pm2 logs --lines 100",
    "redundancy:ultimate:v2:pm2:save": "pm2 save",
    "redundancy:ultimate:v2:pm2:resurrect": "pm2 resurrect",
    "redundancy:ultimate:v2:pm2:delete": "pm2 delete ecosystem.ultimate-redundancy-v2.cjs",
    "redundancy:ultimate:v2:pm2:reload": "pm2 reload ecosystem.ultimate-redundancy-v2.cjs",
    "redundancy:ultimate:v2:pm2:scale": "pm2 scale ecosystem.ultimate-redundancy-v2.cjs",
    "redundancy:ultimate:v2:pm2:monit": "pm2 monit",
    "redundancy:ultimate:v2:pm2:dashboard": "pm2 plus"
>>>>>>> origin/cursor/automate-all-existing-automations-and-clean-up-bdcb
  },
  "dependencies": {
    "@google-analytics/data": "^5.2.0",
    "@google/generative-ai": "^0.24.1",
    "@magneticwatermelon/mcp-toolkit": "^1.1.4",
    "@modelcontextprotocol/sdk": "^1.17.1",
    "@modelcontextprotocol/server-filesystem": "^2025.7.29",
    "@modelcontextprotocol/server-memory": "^2025.8.4",
    "@modelcontextprotocol/server-sequential-thinking": "^2025.7.1",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.39.0",
    "@tailwindcss/postcss": "^4.1.12",
    "@types/react-datepicker": "^6.2.0",
    "axios": "^1.11.0",
    "chalk": "^5.5.0",
    "cheerio": "^1.1.2",
    "child_process": "^1.0.2",
    "chokidar": "^4.0.3",
    "clsx": "^2.1.1",
    "critters": "^0.0.23",
    "cron-parser": "^5.3.0",
    "dotenv": "^17.2.1",
    "events": "^3.3.0",
    "framer-motion": "^12.23.12",
    "fs": "^0.0.1-security",
    "fs-extra": "^11.3.1",
    "glob": "^11.0.3",
    "https": "^1.0.0",
    "import-fresh": "^3.3.1",
    "jsdom": "^24.1.0",
    "lucide-react": "^0.536.0",
    "next": "^14.2.5",
    "node-cron": "^4.2.1",
    "openai": "^5.11.0",
    "path": "^0.12.7",
    "postcss": "^8.4.32",
    "react": "^19.1.1",
    "react-datepicker": "^8.4.0",
    "react-dom": "^19.1.1",
    "tailwind-merge": "^3.3.1",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@eslint/js": "^9.32.0",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@types/node": "^24.3.0",
    "@types/node-cron": "^3.0.11",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "eslint": "^8.57.1",
    "eslint-config-next": "^15.0.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.5",
    "postcss": "^8.4.32",
    "sharp": "^0.34.3",
    "tailwindcss": "^4.1.12",
    "ts-node": "^10.9.2",
    "typescript": "^5.0.0"
  },
  "lint-staged": {
    "**/*.{js,jsx,ts,tsx}": [
      "eslint --fix"
    ]
  }
}
