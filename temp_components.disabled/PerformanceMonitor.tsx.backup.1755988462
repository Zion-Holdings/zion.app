<<<<<<< HEAD
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, Zap, Clock, TrendingUp, AlertTriangle, 
  CheckCircle, X, Settings, BarChart3, Gauge,
  Wifi, WifiOff, Battery, BatteryCharging, Monitor,
  Smartphone, Tablet, Laptop, HardDrive, Memory
} from 'lucide-react';

interface PerformanceMetrics {
  loadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
  timeToInteractive: number;
  memoryUsage: number;
  cpuUsage: number;
  networkLatency: number;
  fps: number;
  domSize: number;
  resourceCount: number;
  timestamp: number;
  // Core Web Vitals
  lcp: number; // Largest Contentful Paint
  fid: number; // First Input Delay
  cls: number; // Cumulative Layout Shift
  ttfb: number; // Time to First Byte
  fmp: number; // First Meaningful Paint
  si: number; // Speed Index
  tti: number; // Time to Interactive
  tbt: number; // Total Blocking Time
}

interface DeviceInfo {
  type: 'mobile' | 'tablet' | 'desktop';
  screenSize: string;
  userAgent: string;
  connection: string;
  memory?: number;
  cores?: number;
}

interface PerformanceAlert {
  id: string;
  type: 'warning' | 'error' | 'info' | 'success';
  message: string;
  metric: keyof PerformanceMetrics;
  value: number;
  threshold: number;
  timestamp: Date;
}

const PerformanceMonitor: React.FC<{ showUI?: boolean }> = ({ showUI = false }) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    loadTime: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    cumulativeLayoutShift: 0,
    firstInputDelay: 0,
    timeToInteractive: 0,
    memoryUsage: 0,
    cpuUsage: 0,
    networkLatency: 0,
    fps: 0,
    domSize: 0,
    resourceCount: 0,
    timestamp: Date.now(),
    lcp: 0,
    fid: 0,
    cls: 0,
    ttfb: 0,
    fmp: 0,
    si: 0,
    tti: 0,
    tbt: 0
  });
  
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>({
    type: 'desktop',
    screenSize: '0x0',
    userAgent: '',
    connection: 'unknown'
  });
  
  const [alerts, setAlerts] = useState<PerformanceAlert[]>([]);
  const [isVisible, setIsVisible] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [autoOptimize, setAutoOptimize] = useState(false);
  const [optimizationHistory, setOptimizationHistory] = useState<string[]>([]);

  // Performance thresholds for different metrics
  const thresholds = useMemo(() => ({
    fcp: { good: 1800, poor: 3000 },
    lcp: { good: 2500, poor: 4000 },
    fid: { good: 100, poor: 300 },
    cls: { good: 0.1, poor: 0.25 },
    ttfb: { good: 800, poor: 1800 },
    fmp: { good: 2000, poor: 4000 },
    si: { good: 3400, poor: 5800 },
    tti: { good: 3800, poor: 7300 },
    tbt: { good: 300, poor: 600 }
  }), []);

  // Get performance grade based on metric value
  const getGrade = useCallback((metric: keyof PerformanceMetrics, value: number): 'good' | 'needs-improvement' | 'poor' => {
    const threshold = thresholds[metric];
    if (value <= threshold.good) return 'good';
    if (value <= threshold.poor) return 'needs-improvement';
    return 'poor';
  }, [thresholds]);

  // Get grade color
  const getGradeColor = useCallback((grade: string): string => {
    switch (grade) {
      case 'good': return 'text-green-400';
      case 'needs-improvement': return 'text-yellow-400';
      case 'poor': return 'text-red-400';
      default: return 'text-gray-400';
    }
  }, []);

  // Get grade icon
  const getGradeIcon = useCallback((grade: string) => {
    switch (grade) {
      case 'good': return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'needs-improvement': return <AlertTriangle className="w-4 h-4 text-yellow-400" />;
      case 'poor': return <AlertTriangle className="w-4 h-4 text-red-400" />;
      default: return <Activity className="w-4 h-4 text-gray-400" />;
    }
  }, []);

  // Detect device type and capabilities
  useEffect(() => {
    const detectDevice = () => {
      const userAgent = navigator.userAgent;
      const screenWidth = window.screen.width;
      const screenHeight = window.screen.height;
      
      let type: 'mobile' | 'tablet' | 'desktop' = 'desktop';
      if (screenWidth < 768) type = 'mobile';
      else if (screenWidth < 1024) type = 'tablet';
      
      const connection = (navigator as any).connection?.effectiveType || 'unknown';
      const memory = (navigator as any).deviceMemory;
      const cores = (navigator as any).hardwareConcurrency;
      
      setDeviceInfo({
        type,
        screenSize: `${screenWidth}x${screenHeight}`,
        userAgent,
        connection,
        memory,
        cores
      });
    };

    detectDevice();
    window.addEventListener('resize', detectDevice);
    return () => window.removeEventListener('resize', detectDevice);
  }, []);

  // Monitor performance metrics
  useEffect(() => {
    if (!showUI) return;

=======
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Zap, AlertTriangle, CheckCircle, Info, X, TrendingUp, Clock, Gauge } from 'lucide-react';

// Extend Window interface for gtag
declare global {
  interface Window {
    gtag?: (...args: any[]) => void;
  }
}

interface PerformanceMetrics {
  fcp: number | null;
  lcp: number | null;
  fid: number | null;
  cls: number | null;
  ttfb: number | null;
  fmp: number | null;
  domLoad: number | null;
  windowLoad: number | null;
}

interface PerformanceMonitorProps {
  showDetails?: boolean;
  autoHide?: boolean;
  threshold?: {
    fcp: number;
    lcp: number;
    fid: number;
    cls: number;
    ttfb: number;
  };
}

const defaultThresholds = {
  fcp: 1800, // 1.8 seconds
  lcp: 2500, // 2.5 seconds
  fid: 100,  // 100ms
  cls: 0.1,  // 0.1
  ttfb: 600  // 600ms
};

export default function PerformanceMonitor({ 
  showDetails = false, 
  autoHide = true,
  threshold = defaultThresholds 
}: PerformanceMonitorProps) {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fcp: null,
    lcp: null,
    fid: null,
    cls: null,
    ttfb: null,
    fmp: null,
    domLoad: null,
    windowLoad: null
  });
  
  const [isVisible, setIsVisible] = useState(false);
  const [showFullDetails, setShowFullDetails] = useState(showDetails);
  const [performanceScore, setPerformanceScore] = useState<number>(0);

  // Calculate performance score based on Core Web Vitals
  const calculateScore = useCallback((metrics: PerformanceMetrics): number => {
    let score = 100;
    let totalWeight = 0;
    let weightedScore = 0;

    // FCP weight: 25%
    if (metrics.fcp !== null) {
      const fcpScore = metrics.fcp <= threshold.fcp ? 100 : Math.max(0, 100 - ((metrics.fcp - threshold.fcp) / 100) * 20);
      weightedScore += fcpScore * 0.25;
      totalWeight += 0.25;
    }

    // LCP weight: 25%
    if (metrics.lcp !== null) {
      const lcpScore = metrics.lcp <= threshold.lcp ? 100 : Math.max(0, 100 - ((metrics.lcp - threshold.lcp) / 100) * 20);
      weightedScore += lcpScore * 0.25;
      totalWeight += 0.25;
    }

    // FID weight: 25%
    if (metrics.fid !== null) {
      const fidScore = metrics.fid <= threshold.fid ? 100 : Math.max(0, 100 - ((metrics.fid - threshold.fid) / 10) * 20);
      weightedScore += fidScore * 0.25;
      totalWeight += 0.25;
    }

    // CLS weight: 15%
    if (metrics.cls !== null) {
      const clsScore = metrics.cls <= threshold.cls ? 100 : Math.max(0, 100 - (metrics.cls / 0.01) * 20);
      weightedScore += clsScore * 0.15;
      totalWeight += 0.15;
    }

    // TTFB weight: 10%
    if (metrics.ttfb !== null) {
      const ttfbScore = metrics.ttfb <= threshold.ttfb ? 100 : Math.max(0, 100 - ((metrics.ttfb - threshold.ttfb) / 10) * 20);
      weightedScore += ttfbScore * 0.10;
      totalWeight += 0.10;
    }

    return totalWeight > 0 ? Math.round(weightedScore / totalWeight) : 0;
  }, [threshold]);

  // Get performance rating
  const getPerformanceRating = (score: number): { label: string; color: string; icon: React.ReactNode } => {
    if (score >= 90) {
      return { label: 'Excellent', color: 'text-green-400', icon: <CheckCircle className="w-4 h-4" /> };
    } else if (score >= 70) {
      return { label: 'Good', color: 'text-yellow-400', icon: <TrendingUp className="w-4 h-4" /> };
    } else if (score >= 50) {
      return { label: 'Fair', color: 'text-orange-400', icon: <AlertTriangle className="w-4 h-4" /> };
    } else {
      return { label: 'Poor', color: 'text-red-400', icon: <AlertTriangle className="w-4 h-4" /> };
    }
  };

  // Get metric status
  const getMetricStatus = (metric: keyof PerformanceMetrics, value: number | null): { status: 'good' | 'needs-improvement' | 'poor'; color: string } => {
    if (value === null) return { status: 'good', color: 'text-gray-400' };
    
    const thresholds = {
      fcp: { good: threshold.fcp, poor: threshold.fcp * 1.5 },
      lcp: { good: threshold.lcp, poor: threshold.lcp * 1.5 },
      fid: { good: threshold.fid, poor: threshold.fid * 1.5 },
      cls: { good: threshold.cls, poor: threshold.cls * 1.5 },
      ttfb: { good: threshold.ttfb, poor: threshold.ttfb * 1.5 }
    };

    const metricThresholds = thresholds[metric as keyof typeof thresholds];
    if (!metricThresholds) return { status: 'good', color: 'text-gray-400' };

    if (value <= metricThresholds.good) {
      return { status: 'good', color: 'text-green-400' };
    } else if (value <= metricThresholds.poor) {
      return { status: 'needs-improvement', color: 'text-yellow-400' };
    } else {
      return { status: 'poor', color: 'text-red-400' };
    }
  };

  // Format metric value
  const formatMetric = (metric: keyof PerformanceMetrics, value: number | null): string => {
    if (value === null) return 'N/A';
    
    switch (metric) {
      case 'fcp':
      case 'lcp':
      case 'ttfb':
      case 'fmp':
      case 'domLoad':
      case 'windowLoad':
        return `${value.toFixed(0)}ms`;
      case 'fid':
        return `${value.toFixed(1)}ms`;
      case 'cls':
        return value.toFixed(3);
      default:
        return value.toString();
    }
  };

  // Monitor performance metrics
  useEffect(() => {
    if (typeof window === 'undefined') return;

>>>>>>> origin/cursor/analyze-improve-and-deploy-application-2157
    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      
      entries.forEach((entry) => {
        if (entry.entryType === 'paint') {
<<<<<<< HEAD
          const paintEntry = entry as PerformancePaintTiming;
          if (paintEntry.name === 'first-contentful-paint') {
            setMetrics(prev => ({ ...prev, fcp: paintEntry.startTime }));
          }
        } else if (entry.entryType === 'largest-contentful-paint') {
          const lcpEntry = entry as any;
          setMetrics(prev => ({ ...prev, lcp: lcpEntry.startTime }));
        } else if (entry.entryType === 'first-input') {
          const fidEntry = entry as any;
          setMetrics(prev => ({ ...prev, fid: fidEntry.processingStart - fidEntry.startTime }));
        } else if (entry.entryType === 'layout-shift') {
          const clsEntry = entry as any;
          setMetrics(prev => ({ ...prev, cls: prev.cls + clsEntry.value }));
=======
          if (entry.name === 'first-contentful-paint') {
            setMetrics(prev => ({ ...prev, fcp: entry.startTime }));
          }
        } else if (entry.entryType === 'largest-contentful-paint') {
          setMetrics(prev => ({ ...prev, lcp: entry.startTime }));
        } else if (entry.entryType === 'first-input') {
          setMetrics(prev => ({ ...prev, fid: (entry as any).processingStart - entry.startTime }));
        } else if (entry.entryType === 'layout-shift') {
          setMetrics(prev => ({ ...prev, cls: (prev.cls || 0) + (entry as any).value }));
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-2157
        }
      });
    });

    // Observe different performance entry types
<<<<<<< HEAD
    observer.observe({ entryTypes: ['paint', 'largest-contentful-paint', 'first-input', 'layout-shift'] });

    // Measure TTFB
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigationEntry) {
      setMetrics(prev => ({ ...prev, ttfb: navigationEntry.responseStart - navigationEntry.requestStart }));
    }

    // Measure other metrics
    const measureSpeedIndex = () => {
      const images = document.querySelectorAll('img');
      let totalLoadTime = 0;
      let loadedImages = 0;
      
      images.forEach(img => {
        if (img.complete) {
          totalLoadTime += performance.now();
          loadedImages++;
        }
      });
      
      if (loadedImages > 0) {
        const speedIndex = totalLoadTime / loadedImages;
        setMetrics(prev => ({ ...prev, si: speedIndex }));
      }
    };

    // Measure after images load
    if (document.readyState === 'complete') {
      measureSpeedIndex();
    } else {
      window.addEventListener('load', measureSpeedIndex);
=======
    try {
      observer.observe({ entryTypes: ['paint', 'largest-contentful-paint', 'first-input', 'layout-shift'] });
    } catch (e) {
      console.warn('PerformanceObserver not supported');
    }

    // Measure TTFB
    if ('performance' in window) {
      const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigationEntry) {
        setMetrics(prev => ({ 
          ...prev, 
          ttfb: navigationEntry.responseStart - navigationEntry.requestStart,
          domLoad: navigationEntry.domContentLoadedEventEnd - (navigationEntry as any).navigationStart || 0,
          windowLoad: navigationEntry.loadEventEnd - (navigationEntry as any).navigationStart || 0
        }));
      }
    }

    // Measure First Meaningful Paint (FMP) approximation
    const measureFMP = () => {
      const paintEntries = performance.getEntriesByType('paint');
      const fcpEntry = paintEntries.find(entry => entry.name === 'first-contentful-paint');
      if (fcpEntry) {
        setMetrics(prev => ({ ...prev, fmp: fcpEntry.startTime }));
      }
    };

    // Wait for page to load
    if (document.readyState === 'complete') {
      measureFMP();
    } else {
      window.addEventListener('load', measureFMP);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-2157
    }

    return () => {
      observer.disconnect();
<<<<<<< HEAD
      window.removeEventListener('load', measureSpeedIndex);
    };
  }, [showUI]);

  // Generate performance alerts
  useEffect(() => {
    const newAlerts: PerformanceAlert[] = [];
    
    Object.entries(metrics).forEach(([metric, value]) => {
      if (value > 0) {
        const grade = getGrade(metric as keyof PerformanceMetrics, value);
        if (grade !== 'good') {
          const threshold = thresholds[metric as keyof PerformanceMetrics];
          const alert: PerformanceAlert = {
            id: `${metric}-${Date.now()}`,
            type: grade === 'poor' ? 'error' : 'warning',
            message: `${metric.toUpperCase()} is ${grade === 'poor' ? 'poor' : 'needs improvement'} (${value.toFixed(2)}ms)`,
            metric: metric as keyof PerformanceMetrics,
            value,
            threshold: grade === 'poor' ? threshold.poor : threshold.good,
            timestamp: new Date()
          };
          newAlerts.push(alert);
        }
      }
    });

    setAlerts(prev => {
      const existingAlertIds = prev.map(a => a.metric);
      const filteredNewAlerts = newAlerts.filter(alert => !existingAlertIds.includes(alert.alert.metric));
      return [...prev, ...filteredNewAlerts];
    });
  }, [metrics, getGrade, thresholds]);

  // Auto-optimization suggestions
  useEffect(() => {
    if (!autoOptimize) return;

    const suggestions: string[] = [];
    
    if (metrics.fcp > thresholds.fcp.needs-improvement) {
      suggestions.push('Optimize critical rendering path');
    }
    if (metrics.lcp > thresholds.lcp.needs-improvement) {
      suggestions.push('Optimize largest contentful paint');
    }
    if (metrics.cls > thresholds.cls.needs-improvement) {
      suggestions.push('Fix layout shifts');
    }
    if (metrics.ttfb > thresholds.ttfb.needs-improvement) {
      suggestions.push('Optimize server response time');
    }

    if (suggestions.length > 0) {
      setOptimizationHistory(prev => [...prev, ...suggestions]);
    }
  }, [metrics, thresholds, autoOptimize]);

  // Performance optimization functions
  const optimizeImages = useCallback(() => {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      if (!img.loading) {
        img.loading = 'lazy';
      }
      if (!img.decoding) {
        img.decoding = 'async';
      }
    });
    setOptimizationHistory(prev => [...prev, 'Images optimized with lazy loading']);
  }, []);

  const optimizeFonts = useCallback(() => {
    const fontLinks = document.querySelectorAll('link[rel="preload"][as="font"]');
    fontLinks.forEach(link => {
      link.setAttribute('crossorigin', 'anonymous');
    });
    setOptimizationHistory(prev => [...prev, 'Fonts optimized with proper crossorigin']);
  }, []);

  const clearOptimizationHistory = useCallback(() => {
    setOptimizationHistory([]);
  }, []);

  // Calculate overall performance score
  const overallScore = useMemo(() => {
    const scores = Object.entries(metrics).map(([metric, value]) => {
      if (value === 0) return 100;
      const grade = getGrade(metric as keyof PerformanceMetrics, value);
      switch (grade) {
        case 'good': return 100;
        case 'needs-improvement': return 60;
        case 'poor': return 20;
        default: return 0;
      }
    }).filter(score => score > 0);
    
    return scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;
  }, [metrics, getGrade]);

  // Get score color
  const getScoreColor = useCallback((score: number): string => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  }, []);

  if (!showUI) return null;

  return (
    <>
      {/* Floating Performance Button */}
      <motion.div
        className="fixed bottom-8 left-8 z-40"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 1, duration: 0.5 }}
      >
        <button
          onClick={() => setIsVisible(!isVisible)}
          className={`p-4 rounded-full shadow-lg transition-all duration-200 ${
            isVisible 
              ? 'bg-red-500 hover:bg-red-600 text-white' 
              : 'bg-cyan-500 hover:bg-cyan-600 text-white'
          }`}
          aria-label="Toggle performance monitor"
        >
          <Activity className="w-6 h-6" />
        </button>
      </motion.div>

      {/* Performance Monitor Panel */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            className="fixed bottom-24 left-8 z-50 w-96 max-h-[80vh] overflow-hidden"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.3 }}
          >
            <div className="bg-black/90 backdrop-blur-xl rounded-2xl border border-cyan-500/30 shadow-2xl">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-cyan-500/30">
                <div className="flex items-center gap-2">
                  <Activity className="w-5 h-5 text-cyan-400" />
                  <h3 className="text-white font-semibold">Performance Monitor</h3>
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => setIsExpanded(!isExpanded)}
                    className="p-1 text-cyan-400 hover:text-cyan-300 transition-colors"
                    aria-label="Toggle expanded view"
                  >
                    <BarChart3 className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setIsVisible(false)}
                    className="p-1 text-gray-400 hover:text-white transition-colors"
                    aria-label="Close performance monitor"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="p-4 space-y-4 max-h-[60vh] overflow-y-auto">
                {/* Overall Score */}
                <div className="text-center p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-xl border border-cyan-500/30">
                  <div className="text-3xl font-bold text-white mb-2">
                    <span className={getScoreColor(overallScore)}>{overallScore}</span>
                    <span className="text-gray-400">/100</span>
                  </div>
                  <div className="text-sm text-gray-400">Performance Score</div>
                </div>

                {/* Device Info */}
                <div className="bg-black/30 rounded-xl p-3 border border-cyan-500/20">
                  <div className="flex items-center gap-2 mb-2">
                    <Monitor className="w-4 h-4 text-cyan-400" />
                    <span className="text-white text-sm font-medium">Device Info</span>
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-xs text-gray-400">
                    <div>Type: <span className="text-white">{deviceInfo.type}</span></div>
                    <div>Screen: <span className="text-white">{deviceInfo.screenSize}</span></div>
                    <div>Connection: <span className="text-white">{deviceInfo.connection}</span></div>
                    {deviceInfo.memory && <div>Memory: <span className="text-white">{deviceInfo.memory}GB</span></div>}
                    {deviceInfo.cores && <div>Cores: <span className="text-white">{deviceInfo.cores}</span></div>}
                  </div>
                </div>

                {/* Performance Metrics */}
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Gauge className="w-4 h-4 text-cyan-400" />
                    <span className="text-white text-sm font-medium">Metrics</span>
                  </div>
                  
                  {Object.entries(metrics).map(([metric, value]) => {
                    if (value === 0) return null;
                    const grade = getGrade(metric as keyof PerformanceMetrics, value);
                    const color = getGradeColor(grade);
                    
                    return (
                      <div key={metric} className="flex items-center justify-between p-2 bg-black/20 rounded-lg">
                        <div className="flex items-center gap-2">
                          {getGradeIcon(grade)}
                          <span className="text-gray-300 text-xs uppercase">{metric}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className={`text-sm font-mono ${color}`}>
                            {value.toFixed(2)}ms
                          </span>
                          <span className={`text-xs px-2 py-1 rounded-full ${
                            grade === 'good' ? 'bg-green-500/20 text-green-400' :
                            grade === 'needs-improvement' ? 'bg-yellow-500/20 text-yellow-400' :
                            'bg-red-500/20 text-red-400'
                          }`}>
                            {grade}
                          </span>
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* Alerts */}
                {alerts.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <AlertTriangle className="w-4 h-4 text-yellow-400" />
                      <span className="text-white text-sm font-medium">Alerts</span>
                    </div>
                    {alerts.slice(0, 3).map(alert => (
                      <div key={alert.id} className={`p-2 rounded-lg text-xs border ${
                        alert.type === 'error' ? 'bg-red-500/20 border-red-500/30 text-red-400' :
                        alert.type === 'warning' ? 'bg-yellow-500/20 border-yellow-500/30 text-yellow-400' :
                        'bg-blue-500/20 border-blue-500/30 text-blue-400'
                      }`}>
                        {alert.message}
                      </div>
                    ))}
                  </div>
                )}

                {/* Optimization Controls */}
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <Settings className="w-4 h-4 text-cyan-400" />
                    <span className="text-white text-sm font-medium">Optimization</span>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      id="autoOptimize"
                      checked={autoOptimize}
                      onChange={(e) => setAutoOptimize(e.target.checked)}
                      className="rounded border-cyan-500/30 text-cyan-500 focus:ring-cyan-500"
                    />
                    <label htmlFor="autoOptimize" className="text-gray-300 text-sm">
                      Auto-optimize
                    </label>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2">
                    <button
                      onClick={optimizeImages}
                      className="px-3 py-2 bg-cyan-500/20 text-cyan-400 rounded-lg hover:bg-cyan-500/30 transition-colors text-xs"
                    >
                      Optimize Images
                    </button>
                    <button
                      onClick={optimizeFonts}
                      className="px-3 py-2 bg-cyan-500/20 text-cyan-400 rounded-lg hover:bg-cyan-500/30 transition-colors text-xs"
                    >
                      Optimize Fonts
                    </button>
                  </div>
                </div>

                {/* Optimization History */}
                {optimizationHistory.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-white text-sm font-medium">History</span>
                      <button
                        onClick={clearOptimizationHistory}
                        className="text-xs text-gray-400 hover:text-white transition-colors"
                      >
                        Clear
                      </button>
                    </div>
                    <div className="max-h-32 overflow-y-auto space-y-1">
                      {optimizationHistory.slice(-5).map((item, index) => (
                        <div key={index} className="text-xs text-gray-400 bg-black/20 p-2 rounded">
                          {item}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

// Helper function to get score colors
const getScoreColor = (score: string): string => {
  switch (score) {
    case 'Good':
    case 'Excellent':
      return 'text-green-400';
    case 'Needs Improvement':
      return 'text-yellow-400';
    case 'Poor':
      return 'text-red-400';
    default:
      return 'text-white/60';
  }
};

export default PerformanceMonitor;
=======
      window.removeEventListener('load', measureFMP);
    };
  }, []);

  // Update performance score when metrics change
  useEffect(() => {
    const score = calculateScore(metrics);
    setPerformanceScore(score);
    
    if (score > 0) {
      setIsVisible(true);
      
      if (autoHide && score >= 90) {
        const timer = setTimeout(() => setIsVisible(false), 5000);
        return () => clearTimeout(timer);
      }
    }
  }, [metrics, calculateScore, autoHide]);

  // Send metrics to analytics
  useEffect(() => {
    if (performanceScore > 0 && typeof window !== 'undefined') {
      // Send to Google Analytics if available
      if (window.gtag) {
        window.gtag('event', 'performance_metrics', {
          event_category: 'Performance',
          event_label: 'Core Web Vitals',
          value: performanceScore,
          custom_parameters: {
            fcp: metrics.fcp,
            lcp: metrics.lcp,
            fid: metrics.fid,
            cls: metrics.cls,
            ttfb: metrics.ttfb
          }
        });
      }

      // Send to custom analytics endpoint
      fetch('/api/analytics/performance', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          score: performanceScore,
          metrics,
          url: window.location.href,
          timestamp: new Date().toISOString()
        })
      }).catch(() => {
        // Silently fail if analytics endpoint is not available
      });
    }
  }, [performanceScore, metrics]);

  if (!isVisible) return null;

  const rating = getPerformanceRating(performanceScore);

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20, scale: 0.95 }}
        animate={{ opacity: 1, y: 0, scale: 1 }}
        exit={{ opacity: 0, y: 20, scale: 0.95 }}
        className="fixed bottom-4 right-4 z-50 max-w-sm w-full"
      >
        <div className="bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-2xl shadow-2xl overflow-hidden">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-lg">
                <Gauge className="w-5 h-5 text-white" />
              </div>
              <div>
                <h3 className="font-semibold text-white">Performance Monitor</h3>
                <div className="flex items-center space-x-2">
                  {rating.icon}
                  <span className={`text-sm font-medium ${rating.color}`}>
                    {rating.label} ({performanceScore}/100)
                  </span>
                </div>
              </div>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="p-1 text-gray-400 hover:text-white transition-colors"
              aria-label="Close performance monitor"
            >
              <X className="w-4 h-4" />
            </button>
          </div>

          {/* Metrics */}
          <div className="p-4 space-y-3">
            {Object.entries(metrics).map(([key, value]) => {
              if (value === null) return null;
              
              const metricKey = key as keyof PerformanceMetrics;
              const status = getMetricStatus(metricKey, value);
              const formattedValue = formatMetric(metricKey, value);
              
              return (
                <div key={key} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-300 capitalize">
                      {key.replace(/([A-Z])/g, ' $1').trim()}
                    </span>
                    {status.status === 'good' && <CheckCircle className="w-3 h-3 text-green-400" />}
                    {status.status === 'needs-improvement' && <AlertTriangle className="w-3 h-3 text-yellow-400" />}
                    {status.status === 'poor' && <AlertTriangle className="w-3 h-3 text-red-400" />}
                  </div>
                  <span className={`text-sm font-mono ${status.color}`}>
                    {formattedValue}
                  </span>
                </div>
              );
            })}
          </div>

          {/* Actions */}
          <div className="p-4 border-t border-gray-700/50 bg-gray-800/30">
            <div className="flex space-x-2">
              <button
                onClick={() => setShowFullDetails(!showFullDetails)}
                className="flex-1 px-3 py-2 text-sm bg-gray-700/50 hover:bg-gray-700/70 text-gray-300 hover:text-white rounded-lg transition-colors flex items-center justify-center space-x-2"
              >
                <Info className="w-4 h-4" />
                <span>{showFullDetails ? 'Hide Details' : 'Show Details'}</span>
              </button>
              <button
                onClick={() => window.location.reload()}
                className="px-3 py-2 text-sm bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white rounded-lg transition-all duration-200 flex items-center space-x-2"
              >
                <Zap className="w-4 h-4" />
                <span>Refresh</span>
              </button>
            </div>
          </div>

          {/* Detailed Information */}
          <AnimatePresence>
            {showFullDetails && (
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                className="border-t border-gray-700/50 bg-gray-800/20"
              >
                <div className="p-4 space-y-3 text-sm text-gray-300">
                  <div>
                    <h4 className="font-medium text-white mb-2">Core Web Vitals</h4>
                    <p className="text-xs leading-relaxed">
                      These metrics measure the user experience of your website. 
                      Aim for scores above 90 for optimal performance.
                    </p>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 text-xs">
                    <div>
                      <div className="font-medium text-cyan-400">FCP</div>
                      <div className="text-gray-400">First Contentful Paint</div>
                      <div className="text-gray-500">Target: &lt;{threshold.fcp}ms</div>
                    </div>
                    <div>
                      <div className="font-medium text-cyan-400">LCP</div>
                      <div className="text-gray-400">Largest Contentful Paint</div>
                      <div className="text-gray-500">Target: &lt;{threshold.lcp}ms</div>
                    </div>
                    <div>
                      <div className="font-medium text-cyan-400">FID</div>
                      <div className="text-gray-400">First Input Delay</div>
                      <div className="text-gray-500">Target: &lt;{threshold.fid}ms</div>
                    </div>
                    <div>
                      <div className="font-medium text-cyan-400">CLS</div>
                      <div className="text-gray-400">Cumulative Layout Shift</div>
                      <div className="text-gray-500">Target: &lt;{threshold.cls}</div>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    </AnimatePresence>
  );
}
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-2157
