import React, { useEffect, useState } from 'react';
<<<<<<< HEAD

const AccessibilityEnhancer: React.FC = () => {
  const [isHighContrast, setIsHighContrast] = useState(false);
  const [isReducedMotion, setIsReducedMotion] = useState(false);
  const [fontSize, setFontSize] = useState(16);

  useEffect(() => {
    // Check user preferences
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const prefersHighContrast = window.matchMedia('(prefers-contrast: high)').matches;
    
    setIsReducedMotion(prefersReducedMotion);
    setIsHighContrast(prefersHighContrast);

    // Apply accessibility features based on preferences
    if (prefersReducedMotion) {
      document.documentElement.style.setProperty('--animation-duration', '0.01ms');
      document.documentElement.style.setProperty('--transition-duration', '0.01ms');
    }

    if (prefersHighContrast) {
      document.documentElement.classList.add('high-contrast');
    }

    // Add keyboard navigation support
    const handleKeyDown = (e: KeyboardEvent) => {
      // Skip to main content
      if (e.key === 'Tab' && e.altKey) {
        e.preventDefault();
        const mainContent = document.querySelector('main');
        if (mainContent) {
          (mainContent as HTMLElement).focus();
        }
      }

      // Increase/decrease font size
      if (e.ctrlKey && (e.key === '+' || e.key === '-')) {
        e.preventDefault();
        const newSize = e.key === '+' ? fontSize + 2 : fontSize - 2;
        if (newSize >= 12 && newSize <= 24) {
          setFontSize(newSize);
          document.documentElement.style.fontSize = `${newSize}px`;
        }
      }

      // Reset font size
      if (e.ctrlKey && e.key === '0') {
        e.preventDefault();
        setFontSize(16);
        document.documentElement.style.fontSize = '16px';
      }
    };

    document.addEventListener('keydown', handleKeyDown);

    // Add focus indicators
    const addFocusIndicators = () => {
      const style = document.createElement('style');
      style.textContent = `
        *:focus {
          outline: 3px solid #06b6d4 !important;
          outline-offset: 2px !important;
        }
        
        .skip-link {
          position: absolute;
          top: -40px;
          left: 6px;
          background: #06b6d4;
          color: white;
          padding: 8px;
          text-decoration: none;
          border-radius: 4px;
          z-index: 1000;
          transition: top 0.3s;
        }
        
        .skip-link:focus {
          top: 6px;
        }
        
        .high-contrast {
          --text-color: #000000 !important;
          --bg-color: #ffffff !important;
          --accent-color: #0000ff !important;
        }
        
        .high-contrast * {
          color: var(--text-color) !important;
          background-color: var(--bg-color) !important;
          border-color: var(--accent-color) !important;
        }
        
        .reduced-motion * {
          animation-duration: 0.01ms !important;
          transition-duration: 0.01ms !important;
        }
      `;
      document.head.appendChild(style);
    };

    addFocusIndicators();

    // Add skip links
    const addSkipLinks = () => {
      const skipLinksContainer = document.createElement('div');
      skipLinksContainer.className = 'skip-links';
      skipLinksContainer.innerHTML = `
        <a href="#main" class="skip-link">Skip to main content</a>
        <a href="#navigation" class="skip-link">Skip to navigation</a>
        <a href="#footer" class="skip-link">Skip to footer</a>
      `;
      document.body.insertBefore(skipLinksContainer, document.body.firstChild);
    };

    addSkipLinks();

    // Add ARIA live regions for dynamic content
    const addLiveRegions = () => {
      const liveRegion = document.createElement('div');
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.className = 'sr-only';
      liveRegion.style.cssText = 'position: absolute; left: -10000px; width: 1px; height: 1px; overflow: hidden;';
      document.body.appendChild(liveRegion);
    };

    addLiveRegions();

    // Enhance form accessibility
    const enhanceForms = () => {
      const forms = document.querySelectorAll('form');
      forms.forEach(form => {
        const inputs = form.querySelectorAll('input, textarea, select');
        inputs.forEach(input => {
          if (!input.getAttribute('aria-label') && !input.getAttribute('aria-labelledby')) {
            const label = input.previousElementSibling;
            if (label && label.tagName === 'LABEL') {
              input.setAttribute('aria-labelledby', label.id || 'label-' + Math.random().toString(36).substr(2, 9));
            }
          }
        });
      });
    };

    enhanceForms();

    // Add loading states
    const addLoadingStates = () => {
      const buttons = document.querySelectorAll('button[type="submit"], button[onclick]');
      buttons.forEach(button => {
        button.addEventListener('click', () => {
          button.setAttribute('aria-busy', 'true');
          button.setAttribute('aria-label', button.textContent + ' - Loading...');
          
          // Reset after a delay (in real app, this would be after the action completes)
          setTimeout(() => {
            button.removeAttribute('aria-busy');
            button.setAttribute('aria-label', button.textContent);
          }, 2000);
        });
      });
    };

    addLoadingStates();

    // Add error handling
    const addErrorHandling = () => {
      const inputs = document.querySelectorAll('input, textarea, select');
      inputs.forEach(input => {
        input.addEventListener('invalid', (e) => {
          const target = e.target as HTMLInputElement;
          target.setAttribute('aria-invalid', 'true');
          target.setAttribute('aria-describedby', 'error-' + target.id);
          
          // Create error message if it doesn't exist
          if (!document.getElementById('error-' + target.id)) {
            const errorDiv = document.createElement('div');
            errorDiv.id = 'error-' + target.id;
            errorDiv.className = 'error-message sr-only';
            errorDiv.setAttribute('role', 'alert');
            errorDiv.textContent = target.validationMessage;
            target.parentNode?.appendChild(errorDiv);
          }
        });
        
        input.addEventListener('input', () => {
          if (input.getAttribute('aria-invalid') === 'true') {
            input.removeAttribute('aria-invalid');
            const errorId = input.getAttribute('aria-describedby');
            if (errorId) {
              const errorElement = document.getElementById(errorId);
              if (errorElement) {
                errorElement.remove();
              }
              input.removeAttribute('aria-describedby');
            }
          }
        });
      });
    };

    addErrorHandling();

    // Add table accessibility
    const enhanceTables = () => {
      const tables = document.querySelectorAll('table');
      tables.forEach(table => {
        if (!table.getAttribute('role')) {
          table.setAttribute('role', 'table');
        }
        
        const headers = table.querySelectorAll('th');
        headers.forEach((header, index) => {
          header.setAttribute('scope', 'col');
          header.id = 'header-' + index;
        });
        
        const rows = table.querySelectorAll('tr');
        rows.forEach((row, rowIndex) => {
          row.setAttribute('role', 'row');
          
          const cells = row.querySelectorAll('td');
          cells.forEach((cell, cellIndex) => {
            const header = headers[cellIndex];
            if (header) {
              cell.setAttribute('headers', header.id);
            }
          });
        });
      });
    };

    enhanceTables();

    // Add image accessibility
    const enhanceImages = () => {
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.getAttribute('alt')) {
          img.setAttribute('alt', '');
          img.setAttribute('aria-hidden', 'true');
        }
        
        // Add loading state
        if (img.loading !== 'lazy') {
          img.loading = 'lazy';
        }
      });
    };

    enhanceImages();

    // Add navigation accessibility
    const enhanceNavigation = () => {
      const navs = document.querySelectorAll('nav');
      navs.forEach(nav => {
        if (!nav.getAttribute('role')) {
          nav.setAttribute('role', 'navigation');
        }
        
        const links = nav.querySelectorAll('a');
        links.forEach(link => {
          if (link.getAttribute('aria-current') !== 'page') {
            link.setAttribute('aria-current', 'false');
          }
        });
      });
    };

    enhanceNavigation();

    // Add search functionality accessibility
    const enhanceSearch = () => {
      const searchForms = document.querySelectorAll('form[role="search"]');
      searchForms.forEach(form => {
        const searchInput = form.querySelector('input[type="search"], input[placeholder*="search"], input[placeholder*="Search"]');
        if (searchInput) {
          searchInput.setAttribute('aria-label', 'Search for services and solutions');
          searchInput.setAttribute('aria-describedby', 'search-help');
          
          // Add search help text
          if (!document.getElementById('search-help')) {
            const helpText = document.createElement('div');
            helpText.id = 'search-help';
            helpText.className = 'sr-only';
            helpText.textContent = 'Type your search query and press Enter to search. Use arrow keys to navigate results.';
            searchInput.parentNode?.appendChild(helpText);
          }
        }
      });
    };

    enhanceSearch();

    // Add progress indicators
    const addProgressIndicators = () => {
      const progressBars = document.querySelectorAll('.progress, [role="progressbar"]');
      progressBars.forEach(progress => {
        if (!progress.getAttribute('aria-valuenow')) {
          progress.setAttribute('aria-valuenow', '0');
          progress.setAttribute('aria-valuemin', '0');
          progress.setAttribute('aria-valuemax', '100');
          progress.setAttribute('aria-label', 'Progress indicator');
        }
      });
    };

    addProgressIndicators();

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [fontSize]);

  // Accessibility toolbar component
  const AccessibilityToolbar = () => (
    <div className="accessibility-toolbar" role="toolbar" aria-label="Accessibility options">
      <button
        onClick={() => {
          const newSize = fontSize + 2;
          if (newSize <= 24) {
            setFontSize(newSize);
            document.documentElement.style.fontSize = `${newSize}px`;
          }
        }}
        aria-label="Increase font size"
        className="accessibility-btn"
      >
        A+
      </button>
      <button
        onClick={() => {
          const newSize = fontSize - 2;
          if (newSize >= 12) {
            setFontSize(newSize);
            document.documentElement.style.fontSize = `${newSize}px`;
          }
        }}
        aria-label="Decrease font size"
        className="accessibility-btn"
      >
        A-
      </button>
      <button
        onClick={() => {
          setIsHighContrast(!isHighContrast);
          document.documentElement.classList.toggle('high-contrast');
        }}
        aria-label="Toggle high contrast"
        className="accessibility-btn"
        aria-pressed={isHighContrast}
      >
        <span role="img" aria-label="High contrast">🌓</span>
      </button>
      <button
        onClick={() => {
          setIsReducedMotion(!isReducedMotion);
          document.documentElement.classList.toggle('reduced-motion');
        }}
        aria-label="Toggle reduced motion"
        className="accessibility-btn"
        aria-pressed={isReducedMotion}
      >
        <span role="img" aria-label="Reduced motion">🎬</span>
      </button>
    </div>
  );

  return (
    <>
      <AccessibilityToolbar />
      <style jsx>{`
        .accessibility-toolbar {
          position: fixed;
          top: 20px;
          right: 20px;
          display: flex;
          flex-direction: column;
          gap: 8px;
          z-index: 1000;
          background: rgba(0, 0, 0, 0.8);
          padding: 12px;
          border-radius: 8px;
          backdrop-filter: blur(10px);
        }
        
        .accessibility-btn {
          width: 40px;
          height: 40px;
          border: none;
          border-radius: 6px;
          background: #06b6d4;
          color: white;
          cursor: pointer;
          font-size: 14px;
          font-weight: bold;
          transition: all 0.2s ease;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .accessibility-btn:hover {
          background: #0891b2;
          transform: scale(1.05);
        }
        
        .accessibility-btn:focus {
          outline: 3px solid #ffffff;
          outline-offset: 2px;
        }
        
        .accessibility-btn[aria-pressed="true"] {
          background: #dc2626;
        }
        
        .sr-only {
=======
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Eye, 
  EyeOff, 
  Volume2, 
  VolumeX, 
  Type, 
  Contrast, 
  ZoomIn, 
  ZoomOut,
  Accessibility,
  Keyboard,
  MousePointer
} from 'lucide-react';

interface AccessibilityEnhancerProps {
  onAccessibilityChange?: (settings: AccessibilitySettings) => void;
}

interface AccessibilitySettings {
  highContrast: boolean;
  largeText: boolean;
  reducedMotion: boolean;
  screenReader: boolean;
  zoomLevel: number;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({
  onAccessibilityChange
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    largeText: false,
    reducedMotion: false,
    screenReader: false,
    zoomLevel: 100
  });

  useEffect(() => {
    // Load saved accessibility settings from localStorage
    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(parsed);
        applyAccessibilitySettings(parsed);
      } catch (error) {
        console.error('Failed to parse saved accessibility settings:', error);
      }
    }

    // Check for system preferences
    checkSystemPreferences();
  }, []);

  const checkSystemPreferences = () => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    // Check for high contrast preference
    const prefersHighContrast = window.matchMedia('(prefers-contrast: high)').matches;
    
    setSettings(prev => ({
      ...prev,
      reducedMotion: prefersReducedMotion,
      highContrast: prefersHighContrast
    }));
  };

  const applyAccessibilitySettings = (newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // Apply high contrast
    if (newSettings.highContrast) {
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
    }
    
    // Apply large text
    if (newSettings.largeText) {
      root.style.fontSize = '120%';
    } else {
      root.style.fontSize = '100%';
    }
    
    // Apply reduced motion
    if (newSettings.reducedMotion) {
      root.classList.add('reduced-motion');
    } else {
      root.classList.remove('reduced-motion');
    }
    
    // Apply zoom level
    root.style.zoom = `${newSettings.zoomLevel}%`;
    
    // Notify parent component
    onAccessibilityChange?.(newSettings);
  };

  const updateSetting = (key: keyof AccessibilitySettings, value: any) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    applyAccessibilitySettings(newSettings);
    
    // Save to localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(newSettings));
  };

  const togglePanel = () => {
    setIsOpen(!isOpen);
  };

  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === 'Escape') {
      setIsOpen(false);
    }
  };

  const resetSettings = () => {
    const defaultSettings: AccessibilitySettings = {
      highContrast: false,
      largeText: false,
      reducedMotion: false,
      screenReader: false,
      zoomLevel: 100
    };
    setSettings(defaultSettings);
    applyAccessibilitySettings(defaultSettings);
    localStorage.removeItem('accessibility-settings');
  };

  return (
    <>
      {/* Accessibility Toggle Button */}
      <motion.button
        className="fixed bottom-6 right-6 z-50 w-14 h-14 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-500 focus:ring-opacity-50"
        onClick={togglePanel}
        onKeyDown={handleKeyDown}
        aria-label="Accessibility settings"
        aria-expanded={isOpen}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Accessibility className="w-7 h-7 mx-auto" />
      </motion.button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed bottom-24 right-6 z-40 w-80 bg-gray-900 border border-gray-700 rounded-lg shadow-2xl"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.2 }}
            onKeyDown={handleKeyDown}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <h3 className="text-lg font-semibold text-white flex items-center">
                <Accessibility className="w-5 h-5 mr-2" />
                Accessibility
              </h3>
              <button
                onClick={togglePanel}
                className="text-gray-400 hover:text-white transition-colors"
                aria-label="Close accessibility panel"
              >
                <EyeOff className="w-5 h-5" />
              </button>
            </div>

            {/* Settings */}
            <div className="p-4 space-y-4">
              {/* High Contrast */}
              <div className="flex items-center justify-between">
                <label className="flex items-center text-white cursor-pointer">
                  <Contrast className="w-5 h-5 mr-3" />
                  High Contrast
                </label>
                <button
                  onClick={() => updateSetting('highContrast', !settings.highContrast)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50 ${
                    settings.highContrast ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.highContrast ? 'Disable' : 'Enable'} high contrast`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Large Text */}
              <div className="flex items-center justify-between">
                <label className="flex items-center text-white cursor-pointer">
                  <Type className="w-5 h-5 mr-3" />
                  Large Text
                </label>
                <button
                  onClick={() => updateSetting('largeText', !settings.largeText)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50 ${
                    settings.largeText ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.largeText ? 'Disable' : 'Enable'} large text`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.largeText ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Reduced Motion */}
              <div className="flex items-center justify-between">
                <label className="flex items-center text-white cursor-pointer">
                  <MousePointer className="w-5 h-5 mr-3" />
                  Reduced Motion
                </label>
                <button
                  onClick={() => updateSetting('reducedMotion', !settings.reducedMotion)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50 ${
                    settings.reducedMotion ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.reducedMotion ? 'Disable' : 'Enable'} reduced motion`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.reducedMotion ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Zoom Level */}
              <div className="space-y-2">
                <label className="flex items-center text-white">
                  <ZoomIn className="w-5 h-5 mr-3" />
                  Zoom Level: {settings.zoomLevel}%
                </label>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => updateSetting('zoomLevel', Math.max(50, settings.zoomLevel - 10))}
                    className="p-2 bg-gray-800 text-white rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    aria-label="Decrease zoom"
                  >
                    <ZoomOut className="w-4 h-4" />
                  </button>
                  <div className="flex-1 bg-gray-700 rounded-full h-2">
                    <div
                      className="bg-cyan-500 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${((settings.zoomLevel - 50) / 150) * 100}%` }}
                    />
                  </div>
                  <button
                    onClick={() => updateSetting('zoomLevel', Math.min(200, settings.zoomLevel + 10))}
                    className="p-2 bg-gray-800 text-white rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    aria-label="Increase zoom"
                  >
                    <ZoomIn className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Keyboard Navigation Info */}
              <div className="bg-gray-800 rounded-lg p-3">
                <h4 className="text-sm font-medium text-white mb-2 flex items-center">
                  <Keyboard className="w-4 h-4 mr-2" />
                  Keyboard Shortcuts
                </h4>
                <div className="text-xs text-gray-300 space-y-1">
                  <div>• Tab: Navigate between elements</div>
                  <div>• Enter/Space: Activate buttons</div>
                  <div>• Escape: Close panels</div>
                  <div>• Arrow keys: Navigate menus</div>
                </div>
              </div>

              {/* Reset Button */}
              <button
                onClick={resetSettings}
                className="w-full px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500"
              >
                Reset to Default
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Global CSS for accessibility features */}
      <style jsx global>{`
        .high-contrast {
          --tw-bg-opacity: 1;
          --tw-text-opacity: 1;
        }
        
        .high-contrast * {
          background-color: white !important;
          color: black !important;
          border-color: black !important;
        }
        
        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
        
        /* Focus indicators for keyboard navigation */
        *:focus {
          outline: 2px solid #0891b2 !important;
          outline-offset: 2px !important;
        }
        
        /* Skip link for screen readers */
        .skip-link {
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e4a1
          position: absolute;
          top: -40px;
          left: 6px;
          background: #0891b2;
          color: white;
          padding: 8px;
          text-decoration: none;
          border-radius: 4px;
          z-index: 1000;
        }
        
        .skip-link:focus {
          top: 6px;
        }
        
        .error-message {
          color: #dc2626;
          font-size: 14px;
          margin-top: 4px;
        }
        
        @media (prefers-reduced-motion: reduce) {
          .accessibility-btn {
            transition: none;
          }
        }
      `}</style>
    </>
  );
};

export default AccessibilityEnhancer;