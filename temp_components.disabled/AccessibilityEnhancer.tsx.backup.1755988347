<<<<<<< HEAD
import React, { useState, useEffect, useCallback } from 'react';
=======
import React, { useEffect, useState, useCallback } from 'react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8ebe
import { motion, AnimatePresence } from 'framer-motion';
import {
  Accessibility,
  Eye,
  Volume2,
  VolumeX,
  Palette,
  ZoomIn,
  ZoomOut,
  RotateCcw,
  X,
  Sun,
  Moon,
  Contrast
} from 'lucide-react';

<<<<<<< HEAD
interface AccessibilitySettings {
  fontSize: 'small' | 'medium' | 'large';
  contrast: 'normal' | 'high' | 'inverted';
  reduceMotion: boolean;
  reduceTransparency: boolean;
  highContrast: boolean;
  darkMode: boolean;
  soundEnabled: boolean;
}

const AccessibilityEnhancer: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [settings, setSettings] = useState<AccessibilitySettings>({
    fontSize: 'medium',
    contrast: 'normal',
    reduceMotion: false,
    reduceTransparency: false,
    highContrast: false,
    darkMode: true,
    soundEnabled: true
  });

  // Load settings from localStorage on mount
  useEffect(() => {
    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
        applySettings({ ...settings, ...parsed });
      } catch {
        // Silently handle parsing errors
=======
/* eslint-disable no-undef */
interface AccessibilityEnhancerProps {
  enabled?: boolean;
  showControls?: boolean;
  highContrast?: boolean;
  largeText?: boolean;
  reducedMotion?: boolean;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({
  enabled = true,
  showControls = false,
  highContrast = false,
  largeText = false,
  reducedMotion = false
}) => {
  const [isHighContrast, setIsHighContrast] = useState(highContrast);
  const [isLargeText, setIsLargeText] = useState(largeText);
  const [isReducedMotion, setIsReducedMotion] = useState(reducedMotion);
  const [isVisible, setIsVisible] = useState(false);
  const [focusVisible, setFocusVisible] = useState(false);

  // Apply accessibility features
  const applyAccessibilityFeatures = useCallback(() => {
    if (!enabled || typeof document === 'undefined') return;

    const root = document.documentElement;
    const body = document.body;

    // High contrast mode
    if (isHighContrast) {
      root.classList.add('high-contrast');
      root.style.setProperty('--text-color', '#ffffff');
      root.style.setProperty('--bg-color', '#000000');
      root.style.setProperty('--accent-color', '#ffff00');
    } else {
      root.classList.remove('high-contrast');
      root.style.removeProperty('--text-color');
      root.style.removeProperty('--bg-color');
      root.style.removeProperty('--accent-color');
    }

    // Large text mode
    if (isLargeText) {
      root.classList.add('large-text');
      root.style.setProperty('--font-size-base', '18px');
      root.style.setProperty('--font-size-lg', '20px');
      root.style.setProperty('--font-size-xl', '24px');
      root.style.setProperty('--line-height', '1.6');
    } else {
      root.classList.remove('large-text');
      root.style.removeProperty('--font-size-base');
      root.style.removeProperty('--font-size-lg');
      root.style.removeProperty('--font-size-xl');
      root.style.removeProperty('--line-height');
    }

    // Reduced motion mode
    if (isReducedMotion) {
      root.classList.add('reduced-motion');
      root.style.setProperty('--animation-duration', '0.01ms');
      root.style.setProperty('--transition-duration', '0.01ms');
    } else {
      root.classList.remove('reduced-motion');
      root.style.removeProperty('--animation-duration');
      root.style.removeProperty('--transition-duration');
    }

    // Save preferences to localStorage
    localStorage.setItem('accessibility-high-contrast', isHighContrast.toString());
    localStorage.setItem('accessibility-large-text', isLargeText.toString());
    localStorage.setItem('accessibility-reduced-motion', isReducedMotion.toString());
  }, [enabled, isHighContrast, isLargeText, isReducedMotion]);

  // Load accessibility preferences
  const loadPreferences = useCallback(() => {
    if (typeof localStorage === 'undefined') return;

    const savedHighContrast = localStorage.getItem('accessibility-high-contrast') === 'true';
    const savedLargeText = localStorage.getItem('accessibility-large-text') === 'true';
    const savedReducedMotion = localStorage.getItem('accessibility-reduced-motion') === 'true';

    setIsHighContrast(savedHighContrast);
    setIsLargeText(savedLargeText);
    setIsReducedMotion(savedReducedMotion);
  }, []);

  // Enhanced focus management
  const enhanceFocusManagement = useCallback(() => {
    if (!enabled || typeof document === 'undefined') return;

    // Add focus-visible class for better focus indicators
    const handleFocusIn = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      if (target && target.classList) {
        target.classList.add('focus-visible');
        setFocusVisible(true);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8ebe
      }
    };

    const handleFocusOut = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      if (target && target.classList) {
        target.classList.remove('focus-visible');
        setFocusVisible(false);
      }
    };

    // Add keyboard navigation support
    const handleKeyDown = (e: KeyboardEvent) => {
      const target = e.target as HTMLElement;
      
      // Skip to main content
      if (e.key === 'Tab' && e.shiftKey && e.altKey) {
        e.preventDefault();
        const mainContent = document.querySelector('main') || document.querySelector('#main');
        if (mainContent) {
          (mainContent as HTMLElement).focus();
        }
      }

      // Enhanced tab navigation
      if (e.key === 'Tab') {
        const focusableElements = document.querySelectorAll(
          'a[href], button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"])'
        );
        
        const currentIndex = Array.from(focusableElements).indexOf(target);
        if (currentIndex !== -1) {
          target.classList.add('tab-navigated');
        }
      }
    };

    // Add ARIA live regions for dynamic content
    const addLiveRegions = () => {
      const existingLiveRegion = document.getElementById('aria-live-region');
      if (!existingLiveRegion) {
        const liveRegion = document.createElement('div');
        liveRegion.id = 'aria-live-region';
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.className = 'sr-only';
        document.body.appendChild(liveRegion);
      }
    };

    // Add skip links
    const addSkipLinks = () => {
      const existingSkipLinks = document.querySelector('.skip-links');
      if (!existingSkipLinks) {
        const skipLinks = document.createElement('div');
        skipLinks.className = 'skip-links';
        skipLinks.innerHTML = `
          <a href="#main" class="skip-link">Skip to main content</a>
          <a href="#navigation" class="skip-link">Skip to navigation</a>
          <a href="#footer" class="skip-link">Skip to footer</a>
        `;
        document.body.insertBefore(skipLinks, document.body.firstChild);
      }
    };

    // Initialize accessibility features
    addLiveRegions();
    addSkipLinks();

    // Add event listeners
    document.addEventListener('focusin', handleFocusIn);
    document.addEventListener('focusout', handleFocusOut);
    document.addEventListener('keydown', handleKeyDown);

    // Cleanup function
    return () => {
      document.removeEventListener('focusin', handleFocusIn);
      document.removeEventListener('focusout', handleFocusOut);
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [enabled]);

  // Announce changes to screen readers
  const announceToScreenReader = useCallback((message: string) => {
    const liveRegion = document.getElementById('aria-live-region');
    if (liveRegion) {
      liveRegion.textContent = message;
      // Clear after announcement
      setTimeout(() => {
        liveRegion.textContent = '';
      }, 1000);
    }
  }, []);

<<<<<<< HEAD
  // Apply accessibility settings to the document
  const applySettings = useCallback((newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // Font size
    root.style.setProperty('--font-size-multiplier', 
      newSettings.fontSize === 'small' ? '0.875' : 
      newSettings.fontSize === 'large' ? '1.25' : '1'
    );

    // Contrast
    if (newSettings.highContrast) {
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
    }

    // Motion reduction
    if (newSettings.reduceMotion) {
      root.classList.add('reduce-motion');
    } else {
      root.classList.remove('reduce-motion');
    }

    // Transparency reduction
    if (newSettings.reduceTransparency) {
      root.classList.add('reduce-transparency');
    } else {
      root.classList.remove('reduce-transparency');
    }

    // Dark mode
    if (newSettings.darkMode) {
      root.classList.add('dark');
      root.classList.remove('light');
    } else {
      root.classList.add('light');
      root.classList.remove('dark');
    }

    // Save to localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(newSettings));
  }, []);

  // Update settings and apply them
  const updateSetting = useCallback((key: keyof AccessibilitySettings, value: unknown) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    applySettings(newSettings);
  }, [settings, applySettings]);

  // Reset all settings to defaults
  const resetSettings = useCallback(() => {
    const defaultSettings: AccessibilitySettings = {
      fontSize: 'medium',
      contrast: 'normal',
      reduceMotion: false,
      reduceTransparency: false,
      highContrast: false,
      darkMode: true,
      soundEnabled: true
    };
    setSettings(defaultSettings);
    applySettings(defaultSettings);
  }, [applySettings]);

  // Toggle sound
  const toggleSound = useCallback(() => {
    updateSetting('soundEnabled', !settings.soundEnabled);
  }, [settings.soundEnabled, updateSetting]);

  // Font size controls
  const increaseFontSize = useCallback(() => {
    const sizes: AccessibilitySettings['fontSize'][] = ['small', 'medium', 'large'];
    const currentIndex = sizes.indexOf(settings.fontSize);
    if (currentIndex < sizes.length - 1) {
      updateSetting('fontSize', sizes[currentIndex + 1]);
    }
  }, [settings.fontSize, updateSetting]);

  const decreaseFontSize = useCallback(() => {
    const sizes: AccessibilitySettings['fontSize'][] = ['small', 'medium', 'large'];
    const currentIndex = sizes.indexOf(settings.fontSize);
    if (currentIndex > 0) {
      updateSetting('fontSize', sizes[currentIndex - 1]);
    }
  }, [settings.fontSize, updateSetting]);

  return (
    <>
      {/* Accessibility Toggle Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-4 left-4 bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full shadow-lg transition-all duration-300 z-50 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-black"
        aria-label="Accessibility settings"
        aria-expanded={isOpen}
      >
        <Accessibility className="w-6 h-6" />
      </button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.8, y: 20 }}
            transition={{ duration: 0.2 }}
            className="fixed bottom-20 left-4 w-80 bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-xl shadow-2xl z-50 overflow-hidden"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
              <h3 className="text-white font-semibold text-lg flex items-center space-x-2">
                <Accessibility className="w-5 h-5 text-blue-400" />
                <span>Accessibility</span>
              </h3>
              <button
                onClick={() => setIsOpen(false)}
                className="p-1 text-gray-400 hover:text-white transition-colors rounded-lg hover:bg-white/10"
                aria-label="Close accessibility panel"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            {/* Settings Content */}
            <div className="p-4 space-y-4 max-h-96 overflow-y-auto">
              {/* Font Size Control */}
              <div className="space-y-2">
                <label className="text-white text-sm font-medium">Font Size</label>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={decreaseFontSize}
                    disabled={settings.fontSize === 'small'}
                    className="p-2 text-gray-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed rounded-lg hover:bg-white/10 transition-colors"
                    aria-label="Decrease font size"
                  >
                    <ZoomOut className="w-4 h-4" />
                  </button>
                  <span className="text-white text-sm min-w-[60px] text-center">
                    {settings.fontSize === 'small' ? 'Small' : 
                     settings.fontSize === 'large' ? 'Large' : 'Medium'}
                  </span>
                  <button
                    onClick={increaseFontSize}
                    disabled={settings.fontSize === 'large'}
                    className="p-2 text-gray-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed rounded-lg hover:bg-white/10 transition-colors"
                    aria-label="Increase font size"
                  >
                    <ZoomIn className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* High Contrast */}
              <div className="flex items-center justify-between">
                <label className="text-white text-sm font-medium flex items-center space-x-2">
                  <Contrast className="w-4 h-4 text-yellow-400" />
                  <span>High Contrast</span>
                </label>
                <button
                  onClick={() => updateSetting('highContrast', !settings.highContrast)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.highContrast ? 'bg-blue-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.highContrast}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Dark Mode */}
              <div className="flex items-center justify-between">
                <label className="text-white text-sm font-medium flex items-center space-x-2">
                  {settings.darkMode ? <Moon className="w-4 h-4 text-blue-400" /> : <Sun className="w-4 h-4 text-yellow-400" />}
                  <span>Dark Mode</span>
                </label>
                <button
                  onClick={() => updateSetting('darkMode', !settings.darkMode)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.darkMode ? 'bg-blue-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.darkMode}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.darkMode ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Reduce Motion */}
              <div className="flex items-center justify-between">
                <label className="text-white text-sm font-medium flex items-center space-x-2">
                  <Eye className="w-4 h-4 text-green-400" />
                  <span>Reduce Motion</span>
                </label>
                <button
                  onClick={() => updateSetting('reduceMotion', !settings.reduceMotion)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.reduceMotion ? 'bg-blue-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.reduceMotion}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.reduceMotion ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Reduce Transparency */}
              <div className="flex items-center justify-between">
                <label className="text-white text-sm font-medium flex items-center space-x-2">
                  <Palette className="w-4 h-4 text-purple-400" />
                  <span>Reduce Transparency</span>
                </label>
                <button
                  onClick={() => updateSetting('reduceTransparency', !settings.reduceTransparency)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.reduceTransparency ? 'bg-blue-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.reduceTransparency}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.reduceTransparency ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Sound Control */}
              <div className="flex items-center justify-between">
                <label className="text-white text-sm font-medium flex items-center space-x-2">
                  {settings.soundEnabled ? <Volume2 className="w-4 h-4 text-green-400" /> : <VolumeX className="w-4 h-4 text-red-400" />}
                  <span>Sound</span>
                </label>
                <button
                  onClick={toggleSound}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.soundEnabled ? 'bg-blue-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.soundEnabled}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.soundEnabled ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Reset Button */}
              <div className="pt-2">
                <button
                  onClick={resetSettings}
                  className="w-full px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-gray-900 flex items-center justify-center space-x-2"
                >
                  <RotateCcw className="w-4 h-4" />
                  <span>Reset to Defaults</span>
                </button>
              </div>
            </div>

            {/* Footer */}
            <div className="p-4 border-t border-gray-700/50 bg-gray-800/50">
              <p className="text-xs text-gray-400 text-center">
                These settings are saved to your browser and will persist across sessions.
              </p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* CSS Variables for Dynamic Styling */}
      <style jsx global>{`
        :root {
          --font-size-multiplier: 1;
        }

        .high-contrast {
          --text-primary: #ffffff !important;
          --text-secondary: #e5e7eb !important;
          --bg-primary: #000000 !important;
          --bg-secondary: #1f2937 !important;
          --accent-color: #ffff00 !important;
        }

        .reduce-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }

        .reduce-transparency * {
          opacity: 1 !important;
          backdrop-filter: none !important;
        }

        body {
          font-size: calc(16px * var(--font-size-multiplier));
        }

        .text-sm {
          font-size: calc(14px * var(--font-size-multiplier));
        }

        .text-base {
          font-size: calc(16px * var(--font-size-multiplier));
        }

        .text-lg {
          font-size: calc(18px * var(--font-size-multiplier));
        }

        .text-xl {
          font-size: calc(20px * var(--font-size-multiplier));
        }

        .text-2xl {
          font-size: calc(24px * var(--font-size-multiplier));
        }

        .text-3xl {
          font-size: calc(30px * var(--font-size-multiplier));
        }

        .text-4xl {
          font-size: calc(36px * var(--font-size-multiplier));
        }

        .text-5xl {
          font-size: calc(48px * var(--font-size-multiplier));
        }

        .text-6xl {
          font-size: calc(60px * var(--font-size-multiplier));
        }

        .text-7xl {
          font-size: calc(72px * var(--font-size-multiplier));
        }

        .text-8xl {
          font-size: calc(96px * var(--font-size-multiplier));
        }

        .text-9xl {
          font-size: calc(128px * var(--font-size-multiplier));
        }
      `}</style>
    </>
=======
  // Toggle accessibility features
  const toggleHighContrast = useCallback(() => {
    setIsHighContrast(prev => {
      const newValue = !prev;
      announceToScreenReader(`High contrast mode ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }, [announceToScreenReader]);

  const toggleLargeText = useCallback(() => {
    setIsLargeText(prev => {
      const newValue = !prev;
      announceToScreenReader(`Large text mode ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }, [announceToScreenReader]);

  const toggleReducedMotion = useCallback(() => {
    setIsReducedMotion(prev => {
      const newValue = !prev;
      announceToScreenReader(`Reduced motion mode ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }, [announceToScreenReader]);

  // Initialize accessibility features
  useEffect(() => {
    loadPreferences();
  }, [loadPreferences]);

  useEffect(() => {
    applyAccessibilityFeatures();
  }, [applyAccessibilityFeatures]);

  useEffect(() => {
    const cleanup = enhanceFocusManagement();
    return cleanup;
  }, [enhanceFocusManagement]);

  // Add CSS variables for accessibility
  useEffect(() => {
    if (!enabled || typeof document === 'undefined') return;

    const style = document.createElement('style');
    style.textContent = `
      .high-contrast {
        --text-color: #ffffff !important;
        --bg-color: #000000 !important;
        --accent-color: #ffff00 !important;
        --border-color: #ffff00 !important;
      }
      
      .large-text {
        --font-size-base: 18px !important;
        --font-size-lg: 20px !important;
        --font-size-xl: 24px !important;
        --line-height: 1.6 !important;
      }
      
      .reduced-motion {
        --animation-duration: 0.01ms !important;
        --transition-duration: 0.01ms !important;
      }
      
      .reduced-motion *,
      .reduced-motion *::before,
      .reduced-motion *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
      
      .focus-visible {
        outline: 3px solid var(--accent-color, #3b82f6) !important;
        outline-offset: 2px !important;
      }
      
      .skip-links {
        position: absolute;
        top: -40px;
        left: 6px;
        z-index: 1000;
      }
      
      .skip-link {
        position: absolute;
        top: 0;
        left: 0;
        background: #000;
        color: #fff;
        padding: 8px 16px;
        text-decoration: none;
        border-radius: 4px;
        transform: translateY(-100%);
        transition: transform 0.3s;
      }
      
      .skip-link:focus {
        transform: translateY(0);
      }
      
      .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
      }
      
      .tab-navigated {
        outline: 2px solid var(--accent-color, #3b82f6) !important;
        outline-offset: 2px !important;
      }
    `;

    document.head.appendChild(style);

    return () => {
      document.head.removeChild(style);
    };
  }, [enabled]);

  if (!enabled || !showControls) return null;

  return (
    <div className="fixed top-4 right-4 bg-black/80 backdrop-blur-sm border border-white/20 rounded-lg p-4 text-white text-sm z-50 max-w-xs">
      <div className="flex items-center justify-between mb-3">
        <h3 className="font-semibold">Accessibility</h3>
        <button
          onClick={() => setIsVisible(!isVisible)}
          className="text-gray-400 hover:text-white transition-colors"
          aria-label={`${isVisible ? 'Hide' : 'Show'} accessibility controls`}
        >
          {isVisible ? '−' : '+'}
        </button>
      </div>

      {isVisible && (
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <label htmlFor="high-contrast" className="text-sm">
              High Contrast
            </label>
            <button
              id="high-contrast"
              onClick={toggleHighContrast}
              className={`w-12 h-6 rounded-full transition-colors ${
                isHighContrast ? 'bg-blue-500' : 'bg-gray-600'
              }`}
              aria-pressed={isHighContrast}
              aria-label="Toggle high contrast mode"
            >
              <div className={`w-5 h-5 bg-white rounded-full transition-transform ${
                isHighContrast ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          <div className="flex items-center justify-between">
            <label htmlFor="large-text" className="text-sm">
              Large Text
            </label>
            <button
              id="large-text"
              onClick={toggleLargeText}
              className={`w-12 h-6 rounded-full transition-colors ${
                isLargeText ? 'bg-blue-500' : 'bg-gray-600'
              }`}
              aria-pressed={isLargeText}
              aria-label="Toggle large text mode"
            >
              <div className={`w-5 h-5 bg-white rounded-full transition-transform ${
                isLargeText ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          <div className="flex items-center justify-between">
            <label htmlFor="reduced-motion" className="text-sm">
              Reduced Motion
            </label>
            <button
              id="reduced-motion"
              onClick={toggleReducedMotion}
              className={`w-12 h-6 rounded-full transition-colors ${
                isReducedMotion ? 'bg-blue-500' : 'bg-gray-600'
              }`}
              aria-pressed={isReducedMotion}
              aria-label="Toggle reduced motion mode"
            >
              <div className={`w-5 h-5 bg-white rounded-full transition-transform ${
                isReducedMotion ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          <div className="pt-2 border-t border-white/20">
            <button
              onClick={() => {
                const mainContent = document.querySelector('main') || document.querySelector('#main');
                if (mainContent) {
                  (mainContent as HTMLElement).focus();
                  announceToScreenReader('Moved to main content');
                }
              }}
              className="w-full px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded-lg transition-colors"
              aria-label="Skip to main content"
            >
              Skip to Content
            </button>
          </div>
        </div>
      )}
    </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8ebe
  );
};

export default AccessibilityEnhancer;