import { TalentProfile } from './talent';

export interface ProjectBrief {
  id?: string; // Optional: could be added if we save briefs to the DB
  projectName: string;
  goals: string; // Or scope
  timeline: string; // Could be a string like "3 months" or a date range
  budget: string; // Could be a string like "$10,000 - $20,000" or a number
  techStack?: string[]; // Or areas like "Frontend", "AI", "DevOps"
  userId?: string; // To associate with the user who created it
  createdAt?: string;
  lockTimeline?: boolean;
  lockBudget?: boolean;
  talentFilters?: TalentFilters; // New
}

export interface TalentFilters {
  verifiedOnly?: boolean;
  regions?: string[]; // e.g., ["LATAM", "North America", "Europe"]
  // Add other potential filters like min_experience, etc. later if needed
}

export interface RecommendedRole {
  role: string; // e.g., "Product Manager", "Fullstack Engineer"
  description: string; // Generated by AI
  hourlyRateRange: { // Estimated
    min: number;
    max: number;
  };
  weeklyHours: number; // Estimated
  matchedTalent: TalentProfile[]; // Talent profiles matching this role
}

export interface TeamRecommendation {
  id?: string; // Optional: if we save recommendations
  projectBriefId?: string; // Link to the project brief
  recommendationSummary: string; // e.g., "1 Product Manager, 2 Fullstack Engineers, 1 DevOps, 1 QA"
  roles: RecommendedRole[];
  totalEstimatedRate: { // Sum of (hourlyRateRange.avg * weeklyHours) for all roles
    min: number;
    max: number;
  };
  totalWeeklyBurn: { // Sum of (hourlyRateRange.avg * weeklyHours) for all roles - same as totalEstimatedRate for now
    min: number;
    max: number;
  };
  totalProjectEstimate: { // Based on timeline from brief and weekly burn
    min: number;
    max: number;
  };
  createdAt?: string;
}

// Optional: For "Invite to Team"
export interface TeamInvite {
  id?: string;
  teamRecommendationId?: string;
  talentId: string;
  role: string; // The role they are being invited for
  status: 'pending' | 'accepted' | 'declined';
  createdAt?: string;
  updatedAt?: string;
}
