import React, { ReactNode } from 'react';
import { render, screen } from '@testing-library/react';
import { CategoryCard } from './CategoryCard'; // Assuming named export

// Mock react-router-dom Link
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  Link: jest.fn(({ children, to, className, tabIndex, ...props }: { children: ReactNode, to: string, className?: string, tabIndex?: number }) => (
    <a href={to} className={className || ''} tabIndex={tabIndex} {...props}>{children}</a>
  )),
}));

// Mock lucide-react icons (if any were used by default, but CategoryCard expects icon as prop)
// For this component, direct icon mocking isn't needed unless we test a default icon scenario not evident from the code.

// Mock utility functions
jest.mock('@/lib/utils', () => ({
  cn: (...inputs: any[]) => inputs.filter(Boolean).join(' '),
}));

const mockSlugify = jest.fn((input: string) => input.toLowerCase().replace(/\s+/g, '-'));
jest.mock('@/lib/slugify', () => ({
  slugify: (input: string) => mockSlugify(input),
}));

// Mock icon to pass as prop
const TestIcon = () => <svg data-testid="test-icon" />;

describe('CategoryCard', () => {
  const defaultProps = {
    icon: <TestIcon />,
    title: 'Test Category',
    description: 'Test description for the category.',
    link: '', // Will be generated by slugify
    color: 'red', // Test with a specific color
    count: 5,
    className: 'extra-class',
  };

  beforeEach(() => {
    jest.clearAllMocks();
    mockSlugify.mockClear(); // Clear slugify mock calls
  });

  it('should render category title, description, and icon', () => {
    render(<CategoryCard {...defaultProps} />);
    expect(screen.getByText('Test Category')).toBeInTheDocument();
    expect(screen.getByText('Test description for the category.')).toBeInTheDocument();
    expect(screen.getByTestId('test-icon')).toBeInTheDocument();
  });

  it('should render as a link with the correct href based on slugified title', () => {
    render(<CategoryCard {...defaultProps} title="Another Test Title" />);
    expect(mockSlugify).toHaveBeenCalledWith('Another Test Title');
    // Link component is mocked as <a>, so we check href
    const linkElement = screen.getByRole('link', {name: /another test title/i});
    expect(linkElement).toHaveAttribute('href', '/category/another-test-title');
  });

  it('applies the color prop as inline style to the icon container', () => {
    render(<CategoryCard {...defaultProps} color="blue" />);
    const iconContainer = screen.getByTestId('test-icon').parentElement; // The icon itself doesn't get the style, its container does
    expect(iconContainer).toHaveStyle('color: rgb(0, 0, 255);'); // Corrected to RGB
    expect(iconContainer).not.toHaveClass('text-primary');
  });

  it('applies text-primary class to icon container if color prop is not provided', () => {
    const propsWithoutColor = { ...defaultProps, color: undefined };
    render(<CategoryCard {...propsWithoutColor} />);
    const iconContainer = screen.getByTestId('test-icon').parentElement;
    expect(iconContainer).toHaveClass('text-primary');
    // Check that the inline style for 'color' is not set, resulting in an empty string from JSDOM
    expect(iconContainer?.style.color).toBe('');
  });

  it('displays the listings count when count prop is provided', () => {
    render(<CategoryCard {...defaultProps} count={10} />);
    expect(screen.getByText('10 listings')).toBeInTheDocument();
  });

  it('does not display the listings count if count prop is undefined', () => {
    const propsWithoutCount = { ...defaultProps, count: undefined };
    render(<CategoryCard {...propsWithoutCount} />);
    expect(screen.queryByText(/listings/i)).not.toBeInTheDocument();
  });

  it('applies custom className to the root link element', () => {
    render(<CategoryCard {...defaultProps} className="my-custom-card-class" />);
    expect(screen.getByTestId('category-card')).toHaveClass('my-custom-card-class');
    expect(screen.getByTestId('category-card')).toHaveClass('flex'); // Default class from cn
  });

  it('renders a string icon if provided as string', () => {
    render(<CategoryCard {...defaultProps} icon="StringIcon" />);
    expect(screen.getByText('StringIcon')).toBeInTheDocument();
  });

  it('should have data-testid="category-card" on the root link element', () => {
    render(<CategoryCard {...defaultProps} />);
    expect(screen.getByTestId('category-card')).toBeInTheDocument();
  });
});
