import React from 'react';
<<<<<<< HEAD
import type { ReactNode, ErrorInfo } from 'react';
import { toast } from 'react-hot-toast';

interface Props {
  children: ReactNode;
=======
import { captureException } from '@/lib/sentry';

interface Props {
  children: React.ReactNode;
  fallback?: React.ReactNode;
>>>>>>> origin/9llxiv-codex/implement-analytics-and-error-tracking
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends React.Component<Props, State> {
  state: State = { hasError: false };

<<<<<<< HEAD
  static getDerivedStateFromError(): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, _errorInfo: ErrorInfo) {
    toast.error(error.message || 'An unexpected error occurred');
=======
  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: any, errorInfo: any) {
    captureException(error);
    console.error(error, errorInfo);
>>>>>>> origin/9llxiv-codex/implement-analytics-and-error-tracking
  }

  render() {
    if (this.state.hasError) {
<<<<<<< HEAD
      return null;
    }

=======
      return this.props.fallback || <div>Something went wrong.</div>;
    }
>>>>>>> origin/9llxiv-codex/implement-analytics-and-error-tracking
    return this.props.children;
  }
}
