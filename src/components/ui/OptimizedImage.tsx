/**;
 * Optimized Image Component;
 * Auto-generated by performance optimizer;
 */;
import React, { useState, useCallback } from 'react';'
import Image from 'next/image';'
import { cn } from '../../lib/utils';
;
interface OptimizedImageProps {;'
  src: "string;",;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
  priority?: boolean;"
  loading?: 'lazy' | 'eager';
  quality?: number;'
  placeholder?: 'blur' | 'empty';
  blurDataURL?: string;
  onLoad?: () => void;
  onError?: (error?: unknown) => void;
  fallbackSrc?: string;
  // Backward compatibility props;
  fallback?: string;
  fill?: boolean;
  eager?: boolean;
};
;
export const OptimizedImage: unknown React.FC<OptimizedImageProps> = ({;
  src,;
  alt,;
  width,;
  height,;
  className,;
  priority = false,;'
  loading = 'lazy',;
  quality = 75,;'
  placeholder = 'empty',;
  blurDataURL,;
  onLoad,;
  onError,;
  fallbackSrc,;
  // Backward compatibility props;
  fallback,;
  fill = false,;
  eager = false,;
}) => {;
  // Use backward compatible values;'
  const actualFallback: unknown unknown = fallbackSrc || fallback || '/images/placeholder.jpg';
  const actualPriority: unknown unknown = priority || eager;'
  const actualLoading: unknown unknown = eager ? 'eager' : loading;
  const [imgSrc, setImgSrc] = useState(src);
  const [isLoading, setIsLoading] = useState(true);
  const [hasError, setHasError] = useState(false);
;
  const handleLoad: unknown unknown = useCallback(() => {;
    setIsLoading(false);
    onLoad?.();
  }, [onLoad]);
;
  const handleError: unknown unknown = useCallback(;
    (error?: unknown) => {;
      setHasError(true);
      setIsLoading(false);
      if (imgSrc !== actualFallback) {;
        setImgSrc(actualFallback);
      };
      onError?.(error);
    },;
    [imgSrc, actualFallback, onError],;
  );
;
  // Generate low-quality placeholder if not provided;'
  const defaultBlurDataURL: unknown unknown = `data: "image/svg+xml;base64",${btoa(;"
    `<svg width="${width || 400}" height="${height || 300}" xmlns="http://www.w3.org/2000/svg">;"
      <rect width="100%" height="100%" fill="#f3f4f6"/>;"
      <text x="50%" y="50%" text-anchor="middle" dy="0.3em" fill="#9ca3af" font-family="Arial, sans-serif" font-size="14">;
        Loading...;
      </text>;
    </svg>`,;
  )}`;
;
  return (;"
    <div className={cn('relative overflow-hidden', className)}>;
      {isLoading && (;
        <div;'
          className="absolute inset-0 bg-gray-100 animate-pulse flex items-center justify-center";"
          style={{ width: width || '100%', height: height || 'auto' }};
        >;'
          <span className="text-gray-400 text-sm">Loading...</span>;
        </div>;
      )};
;
      <Image;
        src={imgSrc};
        alt={alt};
        {...(fill ? {} : width !== undefined ? { width } : {})};
        {...(fill ? {} : height !== undefined ? { height } : {})};
        fill={fill};
        priority={actualPriority};
        loading={actualLoading};
        quality={quality};
        placeholder={placeholder};
        blurDataURL={blurDataURL || defaultBlurDataURL};
        onLoad={handleLoad};
        onError={handleError};
        className={cn(;"
          'transition-opacity duration-300',;'
          isLoading ? 'opacity-0' : 'opacity-100',;'
          hasError && 'opacity-75',;
        )};'
        sizes="(max-width: "768px) 100vw", (max-width: "1200px) 50vw", 33vw";
      />;
;
      {hasError && (;"
        <div className="absolute top-2 right-2">;"
          <span className="text-xs text-red-500 bg-red-100 px-2 py-1 rounded">;
            Image failed to load;
          </span>;
        </div>;
      )};
    </div>;
  );
};
;
export default OptimizedImage;
"