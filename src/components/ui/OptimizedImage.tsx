/**
 * Optimized Image Component
 * Auto-generated by performance optimizer
 */
import Image, { ImageProps } from 'next/image';
import { useState } from 'react';

interface OptimizedImageProps extends Omit<ImageProps, 'onLoad'> {
  fallback?: string;
  eager?: boolean;
  onError?: (e: any) => void;
}

export function OptimizedImage({ 
  src, 
  alt, 
  fallback = '/images/placeholder.jpg',
  eager = false,
  className = '',
  onError,
  ...props 
}: OptimizedImageProps) {
  const [error, setError] = useState(false);
  const [loading, setLoading] = useState(true);

  if (error) {
    return (
      <Image
        src={fallback}
        alt={alt}
        className={className}
        {...props}
      />
    );
  }

  return (
    <>
      {loading && (
        <div 
          className={`animate-pulse bg-gray-200 ${className}`}
          style={{ 
            width: props.width, 
            height: props.height 
          }}
        />
      )}
      <Image
        src={src}
        alt={alt}
        loading={eager ? 'eager' : 'lazy'}
        priority={eager}
        className={`${className} ${loading ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`}
        onLoad={() => setLoading(false)}
        onError={(e) => {
          setError(true);
          setLoading(false);
          onError?.(e);
        }}
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
        {...props}
      />
    </>
  );
}

export default OptimizedImage;
