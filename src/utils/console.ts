/**
 * Console utilities for production optimization
 * Auto-generated by performance optimizer
 */

const isDevelopment = process.env.NODE_ENV === 'development';

// Optimized console that's removed in production
export const devConsole = {
  log: isDevelopment ? console.log : () => {},
  warn: isDevelopment ? console.warn : () => {},
  error: console.error, // Always keep errors
  info: isDevelopment ? console.info : () => {},
  debug: isDevelopment ? console.debug : () => {},
  
  // Performance logging
  time: isDevelopment ? console.time : () => {},
  timeEnd: isDevelopment ? console.timeEnd : () => {},
  
  // Conditional logging
  logIf: (condition: boolean, ...args: any[]) => {
    if (isDevelopment && condition) console.log(...args);
  },
  
  // Performance measurement
  measure: (name: string, fn: () => any) => {
    if (isDevelopment) {
      const start = performance.now();
      const result = fn();
      const end = performance.now();
      console.log(`${name}: ${(end - start).toFixed(2)}ms`);
      return result;
    }
    return fn();
  }
};

// Bundle size aware logging
export const bundleLog = {
  // Only log in development with bundle monitoring enabled
  log: (isDevelopment && localStorage?.getItem('bundle-monitoring') === 'true') 
    ? console.log 
    : () => {},
    
  // Bundle size warnings
  warnLargeComponent: (componentName: string, size: number) => {
    if (isDevelopment && size > 100) {
      console.warn(`Large component: ${componentName} (${size}kb)`);
    }
  }
};

export default devConsole;
