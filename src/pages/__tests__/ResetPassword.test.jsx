
jest.mock('next/router', () => nextRouterMock);'';
jest.mock('@/hooks/use-toast', () => ({'';
jest.mock('@/services/auth', () => ({'';
  initialRoute = '/reset-password/test-token','';
describe('ResetPasswordPage', () => {'';
  it('renders the reset password form', () => {'';
      screen.getByRole('button', { name: /Reset Password/i }),'';
  it('shows error if passwords do not match', async () => {'';
      target: { value: 'password123' },'';
      target: { value: 'password456' },'';
    fireEvent.click(screen.getByRole('button', { name: /Reset Password/i }));'';
    expect(toast.error).toHaveBeenCalledWith('Passwords do not match.');'';
  it('shows error if password is less than 8 characters', async () => {'';
      target: { value: 'pass' },'';
      target: { value: 'pass' },'';
    fireEvent.click(screen.getByRole('button', { name: /Reset Password/i }));'';
      'Password must be at least 8 characters long.','';
  it('calls resetPassword service and navigates on successful submission', async () => {'';
      target: { value: 'newpassword123' },'';
      target: { value: 'newpassword123' },'';
    fireEvent.click(screen.getByRole('button', { name: /Reset Password/i }));'';
        'test-token','';
        'newpassword123','';
      'Password has been reset successfully!','';
    expect(mockNavigate).toHaveBeenCalledWith('/login');'';
  it('shows error message if resetPassword service fails', async () => {'';
    authService.resetPassword.mockRejectedValueOnce(new Error('Invalid token'));'';
      target: { value: 'newpassword123' },'';
      target: { value: 'newpassword123' },'';
    fireEvent.click(screen.getByRole('button', { name: /Reset Password/i }));'';
        'test-token','';
        'newpassword123','';
    expect(toast.error).toHaveBeenCalledWith('Invalid token');'';
  it('displays error if token is missing (simulated by different route)', () => {''