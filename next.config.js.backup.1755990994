/** @type {import('next').NextConfig} */
const nextConfig = {
  // Enable static export for Next.js 14
  output: 'export',
  trailingSlash: true,
  productionBrowserSourceMaps: false,
  images: { unoptimized: true },
<<<<<<< HEAD
  async redirects() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
          {
            key: 'Referrer-Policy',
            value: 'origin-when-cross-origin',
          },
        ],
      },
      {
        source: '/static/(.*)',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ];
  },

  // Redirects for better UX
  async redirects() {
    return [
      {
        source: '/home',
        destination: '/',
        permanent: true,
      },
      {
        source: '/services/ai',
        destination: '/ai-services',
        permanent: true,
      },
      {
        source: '/services/quantum',
        destination: '/quantum-services',
        permanent: true,
      },
    ];
  },

  // Enhanced compiler options
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production',
    styledComponents: true,
  },

  // TypeScript
  typescript: {
    ignoreBuildErrors: false,
  },

  // ESLint
  eslint: {
    ignoreDuringBuilds: false,
  },

  // Output configuration
  output: 'standalone',
  trailingSlash: false,
  skipTrailingSlashRedirect: true,
=======
  // Note: redirects() removed as it's incompatible with output: 'export'
  // Use Netlify _redirects file instead for redirects
  eslint: { ignoreDuringBuilds: true },
  typescript: { ignoreBuildErrors: true },
  
  // Enable build caching for faster rebuilds
  experimental: {
    isrMemoryCacheSize: 0,
    // Enable build caching
    buildCache: true,
  },
  
  // Generate build ID for caching
  generateBuildId: async () => {
    return 'build-' + Date.now();
  },
  
  // Optimize build performance
  swcMinify: true,
  compress: true,
  
  // Enable webpack caching
  webpack: (config, { dev, isServer }) => {
    if (!dev && !isServer) {
      config.cache = {
        type: 'filesystem',
        buildDependencies: {
          config: [__filename],
        },
      };
    }
    return config;
  },
>>>>>>> origin/cursor/bc-ea46a2eb-982d-4fb0-930c-ef6544ba8a75-a20a
};

  // Enhanced compress
  compress: true,

  // Enhanced devIndicators
  devIndicators: {
    buildActivity: true,
    buildActivityPosition: 'bottom-right',
  },

  // Enhanced onDemandEntries
  onDemandEntries: {
    maxInactiveAge: 25 * 1000,
    pagesBufferLength: 2,
  },

  // Enhanced pageExtensions
  pageExtensions: ['tsx', 'ts', 'jsx', 'js'],

  // Enhanced typescript
  typescript: {
    ignoreBuildErrors: false,
  },

  // Enhanced eslint
  eslint: {
    ignoreDuringBuilds: false,
  },

  // Enhanced swcMinify
  swcMinify: true,

  // Enhanced modularizeImports
  modularizeImports: {
    'lucide-react': {
      transform: 'lucide-react/dist/esm/icons/{{kebabCase}}',
    },
  },
};
