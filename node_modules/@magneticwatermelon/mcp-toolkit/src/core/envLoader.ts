import { join } from "path";
import { existsSync } from "fs";
import { readFile } from "fs/promises";
import { applyEnvironment, type ValidationResult } from "../utils/env";
import type { SecretConfig, EnvConfigFile } from "../cli/commands/env";
import { logger } from "../logger";

/**
 * Automatically load and validate environment variables for MCP servers
 */
export async function loadMCPEnvironment(
  projectRoot?: string
): Promise<EnvironmentLoadResult> {
  const root = projectRoot || process.cwd();
  const configPath = join(root, ".env.config.json");

  // Check if secrets configuration exists
  if (!existsSync(configPath)) {
    logger.debug("No .env.config.json found, skipping environment validation");
    return {
      success: true,
      hasConfig: false,
      appliedCount: 0,
      validationResult: null,
    };
  }

  try {
    // Load secrets configuration
    const configContent = await readFile(configPath, "utf-8");
    const envConfig: EnvConfigFile = JSON.parse(configContent);

    logger.debug(
      `Loading environment with ${
        Object.keys(envConfig.secrets).length
      } configured secrets`
    );

    // Apply environment variables with validation
    const result = await applyEnvironment(root, envConfig.secrets);

    if (!result.success && result.validationResult) {
      logger.error("Environment validation failed:");
      result.validationResult.errors.forEach((error) =>
        logger.error(`  - ${error}`)
      );

      if (result.validationResult.missing.length > 0) {
        logger.error("Missing required environment variables:");
        result.validationResult.missing.forEach((missing) =>
          logger.error(`  - ${missing}`)
        );
      }
    }

    if (result.validationResult?.warnings.length) {
      logger.warn("Environment validation warnings:");
      result.validationResult.warnings.forEach((warning) =>
        logger.warn(`  - ${warning}`)
      );
    }

    logger.debug(`Applied ${result.appliedCount} environment variables`);

    return {
      success: result.success,
      hasConfig: true,
      appliedCount: result.appliedCount,
      validationResult: result.validationResult,
      secretsConfig: envConfig.secrets,
    };
  } catch (error) {
    logger.error(`Failed to load environment configuration: ${error}`);
    return {
      success: false,
      hasConfig: true,
      appliedCount: 0,
      validationResult: null,
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * Create a type-safe environment variable getter
 */
export function createMCPEnvGetter(
  secretsConfig: Record<string, SecretConfig>
) {
  return function getEnv<T = string>(key: string, defaultValue?: T): T {
    const value = process.env[key];
    const config = secretsConfig[key];

    if (value === undefined) {
      if (config?.required && defaultValue === undefined) {
        throw new Error(`Required environment variable '${key}' is not set`);
      }
      return defaultValue as T;
    }

    // Type conversion based on secret configuration
    if (config?.type) {
      switch (config.type) {
        case "number":
          const num = Number(value);
          if (isNaN(num)) {
            throw new Error(
              `Environment variable '${key}' must be a number, got: ${value}`
            );
          }
          return num as T;
        case "boolean":
          return ["true", "1", "yes"].includes(value.toLowerCase()) as T;
        default:
          return value as T;
      }
    }

    return value as T;
  };
}

/**
 * Validate that all required environment variables are set
 */
export function validateRequiredEnv(
  secretsConfig: Record<string, SecretConfig>
): { isValid: boolean; missing: string[] } {
  const missing: string[] = [];

  for (const [name, config] of Object.entries(secretsConfig)) {
    if (
      config.required &&
      (!process.env[name] || process.env[name]?.trim() === "")
    ) {
      missing.push(name);
    }
  }

  return {
    isValid: missing.length === 0,
    missing,
  };
}

/**
 * Get environment variable summary for debugging
 */
export function getEnvSummary(
  secretsConfig: Record<string, SecretConfig>
): EnvSummary {
  const configured: string[] = [];
  const missing: string[] = [];
  const optional: string[] = [];

  for (const [name, config] of Object.entries(secretsConfig)) {
    if (process.env[name]) {
      configured.push(name);
    } else if (config.required) {
      missing.push(name);
    } else {
      optional.push(name);
    }
  }

  return {
    total: Object.keys(secretsConfig).length,
    configured: configured.length,
    missing: missing.length,
    optional: optional.length,
    configuredVars: configured,
    missingVars: missing,
    optionalVars: optional,
  };
}

export interface EnvironmentLoadResult {
  success: boolean;
  hasConfig: boolean;
  appliedCount: number;
  validationResult: ValidationResult | null;
  secretsConfig?: Record<string, SecretConfig>;
  error?: string;
}

export interface EnvSummary {
  total: number;
  configured: number;
  missing: number;
  optional: number;
  configuredVars: string[];
  missingVars: string[];
  optionalVars: string[];
}
