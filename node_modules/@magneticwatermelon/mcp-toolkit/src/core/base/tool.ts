import { z } from "zod";
import type { Tool as SDKTool } from "@modelcontextprotocol/sdk/types.js";
import { type Logger, logger } from "../../logger.js";

type HasDescription<T> = T extends { _def: { description: string } }
  ? T
  : never;

type AllFieldsHaveDescriptions<T extends z.ZodRawShape> = {
  [K in keyof T]: HasDescription<T[K]>;
};

type StrictZodObject<T extends z.ZodRawShape> = z.ZodObject<
  AllFieldsHaveDescriptions<T>
>;

// Type helper to infer input type from schema
export type InferSchemaType<TSchema> = TSchema extends z.ZodObject<any>
  ? z.infer<TSchema>
  : never;

// Magic type that infers from the schema property of the current class
export type MCPInput<T extends MCPTool<any> = MCPTool<any>> = InferSchemaType<
  T["schema"]
>;

// MCP 2025-06-18: Structured Tool Content - Updated to match official specification
export interface StructuredToolContent {
  type: "text" | "image" | "audio" | "resource_link" | "resource";
  // For text content
  text?: string;
  // For image/audio content (base64-encoded)
  data?: string;
  // For resource_link content
  uri?: string;
  name?: string;
  // For resource content
  resource?: {
    uri: string;
    title?: string;
    mimeType?: string;
    text?: string;
    blob?: string;
  };
  // Common fields
  mimeType?: string;
  title?: string;
  description?: string;
  // Annotations
  annotations?: {
    audience?: ("user" | "assistant")[];
    priority?: number;
    lastModified?: string;
  };
}

// MCP 2025-06-18: Resource Links
export interface ToolResourceLink {
  uri: string;
  mimeType?: string;
  description?: string;
}

// MCP 2025-06-18: Enhanced Tool Response
export type ToolResponse = {
  content: StructuredToolContent[];
  isError?: boolean;

  // Structured content for JSON data (with text fallback for compatibility)
  structuredContent?: any;

  // Resource links in tool results
  resourceLinks?: ToolResourceLink[];

  // Metadata for enhanced tool responses
  _meta?: {
    cost?: number;
    duration?: number;
    model?: string;
    tokens?: {
      input?: number;
      output?: number;
    };
  };
};

export interface ToolProtocol extends SDKTool {
  name: string;
  description: string;
  toolDefinition: {
    name: string;
    description: string;
    inputSchema: {
      type: "object";
      properties?: Record<string, unknown>;
      required?: string[];
    };
  };
  toolCall(request: {
    params: { name: string; arguments?: Record<string, unknown> };
  }): Promise<ToolResponse>;
}

export abstract class MCPTool<
  TSchema extends z.ZodObject<any> = z.ZodObject<any>
> implements ToolProtocol
{
  abstract name: string;
  abstract description: string;
  protected abstract schema: TSchema;
  protected useStringify: boolean = true;
  protected logger: Logger = logger;
  [key: string]: unknown;

  /**
   * Validates the tool schema. This is called automatically when the tool is registered
   * with an MCP server, but can also be called manually for testing.
   */
  public validate(): void {
    // Access inputSchema to trigger validation
    const _ = this.inputSchema;
  }

  get inputSchema(): {
    type: "object";
    properties?: Record<string, unknown>;
    required?: string[];
  } {
    return this.generateSchemaFromZodObject(this.schema);
  }

  private generateSchemaFromZodObject(zodSchema: z.ZodObject<any>): {
    type: "object";
    properties: Record<string, unknown>;
    required: string[];
  } {
    const shape = zodSchema.shape;
    const properties: Record<string, any> = {};
    const required: string[] = [];
    const missingDescriptions: string[] = [];

    Object.entries(shape).forEach(([key, fieldSchema]) => {
      const fieldInfo = this.extractFieldInfo(fieldSchema as z.ZodType);

      if (!fieldInfo.jsonSchema.description) {
        missingDescriptions.push(key);
      }

      properties[key] = fieldInfo.jsonSchema;

      if (!fieldInfo.isOptional) {
        required.push(key);
      }
    });

    if (missingDescriptions.length > 0) {
      throw new Error(
        `Missing descriptions for fields in ${
          this.name
        }: ${missingDescriptions.join(", ")}. ` +
          `All fields must have descriptions when using Zod object schemas. ` +
          `Use .describe() on each field, e.g., z.string().describe("Field description")`
      );
    }

    return {
      type: "object",
      properties,
      required,
    };
  }

  private extractFieldInfo(schema: z.ZodType): {
    jsonSchema: any;
    isOptional: boolean;
  } {
    let currentSchema = schema;
    let isOptional = false;
    let defaultValue: any;
    let description: string | undefined;

    // Extract description before unwrapping
    const getDescription = (s: any) => s._def?.description;
    description = getDescription(currentSchema);

    // Unwrap modifiers to get to the base type
    while (true) {
      if (currentSchema instanceof z.ZodOptional) {
        isOptional = true;
        currentSchema = currentSchema.unwrap();
        if (!description) description = getDescription(currentSchema);
      } else if (currentSchema instanceof z.ZodDefault) {
        defaultValue = currentSchema._def.defaultValue();
        currentSchema = currentSchema._def.innerType;
        if (!description) description = getDescription(currentSchema);
      } else if (currentSchema instanceof z.ZodNullable) {
        isOptional = true;
        currentSchema = currentSchema.unwrap();
        if (!description) description = getDescription(currentSchema);
      } else {
        break;
      }
    }

    // Build JSON Schema
    const jsonSchema: any = {
      type: this.getJsonSchemaTypeFromZod(currentSchema),
    };

    if (description) {
      jsonSchema.description = description;
    }

    if (defaultValue !== undefined) {
      jsonSchema.default = defaultValue;
    }

    // Handle enums
    if (currentSchema instanceof z.ZodEnum) {
      jsonSchema.enum = currentSchema._def.values;
    }

    // Handle arrays
    if (currentSchema instanceof z.ZodArray) {
      const itemInfo = this.extractFieldInfo(currentSchema._def.type);
      jsonSchema.items = itemInfo.jsonSchema;
    }

    // Handle nested objects
    if (currentSchema instanceof z.ZodObject) {
      const shape = currentSchema.shape;
      const nestedProperties: Record<string, any> = {};
      const nestedRequired: string[] = [];

      Object.entries(shape).forEach(([key, fieldSchema]) => {
        const nestedFieldInfo = this.extractFieldInfo(fieldSchema as z.ZodType);
        nestedProperties[key] = nestedFieldInfo.jsonSchema;

        if (!nestedFieldInfo.isOptional) {
          nestedRequired.push(key);
        }
      });

      jsonSchema.properties = nestedProperties;
      if (nestedRequired.length > 0) {
        jsonSchema.required = nestedRequired;
      }
    }

    // Handle numeric constraints
    if (currentSchema instanceof z.ZodNumber) {
      const checks = (currentSchema as any)._def.checks || [];
      checks.forEach((check: any) => {
        switch (check.kind) {
          case "min":
            jsonSchema.minimum = check.value;
            if (check.inclusive === false) {
              jsonSchema.exclusiveMinimum = true;
            }
            break;
          case "max":
            jsonSchema.maximum = check.value;
            if (check.inclusive === false) {
              jsonSchema.exclusiveMaximum = true;
            }
            break;
          case "int":
            jsonSchema.type = "integer";
            break;
        }
      });

      // Handle positive() which adds a min check of 0 (exclusive)
      const hasPositive = checks.some(
        (check: any) =>
          check.kind === "min" && check.value === 0 && check.inclusive === false
      );
      if (hasPositive) {
        jsonSchema.minimum = 1;
      }
    }

    // Handle string constraints
    if (currentSchema instanceof z.ZodString) {
      const checks = (currentSchema as any)._def.checks || [];
      checks.forEach((check: any) => {
        switch (check.kind) {
          case "min":
            jsonSchema.minLength = check.value;
            break;
          case "max":
            jsonSchema.maxLength = check.value;
            break;
          case "regex":
            jsonSchema.pattern = check.regex.source;
            break;
          case "email":
            jsonSchema.format = "email";
            break;
          case "url":
            jsonSchema.format = "uri";
            break;
          case "uuid":
            jsonSchema.format = "uuid";
            break;
        }
      });
    }

    // Handle date formatting
    if (currentSchema instanceof z.ZodDate) {
      jsonSchema.format = "date-time";
    }

    return { jsonSchema, isOptional };
  }

  private getJsonSchemaTypeFromZod(zodType: z.ZodType<any>): string {
    if (zodType instanceof z.ZodString) return "string";
    if (zodType instanceof z.ZodNumber) return "number";
    if (zodType instanceof z.ZodBoolean) return "boolean";
    if (zodType instanceof z.ZodArray) return "array";
    if (zodType instanceof z.ZodObject) return "object";
    if (zodType instanceof z.ZodEnum) return "string";
    if (zodType instanceof z.ZodNull) return "null";
    if (zodType instanceof z.ZodUndefined) return "undefined";
    if (zodType instanceof z.ZodDate) return "string"; // ISO date string
    if (zodType instanceof z.ZodLiteral) {
      const value = zodType._def.value;
      return typeof value === "string"
        ? "string"
        : typeof value === "number"
        ? "number"
        : typeof value === "boolean"
        ? "boolean"
        : "string";
    }
    // Handle union types by taking the first valid type
    if (zodType instanceof z.ZodUnion) {
      const options = zodType._def.options;
      if (options && options.length > 0) {
        return this.getJsonSchemaTypeFromZod(options[0] as z.ZodType<any>);
      }
    }
    // Handle discriminated unions
    if (zodType instanceof z.ZodDiscriminatedUnion) {
      const options = Array.from(zodType._def.options.values());
      if (options.length > 0) {
        return this.getJsonSchemaTypeFromZod(options[0] as z.ZodType<any>);
      }
    }
    // Default to string for unknown types
    return "string";
  }

  get toolDefinition(): {
    name: string;
    description: string;
    inputSchema: {
      type: "object";
      properties?: Record<string, unknown>;
      required?: string[];
    };
  } {
    return {
      name: this.name,
      description: this.description,
      inputSchema: this.inputSchema,
    };
  }

  protected abstract execute(input: z.infer<TSchema>): Promise<unknown>;

  async toolCall(request: {
    params: { name: string; arguments?: Record<string, unknown> };
  }): Promise<ToolResponse> {
    try {
      const args = request.params.arguments || {};
      const validatedInput = await this.validateInput(args);
      const result = await this.execute(validatedInput);
      return this.createSuccessResponse(result);
    } catch (error: any) {
      return this.createErrorResponse(error.message || String(error));
    }
  }

  private async validateInput(
    args: Record<string, unknown>
  ): Promise<z.infer<TSchema>> {
    // Preprocess the input to handle JSON Schema to Zod type mismatches
    const preprocessedArgs = this.preprocessInputForValidation(args);
    return this.schema.parse(preprocessedArgs);
  }

  private preprocessInputForValidation(
    args: Record<string, unknown>
  ): Record<string, unknown> {
    const result = { ...args };
    const shape = this.schema.shape;

    Object.entries(shape).forEach(([key, fieldSchema]) => {
      const value = result[key];
      if (value !== undefined && value !== null) {
        result[key] = this.preprocessFieldValue(
          fieldSchema as z.ZodType,
          value
        );
      }
    });

    return result;
  }

  private preprocessFieldValue(schema: z.ZodType, value: unknown): unknown {
    let currentSchema = schema;

    // Unwrap modifiers to get to the base type
    while (
      currentSchema instanceof z.ZodOptional ||
      currentSchema instanceof z.ZodDefault ||
      currentSchema instanceof z.ZodNullable
    ) {
      if (currentSchema instanceof z.ZodOptional) {
        currentSchema = currentSchema.unwrap();
      } else if (currentSchema instanceof z.ZodDefault) {
        currentSchema = currentSchema._def.innerType;
      } else if (currentSchema instanceof z.ZodNullable) {
        currentSchema = currentSchema.unwrap();
      }
    }

    // Handle date coercion
    if (currentSchema instanceof z.ZodDate && typeof value === "string") {
      const date = new Date(value);
      return isNaN(date.getTime()) ? value : date;
    }

    // Handle number coercion for strings that should be numbers
    if (currentSchema instanceof z.ZodNumber && typeof value === "string") {
      const num = Number(value);
      return isNaN(num) ? value : num;
    }

    // Handle boolean coercion
    if (currentSchema instanceof z.ZodBoolean && typeof value === "string") {
      if (value.toLowerCase() === "true") return true;
      if (value.toLowerCase() === "false") return false;
    }

    return value;
  }

  protected createSuccessResponse(data: unknown): ToolResponse {
    if (Array.isArray(data)) {
      const validContent = data.filter((item) =>
        this.isValidStructuredContent(item)
      ) as StructuredToolContent[];
      if (validContent.length > 0) {
        return {
          content: validContent,
        };
      }
    }

    // For string data, create text content
    if (typeof data === "string") {
      return {
        content: [
          {
            type: "text",
            text: data,
            mimeType: "text/plain",
          },
        ],
      };
    }

    // For other data types, create text content with JSON string
    const jsonString = JSON.stringify(data, null, 2);
    const response: ToolResponse = {
      content: [
        {
          type: "text",
          text: jsonString,
          mimeType: "application/json",
        },
      ],
    };

    // Only add structuredContent for objects, not arrays
    // According to MCP spec, structuredContent should be a single JSON object
    if (typeof data === "object" && data !== null && !Array.isArray(data)) {
      response.structuredContent = data;
    }

    return response;
  }

  private isValidStructuredContent(
    data: unknown
  ): data is StructuredToolContent {
    if (
      typeof data !== "object" ||
      data === null ||
      !("type" in data) ||
      typeof (data as any).type !== "string" ||
      !["text", "image", "audio", "resource_link", "resource"].includes(
        (data as any).type
      )
    ) {
      return false;
    }

    const content = data as any;

    // For text content, require "text" field
    if (content.type === "text") {
      return "text" in content && typeof content.text === "string";
    }

    // For image/audio content, require "data" field (base64-encoded)
    if (content.type === "image" || content.type === "audio") {
      return "data" in content && typeof content.data === "string";
    }

    // For resource_link content, require "uri" field
    if (content.type === "resource_link") {
      return "uri" in content && typeof content.uri === "string";
    }

    // For resource content, require "resource" field with "uri"
    if (content.type === "resource") {
      return (
        "resource" in content &&
        typeof content.resource === "object" &&
        content.resource !== null &&
        "uri" in content.resource &&
        typeof content.resource.uri === "string"
      );
    }

    return false;
  }

  protected async fetch<T>(url: string, init?: RequestInit): Promise<T> {
    const response = await fetch(url, init);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json() as Promise<T>;
  }

  /**
   * Helper method to create a structured text response
   */
  protected createTextResponse(text: string, title?: string): ToolResponse {
    return {
      content: [
        {
          type: "text",
          text: text,
          title,
          mimeType: "text/plain",
        },
      ],
    };
  }

  /**
   * Helper method to create a JSON response (uses text content with structured data)
   */
  protected createJsonResponse(data: any, title?: string): ToolResponse {
    const jsonString = JSON.stringify(data, null, 2);
    const response: ToolResponse = {
      content: [
        {
          type: "text",
          text: jsonString,
          title,
          mimeType: "application/json",
        },
      ],
    };

    // Only add structuredContent for objects, not arrays
    // According to MCP spec, structuredContent should be a single JSON object
    if (typeof data === "object" && data !== null && !Array.isArray(data)) {
      response.structuredContent = data;
    }

    return response;
  }

  /**
   * Helper method to create an array response (wraps array in object for structured content)
   */
  protected createArrayResponse(
    data: any[],
    title?: string,
    arrayKey: string = "items"
  ): ToolResponse {
    const jsonString = JSON.stringify(data, null, 2);
    return {
      content: [
        {
          type: "text",
          text: jsonString,
          title,
          mimeType: "application/json",
        },
      ],
      structuredContent: {
        [arrayKey]: data,
        count: data.length,
      },
    };
  }

  /**
   * Helper method to create a response with resource links
   */
  protected createResponseWithResources(
    content: StructuredToolContent[],
    resourceLinks: ToolResourceLink[]
  ): ToolResponse {
    return {
      content,
      resourceLinks,
    };
  }

  /**
   * Helper method to create an error response
   */
  protected createErrorResponse(message: string): ToolResponse {
    return {
      content: [
        {
          type: "text",
          text: message,
          mimeType: "text/plain",
        },
      ],
      isError: true,
    };
  }

  /**
   * Helper method to create an image response
   */
  protected createImageResponse(
    base64Data: string,
    mimeType: string = "image/png",
    title?: string
  ): ToolResponse {
    return {
      content: [
        {
          type: "image",
          data: base64Data,
          mimeType,
          title,
        },
      ],
    };
  }

  /**
   * Helper method to create an audio response
   */
  protected createAudioResponse(
    base64Data: string,
    mimeType: string = "audio/wav",
    title?: string
  ): ToolResponse {
    return {
      content: [
        {
          type: "audio",
          data: base64Data,
          mimeType,
          title,
        },
      ],
    };
  }

  /**
   * Helper method to create a resource link response
   */
  protected createResourceLinkResponse(
    uri: string,
    name?: string,
    description?: string,
    mimeType?: string
  ): ToolResponse {
    return {
      content: [
        {
          type: "resource_link",
          uri,
          name,
          description,
          mimeType,
        },
      ],
    };
  }

  /**
   * Helper method to create an embedded resource response
   */
  protected createResourceResponse(
    uri: string,
    title?: string,
    text?: string,
    mimeType?: string,
    blob?: string
  ): ToolResponse {
    return {
      content: [
        {
          type: "resource",
          resource: {
            uri,
            title,
            text,
            mimeType,
            blob,
          },
        },
      ],
    };
  }
}

export function defineSchema<T extends z.ZodRawShape>(
  shape: T
): z.ZodObject<T> {
  if (process.env.NODE_ENV !== "production") {
    for (const [key, value] of Object.entries(shape)) {
      let schema = value;
      let hasDescription = false;

      while (schema && typeof schema === "object") {
        if ("_def" in schema && schema._def?.description) {
          hasDescription = true;
          break;
        }
        if (
          schema instanceof z.ZodOptional ||
          schema instanceof z.ZodDefault ||
          schema instanceof z.ZodNullable
        ) {
          schema = schema._def.innerType || (schema as any).unwrap();
        } else {
          break;
        }
      }

      if (!hasDescription) {
        throw new Error(
          `Field '${key}' is missing a description. Use .describe() to add one.\n` +
            `Example: ${key}: z.string().describe("Description for ${key}")`
        );
      }
    }
  }

  return z.object(shape);
}
