import { IncomingMessage } from "node:http";
import {
  type AuthProvider,
  type AuthResult,
  DEFAULT_AUTH_ERROR,
  type ResourceServerMetadata,
} from "../types";
import { logger } from "../../logger";

// MCP 2025-06-18: OAuth 2.1 Implementation
// Based on draft-ietf-oauth-v2-1-12, RFC8414, RFC7591, RFC8707, RFC9728

/**
 * JWT payload structure for access tokens
 */
export interface JWTPayload {
  iss: string; // Issuer
  sub: string; // Subject
  aud: string | string[]; // Audience - MUST validate this matches our MCP server
  exp: number; // Expiration time
  iat: number; // Issued at
  scope?: string; // Scopes
  client_id?: string; // Client ID
  [key: string]: any; // Additional claims
}

/**
 * OAuth 2.1 Configuration for MCP Server
 */
export interface OAuthConfig {
  /**
   * Resource server metadata for this MCP server
   */
  resourceServer: ResourceServerMetadata;

  /**
   * Required scopes for accessing this MCP server
   */
  requiredScopes?: string[];

  /**
   * Expected audience/resource indicator for token validation
   * MUST match the canonical URI of this MCP server (RFC 8707)
   */
  expectedAudience: string;

  /**
   * Authorization server's public key or JWKS endpoint for token verification
   */
  tokenVerification: {
    type: "jwks" | "publicKey";
    value: string; // JWKS URL or public key
  };

  /**
   * Optional: Custom token validation function
   */
  customTokenValidator?: (
    token: string,
    payload: JWTPayload
  ) => Promise<boolean>;

  /**
   * Clock skew tolerance in seconds for token validation
   * @default 300 (5 minutes)
   */
  clockSkewTolerance?: number;
}

/**
 * OAuth 2.1 Authentication Provider for MCP
 * Implements MCP 2025-06-18 authorization specification
 */
export class OAuthAuthProvider implements AuthProvider {
  private config: Required<Omit<OAuthConfig, "customTokenValidator">> & {
    customTokenValidator?: OAuthConfig["customTokenValidator"];
  };

  constructor(config: OAuthConfig) {
    this.config = {
      clockSkewTolerance: 300, // 5 minutes default
      requiredScopes: [], // Default to empty array
      ...config,
    };

    this.validateConfig();
  }

  private validateConfig(): void {
    if (!this.config.expectedAudience) {
      throw new Error("expectedAudience is required for OAuth authentication");
    }

    if (!this.config.resourceServer.authorization_endpoint) {
      throw new Error("resourceServer.authorization_endpoint is required");
    }

    if (!this.config.resourceServer.token_endpoint) {
      throw new Error("resourceServer.token_endpoint is required");
    }

    // Validate audience format (RFC 8707)
    try {
      const url = new URL(this.config.expectedAudience);
      if (url.hash) {
        throw new Error("Canonical URI must not contain fragments");
      }
    } catch {
      throw new Error(
        "expectedAudience must be a valid canonical URI (RFC 8707)"
      );
    }
  }

  /**
   * Authenticate incoming request using OAuth 2.1
   * Validates Bearer token according to MCP authorization specification
   */
  async authenticate(req: IncomingMessage): Promise<boolean | AuthResult> {
    logger.debug(`OAuth 2.1 auth attempt from ${req.socket.remoteAddress}`);

    // Extract Bearer token from Authorization header
    const authHeader = req.headers.authorization;
    if (!authHeader) {
      logger.debug("No Authorization header found");
      return false;
    }

    const bearerMatch = authHeader.match(/^Bearer\s+(.+)$/i);
    if (!bearerMatch) {
      logger.debug("Authorization header is not Bearer token format");
      return false;
    }

    const accessToken = bearerMatch[1] as string;

    try {
      // Validate and decode the JWT token
      const payload = await this.validateToken(accessToken);

      // Validate audience (RFC 8707) - MUST validate token was issued for this MCP server
      if (!this.validateAudience(payload)) {
        logger.warn(
          `Token audience validation failed. Expected: ${
            this.config.expectedAudience
          }, Got: ${JSON.stringify(payload.aud)}`
        );
        return false;
      }

      // Validate scopes if required
      if (!this.validateScopes(payload)) {
        logger.warn(
          `Token scope validation failed. Required: ${this.config.requiredScopes.join(
            " "
          )}, Got: ${payload.scope || "none"}`
        );
        return false;
      }

      // Custom validation if provided
      if (this.config.customTokenValidator) {
        const customValid = await this.config.customTokenValidator(
          accessToken,
          payload
        );
        if (!customValid) {
          logger.warn("Custom token validation failed");
          return false;
        }
      }

      logger.debug("OAuth 2.1 authentication successful");

      return {
        data: {
          ...payload,
          sub: payload.sub,
          client_id: payload.client_id,
          scope: payload.scope,
          aud: payload.aud,
          iss: payload.iss,
        },
      };
    } catch (error) {
      logger.warn(`OAuth token validation failed: ${error}`);
      return false;
    }
  }

  /**
   * Validate JWT token structure and signature
   */
  private async validateToken(token: string): Promise<JWTPayload> {
    // Basic JWT structure validation
    const parts = token.split(".");
    if (parts.length !== 3) {
      throw new Error("Invalid JWT format");
    }

    // Decode header and payload
    const headerPart = parts[0];
    const payloadPart = parts[1];

    if (!headerPart || !payloadPart) {
      throw new Error("Invalid JWT format: missing header or payload");
    }

    const header = JSON.parse(this.base64UrlDecode(headerPart));
    const payload = JSON.parse(this.base64UrlDecode(payloadPart)) as JWTPayload;

    // Validate required claims
    if (!payload.iss) throw new Error("Missing issuer (iss) claim");
    if (!payload.sub) throw new Error("Missing subject (sub) claim");
    if (!payload.aud) throw new Error("Missing audience (aud) claim");
    if (!payload.exp) throw new Error("Missing expiration (exp) claim");
    if (!payload.iat) throw new Error("Missing issued at (iat) claim");

    // Validate expiration with clock skew tolerance
    const now = Math.floor(Date.now() / 1000);
    if (payload.exp < now - this.config.clockSkewTolerance) {
      throw new Error("Token has expired");
    }

    // Validate issued at time (not too far in the future)
    if (payload.iat > now + this.config.clockSkewTolerance) {
      throw new Error("Token issued in the future");
    }

    // TODO: Implement signature verification based on config.tokenVerification
    // This is a placeholder - in production, you'd verify against JWKS or public key
    await this.verifyTokenSignature(token, header);

    return payload;
  }

  /**
   * Validate token audience according to RFC 8707
   * MUST ensure token was issued specifically for this MCP server
   */
  private validateAudience(payload: JWTPayload): boolean {
    const audiences = Array.isArray(payload.aud) ? payload.aud : [payload.aud];

    // Token MUST include this MCP server in its audience
    return audiences.includes(this.config.expectedAudience);
  }

  /**
   * Validate token scopes if required
   */
  private validateScopes(payload: JWTPayload): boolean {
    if (!this.config.requiredScopes?.length) {
      return true; // No scope requirements
    }

    if (!payload.scope) {
      return false; // Scopes required but not present in token
    }

    const tokenScopes = payload.scope.split(" ");

    // Check if all required scopes are present
    return this.config.requiredScopes.every((requiredScope) =>
      tokenScopes.includes(requiredScope)
    );
  }

  /**
   * Verify token signature (placeholder implementation)
   * TODO: Implement actual signature verification
   */
  private async verifyTokenSignature(
    token: string,
    header: any
  ): Promise<void> {
    if (this.config.tokenVerification.type === "jwks") {
      // TODO: Fetch JWKS and verify signature
      logger.debug(
        `Token signature verification via JWKS: ${this.config.tokenVerification.value}`
      );
    } else if (this.config.tokenVerification.type === "publicKey") {
      // TODO: Verify signature with public key
      logger.debug("Token signature verification via public key");
    }

    // For now, we'll skip signature verification in development
    // In production, this MUST be implemented properly
    logger.warn(
      "Token signature verification not implemented - for development only"
    );
  }

  /**
   * Base64 URL decode helper
   */
  private base64UrlDecode(str: string): string {
    // Add padding if needed
    const padded = str + "=".repeat((4 - (str.length % 4)) % 4);
    // Replace URL-safe characters
    const base64 = padded.replace(/-/g, "+").replace(/_/g, "/");
    return Buffer.from(base64, "base64").toString("utf8");
  }

  /**
   * Get resource server metadata for authorization server discovery
   * Implements OAuth 2.0 Protected Resource Metadata (RFC9728)
   */
  getResourceServerMetadata(): ResourceServerMetadata {
    return this.config.resourceServer;
  }

  /**
   * Get RFC 9728 Protected Resource Metadata for authorization server discovery
   */
  getProtectedResourceMetadata(): any {
    return {
      resource: this.config.expectedAudience,
      authorization_servers: [
        this.config.resourceServer.authorization_endpoint,
      ],
      scopes_supported: this.config.resourceServer.scopes_supported || [],
      // MCP 2025-06-18: Resource indicators support
      resource_indicators_supported: true,
      // Additional metadata
      token_endpoint_auth_methods_supported: [
        "client_secret_basic",
        "client_secret_post",
      ],
      response_types_supported:
        this.config.resourceServer.response_types_supported,
      grant_types_supported: this.config.resourceServer.grant_types_supported,
    };
  }

  /**
   * Generate WWW-Authenticate header for 401 responses (RFC 9728 Section 5.1)
   */
  getWWWAuthenticateHeader(): string {
    const resourceMetadataUrl = `${this.config.expectedAudience}/.well-known/oauth-protected-resource`;
    return (
      `Bearer realm="${this.config.expectedAudience}", ` +
      `resource_metadata="${resourceMetadataUrl}"`
    );
  }

  /**
   * Handle authorization server discovery endpoint
   */
  async handleResourceMetadataRequest(): Promise<any> {
    return this.getProtectedResourceMetadata();
  }

  /**
   * Validate Dynamic Client Registration (RFC 7591) if supported
   */
  async validateDynamicClientRegistration(clientId: string): Promise<boolean> {
    // This would typically validate against the authorization server
    // For now, we'll return true but this should be implemented based on your auth server
    logger.debug(`Validating dynamic client registration for: ${clientId}`);
    return true;
  }

  getAuthError() {
    return {
      status: 401,
      message: "Invalid or missing OAuth token",
    };
  }
}

/**
 * Helper function to create OAuth configuration for MCP server
 */
export function createOAuthConfig(options: {
  mcpServerUri: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  requiredScopes?: string[];
  jwksUrl?: string;
  publicKey?: string;
}): OAuthConfig {
  return {
    expectedAudience: options.mcpServerUri,
    resourceServer: {
      authorization_endpoint: options.authorizationEndpoint,
      token_endpoint: options.tokenEndpoint,
      response_types_supported: ["code"],
      grant_types_supported: ["authorization_code", "client_credentials"],
      scopes_supported: options.requiredScopes,
      resource_indicator: options.mcpServerUri,
    },
    requiredScopes: options.requiredScopes,
    tokenVerification: {
      type: options.jwksUrl ? "jwks" : "publicKey",
      value: options.jwksUrl || options.publicKey || "",
    },
  };
}
