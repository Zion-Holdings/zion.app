#!/usr/bin/env bun

import { parseArgs } from "util";
import { createProject } from "./commands/create.ts";
import { addTool } from "./commands/addTool.ts";
import { addResource } from "./commands/addResource.ts";
import { showHelp } from "./commands/help.ts";
import { addPrompt } from "./commands/addPrompt.ts";
import { build } from "./commands/build.ts";
import { envCommand } from "./commands/env.ts";
import { deploy } from "./commands/deploy.ts";
import { getProjectVersion, getToolkitRoot } from "../utils/project.ts";

const { values, positionals } = parseArgs({
  args: Bun.argv,
  options: {
    help: {
      type: "boolean",
      short: "h",
    },
    version: {
      type: "boolean",
      short: "v",
    },
    // Create command options
    stdio: {
      type: "boolean",
      default: false,
    },
    cors: {
      type: "boolean",
      default: false,
    },
    port: {
      type: "string",
    },
    "no-install": {
      type: "boolean",
      default: false,
    },
    "no-example": {
      type: "boolean",
      default: false,
    },
    // Env command options
    env: {
      type: "string",
    },
    description: {
      type: "string",
    },
    default: {
      type: "string",
    },
    type: {
      type: "string",
    },
    required: {
      type: "string",
    },
    // Deploy command options
    target: {
      type: "string",
    },
    "no-build": {
      type: "boolean",
      default: false,
    },
    "no-detach": {
      type: "boolean",
      default: false,
    },
  },
  allowPositionals: true,
});

const command = positionals[2]; // Skip 'bun' and script name

async function main() {
  if (values.version) {
    const toolkitRoot = getToolkitRoot();
    const version = getProjectVersion(toolkitRoot);
    console.log(`mcp-toolkit v${version}`);
    process.exit(0);
  }

  if (values.help || !command) {
    showHelp();
    process.exit(0);
  }

  try {
    switch (command) {
      case "create":
        const createOptions = {
          stdio: values.stdio,
          cors: values.cors,
          port: values.port ? parseInt(values.port, 10) : undefined,
          install: !values["no-install"],
          example: !values["no-example"],
        };
        await createProject(positionals.slice(3)[0], createOptions);
        break;
      case "add-tool":
        await addTool(positionals.slice(3)[0]);
        break;
      case "add-resource":
        await addResource(positionals.slice(3)[0]);
        break;
      case "add-prompt":
        await addPrompt(positionals.slice(3)[0]);
        break;
      case "build":
        await build();
        break;
      case "env":
        const envAction = positionals.slice(3)[0] || "help";
        const envName = positionals.slice(3)[1];
        const envOptions = {
          env: values.env,
          description: values.description,
          default: values.default,
          type: values.type,
          required: values.required,
        };
        await envCommand(envAction, envName, envOptions);
        break;
      case "deploy":
        const deployTarget = positionals.slice(3)[0] || "docker-compose";
        const deployOptions = {
          build: !values["no-build"],
          detached: !values["no-detach"],
          env: values.env,
          port: values.port ? parseInt(values.port, 10) : undefined,
        };
        await deploy(deployTarget, deployOptions);
        break;
      default:
        console.error(`Unknown command: ${command}`);
        showHelp();
        process.exit(1);
    }
  } catch (error) {
    console.error("Error:", error instanceof Error ? error.message : error);
    process.exit(1);
  }
}

main();
