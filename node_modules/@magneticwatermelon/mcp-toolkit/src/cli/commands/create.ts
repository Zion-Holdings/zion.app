import { mkdir, writeFile } from "fs/promises";
import { join } from "path";
import prompts from "prompts";
import { generateReadme } from "../templates/readme";
import { generateDockerfile } from "../templates/dockerfile";
import { generateDockerignore } from "../templates/dockerignore";
import { generateDockerCompose } from "../templates/docker-compose";
import { getProjectVersion, getToolkitRoot } from "../../utils/project.ts";

export async function createProject(
  name?: string,
  options?: {
    stdio?: boolean;
    cors?: boolean;
    port?: number;
    install?: boolean;
    example?: boolean;
  }
) {
  let projectName: string;
  // Default install and example to true if not specified
  const shouldInstall = options?.install !== false;
  const shouldCreateExample = options?.example !== false;

  if (!name) {
    const response = await prompts([
      {
        type: "text",
        name: "projectName",
        message: "What is the name of your MCP server project?",
        validate: (value: string) =>
          /^[a-z0-9-]+$/.test(value)
            ? true
            : "Project name can only contain lowercase letters, numbers, and hyphens",
      },
    ]);

    if (!response.projectName) {
      console.log("Project creation cancelled");
      process.exit(1);
    }

    projectName = response.projectName as string;
  } else {
    projectName = name;
  }

  if (!projectName) {
    throw new Error("Project name is required");
  }

  const projectDir = join(process.cwd(), projectName);
  const srcDir = join(projectDir, "src");
  const toolsDir = join(srcDir, "tools");

  // Always use the registry version
  const toolkitRoot = getToolkitRoot();
  const currentVersion = getProjectVersion(toolkitRoot);
  const mcpToolkitDependency = `^${currentVersion}`;

  try {
    console.log("Creating project structure...");
    await mkdir(projectDir);
    await mkdir(srcDir);
    await mkdir(toolsDir);

    const packageJson = {
      name: projectName,
      version: "0.0.1",
      description: `${projectName} MCP server`,
      type: "module",
      bin: {
        [projectName]: "./dist/index.js",
      },
      files: ["dist"],
      scripts: {
        // Build the project using bunx (Bun's npx equivalent) to ensure all tooling runs under Bun
        build: "bunx tsc && mcp-toolkit build",
        // Watch TypeScript files and rebuild on changes using Bun
        watch: "bunx tsc --watch",
        // Start the compiled server with Bun runtime to ensure compatibility with Bun-installed deps
        start: "bun run dist/index.js",
      },
      dependencies: {
        "@magneticwatermelon/mcp-toolkit": mcpToolkitDependency,
      },
      devDependencies: {
        "@types/node": "^20.11.24",
        typescript: "^5.3.3",
      },
      engines: {
        node: ">=18.19.0",
      },
    };

    const tsconfig = {
      compilerOptions: {
        target: "ESNext",
        module: "ESNext",
        moduleResolution: "node",
        outDir: "./dist",
        rootDir: "./src",
        strict: true,
        esModuleInterop: true,
        skipLibCheck: true,
        forceConsistentCasingInFileNames: true,
      },
      include: ["src/**/*"],
      exclude: ["node_modules"],
    };

    let indexTs = "";

    if (options?.stdio) {
      indexTs = `import { MCPServer } from "@magneticwatermelon/mcp-toolkit";

const server = new MCPServer({
  transport: {
    type: "stdio"
  }
});

server.start();`;
    } else {
      const port = options?.port || 8080;
      let transportConfig = `\n  transport: {
    type: "http-stream",
    options: {
      port: ${port}`;

      if (options?.cors) {
        transportConfig += `,
      cors: {
        allowOrigin: "*"
      }`;
      }

      transportConfig += `
    }
  }`;

      indexTs = `import { MCPServer } from "@magneticwatermelon/mcp-toolkit";

const server = new MCPServer({${transportConfig}});

server.start();`;
    }

    const exampleToolTs = `import { MCPTool } from "@magneticwatermelon/mcp-toolkit";
import { z } from "zod";

const ExampleToolSchema = z.object({
  message: z.string().describe("Message to process"),
});

class ExampleTool extends MCPTool<typeof ExampleToolSchema> {
  name = "example_tool";
  description = "An example tool that processes messages";

  protected schema = ExampleToolSchema;

  async execute(input: z.infer<typeof ExampleToolSchema>) {
    // Example of using environment variables
    const apiKey = process.env.API_KEY;
    const environment = process.env.NODE_ENV || 'development';
    
    if (!apiKey && environment === 'production') {
      throw new Error('API_KEY is required in production environment');
    }
    
    return \`Processed: \${input.message}\` + 
           (apiKey ? \` (authenticated)\` : \` (no auth)\`) + 
           \` [env: \${environment}]\`;
  }
}

export default ExampleTool;`;

    const gitignoreContent = `# Dependencies
node_modules/

# Build outputs
dist/
build/

# Environment variables
.env
.env.local
.env.development
.env.staging
.env.production

# Environment configuration
.env.config.json

# Logs
*.log

# Editor directories and files
.vscode
.idea
.DS_Store
`;

    // Prepare the files to write
    const filesToWrite = [
      writeFile(
        join(projectDir, "package.json"),
        JSON.stringify(packageJson, null, 2)
      ),
      writeFile(
        join(projectDir, "tsconfig.json"),
        JSON.stringify(tsconfig, null, 2)
      ),
      writeFile(join(projectDir, "README.md"), generateReadme(projectName)),
      writeFile(join(projectDir, ".gitignore"), gitignoreContent),
      writeFile(join(srcDir, "index.ts"), indexTs),
      writeFile(
        join(projectDir, "Dockerfile"),
        generateDockerfile(projectName, {
          port: options?.port,
        })
      ),
      writeFile(join(projectDir, ".dockerignore"), generateDockerignore()),
      writeFile(
        join(projectDir, "docker-compose.yml"),
        generateDockerCompose(projectName, {
          port: options?.port,
        })
      ),
    ];

    // Add example files if requested
    if (shouldCreateExample) {
      filesToWrite.push(writeFile(join(toolsDir, "example.ts"), exampleToolTs));

      // Create example environment configuration
      const exampleEnvConfig = {
        secrets: {
          API_KEY: {
            name: "API_KEY",
            description: "API key for external service integration",
            type: "api_key",
            required: false,
            defaultValue: "your_api_key_here",
          },
          DATABASE_URL: {
            name: "DATABASE_URL",
            description: "Database connection string",
            type: "url",
            required: false,
            defaultValue: "postgresql://user:password@localhost:5432/database",
          },
          PORT: {
            name: "PORT",
            description: "Server port number",
            type: "number",
            required: false,
            defaultValue: "8080",
          },
        },
        environments: ["development", "staging", "production"],
      };

      const exampleEnvFile = `# Environment Variables Configuration
# Copy this file to .env.local and fill in your actual values

# API_KEY SECRETS
# API key for external service integration
# Type: api_key (optional)
API_KEY=your_api_key_here

# URL SECRETS  
# Database connection string
# Type: url (optional)
DATABASE_URL=postgresql://user:password@localhost:5432/database

# NUMBER SECRETS
# Server port number
# Type: number (optional)
PORT=8080

`;

      filesToWrite.push(
        writeFile(
          join(projectDir, ".env.config.json"),
          JSON.stringify(exampleEnvConfig, null, 2)
        ),
        writeFile(join(projectDir, ".env.example"), exampleEnvFile)
      );
    }

    console.log("Creating project files...");
    await Promise.all(filesToWrite);

    process.chdir(projectDir);

    console.log("Initializing git repository...");
    const gitInit = Bun.spawnSync(["git", "init"], {
      stdout: "inherit",
      stderr: "inherit",
    });

    if (!gitInit.success) {
      throw new Error("Failed to initialize git repository");
    }

    if (shouldInstall) {
      console.log("Installing dependencies with Bun...");
      const bunInstall = Bun.spawnSync(["bun", "install"], {
        stdout: "inherit",
        stderr: "inherit",
      });

      if (!bunInstall.success) {
        throw new Error("Failed to install dependencies");
      }

      console.log("Building project...");
      const tscBuild = Bun.spawn(["bunx", "tsc"], {
        cwd: projectDir,
        stdout: "inherit",
        stderr: "inherit",
      });

      await tscBuild.exited;
      if (tscBuild.exitCode !== 0) {
        throw new Error("Failed to build TypeScript");
      }

      const mcpBuild = Bun.spawn(["bunx", "mcp-toolkit", "build"], {
        cwd: projectDir,
        stdout: "inherit",
        stderr: "inherit",
        env: {
          ...process.env,
          MCP_SKIP_VALIDATION: "true",
        },
      });

      await mcpBuild.exited;
      if (mcpBuild.exitCode !== 0) {
        throw new Error("Failed to run mcp-toolkit build");
      }

      console.log(`
Project ${projectName} created and built successfully!

You can now:
1. cd ${projectName}
2. Add more tools using:
   mcp-toolkit add-tool <tool-name>

Docker files included:
- Dockerfile (ready for production deployment)
- .dockerignore (optimized build context)
- docker-compose.yml (easy container management)

To test with Docker:
- Build: docker build -t ${projectName} .
- Run: docker-compose up
    `);
    } else {
      console.log(`
Project ${projectName} created successfully (without dependencies)!

You can now:
1. cd ${projectName}
2. Run 'bun install' to install dependencies
3. Run 'bun run build' to build the project
4. Add more tools using:
   mcp-toolkit add-tool <tool-name>

Docker files included:
- Dockerfile (ready for production deployment)
- .dockerignore (optimized build context)
- docker-compose.yml (easy container management)

To test with Docker:
- Build: docker build -t ${projectName} .
- Run: docker-compose up
    `);
    }
  } catch (error) {
    console.error("Error creating project:", error);
    process.exit(1);
  }
}
