#!/usr/bin/env bun
import { readFile, writeFile } from "fs/promises";
import { join, dirname } from "path";
import { existsSync } from "fs";
import { findUp } from "../../utils";

export async function build() {
  process.stderr.write("MCP Build Script Starting...\n");
  process.stderr.write("Finding project root...\n");

  const startDir = process.cwd();
  process.stderr.write(`Starting search from: ${startDir}\n`);

  const skipValidation = process.env.MCP_SKIP_VALIDATION === "true";
  if (skipValidation) {
    process.stderr.write(`Skipping dependency validation\n`);
  }

  try {
    const pkgPath = await findUp("package.json");
    if (!pkgPath) {
      throw new Error(
        "Could not find package.json in current directory or any parent directories"
      );
    }

    const projectRoot = dirname(pkgPath);

    if (!skipValidation) {
      const pkgContent = await readFile(pkgPath, "utf8");
      const pkg = JSON.parse(pkgContent);

      if (!pkg.dependencies?.["@magneticwatermelon/mcp-toolkit"]) {
        throw new Error(
          "This directory is not an MCP project (@magneticwatermelon/mcp-toolkit not found in dependencies)"
        );
      }
    }

    process.stderr.write(`Running tsc in ${projectRoot}\n`);

    // Properly await TypeScript compilation
    const tscBuild = Bun.spawn(["bunx", "tsc"], {
      cwd: projectRoot,
      stdout: "inherit",
      stderr: "inherit",
      env: {
        ...process.env,
        FORCE_COLOR: "1",
      },
    });

    await tscBuild.exited;
    if (tscBuild.exitCode !== 0) {
      throw new Error("TypeScript compilation failed");
    }

    const distPath = join(projectRoot, "dist");
    const projectIndexPath = join(distPath, "index.js");

    // Check if dist directory and index.js exist
    if (!existsSync(distPath)) {
      throw new Error("dist directory not found after TypeScript compilation");
    }

    if (!existsSync(projectIndexPath)) {
      throw new Error(
        "index.js not found in dist directory after TypeScript compilation"
      );
    }

    const shebang = "#!/usr/bin/env node\n";

    process.stderr.write("Adding shebang to index.js...\n");
    try {
      const content = await readFile(projectIndexPath, "utf8");
      if (!content.startsWith(shebang)) {
        await writeFile(projectIndexPath, shebang + content);
      }
    } catch (error) {
      process.stderr.write(
        `Error processing index.js: ${
          error instanceof Error ? error.message : String(error)
        }\n`
      );
      throw error;
    }

    // Clear Node.js module cache to ensure fresh imports for tool validation
    // This helps with the issue where tools aren't reflected until second build
    const Module = require("module");
    const originalRequire = Module.prototype.require;

    // Clear import cache for the dist directory
    const importMetaResolve = require.resolve;
    Object.keys(require.cache).forEach((key) => {
      if (key.includes(distPath)) {
        delete require.cache[key];
      }
    });

    // Validate tools after build
    const skipToolValidation = process.env.MCP_SKIP_TOOL_VALIDATION === "true";
    if (!skipToolValidation) {
      process.stderr.write("\nValidating tools...\n");

      const toolsPath = join(distPath, "tools");

      if (existsSync(toolsPath)) {
        const { readdirSync } = await import("fs");
        const { pathToFileURL } = await import("url");

        const toolFiles = readdirSync(toolsPath).filter(
          (f) => f.endsWith(".js") && !f.includes(".test.")
        );
        const errors: string[] = [];
        let validatedCount = 0;

        for (const file of toolFiles) {
          try {
            const toolPath = pathToFileURL(join(toolsPath, file)).href;
            // Add cache-busting timestamp to ensure fresh import
            const importPath = `${toolPath}?t=${Date.now()}`;
            const module = await import(importPath);
            const ToolClass = module.default;

            if (ToolClass && typeof ToolClass === "function") {
              const instance = new ToolClass();
              if (
                "validate" in instance &&
                typeof instance.validate === "function"
              ) {
                try {
                  instance.validate();
                  validatedCount++;
                } catch (error: any) {
                  errors.push(`  ❌ ${file}: ${error.message}`);
                }
              }
            }
          } catch (error: any) {
            // Skip files that can't be imported
          }
        }

        if (errors.length > 0) {
          process.stderr.write("\n❌ Tool validation failed:\n");
          errors.forEach((error) => process.stderr.write(error + "\n"));
          process.stderr.write("\n");
          throw new Error(
            "Tool validation failed - all Zod schema fields must have descriptions"
          );
        }

        if (validatedCount > 0) {
          process.stderr.write(
            `✅ Validated ${validatedCount} tools successfully\n`
          );
        }
      }
    }

    process.stderr.write("Build completed successfully!\n");
  } catch (error) {
    process.stderr.write(
      `Error: ${error instanceof Error ? error.message : String(error)}\n`
    );
    process.exit(1);
  }
}
