import { writeFile, mkdir } from "fs/promises";
import { join } from "path";
import prompts from "prompts";
import { validateMCPProject, toPascalCase } from "../../utils";

export async function addTool(name?: string) {
  await validateMCPProject();

  let toolName = name;
  if (!toolName) {
    const response = await prompts([
      {
        type: "text",
        name: "name",
        message: "What is the name of your tool?",
        validate: (value: string) =>
          /^[a-z0-9-]+$/.test(value)
            ? true
            : "Tool name can only contain lowercase letters, numbers, and hyphens",
      },
    ]);

    if (!response.name) {
      console.log("Tool creation cancelled");
      process.exit(1);
    }

    toolName = response.name;
  }

  if (!toolName) {
    throw new Error("Tool name is required");
  }

  const className = toPascalCase(toolName);
  const fileName = `${className}Tool.ts`;
  const toolsDir = join(process.cwd(), "src/tools");

  try {
    await mkdir(toolsDir, { recursive: true });

    const toolContent = `import { MCPTool } from "@magneticwatermelon/mcp-toolkit";
import { z } from "zod";

const ${className}Schema = z.object({
  message: z.string().describe("Message to process"),
});

class ${className}Tool extends MCPTool<typeof ${className}Schema> {
  name = "${toolName}";
  description = "${className} tool description";

  protected schema = ${className}Schema;

  async execute(input: z.infer<typeof ${className}Schema>) {
    return \`Processed: \${input.message}\`;
  }
}

export default ${className}Tool;`;

    await writeFile(join(toolsDir, fileName), toolContent);

    console.log(
      `Tool ${toolName} created successfully at src/tools/${fileName}`
    );
  } catch (error) {
    console.error("Error creating tool:", error);
    process.exit(1);
  }
}
