import { existsSync } from "fs";
import { join } from "path";

export async function deploy(
  target: string = "docker-compose",
  options?: {
    build?: boolean;
    detached?: boolean;
    env?: string;
    port?: number;
  }
) {
  const projectRoot = process.cwd();

  // Check if we're in a valid MCP project
  const packageJsonPath = join(projectRoot, "package.json");
  const dockerfilePath = join(projectRoot, "Dockerfile");
  const dockerComposePath = join(projectRoot, "docker-compose.yml");

  if (!existsSync(packageJsonPath)) {
    throw new Error(
      "Not in a valid MCP project. Make sure package.json exists."
    );
  }

  if (!existsSync(dockerfilePath)) {
    throw new Error(
      "Dockerfile not found. Make sure you're in a project with Docker support."
    );
  }

  const packageJson = JSON.parse(await Bun.file(packageJsonPath).text());
  const projectName = packageJson.name || "mcp-server";

  console.log(`üöÄ Deploying ${projectName} using ${target}...`);

  switch (target) {
    case "docker-compose":
      await deployWithDockerCompose(projectName, options);
      break;
    case "docker":
      await deployWithDocker(projectName, options);
      break;
    default:
      throw new Error(
        `Unsupported deployment target: ${target}. Use 'docker' or 'docker-compose'.`
      );
  }
}

async function deployWithDockerCompose(
  projectName: string,
  options?: {
    build?: boolean;
    detached?: boolean;
    env?: string;
  }
) {
  const dockerComposePath = join(process.cwd(), "docker-compose.yml");

  if (!existsSync(dockerComposePath)) {
    throw new Error(
      "docker-compose.yml not found. This project doesn't support Docker Compose deployment."
    );
  }

  console.log("üì¶ Building and starting with Docker Compose...");

  const buildFlag = options?.build !== false ? "--build" : "";
  const detachedFlag = options?.detached !== false ? "-d" : "";

  const composeArgs = ["docker-compose", "up", buildFlag, detachedFlag].filter(
    Boolean
  );

  const result = Bun.spawnSync(composeArgs, {
    stdout: "inherit",
    stderr: "inherit",
    env: {
      ...process.env,
      ...(options?.env && { NODE_ENV: options.env }),
    },
  });

  if (!result.success) {
    throw new Error("Docker Compose deployment failed");
  }

  console.log(`‚úÖ ${projectName} deployed successfully with Docker Compose!`);

  if (options?.detached !== false) {
    console.log(`
üìç Your MCP server is now running in the background.

View logs:     docker-compose logs -f
Stop server:   docker-compose down
Restart:       docker-compose restart
`);
  }
}

async function deployWithDocker(
  projectName: string,
  options?: {
    build?: boolean;
    detached?: boolean;
    env?: string;
    port?: number;
  }
) {
  const port = options?.port || 8080;
  const envFile = join(process.cwd(), ".env.local");

  console.log("üî® Building Docker image...");

  if (options?.build !== false) {
    const buildResult = Bun.spawnSync(
      ["docker", "build", "-t", projectName, "."],
      {
        stdout: "inherit",
        stderr: "inherit",
      }
    );

    if (!buildResult.success) {
      throw new Error("Docker image build failed");
    }
  }

  console.log("üöÄ Starting Docker container...");

  const runArgs = [
    "docker",
    "run",
    ...(options?.detached !== false ? ["-d"] : []),
    "-p",
    `${port}:${port}`,
    ...(existsSync(envFile) ? ["--env-file", ".env.local"] : []),
    ...(options?.env ? ["-e", `NODE_ENV=${options.env}`] : []),
    "--name",
    `${projectName}-container`,
    projectName,
  ];

  const runResult = Bun.spawnSync(runArgs, {
    stdout: "inherit",
    stderr: "inherit",
  });

  if (!runResult.success) {
    // Try to remove existing container and retry
    console.log("üîÑ Removing existing container and retrying...");
    Bun.spawnSync(["docker", "rm", "-f", `${projectName}-container`], {
      stdout: "pipe",
      stderr: "pipe",
    });

    const retryResult = Bun.spawnSync(runArgs, {
      stdout: "inherit",
      stderr: "inherit",
    });

    if (!retryResult.success) {
      throw new Error("Docker container start failed");
    }
  }

  console.log(`‚úÖ ${projectName} deployed successfully with Docker!`);
  console.log(`
üìç Your MCP server is running on port ${port}.

Health check:  curl http://localhost:${port}/health
View logs:     docker logs ${projectName}-container -f
Stop server:   docker stop ${projectName}-container
Remove:        docker rm ${projectName}-container
`);
}
