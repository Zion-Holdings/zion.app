export function generateReadme(projectName: string): string {
  return `# ${projectName}

A Model Context Protocol (MCP) server built with TypeScript and the MCP SDK.

## Installation

\`\`\`bash
bun install
\`\`\`

## Development

1. \`bun install\` to install dependencies
2. Copy \`.env.example\` to \`.env.local\` and configure your environment variables
3. \`bun run build\` to build the project  
4. \`bun run start\` to start the server

## Quick Deploy

Deploy your MCP server with one command:

\`\`\`bash
# Deploy with Docker Compose (recommended)
mcp-toolkit deploy

# Deploy with Docker directly
mcp-toolkit deploy docker

# Deploy in foreground to see logs
mcp-toolkit deploy --no-detach
\`\`\`

### Managing Environment Variables

This project uses mcp-toolkit's built-in secrets management:

\`\`\`bash
# Initialize secrets configuration (already done)
mcp-toolkit env init

# Add a new secret
mcp-toolkit env add MY_SECRET

# List all configured secrets
mcp-toolkit env list

# Generate/update .env files
mcp-toolkit env generate
\`\`\`

## Build

Build the project for production:

\`\`\`bash
bun run build
\`\`\`

## Docker

### Quick Deploy (Recommended)

Use the built-in deploy command for easy deployment:

\`\`\`bash
mcp-toolkit deploy        # Docker Compose (recommended)
mcp-toolkit deploy docker # Direct Docker
\`\`\`

### Manual Docker Commands

If you prefer manual control:

\`\`\`bash
# Build and run with Docker Compose
docker-compose up --build -d

# Or build and run with Docker directly
docker build -t ${projectName} .
docker run -p 8080:8080 --env-file .env.local ${projectName}
\`\`\`

The project includes a ready-to-use \`docker-compose.yml\` file with production-ready configuration.

## Project Structure

\`\`\`
${projectName}/
├── src/
│   ├── tools/          # MCP Tools
│   ├── resources/      # MCP Resources  
│   ├── prompts/        # MCP Prompts
│   └── index.ts        # Server entry point
├── package.json
├── tsconfig.json
└── README.md
\`\`\`

## Adding Components

You can add more components to your MCP server using mcp-toolkit:

\`\`\`bash
# Add a new tool
mcp-toolkit add-tool my-tool

# Add a new resource  
mcp-toolkit add-resource my-resource

# Add a new prompt
mcp-toolkit add-prompt my-prompt
\`\`\`

## Environment Variables

The following environment variables are configured for this project:

- \`API_KEY\`: API key for external service integration (optional)
- \`DATABASE_URL\`: Database connection string (optional)  
- \`PORT\`: Server port number (optional, defaults to 8080)

See \`.env.example\` for example values and \`.env.config.json\` for full configuration.

## Tool Development

Example tool structure:

\`\`\`typescript
import { MCPTool } from "@magneticwatermelon/mcp-toolkit";
import { z } from "zod";

interface MyToolInput {
  message: string;
}

class MyTool extends MCPTool<MyToolInput> {
  name = "my_tool";
  description = "Describes what your tool does";

  schema = {
    message: {
      type: z.string(),
      description: "Description of this input parameter",
    },
  };

  async execute(input: MyToolInput) {
    // Your tool logic here
    return \`Processed: \${input.message}\`;
  }
}

export default MyTool;
\`\`\`

## Using with Claude Desktop

### Local Development

Add this configuration to your Claude Desktop config file:

**MacOS**: \`~/Library/Application Support/Claude/claude_desktop_config.json\`
**Windows**: \`%APPDATA%/Claude/claude_desktop_config.json\`

\`\`\`json
{
  "mcpServers": {
    "${projectName}": {
      "command": "bun",
      "args": ["run", "/absolute/path/to/${projectName}/src/index.ts"]
    }
  }
}
\`\`\`

### After Publishing to npm

Once you publish your MCP server to npm:

\`\`\`json
{
  "mcpServers": {
    "${projectName}": {
      "command": "npx",
      "args": ["${projectName}"]
    }
  }
}
\`\`\`

## Using with Cursor

Cursor supports MCP servers through its AI features configuration.

### Local Development

Add this configuration to your Cursor settings:

**MacOS**: \`~/Library/Application Support/Cursor/User/settings.json\`
**Windows**: \`%APPDATA%/Cursor/User/settings.json\`
**Linux**: \`~/.config/Cursor/User/settings.json\`

\`\`\`json
{
  "cursor.mcpServers": {
    "${projectName}": {
      "command": "bun",
      "args": ["run", "/absolute/path/to/${projectName}/src/index.ts"]
    }
  }
}
\`\`\`

### After Publishing to npm

Once published, you can reference it directly:

\`\`\`json
{
  "cursor.mcpServers": {
    "${projectName}": {
      "command": "npx",
      "args": ["${projectName}"]
    }
  }
}
\`\`\`

### Cursor Workspace Configuration

Alternatively, you can add MCP server configuration to your workspace settings in \`.vscode/settings.json\`:

\`\`\`json
{
  "cursor.mcpServers": {
    "${projectName}": {
      "command": "bun",
      "args": ["run", "./src/index.ts"],
      "cwd": "\${workspaceFolder}"
    }
  }
}
\`\`\`

This approach allows the MCP server to be automatically available when working in this specific project.

## Publishing to npm

1. Update your package.json:
   - Ensure \`name\` is unique and follows npm naming conventions
   - Set appropriate \`version\`
   - Add \`description\`, \`author\`, \`license\`, etc.
   - Make sure \`bin\` points to the correct entry file

2. Build and test locally:
   \`\`\`bash
   bun run build
   bun link
   ${projectName}  # Test your server locally
   \`\`\`

3. Login to npm (create account if necessary):
   \`\`\`bash
   npm login
   \`\`\`

4. Publish your package:
   \`\`\`bash
   npm publish
   \`\`\`

## Development Workflow

1. Make changes to your tools, resources, or prompts
2. Test locally using \`bun dev\`
3. Build with \`bun run build\` when ready
4. The server will automatically load your components on startup

## Learn More

- [Model Context Protocol Documentation](https://modelcontextprotocol.io)
- [MCP SDK Documentation](https://github.com/modelcontextprotocol/typescript-sdk)
- [Claude Desktop MCP Guide](https://docs.anthropic.com/en/docs/build-with-claude/mcp)
- [Cursor MCP Guide](https://docs.cursor.com/context/model-context-protocol)
`;
}
