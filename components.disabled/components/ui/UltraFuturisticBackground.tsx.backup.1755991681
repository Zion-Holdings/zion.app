<<<<<<< HEAD
import React, { useEffect, useRef, useState } from 'react';
import { motion } from 'framer-motion';

interface UltraFuturisticBackgroundProps {
  children: React.ReactNode;
  variant?: 'default' | 'quantum' | 'holographic' | 'cyberpunk' | 'neural' | 'space' | 'quantum-entanglement' | 'holographic-matrix' | 'neural-quantum-cyberpunk';
  intensity?: 'low' | 'medium' | 'high';
}

export default function UltraFuturisticBackground({ 
  children, 
  variant = 'default',
  intensity = 'medium' 
}: UltraFuturisticBackgroundProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | undefined>(undefined);
  const [isClient, setIsClient] = useState(false);
=======
import React, { useEffect, useRef } from 'react';

interface UltraFuturisticBackgroundProps {
  children?: React.ReactNode;
  intensity?: 'low' | 'medium' | 'high';
  variant?: 'quantum' | 'holographic' | 'cyberpunk' | 'neural';
  className?: string;
}

const UltraFuturisticBackground: React.FC<UltraFuturisticBackgroundProps> = ({
  children,
  intensity = 'medium',
  variant = 'quantum',
  className = ''
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-8c70

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    if (!isClient) return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    let animationFrameId: number;
    let particles: Particle[] = [];
<<<<<<< HEAD
    let holographicGrid: GridPoint[] = [];
    let quantumWaves: Wave[] = [];
    let neuralConnections: NeuralConnection[] = [];
    let cyberpunkEffects: CyberpunkEffect[] = [];
    let quantumEntanglements: QuantumEntanglement[] = [];
=======
    let holographicElements: HolographicElement[] = [];
    let neuralConnections: NeuralConnection[] = [];
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-8c70

    // Set canvas size
    const resizeCanvas = () => {
      if (containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
      }
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

<<<<<<< HEAD
    // Enhanced Particle class
=======
    // Particle class
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-8c70
    class Particle {
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
<<<<<<< HEAD
      color: string;
      type: 'energy' | 'data' | 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
      rotation: number;
      rotationSpeed: number;
      pulse: number;
      pulseSpeed: number;
      quantumState: number;
      holographicLayer: number;
      neuralConnection: number;
      cyberpunkGlow: number;

      constructor(x: number, y: number, type: 'energy' | 'data' | 'quantum' | 'holographic' | 'neural' | 'cyberpunk') {
        this.x = x;
        this.y = y;
        this.vx = (Math.random() - 0.5) * 3;
        this.vy = (Math.random() - 0.5) * 3;
        this.size = Math.random() * 4 + 2;
        this.maxLife = Math.random() * 150 + 100;
        this.life = this.maxLife;
        this.type = type;
        this.rotation = Math.random() * Math.PI * 2;
        this.rotationSpeed = (Math.random() - 0.5) * 0.2;
        this.pulse = Math.random() * Math.PI * 2;
        this.pulseSpeed = Math.random() * 0.1 + 0.05;
        this.quantumState = Math.random() * Math.PI * 2;
        this.holographicLayer = Math.random() * 5;
        this.neuralConnection = Math.random() * 8;
        this.cyberpunkGlow = Math.random() * Math.PI * 2;
        
        switch (type) {
          case 'energy':
            this.color = `hsl(${200 + Math.random() * 60}, 80%, 70%)`;
            break;
          case 'data':
            this.color = `hsl(${120 + Math.random() * 60}, 80%, 70%)`;
            break;
          case 'quantum':
            this.color = `hsl(${280 + Math.random() * 60}, 80%, 70%)`;
            break;
          case 'holographic':
            this.color = `hsl(${0 + Math.random() * 60}, 80%, 70%)`;
            break;
          case 'neural':
            this.color = `hsl(${60 + Math.random() * 60}, 80%, 70%)`;
            break;
          case 'cyberpunk':
            this.color = `hsl(${320 + Math.random() * 60}, 80%, 70%)`;
            break;
=======
      life: number;
      maxLife: number;
      color: string;
      type: 'quantum' | 'holographic' | 'cyberpunk' | 'neural';

      constructor(x: number, y: number, type: 'quantum' | 'holographic' | 'cyberpunk' | 'neural') {
        this.x = x;
        this.y = y;
        this.vx = (Math.random() - 0.5) * 2;
        this.vy = (Math.random() - 0.5) * 2;
        this.size = Math.random() * 3 + 1;
        this.life = Math.random() * 100 + 50;
        this.maxLife = this.life;
        this.type = type;
        
        switch (type) {
          case 'quantum':
            this.color = `hsl(${200 + Math.random() * 60}, 70%, 60%)`;
            break;
          case 'holographic':
            this.color = `hsl(${280 + Math.random() * 80}, 80%, 70%)`;
            break;
          case 'cyberpunk':
            this.color = `hsl(${0 + Math.random() * 60}, 90%, 60%)`;
            break;
          case 'neural':
            this.color = `hsl(${120 + Math.random() * 60}, 80%, 60%)`;
            break;
        }
      }

      update() {
        this.x += this.vx;
        this.y += this.vy;
        this.life--;

        // Bounce off edges
        if (this.x <= 0 || this.x >= canvas.width) this.vx *= -1;
        if (this.y <= 0 || this.y >= canvas.height) this.vy *= -1;

        // Add quantum uncertainty
        if (this.type === 'quantum' && Math.random() < 0.01) {
          this.vx += (Math.random() - 0.5) * 0.5;
          this.vy += (Math.random() - 0.5) * 0.5;
        }
      }

      draw() {
        if (!ctx) return;
        
        const alpha = this.life / this.maxLife;
        ctx.save();
        ctx.globalAlpha = alpha;
        
        switch (this.type) {
          case 'quantum':
            // Quantum particle with wave function
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.fill();
            
            // Wave function rings
            for (let i = 1; i <= 3; i++) {
              ctx.beginPath();
              ctx.arc(this.x, this.y, this.size * i, 0, Math.PI * 2);
              ctx.strokeStyle = this.color;
              ctx.lineWidth = 0.5;
              ctx.globalAlpha = alpha * (1 - i * 0.3);
              ctx.stroke();
            }
            break;
            
          case 'holographic':
            // Holographic particle with interference patterns
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.fill();
            
            // Interference rings
            for (let i = 1; i <= 2; i++) {
              ctx.beginPath();
              ctx.arc(this.x, this.y, this.size * i * 1.5, 0, Math.PI * 2);
              ctx.strokeStyle = this.color;
              ctx.lineWidth = 1;
              ctx.globalAlpha = alpha * (1 - i * 0.4);
              ctx.stroke();
            }
            break;
            
          case 'cyberpunk':
            // Cyberpunk particle with energy trails
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.fill();
            
            // Energy trail
            ctx.beginPath();
            ctx.moveTo(this.x, this.y);
            ctx.lineTo(this.x - this.vx * 5, this.y - this.vy * 5);
            ctx.strokeStyle = this.color;
            ctx.lineWidth = 2;
            ctx.globalAlpha = alpha * 0.7;
            ctx.stroke();
            break;
            
          case 'neural':
            // Neural particle with synaptic connections
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.fill();
            
            // Synaptic spikes
            for (let i = 0; i < 4; i++) {
              const angle = (i * Math.PI) / 2;
              const spikeX = this.x + Math.cos(angle) * this.size * 2;
              const spikeY = this.y + Math.sin(angle) * this.size * 2;
              ctx.beginPath();
              ctx.moveTo(this.x, this.y);
              ctx.lineTo(spikeX, spikeY);
              ctx.strokeStyle = this.color;
              ctx.lineWidth = 1;
              ctx.globalAlpha = alpha * 0.8;
              ctx.stroke();
            }
            break;
        }
        
        ctx.restore();
      }
    }

    // Holographic element class
    class HolographicElement {
      x: number;
      y: number;
      size: number;
      rotation: number;
      rotationSpeed: number;
      opacity: number;
      type: 'cube' | 'sphere' | 'pyramid' | 'torus';

      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 50 + 20;
        this.rotation = Math.random() * Math.PI * 2;
        this.rotationSpeed = (Math.random() - 0.5) * 0.02;
        this.opacity = Math.random() * 0.3 + 0.1;
        this.type = ['cube', 'sphere', 'pyramid', 'torus'][Math.floor(Math.random() * 4)] as any;
      }

      update() {
        this.rotation += this.rotationSpeed;
      }

      draw() {
        if (!ctx) return;
        
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rotation);
        ctx.globalAlpha = this.opacity;
        
        switch (this.type) {
          case 'cube':
            this.drawCube();
            break;
          case 'sphere':
            this.drawSphere();
            break;
          case 'pyramid':
            this.drawPyramid();
            break;
          case 'torus':
            this.drawTorus();
            break;
        }
        
        ctx.restore();
      }

      drawCube() {
        const s = this.size / 2;
        ctx.strokeStyle = 'hsl(280, 80%, 70%)';
        ctx.lineWidth = 2;
        
        // Front face
        ctx.beginPath();
        ctx.rect(-s, -s, s * 2, s * 2);
        ctx.stroke();
        
        // Back face
        ctx.beginPath();
        ctx.rect(-s + s * 0.3, -s + s * 0.3, s * 2, s * 2);
        ctx.stroke();
        
        // Connecting lines
        ctx.beginPath();
        ctx.moveTo(-s, -s);
        ctx.lineTo(-s + s * 0.3, -s + s * 0.3);
        ctx.moveTo(s, -s);
        ctx.lineTo(s + s * 0.3, -s + s * 0.3);
        ctx.moveTo(s, s);
        ctx.lineTo(s + s * 0.3, s + s * 0.3);
        ctx.moveTo(-s, s);
        ctx.lineTo(-s + s * 0.3, s + s * 0.3);
        ctx.stroke();
      }

      drawSphere() {
        ctx.strokeStyle = 'hsl(280, 80%, 70%)';
        ctx.lineWidth = 2;
        
        // Main circle
        ctx.beginPath();
        ctx.arc(0, 0, this.size / 2, 0, Math.PI * 2);
        ctx.stroke();
        
        // Latitude lines
        for (let i = 1; i < 3; i++) {
          const y = (this.size / 2) * (i / 3 - 0.5);
          const radius = Math.sqrt((this.size / 2) ** 2 - y ** 2);
          ctx.beginPath();
          ctx.arc(0, y, radius, 0, Math.PI * 2);
          ctx.stroke();
        }
        
        // Longitude lines
        for (let i = 0; i < 4; i++) {
          const angle = (i * Math.PI) / 2;
          ctx.beginPath();
          ctx.moveTo(0, -this.size / 2);
          ctx.lineTo(Math.cos(angle) * this.size / 2, Math.sin(angle) * this.size / 2);
          ctx.stroke();
        }
      }

      drawPyramid() {
        const s = this.size / 2;
        ctx.strokeStyle = 'hsl(280, 80%, 70%)';
        ctx.lineWidth = 2;
        
        // Base
        ctx.beginPath();
        ctx.moveTo(-s, s);
        ctx.lineTo(s, s);
        ctx.lineTo(0, -s);
        ctx.closePath();
        ctx.stroke();
        
        // Back edges
        ctx.beginPath();
        ctx.moveTo(-s, s);
        ctx.lineTo(0, -s);
        ctx.moveTo(s, s);
        ctx.lineTo(0, -s);
        ctx.stroke();
      }

      drawTorus() {
        ctx.strokeStyle = 'hsl(280, 80%, 70%)';
        ctx.lineWidth = 2;
        
        const R = this.size / 3;
        const r = this.size / 6;
        
        // Draw torus rings
        for (let i = 0; i < 8; i++) {
          const angle = (i * Math.PI) / 4;
          const x = Math.cos(angle) * R;
          const y = Math.sin(angle) * R;
          
          ctx.beginPath();
          ctx.arc(x, y, r, 0, Math.PI * 2);
          ctx.stroke();
        }
      }
    }

    // Neural connection class
    class NeuralConnection {
      x1: number;
      y1: number;
      x2: number;
      y2: number;
      strength: number;
      life: number;
      maxLife: number;

      constructor(x1: number, y1: number, x2: number, y2: number) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.strength = Math.random() * 0.5 + 0.5;
        this.life = Math.random() * 100 + 50;
        this.maxLife = this.life;
      }

      update() {
        this.life--;
      }

      draw() {
        if (!ctx) return;
        
        const alpha = this.life / this.maxLife;
        ctx.save();
        ctx.globalAlpha = alpha * this.strength;
        
        // Draw connection line
        ctx.beginPath();
        ctx.moveTo(this.x1, this.y1);
        ctx.lineTo(this.x2, this.y2);
        ctx.strokeStyle = 'hsl(120, 80%, 60%)';
        ctx.lineWidth = 2;
        ctx.stroke();
        
        // Draw connection nodes
        ctx.beginPath();
        ctx.arc(this.x1, this.y1, 3, 0, Math.PI * 2);
        ctx.fillStyle = 'hsl(120, 80%, 60%)';
        ctx.fill();
        
        ctx.beginPath();
        ctx.arc(this.x2, this.y2, 3, 0, Math.PI * 2);
        ctx.fillStyle = 'hsl(120, 80%, 60%)';
        ctx.fill();
        
        ctx.restore();
      }
    }

    // Initialize particles and elements
    const initElements = () => {
      const particleCount = intensity === 'low' ? 50 : intensity === 'medium' ? 100 : 200;
      const holographicCount = intensity === 'low' ? 3 : intensity === 'medium' ? 6 : 10;
      const neuralCount = intensity === 'low' ? 5 : intensity === 'medium' ? 10 : 20;

      // Create particles
      for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle(
          Math.random() * canvas.width,
          Math.random() * canvas.height,
          variant
        ));
      }

      // Create holographic elements
      for (let i = 0; i < holographicCount; i++) {
        holographicElements.push(new HolographicElement());
      }

      // Create neural connections
      for (let i = 0; i < neuralCount; i++) {
        const x1 = Math.random() * canvas.width;
        const y1 = Math.random() * canvas.height;
        const x2 = x1 + (Math.random() - 0.5) * 200;
        const y2 = y1 + (Math.random() - 0.5) * 200;
        neuralConnections.push(new NeuralConnection(x1, y1, x2, y2));
      }
    };

    // Animation loop
    const animate = () => {
      // Clear canvas with fade effect
      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Update and draw holographic elements
      holographicElements.forEach(element => {
        element.update();
        element.draw();
      });

      // Update and draw neural connections
      neuralConnections.forEach(connection => {
        connection.update();
        connection.draw();
      });

      // Update and draw particles
      particles.forEach((particle, index) => {
        particle.update();
        particle.draw();

        // Remove dead particles
        if (particle.life <= 0) {
          particles.splice(index, 1);
          // Add new particle
          particles.push(new Particle(
            Math.random() * canvas.width,
            Math.random() * canvas.height,
            variant
          ));
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-8c70
        }
      });

      // Remove dead neural connections and create new ones
      neuralConnections = neuralConnections.filter(connection => connection.life > 0);
      if (neuralConnections.length < (intensity === 'low' ? 5 : intensity === 'medium' ? 10 : 20)) {
        const x1 = Math.random() * canvas.width;
        const y1 = Math.random() * canvas.height;
        const x2 = x1 + (Math.random() - 0.5) * 200;
        const y2 = y1 + (Math.random() - 0.5) * 200;
        neuralConnections.push(new NeuralConnection(x1, y1, x2, y2));
      }

      animationFrameId = requestAnimationFrame(animate);
    };

<<<<<<< HEAD
      update() {
        this.x += this.vx;
        this.y += this.vy;
        this.life--;
        this.rotation += this.rotationSpeed;
        this.pulse += this.pulseSpeed;
        this.quantumState += 0.02;
        this.cyberpunkGlow += 0.03;
        
        // Bounce off edges with quantum tunneling effect
        if (this.x <= 0 || this.x >= canvas.width) {
          if (this.type === 'quantum' && Math.random() < 0.1) {
            // Quantum tunneling
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
          } else {
            this.vx *= -1;
          }
        }
        if (this.y <= 0 || this.y >= canvas.height) {
          if (this.type === 'quantum' && Math.random() < 0.1) {
            // Quantum tunneling
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
          } else {
            this.vy *= -1;
          }
        }
        
        // Add quantum entanglement effect
        if (this.type === 'quantum' && Math.random() < 0.005) {
          this.x = Math.random() * canvas.width;
          this.y = Math.random() * canvas.height;
        }

        // Neural network connections
        if (this.type === 'neural' && Math.random() < 0.01) {
          this.neuralConnection = Math.random() * 8;
        }
      }
      
      for (let y = 0; y < canvas.height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y + offset);
        ctx.lineTo(canvas.width, y + offset);
        ctx.stroke();
      }
    };

      draw() {
        if (ctx) {
          const alpha = this.life / this.maxLife;
          ctx.save();
          ctx.globalAlpha = alpha;
          ctx.translate(this.x, this.y);
          ctx.rotate(this.rotation);
          
          // Enhanced particle rendering based on type
          switch (this.type) {
            case 'quantum':
              this.drawQuantumParticle(ctx);
              break;
            case 'holographic':
              this.drawHolographicParticle(ctx);
              break;
            case 'neural':
              this.drawNeuralParticle(ctx);
              break;
            case 'cyberpunk':
              this.drawCyberpunkParticle(ctx);
              break;
            default:
              this.drawStandardParticle(ctx);
          }
          
          ctx.restore();
        }
      }

      drawQuantumParticle(ctx: CanvasRenderingContext2D) {
        const pulse = Math.sin(this.pulse) * 0.5 + 0.5;
        const size = this.size * (1 + pulse * 0.5);
        
        // Quantum wave function
        ctx.beginPath();
        for (let i = 0; i < 8; i++) {
          const angle = (i / 8) * Math.PI * 2 + this.quantumState;
          const radius = size * (0.5 + Math.sin(angle * 3) * 0.3);
          const x = Math.cos(angle) * radius;
          const y = Math.sin(angle) * radius;
          if (i === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
        }
        ctx.closePath();
        ctx.fillStyle = this.color;
        ctx.fill();
        
        // Quantum field lines
        ctx.strokeStyle = this.color;
        ctx.lineWidth = 1;
        ctx.stroke();
      }

      drawHolographicParticle(ctx: CanvasRenderingContext2D) {
        const layers = 3;
        for (let i = 0; i < layers; i++) {
          const layerAlpha = (this.life / this.maxLife) * (1 - i / layers) * 0.7;
          const layerSize = this.size * (1 + i * 0.3);
          const layerColor = `hsla(${parseInt(this.color.match(/hsl\((\d+)/)?.[1] || '0')}, 80%, 70%, ${layerAlpha})`;
          
          ctx.globalAlpha = layerAlpha;
          ctx.fillStyle = layerColor;
          ctx.beginPath();
          ctx.arc(0, 0, layerSize, 0, Math.PI * 2);
          ctx.fill();
        }
      }

      drawNeuralParticle(ctx: CanvasRenderingContext2D) {
        const pulse = Math.sin(this.pulse) * 0.5 + 0.5;
        const size = this.size * (1 + pulse * 0.3);
        
        // Neural node
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(0, 0, size, 0, Math.PI * 2);
        ctx.fill();
        
        // Neural connections
        ctx.strokeStyle = this.color;
        ctx.lineWidth = 2;
        ctx.globalAlpha = (this.life / this.maxLife) * 0.5;
        for (let i = 0; i < 3; i++) {
          const angle = (i / 3) * Math.PI * 2 + this.neuralConnection;
          const endX = Math.cos(angle) * size * 2;
          const endY = Math.sin(angle) * size * 2;
          ctx.beginPath();
          ctx.moveTo(0, 0);
          ctx.lineTo(endX, endY);
          ctx.stroke();
        }
      }

      drawCyberpunkParticle(ctx: CanvasRenderingContext2D) {
        const glow = Math.sin(this.cyberpunkGlow) * 0.5 + 0.5;
        const size = this.size * (1 + glow * 0.5);
        
        // Cyberpunk glow effect
        const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, size * 2);
        gradient.addColorStop(0, this.color);
        gradient.addColorStop(0.5, this.color + '80');
        gradient.addColorStop(1, 'transparent');
        
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(0, 0, size * 2, 0, Math.PI * 2);
        ctx.fill();
        
        // Core particle
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(0, 0, size, 0, Math.PI * 2);
        ctx.fill();
      }

      drawStandardParticle(ctx: CanvasRenderingContext2D) {
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(0, 0, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    // Enhanced GridPoint class for holographic effects
    class GridPoint {
      x: number;
      y: number;
      size: number;
      alpha: number;
      pulse: number;
      pulseSpeed: number;

      constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
        this.size = Math.random() * 3 + 1;
        this.alpha = Math.random() * 0.5 + 0.2;
        this.pulse = Math.random() * Math.PI * 2;
        this.pulseSpeed = Math.random() * 0.02 + 0.01;
      }

      update() {
        this.pulse += this.pulseSpeed;
      }

      draw(ctx: CanvasRenderingContext2D) {
        const pulse = Math.sin(this.pulse) * 0.5 + 0.5;
        ctx.globalAlpha = this.alpha * pulse;
        ctx.fillStyle = '#00ffff';
        ctx.fillRect(this.x - this.size / 2, this.y - this.size / 2, this.size, this.size);
      }
    }

    // Enhanced Wave class for quantum effects
    class Wave {
      x: number;
      y: number;
      radius: number;
      maxRadius: number;
      speed: number;
      alpha: number;
      color: string;

      constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
        this.radius = 0;
        this.maxRadius = Math.random() * 200 + 100;
        this.speed = Math.random() * 2 + 1;
        this.alpha = 1;
        this.color = `hsl(${280 + Math.random() * 40}, 70%, 60%)`;
      }

      update() {
        this.radius += this.speed;
        this.alpha = 1 - (this.radius / this.maxRadius);
        return this.alpha > 0;
      }

      draw(ctx: CanvasRenderingContext2D) {
        ctx.strokeStyle = this.color;
        ctx.lineWidth = 2;
        ctx.globalAlpha = this.alpha;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.stroke();
      }
    }

    // Neural Connection class
    class NeuralConnection {
      x1: number;
      y1: number;
      x2: number;
      y2: number;
      strength: number;
      alpha: number;
      pulse: number;

      constructor() {
        this.x1 = Math.random() * canvas.width;
        this.y1 = Math.random() * canvas.height;
        this.x2 = Math.random() * canvas.width;
        this.y2 = Math.random() * canvas.height;
        this.strength = Math.random() * 0.5 + 0.5;
        this.alpha = Math.random() * 0.3 + 0.2;
        this.pulse = Math.random() * Math.PI * 2;
      }

      update() {
        this.pulse += 0.02;
      }

      draw(ctx: CanvasRenderingContext2D) {
        const pulse = Math.sin(this.pulse) * 0.5 + 0.5;
        ctx.strokeStyle = `rgba(0, 255, 255, ${this.alpha * pulse})`;
        ctx.lineWidth = this.strength * 3;
        ctx.beginPath();
        ctx.moveTo(this.x1, this.y1);
        ctx.lineTo(this.x2, this.y2);
        ctx.stroke();
      }
    }

    // Cyberpunk Effect class
    class CyberpunkEffect {
      x: number;
      y: number;
      size: number;
      alpha: number;
      rotation: number;
      rotationSpeed: number;
      color: string;

      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 20 + 10;
        this.alpha = Math.random() * 0.5 + 0.3;
        this.rotation = Math.random() * Math.PI * 2;
        this.rotationSpeed = (Math.random() - 0.5) * 0.1;
        this.color = `hsl(${320 + Math.random() * 40}, 80%, 60%)`;
      }

      update() {
        this.rotation += this.rotationSpeed;
      }

      draw(ctx: CanvasRenderingContext2D) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rotation);
        ctx.globalAlpha = this.alpha;
        
        // Cyberpunk geometric shape
        ctx.strokeStyle = this.color;
        ctx.lineWidth = 2;
        ctx.beginPath();
        for (let i = 0; i < 6; i++) {
          const angle = (i / 6) * Math.PI * 2;
          const x = Math.cos(angle) * this.size;
          const y = Math.sin(angle) * this.size;
          if (i === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
        }
        ctx.closePath();
        ctx.stroke();
        
        ctx.restore();
      }
    }

    // Quantum Entanglement class
    class QuantumEntanglement {
      particles: Array<{x: number, y: number, size: number, alpha: number}>;
      connections: Array<{from: number, to: number, strength: number}>;
      pulse: number;

      constructor() {
        this.particles = [];
        this.connections = [];
        this.pulse = Math.random() * Math.PI * 2;
        
        // Create entangled particles
        for (let i = 0; i < 5; i++) {
          this.particles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            size: Math.random() * 4 + 2,
            alpha: Math.random() * 0.5 + 0.3
          });
        }
        
        // Create entanglement connections
        for (let i = 0; i < 3; i++) {
          this.connections.push({
            from: Math.floor(Math.random() * this.particles.length),
            to: Math.floor(Math.random() * this.particles.length),
            strength: Math.random() * 0.5 + 0.5
          });
        }
      }

      update() {
        this.pulse += 0.03;
        
        // Update particle positions with quantum uncertainty
        this.particles.forEach(particle => {
          if (Math.random() < 0.01) {
            particle.x += (Math.random() - 0.5) * 20;
            particle.y += (Math.random() - 0.5) * 20;
          }
        });
      }

      draw(ctx: CanvasRenderingContext2D) {
        const pulse = Math.sin(this.pulse) * 0.5 + 0.5;
        
        // Draw entanglement connections
        this.connections.forEach(connection => {
          const from = this.particles[connection.from];
          const to = this.particles[connection.to];
          
          ctx.strokeStyle = `rgba(255, 0, 255, ${connection.strength * pulse})`;
          ctx.lineWidth = connection.strength * 2;
          ctx.beginPath();
          ctx.moveTo(from.x, from.y);
          ctx.lineTo(to.x, to.y);
          ctx.stroke();
        });
        
        // Draw particles
        this.particles.forEach(particle => {
          ctx.fillStyle = `rgba(255, 0, 255, ${particle.alpha * pulse})`;
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          ctx.fill();
        });
      }
    }

    // Initialize effects based on variant
    const initializeEffects = () => {
      particles = [];
      holographicGrid = [];
      quantumWaves = [];
      neuralConnections = [];
      cyberpunkEffects = [];
      quantumEntanglements = [];

      const particleCount = intensity === 'high' ? 1200 : intensity === 'medium' ? 800 : 400;
      
      for (let i = 0; i < particleCount; i++) {
        let particleType: 'energy' | 'data' | 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
        
        switch (variant) {
          case 'quantum':
            particleType = Math.random() < 0.7 ? 'quantum' : 'energy';
            break;
          case 'holographic':
            particleType = Math.random() < 0.7 ? 'holographic' : 'data';
            break;
          case 'neural':
            particleType = Math.random() < 0.7 ? 'neural' : 'data';
            break;
          case 'cyberpunk':
            particleType = Math.random() < 0.7 ? 'cyberpunk' : 'energy';
            break;
          case 'quantum-entanglement':
            particleType = Math.random() < 0.6 ? 'quantum' : 'energy';
            break;
          case 'holographic-matrix':
            particleType = Math.random() < 0.6 ? 'holographic' : 'data';
            break;
          case 'neural-quantum-cyberpunk':
            particleType = ['neural', 'quantum', 'cyberpunk'][Math.floor(Math.random() * 3)] as 'energy' | 'data' | 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
            break;
          default:
            particleType = ['energy', 'data', 'quantum', 'holographic'][Math.floor(Math.random() * 4)] as 'energy' | 'data' | 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
        }
        
        particles.push(new Particle(
          Math.random() * canvas.width,
          Math.random() * canvas.height,
          particleType
        ));
      }

      // Initialize grid for holographic effects
      if (variant.includes('holographic')) {
        const gridSize = 50;
        for (let x = 0; x < canvas.width; x += gridSize) {
          for (let y = 0; y < canvas.height; y += gridSize) {
            holographicGrid.push(new GridPoint(x, y));
          }
        }
      }

      // Initialize quantum waves
      if (variant.includes('quantum')) {
        for (let i = 0; i < 5; i++) {
          quantumWaves.push(new Wave(
            Math.random() * canvas.width,
            Math.random() * canvas.height
          ));
        }
      }

      // Initialize neural connections
      if (variant.includes('neural')) {
        for (let i = 0; i < 20; i++) {
          neuralConnections.push(new NeuralConnection());
        }
      }

      // Initialize cyberpunk effects
      if (variant.includes('cyberpunk')) {
        for (let i = 0; i < 15; i++) {
          cyberpunkEffects.push(new CyberpunkEffect());
        }
      }

      // Initialize quantum entanglements
      if (variant.includes('quantum-entanglement')) {
        for (let i = 0; i < 8; i++) {
          quantumEntanglements.push(new QuantumEntanglement());
        }
      }
    };

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Update and draw particles
              particles = particles.filter(particle => {
          particle.update();
          particle.draw();
          return particle.life > 0;
        });

      // Update and draw grid
      holographicGrid.forEach(point => {
        point.update();
        point.draw(ctx);
      });

      // Update and draw waves
      quantumWaves = quantumWaves.filter(wave => {
        const alive = wave.update();
        if (alive) wave.draw(ctx);
        return alive;
      });

      // Update and draw neural connections
      neuralConnections.forEach(connection => {
        connection.update();
        connection.draw(ctx);
      });

      // Update and draw cyberpunk effects
      cyberpunkEffects.forEach(effect => {
        effect.update();
        effect.draw(ctx);
      });

      // Update and draw quantum entanglements
      quantumEntanglements.forEach(entanglement => {
        entanglement.update();
        entanglement.draw(ctx);
      });

      // Add new particles to maintain count
      if (particles.length < (intensity === 'high' ? 1200 : intensity === 'medium' ? 800 : 400)) {
        const particleType = ['energy', 'data', 'quantum', 'holographic', 'neural', 'cyberpunk'][Math.floor(Math.random() * 6)];
        particles.push(new Particle(
          Math.random() * canvas.width,
          Math.random() * canvas.height,
          particleType as any
        ));
      }

      // Add new waves
      if (quantumWaves.length < 5 && variant.includes('quantum')) {
        quantumWaves.push(new Wave(
          Math.random() * canvas.width,
          Math.random() * canvas.height
        ));
      }

      animationFrameId = requestAnimationFrame(animate);
    };

    // Initialize and start animation
    initializeEffects();
    animate();

    // Cleanup
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
    };

    window.addEventListener('resize', handleResize);

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      window.removeEventListener('resize', handleResize);
    };
  }, [variant, intensity, isClient]);

  const backgroundVariants = {
    quantum: 'bg-gradient-to-br from-purple-900 via-indigo-900 to-purple-900',
    holographic: 'bg-gradient-to-br from-cyan-900 via-blue-900 to-cyan-900',
    cyberpunk: 'bg-gradient-to-br from-red-900 via-orange-900 to-red-900',
    neural: 'bg-gradient-to-br from-emerald-900 via-green-900 to-emerald-900',
    space: 'bg-gradient-to-br from-blue-900 via-indigo-900 to-purple-900',
    default: 'bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900'
  };
=======
    initElements();
    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, [intensity, variant]);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-8c70

  return (
    <div ref={containerRef} className={`relative w-full h-full ${className}`}>
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full pointer-events-none"
<<<<<<< HEAD
        style={{ zIndex: -1 }}
      />
      {children}
=======
        style={{ zIndex: 0 }}
      />
      <div className="relative z-10 w-full h-full">
        {children}
      </div>
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-8c70
    </div>
  );
}