import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface QuantumCardProps {
  children: React.ReactNode;
  className?: string;
<<<<<<< HEAD
  variant?: 'quantum' | 'neural' | 'holographic' | 'cyberpunk';
  intensity?: 'low' | 'medium' | 'high';
  interactive?: boolean;
=======
  variant?: 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
  intensity?: 'low' | 'medium' | 'high';
  onClick?: () => void;
  hover?: boolean;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d317
  glow?: boolean;
  border?: boolean;
  shadow?: boolean;
}

const QuantumCard: React.FC<QuantumCardProps> = ({
  children,
  className = '',
  variant = 'quantum',
  intensity = 'medium',
<<<<<<< HEAD
  interactive = true,
=======
  onClick,
  hover = true,
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d317
  glow = true,
  border = true,
  shadow = true
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isPressed, setIsPressed] = useState(false);
  const cardRef = useRef<HTMLDivElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
<<<<<<< HEAD
  const animationRef = useRef<number | undefined>(undefined);

  const variants = {
    quantum: {
      colors: {
        primary: '#00ffff',
        secondary: '#ff00ff',
        accent: '#ffff00',
        background: 'rgba(0, 0, 0, 0.8)',
        border: 'rgba(0, 255, 255, 0.3)',
        glow: 'rgba(0, 255, 255, 0.2)'
      },
      gradient: 'linear-gradient(135deg, #00ffff, #ff00ff, #ffff00)'
    },
    neural: {
      colors: {
        primary: '#ff6b6b',
        secondary: '#4ecdc4',
        accent: '#45b7d1',
        background: 'rgba(26, 26, 46, 0.9)',
        border: 'rgba(255, 107, 107, 0.3)',
        glow: 'rgba(255, 107, 107, 0.2)'
      },
      gradient: 'linear-gradient(135deg, #ff6b6b, #4ecdc4, #45b7d1)'
    },
    holographic: {
      colors: {
        primary: '#ff9ff3',
        secondary: '#54a0ff',
        accent: '#5f27cd',
        background: 'rgba(45, 27, 105, 0.9)',
        border: 'rgba(255, 159, 243, 0.3)',
        glow: 'rgba(255, 159, 243, 0.2)'
      },
      gradient: 'linear-gradient(135deg, #ff9ff3, #54a0ff, #5f27cd)'
    },
    cyberpunk: {
      colors: {
        primary: '#ff006e',
        secondary: '#8338ec',
        accent: '#3a86ff',
        background: 'rgba(30, 30, 30, 0.9)',
        border: 'rgba(255, 0, 110, 0.3)',
        glow: 'rgba(255, 0, 110, 0.2)'
      },
      gradient: 'linear-gradient(135deg, #ff006e, #8338ec, #3a86ff)'
    }
  };

  const currentVariant = variants[variant];
  const intensityMultiplier = {
    low: 0.5,
    medium: 1,
    high: 2
  };
=======
  const animationRef = useRef<number | null>(null);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d317

  // Get variant-specific styles
  const getVariantStyles = () => {
    switch (variant) {
      case 'quantum':
        return {
          borderGradient: 'from-cyan-400 via-blue-500 to-purple-600',
          glowColor: 'rgba(34, 211, 238, 0.3)',
          bgGradient: 'from-slate-900/80 to-slate-800/60',
          textColor: 'text-cyan-400'
        };
      case 'holographic':
        return {
          borderGradient: 'from-pink-400 via-purple-500 to-indigo-600',
          glowColor: 'rgba(236, 72, 153, 0.3)',
          bgGradient: 'from-slate-900/80 to-slate-800/60',
          textColor: 'text-pink-400'
        };
      case 'neural':
        return {
          borderGradient: 'from-green-400 via-emerald-500 to-teal-600',
          glowColor: 'rgba(34, 197, 94, 0.3)',
          bgGradient: 'from-slate-900/80 to-slate-800/60',
          textColor: 'text-green-400'
        };
      case 'cyberpunk':
        return {
          borderGradient: 'from-orange-400 via-red-500 to-pink-600',
          glowColor: 'rgba(251, 146, 60, 0.3)',
          bgGradient: 'from-slate-900/80 to-slate-800/60',
          textColor: 'text-orange-400'
        };
      default:
        return {
          borderGradient: 'from-cyan-400 via-blue-500 to-purple-600',
          glowColor: 'rgba(34, 211, 238, 0.3)',
          bgGradient: 'from-slate-900/80 to-slate-800/60',
          textColor: 'text-cyan-400'
        };
    }
  };

  const variantStyles = getVariantStyles();

  // Canvas animation for quantum effects
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas || !glow) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const resizeCanvas = () => {
      if (cardRef.current) {
        const rect = cardRef.current.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
      }
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    let time = 0;
    const particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      life: number;
      maxLife: number;
    }> = [];

    // Initialize particles
    const initParticles = () => {
      particles.length = 0;
      const count = intensity === 'high' ? 20 : intensity === 'medium' ? 12 : 8;
      
      for (let i = 0; i < count; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          size: Math.random() * 2 + 1,
          life: Math.random() * 100,
          maxLife: 100
        });
      }
    };

<<<<<<< HEAD
    if (interactive) {
      document.addEventListener('mousemove', handleMouseMove);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
    };
  }, [interactive]);

  const cardVariants = {
    initial: {
      scale: 1,
      rotateX: 0,
      rotateY: 0,
      boxShadow: shadow ? `0 0 20px ${currentVariant.colors.glow}` : 'none'
    },
    hover: {
      scale: 1.02,
      rotateX: interactive ? 5 : 0,
      rotateY: interactive ? 5 : 0,
      boxShadow: shadow ? `0 0 40px ${currentVariant.colors.glow}` : 'none',
=======
    const animate = () => {
      time += 1;
      
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particles.forEach((particle, index) => {
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life -= 1;

        // Bounce off edges
        if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;
        if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;

        // Reset particle if it dies
        if (particle.life <= 0) {
          particle.x = Math.random() * canvas.width;
          particle.y = Math.random() * canvas.height;
          particle.life = particle.maxLife;
        }

        // Draw particle
        const alpha = particle.life / particle.maxLife;
        ctx.globalAlpha = alpha * 0.6;
        ctx.fillStyle = variantStyles.glowColor;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();
      });

      ctx.globalAlpha = 1;
      animationRef.current = requestAnimationFrame(animate);
    };

    initParticles();
    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [variant, intensity, glow, variantStyles.glowColor]);

  const cardVariants = {
    initial: { 
      scale: 1,
      rotateX: 0,
      rotateY: 0,
      z: 0
    },
    hover: { 
      scale: 1.02,
      rotateX: 2,
      rotateY: 2,
      z: 20,
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d317
      transition: {
        duration: 0.3,
        ease: "easeOut" as const
      }
    },
<<<<<<< HEAD
    pressed: {
      scale: 0.98,
=======
    pressed: { 
      scale: 0.98,
      rotateX: 1,
      rotateY: 1,
      z: 10,
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d317
      transition: {
        duration: 0.1
      }
    }
  };

<<<<<<< HEAD
  const glowVariants = {
    initial: { opacity: 0, scale: 0.8 },
    hover: { 
      opacity: glow ? 1 : 0, 
      scale: 1.2,
      transition: {
        duration: 0.3,
        ease: "easeOut" as const
      }
    }
  };

  const borderVariants = {
    initial: { opacity: 0 },
    hover: { 
      opacity: border ? 1 : 0,
      transition: {
        duration: 0.3,
        ease: "easeOut" as const
      }
    }
=======
  const borderVariants = {
    initial: { opacity: 0.3 },
    hover: { opacity: 0.8 },
    pressed: { opacity: 0.6 }
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d317
  };

  return (
    <motion.div
      ref={cardRef}
<<<<<<< HEAD
      className={`relative overflow-hidden rounded-xl backdrop-blur-sm ${className}`}
      variants={cardVariants}
      initial="initial"
      animate={isPressed ? "pressed" : isHovered ? "hover" : "initial"}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      onTap={() => setIsPressed(false)}
      style={{
        background: currentVariant.colors.background,
        transformStyle: 'preserve-3d',
        perspective: '1000px'
      }}
    >
      {/* Animated border */}
      <AnimatePresence>
        {border && (
          <motion.div
            className="absolute inset-0 rounded-xl"
            variants={borderVariants}
            style={{
              background: currentVariant.gradient,
              padding: '2px'
            }}
          >
            <div 
              className="w-full h-full rounded-xl"
              style={{ background: currentVariant.colors.background }}
            />
          </motion.div>
        )}
      </AnimatePresence>

      {/* Glow effect */}
      <AnimatePresence>
        {glow && (
          <motion.div
            className="absolute inset-0 rounded-xl pointer-events-none"
            variants={glowVariants}
            style={{
              background: `radial-gradient(circle at ${mousePosition.x}px ${mousePosition.y}px, ${currentVariant.colors.glow} 0%, transparent 50%)`,
              filter: 'blur(20px)'
            }}
          />
        )}
      </AnimatePresence>

      {/* Quantum particles overlay */}
      {variant === 'quantum' && (
        <div className="absolute inset-0 pointer-events-none">
          {[...Array(5)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-1 h-1 rounded-full"
              style={{
                background: currentVariant.colors.primary,
                left: `${20 + i * 15}%`,
                top: `${30 + i * 10}%`
              }}
              animate={{
                scale: [1, 1.5, 1],
                opacity: [0.3, 1, 0.3],
                y: [0, -10, 0]
              }}
              transition={{
                duration: 2 + i * 0.5,
                repeat: Infinity,
                ease: 'easeInOut'
              }}
            />
          ))}
        </div>
      )}

      {/* Neural network overlay */}
      {variant === 'neural' && (
        <div className="absolute inset-0 pointer-events-none">
          <svg className="w-full h-full" viewBox="0 0 100 100">
            <motion.path
              d="M20,30 Q50,10 80,30 Q50,50 20,70 Q50,90 80,70"
              stroke={currentVariant.colors.primary}
              strokeWidth="0.5"
              fill="none"
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ 
                pathLength: isHovered ? 1 : 0, 
                opacity: isHovered ? 0.6 : 0 
              }}
              transition={{ duration: 1, ease: 'easeInOut' }}
            />
          </svg>
        </div>
      )}

      {/* Holographic scan lines */}
      {variant === 'holographic' && (
        <div className="absolute inset-0 pointer-events-none overflow-hidden">
          {[...Array(20)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-full h-px"
              style={{
                background: currentVariant.colors.primary,
                top: `${i * 5}%`,
                opacity: 0.3
              }}
              animate={{
                x: ['-100%', '100%']
              }}
              transition={{
                duration: 3 + i * 0.1,
                repeat: Infinity,
                ease: 'linear'
              }}
            />
          ))}
        </div>
      )}

      {/* Cyberpunk grid */}
      {variant === 'cyberpunk' && (
        <div className="absolute inset-0 pointer-events-none">
          <div 
            className="w-full h-full"
            style={{
              backgroundImage: `
                linear-gradient(rgba(255, 0, 110, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(255, 0, 110, 0.1) 1px, transparent 1px)
              `,
              backgroundSize: '20px 20px'
            }}
          />
        </div>
      )}

      {/* Content */}
      <div className="relative z-10 p-6">
        {children}
      </div>

      {/* Intensity indicator */}
      <div 
        className="absolute top-2 right-2 w-2 h-2 rounded-full"
        style={{
          background: currentVariant.colors.primary,
          opacity: intensityMultiplier[intensity] * 0.5 + 0.5
        }}
      />
=======
      className={`relative group ${className}`}
      variants={cardVariants}
      initial="initial"
      animate={isPressed ? "pressed" : isHovered ? "hover" : "initial"}
      onHoverStart={() => hover && setIsHovered(true)}
      onHoverEnd={() => hover && setIsHovered(false)}
      onTapStart={() => setIsPressed(true)}
      onTap={() => setIsPressed(false)}
      onClick={onClick}
      style={{
        perspective: '1000px',
        transformStyle: 'preserve-3d'
      }}
    >
      {/* Animated border */}
      {border && (
        <motion.div
          className={`absolute inset-0 rounded-xl bg-gradient-to-r ${variantStyles.borderGradient} p-[2px]`}
          variants={borderVariants}
          initial="initial"
          animate={isHovered ? "hover" : "initial"}
        >
          <div className="w-full h-full rounded-xl bg-gradient-to-br from-slate-900/90 to-slate-800/70" />
        </motion.div>
      )}

      {/* Main card content */}
      <div
        className={`relative rounded-xl p-6 bg-gradient-to-br ${variantStyles.bgGradient} backdrop-blur-sm
                   ${shadow ? 'shadow-2xl' : ''} 
                   ${glow && isHovered ? 'shadow-cyan-500/25' : ''}
                   transition-all duration-300 ease-out
                   ${onClick ? 'cursor-pointer' : ''}`}
        style={{
          transform: 'translateZ(0)',
          border: border ? 'none' : '1px solid rgba(148, 163, 184, 0.2)'
        }}
      >
        {/* Quantum particles canvas */}
        {glow && (
          <canvas
            ref={canvasRef}
            className="absolute inset-0 w-full h-full rounded-xl pointer-events-none opacity-60"
            style={{ zIndex: -1 }}
          />
        )}

        {/* Content */}
        <div className="relative z-10">
          {children}
        </div>

        {/* Hover effects */}
        {hover && (
          <AnimatePresence>
            {isHovered && (
              <motion.div
                className={`absolute inset-0 rounded-xl bg-gradient-to-r ${variantStyles.borderGradient} opacity-20`}
                initial={{ opacity: 0 }}
                animate={{ opacity: 0.2 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
                style={{ zIndex: -1 }}
              />
            )}
          </AnimatePresence>
        )}
      </div>

      {/* Glow effect */}
      {glow && (
        <div
          className={`absolute inset-0 rounded-xl bg-gradient-to-r ${variantStyles.borderGradient} opacity-0 blur-xl transition-opacity duration-300`}
          style={{
            zIndex: -2,
            opacity: isHovered ? 0.3 : 0
          }}
        />
      )}
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d317
    </motion.div>
  );
};

export default QuantumCard;