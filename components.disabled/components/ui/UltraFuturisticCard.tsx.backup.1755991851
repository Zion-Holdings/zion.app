<<<<<<< HEAD
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Sparkles, Zap, Brain, Atom, Shield, Rocket, Star, Check, ArrowRight, ExternalLink, TrendingUp, Users, Globe, Lock, Cpu, Database, BarChart3, Clock, Target, Building, Award, DollarSign, ChartBar, Code, BookOpen, Activity, Smartphone, Palette, Search, MessageSquare, FileText, Calendar, CreditCard, Settings, Mail, Phone, MapPin } from 'lucide-react';

interface UltraFuturisticCardProps {
  children: React.ReactNode;
  variant?: 'default' | 'holographic' | 'quantum' | 'cyberpunk' | 'neural' | 'quantum-holographic' | 'quantum-advanced' | 'holographic-advanced' | 'neural-quantum' | 'quantum-cyberpunk' | 'holographic-neural' | 'quantum-holographic-advanced' | 'quantum-matrix' | 'neural-cyberpunk' | 'holographic-quantum' | 'quantum-neural-advanced' | 'cyberpunk-holographic' | 'quantum-space' | 'ai-futuristic' | 'quantum-entanglement' | 'holographic-matrix' | 'neural-quantum-cyberpunk';
  className?: string;
  onClick?: () => void;
  interactive?: boolean;
  glowIntensity?: 'low' | 'medium' | 'high';
  animationSpeed?: 'slow' | 'normal' | 'fast';
}

const UltraFuturisticCard: React.FC<UltraFuturisticCardProps> = ({
  variant = 'quantum',
  size = 'medium',
  children,
  className = '',
  onClick,
  interactive = false,
  glowIntensity = 'medium',
  animationSpeed = 'normal'
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const [particleCount, setParticleCount] = useState(0);

  // Animation speed multipliers
  const speedMultipliers = {
    slow: 2,
    normal: 1,
    fast: 0.5
  };

  // Glow intensity classes
  const glowClasses = {
    low: 'shadow-lg',
    medium: 'shadow-2xl',
    high: 'shadow-[0_0_50px_rgba(139,92,246,0.5)]'
  };

  // Variant-specific styling
  const getVariantStyles = () => {
    const baseStyles = 'relative overflow-hidden rounded-2xl border backdrop-blur-xl transition-all duration-500';
    
    switch (variant) {
      case 'quantum':
        return `${baseStyles} border-purple-500/30 bg-gradient-to-br from-purple-900/20 via-purple-800/10 to-indigo-900/20`;
      case 'holographic':
        return `${baseStyles} border-green-400/30 bg-gradient-to-br from-green-900/20 via-emerald-800/10 to-teal-900/20`;
      case 'cyberpunk':
        return `${baseStyles} border-red-500/30 bg-gradient-to-br from-red-900/20 via-orange-800/10 to-yellow-900/20`;
      case 'neural':
        return `${baseStyles} border-cyan-400/30 bg-gradient-to-br from-cyan-900/20 via-blue-800/10 to-indigo-900/20`;
      case 'quantum-holographic':
        return `${baseStyles} border-purple-400/30 bg-gradient-to-br from-purple-900/20 via-green-800/10 to-teal-900/20`;
      case 'quantum-advanced':
        return `${baseStyles} border-indigo-500/30 bg-gradient-to-br from-indigo-900/20 via-purple-800/10 to-pink-900/20`;
      case 'holographic-advanced':
        return `${baseStyles} border-emerald-400/30 bg-gradient-to-br from-emerald-900/20 via-teal-800/10 to-cyan-900/20`;
      case 'neural-quantum':
        return `${baseStyles} border-cyan-400/30 bg-gradient-to-br from-cyan-900/20 via-purple-800/10 to-indigo-900/20`;
      case 'quantum-cyberpunk':
        return `${baseStyles} border-purple-400/30 bg-gradient-to-br from-purple-900/20 via-red-800/10 to-orange-900/20`;
      case 'holographic-neural':
        return `${baseStyles} border-green-400/30 bg-gradient-to-br from-green-900/20 via-cyan-800/10 to-blue-900/20`;
      case 'quantum-holographic-advanced':
        return `${baseStyles} border-purple-400/30 bg-gradient-to-br from-purple-900/20 via-green-800/10 to-cyan-900/20`;
      case 'quantum-matrix':
        return `${baseStyles} border-purple-400/30 bg-gradient-to-br from-purple-900/20 via-indigo-800/10 to-blue-900/20`;
      case 'neural-cyberpunk':
        return `${baseStyles} border-cyan-400/30 bg-gradient-to-br from-cyan-900/20 via-red-800/10 to-orange-900/20`;
      case 'holographic-quantum':
        return `${baseStyles} border-green-400/30 bg-gradient-to-br from-green-900/20 via-purple-800/10 to-indigo-900/20`;
      case 'quantum-neural-advanced':
        return `${baseStyles} border-purple-400/30 bg-gradient-to-br from-purple-900/20 via-cyan-800/10 to-blue-900/20`;
      case 'cyberpunk-holographic':
        return `${baseStyles} border-red-400/30 bg-gradient-to-br from-red-900/20 via-green-800/10 to-teal-900/20`;
      case 'quantum-space':
        return `${baseStyles} border-purple-400/30 bg-gradient-to-br from-purple-900/20 via-indigo-800/10 to-blue-900/20`;
      case 'ai-futuristic':
        return `${baseStyles} border-blue-400/30 bg-gradient-to-br from-blue-900/20 via-indigo-800/10 to-purple-900/20`;
      case 'quantum-entanglement':
        return `${baseStyles} border-purple-400/30 bg-gradient-to-br from-purple-900/20 via-pink-800/10 to-indigo-900/20`;
      case 'holographic-matrix':
        return `${baseStyles} border-green-400/30 bg-gradient-to-br from-green-900/20 via-emerald-800/10 to-teal-900/20`;
      case 'neural-quantum-cyberpunk':
        return `${baseStyles} border-cyan-400/30 bg-gradient-to-br from-cyan-900/20 via-purple-800/10 to-red-900/20`;
      default:
        return `${baseStyles} border-gray-500/30 bg-gradient-to-br from-gray-900/20 via-slate-800/10 to-gray-900/20`;
    }
  };

  // Hover effects
  const hoverEffects = {
    scale: interactive ? 1.02 : 1,
    rotateY: interactive ? 2 : 0,
    rotateX: interactive ? 1 : 0,
  };

  // Particle animation
  useEffect(() => {
    if (isHovered && interactive) {
      const interval = setInterval(() => {
        setParticleCount(prev => (prev + 1) % 20);
      }, 100 * speedMultipliers[animationSpeed]);
      
      return () => clearInterval(interval);
    }
  }, [isHovered, interactive, animationSpeed]);

  // Generate floating particles
  const generateParticles = () => {
    const particles = [];
    for (let i = 0; i < 8; i++) {
      particles.push(
        <motion.div
          key={i}
          className={`absolute w-1 h-1 rounded-full ${
            variant.includes('quantum') ? 'bg-purple-400' :
            variant.includes('holographic') ? 'bg-green-400' :
            variant.includes('cyberpunk') ? 'bg-red-400' :
            variant.includes('neural') ? 'bg-cyan-400' : 'bg-blue-400'
          }`}
          style={{
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
          }}
          animate={{
            y: [0, -20, 0],
            opacity: [0, 1, 0],
            scale: [0, 1, 0],
          }}
          transition={{
            duration: 2 * speedMultipliers[animationSpeed],
            repeat: Infinity,
            delay: i * 0.2,
            ease: "easeInOut"
          }}
        />
      );
    }
    return particles;
  };

  // Generate holographic grid
  const generateHolographicGrid = () => {
    if (!variant.includes('holographic')) return null;
    
    return (
      <div className="absolute inset-0 opacity-20">
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute border border-green-400/30"
            style={{
              left: `${i * 20}%`,
              top: `${i * 20}%`,
              width: `${100 - i * 20}%`,
              height: `${100 - i * 20}%`,
            }}
            animate={{
              opacity: [0.3, 0.6, 0.3],
              scale: [1, 1.05, 1],
            }}
            transition={{
              duration: 3 * speedMultipliers[animationSpeed],
              repeat: Infinity,
              delay: i * 0.5,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>
    );
  };

  // Generate quantum field lines
  const generateQuantumField = () => {
    if (!variant.includes('quantum')) return null;
    
    return (
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(5)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-full h-px bg-gradient-to-r from-transparent via-purple-400/40 to-transparent"
            style={{
              top: `${20 + i * 15}%`,
              transform: 'rotate(-15deg)',
            }}
            animate={{
              scaleX: [0, 1, 0],
              opacity: [0, 0.6, 0],
            }}
            transition={{
              duration: 4 * speedMultipliers[animationSpeed],
              repeat: Infinity,
              delay: i * 0.8,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>
    );
  };

  // Generate neural network
  const generateNeuralNetwork = () => {
    if (!variant.includes('neural')) return null;
    
    return (
      <div className="absolute inset-0">
        {[...Array(8)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-cyan-400/60 rounded-full"
            style={{
              left: `${20 + i * 10}%`,
              top: `${30 + Math.sin(i) * 20}%`,
            }}
            animate={{
              scale: [1, 1.5, 1],
              opacity: [0.6, 1, 0.6],
            }}
            transition={{
              duration: 2 * speedMultipliers[animationSpeed],
              repeat: Infinity,
              delay: i * 0.3,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>
    );
  };

  // Generate cyberpunk elements
  const generateCyberpunkElements = () => {
    if (!variant.includes('cyberpunk')) return null;
    
    return (
      <div className="absolute inset-0">
        {[...Array(4)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-8 bg-red-400/60"
            style={{
              left: `${15 + i * 25}%`,
              top: `${20 + i * 15}%`,
            }}
            animate={{
              height: [32, 48, 32],
              opacity: [0.6, 1, 0.6],
            }}
            transition={{
              duration: 1.5 * speedMultipliers[animationSpeed],
              repeat: Infinity,
              delay: i * 0.4,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>
    );
=======
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface UltraFuturisticCardProps {
  children: React.ReactNode;
  className?: string;
  variant?: 'default' | 'glow' | 'holographic' | 'quantum' | 'cyberpunk';
  intensity?: 'low' | 'medium' | 'high';
  interactive?: boolean;
  onClick?: () => void;
  delay?: number;
}

const UltraFuturisticCard: React.FC<UltraFuturisticCardProps> = ({
  children,
  className = '',
  variant = 'default',
  intensity = 'medium',
  interactive = true,
  onClick,
  delay = 0
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isPressed, setIsPressed] = useState(false);
  const cardRef = useRef<HTMLDivElement>(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  const intensityMultiplier = {
    low: 0.5,
    medium: 1,
    high: 1.5
  }[intensity];

  const variantConfig = {
    default: {
      borderColor: 'from-blue-500 to-purple-500',
      glowColor: 'from-blue-400 to-purple-400',
      shadowColor: 'shadow-blue-500/25',
      bgGradient: 'from-gray-900/80 to-gray-800/80',
      borderGradient: 'from-blue-500/50 to-purple-500/50'
    },
    glow: {
      borderColor: 'from-cyan-500 to-blue-500',
      glowColor: 'from-cyan-400 to-blue-400',
      shadowColor: 'shadow-cyan-500/30',
      bgGradient: 'from-gray-900/90 to-gray-800/90',
      borderGradient: 'from-cyan-500/60 to-blue-500/60'
    },
    holographic: {
      borderColor: 'from-green-500 to-emerald-500',
      glowColor: 'from-green-400 to-emerald-400',
      shadowColor: 'shadow-green-500/35',
      bgGradient: 'from-gray-900/85 to-gray-800/85',
      borderGradient: 'from-green-500/70 to-emerald-500/70'
    },
    quantum: {
      borderColor: 'from-purple-500 to-pink-500',
      glowColor: 'from-purple-400 to-pink-400',
      shadowColor: 'shadow-purple-500/40',
      bgGradient: 'from-gray-900/95 to-gray-800/95',
      borderGradient: 'from-purple-500/80 to-pink-500/80'
    },
    cyberpunk: {
      borderColor: 'from-red-500 to-orange-500',
      glowColor: 'from-red-400 to-orange-400',
      shadowColor: 'shadow-red-500/45',
      bgGradient: 'from-gray-900/75 to-gray-800/75',
      borderGradient: 'from-red-500/90 to-orange-500/90'
    }
  }[variant];

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (cardRef.current) {
        const rect = cardRef.current.getBoundingClientRect();
        setMousePosition({
          x: e.clientX - rect.left,
          y: e.clientY - rect.top
        });
      }
    };

    if (interactive) {
      document.addEventListener('mousemove', handleMouseMove);
    }

    return () => {
      if (interactive) {
        document.removeEventListener('mousemove', handleMouseMove);
      }
    };
  }, [interactive]);

  const cardVariants = {
    initial: {
      opacity: 0,
      y: 50,
      scale: 0.95,
      rotateX: -15
    },
    animate: {
      opacity: 1,
      y: 0,
      scale: 1,
      rotateX: 0,
      transition: {
        duration: 0.6,
        delay: delay * 0.1
      }
    },
    hover: {
      y: -10,
      scale: 1.02,
      rotateX: 5,
      transition: {
        duration: 0.3
      }
    },
    pressed: {
      scale: 0.98,
      y: -5,
      transition: {
        duration: 0.1
      }
    }
  };

  const glowVariants = {
    initial: { opacity: 0, scale: 0.8 },
    hover: { 
      opacity: 1, 
      scale: 1.2,
      transition: {
        duration: 0.3
      }
    }
  };

  const borderVariants = {
    initial: { opacity: 0.3 },
    hover: { 
      opacity: 1,
      transition: {
        duration: 0.3
      }
    }
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-e0c7
  };

  return (
    <motion.div
<<<<<<< HEAD
      className={`${getVariantStyles()} ${glowClasses[glowIntensity]} ${className}`}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      onFocus={() => setIsFocused(true)}
      onBlur={() => setIsFocused(false)}
      onClick={onClick}
      whileHover={hoverEffects}
      whileTap={interactive ? { scale: 0.98 } : {}}
      animate={{
        boxShadow: isHovered || isFocused 
          ? `0 0 30px ${variant.includes('quantum') ? 'rgba(139, 92, 246, 0.4)' : 
                       variant.includes('holographic') ? 'rgba(16, 185, 129, 0.4)' :
                       variant.includes('cyberpunk') ? 'rgba(239, 68, 68, 0.4)' :
                       variant.includes('neural') ? 'rgba(6, 182, 212, 0.4)' : 'rgba(59, 130, 246, 0.4)'}`
          : '0 0 20px rgba(0, 0, 0, 0.1)'
      }}
      transition={{
        duration: 0.3,
        ease: "easeOut"
      }}
      style={{
        cursor: interactive ? 'pointer' : 'default',
=======
      ref={cardRef}
      variants={cardVariants}
      initial="initial"
      animate="animate"
      whileHover={interactive ? "hover" : undefined}
      whileTap={interactive ? "pressed" : undefined}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      onTapStart={() => setIsPressed(true)}
      onTap={() => setIsPressed(false)}
      onClick={onClick}
      className={`
        relative group cursor-pointer overflow-hidden rounded-2xl
        bg-gradient-to-br ${variantConfig.bgGradient}
        border border-transparent
        ${variantConfig.shadowColor}
        shadow-2xl backdrop-blur-xl
        transition-all duration-300 ease-out
        ${className}
      `}
      style={{
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-e0c7
        transformStyle: 'preserve-3d',
        perspective: '1000px'
      }}
    >
<<<<<<< HEAD
      {/* Background Effects */}
      <div className="absolute inset-0">
        {/* Gradient overlay */}
        <div className="absolute inset-0 bg-gradient-to-br from-white/5 via-transparent to-black/5" />
        
        {/* Holographic grid */}
        {generateHolographicGrid()}
        
        {/* Quantum field lines */}
        {generateQuantumField()}
        
        {/* Neural network */}
        {generateNeuralNetwork()}
        
        {/* Cyberpunk elements */}
        {generateCyberpunkElements()}
        
        {/* Floating particles */}
        <AnimatePresence>
          {isHovered && interactive && generateParticles()}
        </AnimatePresence>
      </div>

      {/* Glow effects */}
      <div className="absolute inset-0 rounded-2xl overflow-hidden">
        <motion.div
          className={`absolute inset-0 rounded-2xl ${
            variant.includes('quantum') ? 'bg-gradient-to-r from-purple-500/20 via-transparent to-indigo-500/20' :
            variant.includes('holographic') ? 'bg-gradient-to-r from-green-500/20 via-transparent to-teal-500/20' :
            variant.includes('cyberpunk') ? 'bg-gradient-to-r from-red-500/20 via-transparent to-orange-500/20' :
            variant.includes('neural') ? 'bg-gradient-to-r from-cyan-500/20 via-transparent to-blue-500/20' : 'bg-gradient-to-r from-blue-500/20 via-transparent to-indigo-500/20'
          }`}
          animate={{
            opacity: [0.3, 0.6, 0.3],
            scale: [1, 1.02, 1],
          }}
          transition={{
            duration: 4 * speedMultipliers[animationSpeed],
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
=======
      {/* Animated border */}
      <motion.div
        variants={borderVariants}
        className={`
          absolute inset-0 rounded-2xl
          bg-gradient-to-r ${variantConfig.borderGradient}
          opacity-0 group-hover:opacity-100
          transition-opacity duration-300
        `}
        style={{
          mask: 'linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)',
          maskComposite: 'exclude',
          padding: '1px'
        }}
      />

      {/* Glow effect */}
      <AnimatePresence>
        {isHovered && (
          <motion.div
            variants={glowVariants}
            initial="initial"
            animate="hover"
            exit="initial"
            className={`
              absolute inset-0 rounded-2xl
              bg-gradient-to-r ${variantConfig.glowColor}
              opacity-20 blur-xl
              pointer-events-none
            `}
          />
        )}
      </AnimatePresence>

      {/* Interactive light effect */}
      {interactive && (
        <div
          className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
          style={{
            background: `radial-gradient(600px circle at ${mousePosition.x}px ${mousePosition.y}px, rgba(255,255,255,0.1), transparent 40%)`
          }}
        />
      )}

      {/* Particle effect overlay */}
      <div className="absolute inset-0 overflow-hidden rounded-2xl">
        <div className="absolute inset-0 bg-gradient-to-br from-white/5 via-transparent to-transparent" />
        {variant === 'holographic' && (
          <div className="absolute top-0 left-0 w-full h-full">
            <div className="absolute top-4 left-4 w-2 h-2 bg-green-400 rounded-full animate-ping" />
            <div className="absolute top-8 right-8 w-1 h-1 bg-emerald-400 rounded-full animate-ping delay-300" />
            <div className="absolute bottom-6 left-1/2 w-1.5 h-1.5 bg-cyan-400 rounded-full animate-ping delay-700" />
          </div>
        )}
        {variant === 'quantum' && (
          <div className="absolute inset-0">
            <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-purple-400 to-transparent animate-pulse" />
            <div className="absolute bottom-0 right-0 w-1 h-full bg-gradient-to-b from-transparent via-pink-400 to-transparent animate-pulse delay-500" />
          </div>
        )}
        {variant === 'cyberpunk' && (
          <div className="absolute inset-0">
            <div className="absolute top-0 left-0 w-1 h-full bg-gradient-to-b from-red-400 to-orange-400 animate-pulse" />
            <div className="absolute top-0 right-0 w-full h-1 bg-gradient-to-r from-orange-400 to-red-400 animate-pulse delay-300" />
          </div>
        )}
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-e0c7
      </div>

      {/* Content */}
      <div className="relative z-10 p-6">
        {children}
      </div>

<<<<<<< HEAD
      {/* Interactive border glow */}
      {interactive && (
        <motion.div
          className="absolute inset-0 rounded-2xl border-2 border-transparent"
          style={{
            background: `linear-gradient(45deg, 
              ${variant.includes('quantum') ? '#8B5CF6' : 
                variant.includes('holographic') ? '#10B981' :
                variant.includes('cyberpunk') ? '#EF4444' :
                variant.includes('neural') ? '#06B6D4' : '#3B82F6'}, 
              transparent, 
              ${variant.includes('quantum') ? '#06B6D4' : 
                variant.includes('holographic') ? '#F59E0B' :
                variant.includes('cyberpunk') ? '#F59E0B' :
                variant.includes('neural') ? '#10B981' : '#8B5CF6'})`,
            backgroundSize: '200% 200%',
            WebkitMask: 'linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)',
            WebkitMaskComposite: 'xor',
            maskComposite: 'exclude',
          }}
          animate={{
            backgroundPosition: ['0% 0%', '100% 100%', '0% 0%'],
          }}
          transition={{
            duration: 3 * speedMultipliers[animationSpeed],
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
      )}

      {/* Corner accents */}
      <div className="absolute top-0 left-0 w-4 h-4 border-l-2 border-t-2 border-current opacity-50" />
      <div className="absolute top-0 right-0 w-4 h-4 border-r-2 border-t-2 border-current opacity-50" />
      <div className="absolute bottom-0 left-0 w-4 h-4 border-l-2 border-b-2 border-current opacity-50" />
      <div className="absolute bottom-0 right-0 w-4 h-4 border-r-2 border-b-2 border-current opacity-50" />
=======
      {/* Corner accents */}
      <div className="absolute top-0 left-0 w-8 h-8 border-l-2 border-t-2 border-gradient-to-r from-transparent to-white/20 rounded-tl-2xl" />
      <div className="absolute top-0 right-0 w-8 h-8 border-r-2 border-t-2 border-gradient-to-l from-transparent to-white/20 rounded-tr-2xl" />
      <div className="absolute bottom-0 left-0 w-8 h-8 border-l-2 border-b-2 border-gradient-to-r from-transparent to-white/20 rounded-bl-2xl" />
      <div className="absolute bottom-0 right-0 w-8 h-8 border-r-2 border-b-2 border-gradient-to-l from-transparent to-white/20 rounded-br-2xl" />
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-e0c7
    </motion.div>
  );
};

export default UltraFuturisticCard;