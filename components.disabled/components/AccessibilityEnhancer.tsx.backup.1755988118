import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Volume2, 
  Eye, 
<<<<<<< HEAD
  EyeOff, 
  Volume2, 
  VolumeX, 
=======
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
  Contrast, 
  Type, 
  MousePointer, 
  Keyboard,
<<<<<<< HEAD
  Accessibility,
  HelpCircle,
  CheckCircle,
  AlertTriangle
=======
  HelpCircle,
  X,
  Accessibility,
  ZoomIn,
  ZoomOut,
  RotateCcw
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
} from 'lucide-react';

interface AccessibilitySettings {
  highContrast: boolean;
  largeText: boolean;
  reducedMotion: boolean;
  screenReader: boolean;
  keyboardNavigation: boolean;
<<<<<<< HEAD
  focusIndicator: boolean;
}

interface AccessibilityEnhancerProps {
  children: React.ReactNode;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ children }) => {
=======
  fontSize: number;
  zoomLevel: number;
}

const AccessibilityEnhancer: React.FC = () => {
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
  const [isOpen, setIsOpen] = useState(false);
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    largeText: false,
    reducedMotion: false,
    screenReader: false,
    keyboardNavigation: false,
<<<<<<< HEAD
    focusIndicator: true
  });
  const [currentFocus, setCurrentFocus] = useState<string>('');
  const [accessibilityIssues, setAccessibilityIssues] = useState<string[]>([]);

  // Apply accessibility settings
  const applySettings = useCallback((newSettings: Partial<AccessibilitySettings>) => {
    const updatedSettings = { ...settings, ...newSettings };
    setSettings(updatedSettings);

    // Apply high contrast
    if (updatedSettings.highContrast) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
=======
    fontSize: 16,
    zoomLevel: 100
  });

  // Load settings from localStorage
  useEffect(() => {
    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
        applySettings({ ...settings, ...parsed });
      } catch (error) {
        // Silently handle parsing errors
      }
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
    }

<<<<<<< HEAD
    // Apply large text
    if (updatedSettings.largeText) {
      document.documentElement.classList.add('large-text');
    } else {
      document.documentElement.classList.remove('large-text');
    }

    // Apply reduced motion
    if (updatedSettings.reducedMotion) {
      document.documentElement.classList.add('reduced-motion');
    } else {
      document.documentElement.classList.remove('reduced-motion');
    }

    // Apply focus indicator
    if (updatedSettings.focusIndicator) {
      document.documentElement.classList.add('focus-visible');
    } else {
      document.documentElement.classList.remove('focus-visible');
    }

    // Store settings in localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(updatedSettings));
  }, [settings]);

  // Load saved settings
  useEffect(() => {
    const saved = localStorage.getItem('accessibility-settings');
    if (saved) {
      try {
        const savedSettings = JSON.parse(saved);
        setSettings(savedSettings);
        applySettings(savedSettings);
      } catch (error) {
        console.error('Error loading accessibility settings:', error);
      }
    }
  }, [applySettings]);

  // Enhanced keyboard navigation
  useEffect(() => {
    if (!settings.keyboardNavigation) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      const target = e.target as HTMLElement;
      
      // Skip if target is an input or textarea
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;

      switch (e.key) {
        case 'Tab':
          // Enhanced tab navigation with visual feedback
          setCurrentFocus(target.id || target.className || 'unknown');
          break;
        case 'Enter':
        case ' ':
          // Activate clickable elements with space/enter
          if (target.tagName === 'BUTTON' || target.getAttribute('role') === 'button') {
            e.preventDefault();
            target.click();
          }
          break;
        case 'Escape':
          // Close modals and dropdowns
          const modals = document.querySelectorAll('[role="dialog"], [aria-expanded="true"]');
          modals.forEach(modal => {
            if (modal instanceof HTMLElement) {
              modal.setAttribute('aria-expanded', 'false');
              modal.style.display = 'none';
            }
          });
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [settings.keyboardNavigation]);

  // Accessibility audit
  const runAccessibilityAudit = useCallback(() => {
    const issues: string[] = [];
    
    // Check for missing alt text on images
    const images = document.querySelectorAll('img');
    images.forEach((img, index) => {
      if (!img.alt && !img.getAttribute('aria-label')) {
        issues.push(`Image ${index + 1} missing alt text or aria-label`);
      }
    });

    // Check for proper heading structure
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let prevLevel = 0;
    headings.forEach((heading, index) => {
      const level = parseInt(heading.tagName.charAt(1));
      if (level > prevLevel + 1) {
        issues.push(`Heading structure issue: h${level} follows h${prevLevel} (index ${index + 1})`);
      }
      prevLevel = level;
    });

    // Check for proper form labels
    const inputs = document.querySelectorAll('input, textarea, select');
    inputs.forEach((input, index) => {
      if (!input.id || !document.querySelector(`label[for="${input.id}"]`)) {
        issues.push(`Form input ${index + 1} missing proper label association`);
      }
    });

    // Check for proper ARIA attributes
    const ariaElements = document.querySelectorAll('[aria-*]');
    ariaElements.forEach((element, index) => {
      const ariaExpanded = element.getAttribute('aria-expanded');
      if (ariaExpanded === 'true' && !element.classList.contains('expanded')) {
        issues.push(`ARIA expanded state mismatch for element ${index + 1}`);
      }
    });

    setAccessibilityIssues(issues);
  }, []);

  // Screen reader announcements
  const announceToScreenReader = useCallback((message: string) => {
    if (settings.screenReader) {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
  }, [settings.screenReader]);

  // Toggle accessibility panel
  const togglePanel = () => {
    setIsOpen(!isOpen);
    announceToScreenReader(isOpen ? 'Accessibility panel closed' : 'Accessibility panel opened');
  };
=======
  // Apply accessibility settings
  const applySettings = useCallback((newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // High contrast
    if (newSettings.highContrast) {
      root.style.setProperty('--bg-primary', '#000000');
      root.style.setProperty('--bg-secondary', '#1a1a1a');
      root.style.setProperty('--text-primary', '#ffffff');
      root.style.setProperty('--text-secondary', '#e0e0e0');
      root.style.setProperty('--accent-color', '#00ffff');
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
      root.style.removeProperty('--bg-primary');
      root.style.removeProperty('--bg-secondary');
      root.style.removeProperty('--text-primary');
      root.style.removeProperty('--text-secondary');
      root.style.removeProperty('--accent-color');
    }

    // Large text
    if (newSettings.largeText) {
      root.style.fontSize = '18px';
      root.style.setProperty('--text-scale', '1.2');
    } else {
      root.style.fontSize = '16px';
      root.style.setProperty('--text-scale', '1');
    }

    // Reduced motion
    if (newSettings.reducedMotion) {
      root.style.setProperty('--animation-duration', '0.01ms');
      root.classList.add('reduced-motion');
    } else {
      root.style.removeProperty('--animation-duration');
      root.classList.remove('reduced-motion');
    }

    // Font size adjustment
    root.style.setProperty('--font-size', `${newSettings.fontSize}px`);
    
    // Zoom level
    root.style.setProperty('--zoom-level', `${newSettings.zoomLevel}%`);
  }, []);

  // Save settings to localStorage
  const saveSettings = useCallback((newSettings: AccessibilitySettings) => {
    localStorage.setItem('accessibility-settings', JSON.stringify(newSettings));
    setSettings(newSettings);
    applySettings(newSettings);
  }, [applySettings]);

  // Toggle setting
  const toggleSetting = useCallback((key: keyof AccessibilitySettings) => {
    const newSettings = { ...settings, [key]: !settings[key] };
    saveSettings(newSettings);
  }, [settings, saveSettings]);

  // Update numeric setting
  const updateNumericSetting = useCallback((key: 'fontSize' | 'zoomLevel', value: number) => {
    const newSettings = { ...settings, [key]: value };
    saveSettings(newSettings);
  }, [settings, saveSettings]);

  // Reset to defaults
  const resetSettings = useCallback(() => {
    const defaultSettings: AccessibilitySettings = {
      highContrast: false,
      largeText: false,
      reducedMotion: false,
      screenReader: false,
      keyboardNavigation: false,
      fontSize: 16,
      zoomLevel: 100
    };
    saveSettings(defaultSettings);
  }, [saveSettings]);

  // Keyboard navigation handler
  useEffect(() => {
    if (!settings.keyboardNavigation) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      // Skip if user is typing in an input
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }

      switch (e.key) {
        case 'Tab': {
          // Enhanced tab navigation
          const focusableElements = document.querySelectorAll(
            'a[href], button, input, textarea, select, [tabindex]:not([tabindex="-1"])'
          );
          const currentIndex = Array.from(focusableElements).findIndex(el => el === document.activeElement);
          
          if (e.shiftKey) {
            // Shift + Tab: go backwards
            const prevIndex = currentIndex > 0 ? currentIndex - 1 : focusableElements.length - 1;
            (focusableElements[prevIndex] as HTMLElement)?.focus();
          } else {
            // Tab: go forwards
            const nextIndex = currentIndex < focusableElements.length - 1 ? currentIndex + 1 : 0;
            (focusableElements[nextIndex] as HTMLElement)?.focus();
          }
          e.preventDefault();
          break;
        }
          
        case 'Escape': {
          // Close modals, dropdowns, etc.
          const activeModals = document.querySelectorAll('[data-modal="true"]');
          activeModals.forEach(modal => {
            if (modal instanceof HTMLElement) {
              modal.style.display = 'none';
            }
          });
          break;
        }
          
        case 'h':
        case 'H': {
          // Go to home page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/';
          }
          break;
        }
          
        case 's':
        case 'S': {
          // Go to services page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/services';
          }
          break;
        }
          
        case 'c':
        case 'C': {
          // Go to contact page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/contact';
          }
          break;
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [settings.keyboardNavigation]);

  // Screen reader announcements
  useEffect(() => {
    if (!settings.screenReader) return;

    const announceToScreenReader = (message: string) => {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    };

    // Announce page changes
    const observer = new (window as any).MutationObserver((mutations: any[]) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          const newNodes = Array.from(mutation.addedNodes);
          newNodes.forEach((node) => {
            if (node instanceof HTMLElement && node.tagName === 'H1') {
              announceToScreenReader(`Page loaded: ${node.textContent}`);
            }
          });
        }
      });
    });

    observer.observe(document.body, { childList: true, subtree: true });
    return () => observer.disconnect();
  }, [settings.screenReader]);

  // Apply settings on mount
  useEffect(() => {
    applySettings(settings);
  }, [applySettings, settings]);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1

  return (
    <>
      {/* Accessibility Toggle Button */}
      <button
<<<<<<< HEAD
        onClick={togglePanel}
        className="fixed bottom-4 left-4 z-50 p-3 bg-cyan-600 hover:bg-cyan-700 text-white rounded-full shadow-2xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-500/50"
        aria-label="Open accessibility settings"
        aria-expanded={isOpen}
        aria-controls="accessibility-panel"
      >
        <Accessibility className="w-6 h-6" />
=======
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-6 right-6 z-50 w-14 h-14 bg-gradient-to-r from-cyan-500 to-purple-500 text-white rounded-full shadow-2xl hover:shadow-cyan-500/25 transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-4 focus:ring-cyan-500/50"
        aria-label="Accessibility Settings"
        aria-expanded={isOpen}
        aria-controls="accessibility-panel"
      >
        <Accessibility className="w-6 h-6 mx-auto" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
      </button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isOpen && (
<<<<<<< HEAD
          <motion.div
            id="accessibility-panel"
            className="fixed bottom-20 left-4 z-50 w-80 bg-gray-900/95 backdrop-blur-xl border border-gray-700/50 rounded-2xl shadow-2xl overflow-hidden"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.3 }}
            role="dialog"
            aria-labelledby="accessibility-title"
            aria-describedby="accessibility-description"
          >
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 id="accessibility-title" className="text-xl font-bold text-white">
                  Accessibility Settings
                </h2>
                <button
                  onClick={togglePanel}
                  className="text-gray-400 hover:text-white transition-colors"
                  aria-label="Close accessibility settings"
                >
                  +
=======
          <>
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
              onClick={() => setIsOpen(false)}
            />
            
            {/* Panel */}
            <motion.div
              id="accessibility-panel"
              initial={{ opacity: 0, scale: 0.95, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.95, y: 20 }}
              transition={{ duration: 0.2 }}
              className="fixed bottom-24 right-6 z-50 w-80 bg-black/95 backdrop-blur-xl border border-white/10 rounded-2xl shadow-2xl p-6"
              role="dialog"
              aria-labelledby="accessibility-title"
              aria-describedby="accessibility-description"
            >
              {/* Header */}
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 id="accessibility-title" className="text-xl font-bold text-white">
                    Accessibility Settings
                  </h2>
                  <p id="accessibility-description" className="text-sm text-white/70">
                    Customize your experience for better accessibility
                  </p>
                </div>
                <button
                  onClick={() => setIsOpen(false)}
                  className="p-2 rounded-lg hover:bg-white/10 transition-colors duration-200 text-white/70 hover:text-white"
                  aria-label="Close accessibility panel"
                >
                  <X className="w-5 h-5" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
                </button>
              </div>
              
              <div className="bg-black/30 border border-gray-700 rounded-lg p-4 text-center">
                <ZoomOut className="w-8 h-8 text-green-400 mx-auto mb-2" />
                <div className="text-white font-semibold mb-1">Zoom Out</div>
                <button
                  onClick={() => setFontScale(Math.max(50, fontScale - 10))}
                  className="px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600"
                >
                  -
                </button>
              </div>
              
              <div className="bg-black/30 border border-gray-700 rounded-lg p-4 text-center">
                <RotateCcw className="w-8 h-8 text-purple-400 mx-auto mb-2" />
                <div className="text-white font-semibold mb-1">Reset</div>
                <button
                  onClick={() => setFontScale(100)}
                  className="px-3 py-1 bg-purple-500 text-white rounded text-sm hover:bg-purple-600"
                >
                  Reset
                </button>
              </div>
              
              <div className="bg-black/30 border border-gray-700 rounded-lg p-4 text-center">
                <Target className="w-8 h-8 text-cyan-400 mx-auto mb-2" />
                <div className="text-white font-semibold mb-1">Focus</div>
                <button
                  onClick={() => setShowFocusIndicators(!showFocusIndicators)}
                  className={`px-3 py-1 rounded text-sm ${
                    showFocusIndicators 
                      ? 'bg-green-500 text-white hover:bg-green-600' 
                      : 'bg-gray-500 text-white hover:bg-gray-600'
                  }`}
                >
                  {showFocusIndicators ? 'Hide' : 'Show'}
                </button>
              </div>
            </div>

<<<<<<< HEAD
              <p id="accessibility-description" className="text-gray-400 text-sm mb-6">
                Customize your browsing experience with these accessibility features
              </p>

              {/* Settings Controls */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Contrast className="w-5 h-5 text-cyan-400" />
                    <span className="text-white">High Contrast</span>
                  </div>
                  <button
                    onClick={() => applySettings({ highContrast: !settings.highContrast })}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.highContrast ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.highContrast}
                    aria-label="Toggle high contrast mode"
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Type className="w-5 h-5 text-blue-400" />
                    <span className="text-white">Large Text</span>
                  </div>
                  <button
                    onClick={() => applySettings({ largeText: !settings.largeText })}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.largeText ? 'bg-blue-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.largeText}
                    aria-label="Toggle large text mode"
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.largeText ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <MousePointer className="w-5 h-5 text-purple-400" />
                    <span className="text-white">Reduced Motion</span>
                  </div>
                  <button
                    onClick={() => applySettings({ reducedMotion: !settings.reducedMotion })}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.reducedMotion ? 'bg-purple-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.reducedMotion}
                    aria-label="Toggle reduced motion mode"
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.reducedMotion ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Keyboard className="w-5 h-5 text-green-400" />
                    <span className="text-white">Keyboard Navigation</span>
                  </div>
                  <button
                    onClick={() => applySettings({ keyboardNavigation: !settings.keyboardNavigation })}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.keyboardNavigation ? 'bg-green-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.keyboardNavigation}
                    aria-label="Toggle keyboard navigation mode"
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.keyboardNavigation ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>
              </div>

              {/* Accessibility Audit */}
              <div className="mt-6 pt-6 border-t border-gray-700">
                <button
                  onClick={runAccessibilityAudit}
                  className="w-full bg-cyan-600 hover:bg-cyan-700 text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2"
                  aria-label="Run accessibility audit"
                >
                  <HelpCircle className="w-4 h-4" />
                  Run Accessibility Audit
                </button>

                {accessibilityIssues.length > 0 && (
                  <div className="mt-4 p-3 bg-red-500/20 border border-red-500/30 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertTriangle className="w-4 h-4 text-red-400" />
                      <span className="text-red-400 text-sm font-medium">
                        {accessibilityIssues.length} Issues Found
                      </span>
                    </div>
                    <ul className="text-xs text-red-300 space-y-1">
                      {accessibilityIssues.slice(0, 3).map((issue, index) => (
                        <li key={index}>• {issue}</li>
                      ))}
                      {accessibilityIssues.length > 3 && (
                        <li className="text-red-400">... and {accessibilityIssues.length - 3} more</li>
                      )}
                    </ul>
                  </div>
                )}
              </div>

              {/* Current Focus Indicator */}
              {settings.keyboardNavigation && currentFocus && (
                <div className="mt-4 p-3 bg-blue-500/20 border border-blue-500/30 rounded-lg">
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-blue-400" />
                    <span className="text-blue-400 text-xs">
                      Current focus: {currentFocus}
                    </span>
                  </div>
=======
              {/* Settings */}
              <div className="space-y-6">
                {/* Visual Settings */}
                <div>
                  <h3 className="text-sm font-semibold text-white/90 mb-3">Visual</h3>
                  <div className="space-y-3">
                    <label className="flex items-center space-x-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.highContrast}
                        onChange={() => toggleSetting('highContrast')}
                        className="w-4 h-4 text-cyan-500 bg-white/10 border-white/20 rounded focus:ring-cyan-500 focus:ring-2"
                      />
                      <Contrast className="w-4 h-4 text-white/70" />
                      <span className="text-sm text-white">High Contrast</span>
                    </label>
                    
                    <label className="flex items-center space-x-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.largeText}
                        onChange={() => toggleSetting('largeText')}
                        className="w-4 h-4 text-cyan-500 bg-white/10 border-white/20 rounded focus:ring-cyan-500 focus:ring-2"
                      />
                      <Type className="w-4 h-4 text-white/70" />
                      <span className="text-sm text-white">Large Text</span>
                    </label>
                    
                    <label className="flex items-center space-x-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.reducedMotion}
                        onChange={() => toggleSetting('reducedMotion')}
                        className="w-4 h-4 text-cyan-500 bg-white/10 border-white/20 rounded focus:ring-cyan-500 focus:ring-2"
                      />
                      <Eye className="w-4 h-4 text-white/70" />
                      <span className="text-sm text-white">Reduced Motion</span>
                    </label>
                  </div>
                </div>

                {/* Font Size */}
                <div>
                  <label className="block text-sm font-semibold text-white/90 mb-3">
                    Font Size: {settings.fontSize}px
                  </label>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => updateNumericSetting('fontSize', Math.max(12, settings.fontSize - 2))}
                      className="p-2 rounded-lg hover:bg-white/10 transition-colors duration-200 text-white/70 hover:text-white"
                      aria-label="Decrease font size"
                    >
                      <ZoomOut className="w-4 h-4" />
                    </button>
                    <input
                      type="range"
                      min="12"
                      max="24"
                      step="2"
                      value={settings.fontSize}
                      onChange={(e) => updateNumericSetting('fontSize', parseInt(e.target.value))}
                      className="flex-1 h-2 bg-white/10 rounded-lg appearance-none cursor-pointer slider"
                    />
                    <button
                      onClick={() => updateNumericSetting('fontSize', Math.min(24, settings.fontSize + 2))}
                      className="p-2 rounded-lg hover:bg-white/10 transition-colors duration-200 text-white/70 hover:text-white"
                      aria-label="Increase font size"
                    >
                      <ZoomIn className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                {/* Zoom Level */}
                <div>
                  <label className="block text-sm font-semibold text-white/90 mb-3">
                    Zoom Level: {settings.zoomLevel}%
                  </label>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => updateNumericSetting('zoomLevel', Math.max(50, settings.zoomLevel - 25))}
                      className="p-2 rounded-lg hover:bg-white/10 transition-colors duration-200 text-white/70 hover:text-white"
                      aria-label="Zoom out"
                    >
                      <ZoomOut className="w-4 h-4" />
                    </button>
                    <input
                      type="range"
                      min="50"
                      max="200"
                      step="25"
                      value={settings.zoomLevel}
                      onChange={(e) => updateNumericSetting('zoomLevel', parseInt(e.target.value))}
                      className="flex-1 h-2 bg-white/10 rounded-lg appearance-none cursor-pointer slider"
                    />
                    <button
                      onClick={() => updateNumericSetting('zoomLevel', Math.min(200, settings.zoomLevel + 25))}
                      className="p-2 rounded-lg hover:bg-white/10 transition-colors duration-200 text-white/70 hover:text-white"
                      aria-label="Zoom in"
                    >
                      <ZoomIn className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                {/* Navigation Settings */}
                <div>
                  <h3 className="text-sm font-semibold text-white/90 mb-3">Navigation</h3>
                  <div className="space-y-3">
                    <label className="flex items-center space-x-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.keyboardNavigation}
                        onChange={() => toggleSetting('keyboardNavigation')}
                        className="w-4 h-4 text-cyan-500 bg-white/10 border-white/20 rounded focus:ring-cyan-500 focus:ring-2"
                      />
                      <Keyboard className="w-4 h-4 text-white/70" />
                      <span className="text-sm text-white">Enhanced Keyboard Navigation</span>
                    </label>
                    
                    <label className="flex items-center space-x-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.screenReader}
                        onChange={() => toggleSetting('screenReader')}
                        className="w-4 h-4 text-cyan-500 bg-white/10 border-white/20 rounded focus:ring-cyan-500 focus:ring-2"
                      />
                      <Volume2 className="w-4 h-4 text-white/70" />
                      <span className="text-sm text-white">Screen Reader Support</span>
                    </label>
                  </div>
                </div>

                {/* Reset Button */}
                <button
                  onClick={resetSettings}
                  className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-xl transition-colors duration-200"
                >
                  <RotateCcw className="w-4 h-4" />
                  <span>Reset to Defaults</span>
                </button>

                {/* Help */}
                <div className="text-center">
                  <a
                    href="/accessibility-help"
                    className="inline-flex items-center space-x-2 text-sm text-cyan-400 hover:text-cyan-300 transition-colors duration-200"
                  >
                    <HelpCircle className="w-4 h-4" />
                    <span>Accessibility Help</span>
                  </a>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
                </div>
              )}
            </div>

              {/* Screen Reader Announcements */}
              <div className="bg-gray-800 p-4 rounded-lg">
                <h3 className="font-semibold mb-3">Screen Reader Support</h3>
                <p className="text-sm text-gray-400">
                  This website includes comprehensive screen reader support with proper ARIA labels, 
                  semantic HTML, and live announcements for dynamic content changes.
                </p>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>

<<<<<<< HEAD
      {/* Accessibility Styles */}
      <style jsx global>{`
        .high-contrast {
          --tw-bg-opacity: 1;
          --tw-text-opacity: 1;
        }
        
        .high-contrast * {
          background-color: white !important;
          color: black !important;
          border-color: black !important;
        }
        
        .large-text {
          font-size: 1.2em;
        }
        
        .large-text * {
          font-size: 1.2em;
        }
        
        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
        
        .focus-visible *:focus {
          outline: 3px solid #06b6d4 !important;
          outline-offset: 2px !important;
        }
        
=======
      {/* Screen Reader Only Class */}
      <style jsx global>{`
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
        .sr-only {
          position: absolute;
          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0, 0, 0, 0);
          white-space: nowrap;
          border: 0;
        }
<<<<<<< HEAD
=======
        
        .high-contrast {
          --bg-primary: #000000 !important;
          --bg-secondary: #1a1a1a !important;
          --text-primary: #ffffff !important;
          --text-secondary: #e0e0e0 !important;
          --accent-color: #00ffff !important;
        }
        
        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
        
        .slider::-webkit-slider-thumb {
          appearance: none;
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: linear-gradient(to right, #06b6d4, #8b5cf6);
          cursor: pointer;
        }
        
        .slider::-moz-range-thumb {
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: linear-gradient(to right, #06b6d4, #8b5cf6);
          cursor: pointer;
          border: none;
        }
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d7b1
      `}</style>

      {children}
    </>
  );
};

export default AccessibilityEnhancer;