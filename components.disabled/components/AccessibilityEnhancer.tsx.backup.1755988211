<<<<<<< HEAD
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Eye, Keyboard, MousePointer,
  Accessibility, X, Contrast, Type, Ear
=======
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Accessibility, Contrast, Eye, Volume2, 
  VolumeX, ZoomIn, ZoomOut, RotateCcw,
  Keyboard, MousePointer, Monitor, Smartphone
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0
} from 'lucide-react';

interface AccessibilitySettings {
  highContrast: boolean;
  largeText: boolean;
  reducedMotion: boolean;
  screenReader: boolean;
  keyboardNavigation: boolean;
<<<<<<< HEAD
  focusIndicators: boolean;
  colorBlindMode: 'none' | 'protanopia' | 'deuteranopia' | 'tritanopia';
  theme: 'light' | 'dark' | 'auto';
  fontSize: 'normal' | 'large' | 'xlarge';
  lineSpacing: 'normal' | 'relaxed' | 'very-relaxed';
  cursorSize: 'normal' | 'large' | 'xlarge';
  soundEffects: boolean;
}

const AccessibilityEnhancer: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
=======
  colorBlindness: 'none' | 'protanopia' | 'deuteranopia' | 'tritanopia';
  fontSize: 'small' | 'medium' | 'large' | 'extra-large';
  lineSpacing: 'tight' | 'normal' | 'loose';
  cursorSize: 'small' | 'medium' | 'large';
}

const AccessibilityEnhancer: React.FC<{
  showPanel?: boolean;
  autoOptimize?: boolean;
}> = ({ showPanel = true, autoOptimize = true }) => {
  const [isPanelOpen, setIsPanelOpen] = useState(false);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    largeText: false,
    reducedMotion: false,
<<<<<<< HEAD
    screenReader: false,
    keyboardNavigation: true,
    focusIndicators: true,
    colorBlindMode: 'none',
    theme: 'auto',
    fontSize: 'normal',
    lineSpacing: 'normal',
    cursorSize: 'normal',
    soundEffects: false
  });
  const [isOpen, setIsOpen] = useState(false);
  const [announcements, setAnnouncements] = useState<string[]>([]);
  const [currentFocus, setCurrentFocus] = useState<HTMLElement | null>(null);

  // Apply accessibility settings
  const applySettings = useCallback((newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // High contrast
    if (newSettings.highContrast) {
      root.style.setProperty('--bg-primary', '#000000');
      root.style.setProperty('--bg-secondary', '#1a1a1a');
      root.style.setProperty('--text-primary', '#ffffff');
      root.style.setProperty('--text-secondary', '#e0e0e0');
      root.style.setProperty('--accent-color', '#00ffff');
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
      root.style.removeProperty('--bg-primary');
      root.style.removeProperty('--bg-secondary');
      root.style.removeProperty('--text-primary');
      root.style.removeProperty('--text-secondary');
      root.style.removeProperty('--accent-color');
    }

    // Large text
    root.classList.remove('large-text', 'xlarge-text');
    if (newSettings.fontSize === 'large') root.classList.add('large-text');
    if (newSettings.fontSize === 'xlarge') root.classList.add('xlarge-text');
    
    // Line spacing
    root.classList.remove('relaxed-spacing', 'very-relaxed-spacing');
    if (newSettings.lineSpacing === 'relaxed') root.classList.add('relaxed-spacing');
    if (newSettings.lineSpacing === 'very-relaxed') root.classList.add('very-relaxed-spacing');
    
    // Cursor size
    root.classList.remove('large-cursor', 'xlarge-cursor');
    if (newSettings.cursorSize === 'large') root.classList.add('large-cursor');
    if (newSettings.cursorSize === 'xlarge') root.classList.add('xlarge-cursor');
    
    // Color blind modes
    root.classList.remove('protanopia', 'deuteranopia', 'tritanopia');
    if (newSettings.colorBlindMode !== 'none') {
      root.classList.add(newSettings.colorBlindMode);
    }

    // Reduced motion
    if (newSettings.reducedMotion) {
      root.style.setProperty('--animation-duration', '0.01ms');
      root.classList.add('reduced-motion');
    } else {
      root.style.removeProperty('--animation-duration');
      root.classList.remove('reduced-motion');
    }

    // Font size adjustment
    root.style.setProperty('--font-size', `${newSettings.fontSize}px`);
    
    // Zoom level
    root.style.setProperty('--zoom-level', `${newSettings.zoomLevel}%`);
=======
    highSaturation: false,
    focusIndicator: true,
    screenReader: false,
    keyboardNavigation: false,
    colorBlindness: 'none',
    fontSize: 'medium',
    lineSpacing: 'normal',
    cursorSize: 'medium'
  });

  const [currentFocus, setCurrentFocus] = useState<HTMLElement | null>(null);
  const [announcements, setAnnouncements] = useState<string[]>([]);
  const [isKeyboardUser, setIsKeyboardUser] = useState(false);
  const [showKeyboardShortcuts, setShowKeyboardShortcuts] = useState(false);
  const announcementRef = useRef<HTMLDivElement>(null);

  // Apply accessibility settings
  const applySettings = useCallback((newSettings: AccessibilitySettings) => {
    setSettings(newSettings);
    
    // Apply high contrast
    if (newSettings.highContrast) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
    }

    // Apply large text
    if (newSettings.largeText) {
      document.documentElement.classList.add('large-text');
    } else {
      document.documentElement.classList.remove('large-text');
    }

    // Apply reduced motion
    if (newSettings.reducedMotion) {
      document.documentElement.classList.add('reduced-motion');
    } else {
      document.documentElement.classList.remove('reduced-motion');
    }

    // Apply high saturation
    if (newSettings.highSaturation) {
      document.documentElement.classList.add('high-saturation');
    } else {
      document.documentElement.classList.remove('high-saturation');
    }

    // Apply focus indicator
    if (newSettings.focusIndicator) {
      document.documentElement.classList.add('focus-visible');
    } else {
      document.documentElement.classList.remove('focus-visible');
    }

    // Apply color blindness filters
    document.documentElement.classList.remove('protanopia', 'deuteranopia', 'tritanopia');
    if (newSettings.colorBlindness !== 'none') {
      document.documentElement.classList.add(newSettings.colorBlindness);
    }

    // Apply font size
    document.documentElement.classList.remove('text-small', 'text-medium', 'text-large', 'text-extra-large');
    document.documentElement.classList.add(`text-${newSettings.fontSize}`);

    // Apply line spacing
    document.documentElement.classList.remove('line-tight', 'line-normal', 'line-loose');
    document.documentElement.classList.add(`line-${newSettings.lineSpacing}`);

    // Apply cursor size
    document.documentElement.classList.remove('cursor-small', 'cursor-medium', 'cursor-large');
    document.documentElement.classList.add(`cursor-${newSettings.cursorSize}`);

    // Save to localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(newSettings));
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0
  }, []);

  // Load saved settings
  useEffect(() => {
    const saved = localStorage.getItem('accessibility-settings');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setSettings(parsed);
        applySettings(parsed);
      } catch (error) {
        // Failed to load accessibility settings
      }
    }
  }, [applySettings]);

<<<<<<< HEAD
  // Toggle setting
  const toggleSetting = useCallback((key: keyof AccessibilitySettings) => {
    const newSettings = { ...settings, [key]: !settings[key] };
    saveSettings(newSettings);
  }, [settings, saveSettings]);

  // Enhanced keyboard navigation
=======
  // Focus management
  const handleFocusChange = useCallback((e: FocusEvent) => {
    const target = e.target as HTMLElement;
    if (target) {
      setCurrentFocus(target);
      announceToScreenReader(`Focused on ${target.textContent || target.tagName.toLowerCase()}`);
    }
  }, []);

  // Keyboard navigation enhancements
  const handleKeyDown = useCallback((_e: KeyboardEvent) => {
    // Tab navigation detected
    setIsKeyboardUser(true);
  }, []);

  // Announce to screen reader
  const announceToScreenReader = useCallback((message: string) => {
    // Create live region for screen readers
    if (!announcementRef.current) {
      const liveRegion = document.createElement('div');
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.className = 'sr-only';
      document.body.appendChild(liveRegion);
      announcementRef.current = liveRegion;
    }
    
    if (announcementRef.current) {
      announcementRef.current.textContent = message;
    }
  }, []);

  // Auto-optimize accessibility
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0
  useEffect(() => {
    if (!settings.keyboardNavigation) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      // Skip if user is typing in an input
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }

      // Enhanced keyboard shortcuts
      switch (e.key) {
        case 'Tab':
          // Enhanced tab navigation with visual feedback
          if (e.shiftKey) {
            // Shift+Tab - previous element
            announceToScreenReader('Navigating to previous element');
          } else {
            // Tab - next element
            announceToScreenReader('Navigating to next element');
          }
          break;
        
        case 'Enter':
        case ' ':
          // Enter or Space - activate element
          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {
            announceToScreenReader(`Activating ${target.textContent || 'element'}`);
          }
          e.preventDefault();
          break;
        
        case 'Escape':
          // Escape - close modals, dropdowns
          announceToScreenReader('Closing current element');
          break;
        
        case 'h':
        case 'H': {
          // H - go to next heading
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            navigateToNextHeading();
          }
          break;
        }
        
        case 'l':
        case 'L': {
          // L - go to next link
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            navigateToNextLink();
          }
          break;
        }
        
        case 'm':
        case 'M': {
          // M - go to main content
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            navigateToMainContent();
          }
          break;
        }
          
        case 'h':
        case 'H': {
          // Go to home page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/';
          }
          break;
        }
          
        case 's':
        case 'S': {
          // Go to services page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/services';
          }
          break;
        }
          
        case 'c':
        case 'C': {
          // Go to contact page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/contact';
          }
          break;
        }
<<<<<<< HEAD
=======
      });

      // Check color contrast
      const textElements = document.querySelectorAll('p, span, div, h1, h2, h3, h4, h5, h6');
      textElements.forEach(element => {
        const style = window.getComputedStyle(element);
        const color = style.color;
        const backgroundColor = style.backgroundColor;
        // Basic contrast check (simplified)
        if (color && backgroundColor && color === backgroundColor) {
          issues.push(`Potential contrast issue: ${element.tagName}`);
        }
      });

      if (issues.length > 0) {
        announceToScreenReader(`Found ${issues.length} accessibility issues`);
      } else {
        announceToScreenReader('No accessibility issues found');
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [settings.keyboardNavigation]);

  // Screen reader announcements
  useEffect(() => {
    const handleFocusIn = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      setCurrentFocus(target);
      
      // Announce focus changes to screen reader
      if (settings.screenReader) {
        const label = target.getAttribute('aria-label') || 
                     target.getAttribute('title') || 
                     target.textContent || 
                     target.tagName.toLowerCase();
        announceToScreenReader(`Focused on ${label}`);
      }
      
      // Enhanced focus indicators
      if (settings.focusIndicators) {
        target.style.outline = '3px solid #0891b2';
        target.style.outlineOffset = '2px';
      }
    };

    const handleFocusOut = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      if (settings.focusIndicators) {
        target.style.outline = '';
        target.style.outlineOffset = '';
      }
    };

    document.addEventListener('focusin', handleFocusIn);
    document.addEventListener('focusout', handleFocusOut);
    
    return () => {
      document.removeEventListener('focusin', handleFocusIn);
      document.removeEventListener('focusout', handleFocusOut);
    };
  }, [settings.screenReader, settings.focusIndicators]);

  // Navigation functions
  const navigateToNextHeading = useCallback(() => {
    const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));
    const currentIndex = headings.findIndex(h => h === currentFocus);
    const nextIndex = (currentIndex + 1) % headings.length;
    const nextHeading = headings[nextIndex] as HTMLElement;
    
    if (nextHeading) {
      nextHeading.focus();
      nextHeading.scrollIntoView({ behavior: 'smooth', block: 'center' });
      announceToScreenReader(`Navigated to ${nextHeading.textContent}`);
    }
  }, [currentFocus]);

  const navigateToNextLink = useCallback(() => {
    const links = Array.from(document.querySelectorAll('a[href]'));
    const currentIndex = links.findIndex(l => l === currentFocus);
    const nextIndex = (currentIndex + 1) % links.length;
    const nextLink = links[nextIndex] as HTMLElement;
    
    if (nextLink) {
      nextLink.focus();
      nextLink.scrollIntoView({ behavior: 'smooth', block: 'center' });
      announceToScreenReader(`Navigated to link: ${nextLink.textContent}`);
    }
  }, [currentFocus]);

  const navigateToMainContent = useCallback(() => {
    const main = document.querySelector('main') || document.querySelector('[role="main"]');
    if (main) {
      (main as HTMLElement).focus();
      main.scrollIntoView({ behavior: 'smooth', block: 'start' });
      announceToScreenReader('Navigated to main content');
    }
  }, []);

  // Screen reader announcements
  const announceToScreenReader = useCallback((message: string) => {
    if (!settings.screenReader) return;
    
    // Create live region for announcements
    let liveRegion = document.getElementById('accessibility-live-region');
    if (!liveRegion) {
      liveRegion = document.createElement('div');
      liveRegion.id = 'accessibility-live-region';
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.style.position = 'absolute';
      liveRegion.style.left = '-10000px';
      liveRegion.style.width = '1px';
      liveRegion.style.height = '1px';
      liveRegion.style.overflow = 'hidden';
      document.body.appendChild(liveRegion);
    }
    
    liveRegion.textContent = message;
    
    // Add to announcements list
    setAnnouncements(prev => [...prev.slice(-4), message]);
  }, [settings.screenReader]);

  // Sound effects
  const playSoundEffect = useCallback((type: 'focus' | 'error' | 'success') => {
    if (!settings.soundEffects) return;
    
    // Simple sound effects using Web Audio API
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      switch (type) {
        case 'focus':
          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
          break;
        case 'error':
          oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
          break;
        case 'success':
          oscillator.frequency.setValueAtTime(1200, audioContext.currentTime);
          break;
      }
      
      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.1);
    } catch (error) {
      // Could not play sound effect
    }
  }, [settings.soundEffects]);

  // Update setting
  const updateSetting = useCallback((key: keyof AccessibilitySettings, value: AccessibilitySettings[keyof AccessibilitySettings]) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    
    // Play sound effect for certain changes
    if (key === 'highContrast' || key === 'largeText' || key === 'reducedMotion') {
      playSoundEffect('success');
    }
  }, [settings, playSoundEffect]);

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyboardShortcuts = (e: KeyboardEvent) => {
      // Ctrl/Cmd + Shift + A to toggle accessibility panel
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'A') {
        e.preventDefault();
        setIsPanelOpen(prev => !prev);
      }

      // Ctrl/Cmd + Shift + H to toggle high contrast
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'H') {
        e.preventDefault();
        applySettings({ ...settings, highContrast: !settings.highContrast });
      }

      // Ctrl/Cmd + Shift + L to toggle large text
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'L') {
        e.preventDefault();
        applySettings({ ...settings, largeText: !settings.largeText });
      }

      // Ctrl/Cmd + Shift + M to toggle reduced motion
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'M') {
        e.preventDefault();
        applySettings({ ...settings, reducedMotion: !settings.reducedMotion });
      }
    };

    document.addEventListener('keydown', handleKeyboardShortcuts);
    return () => document.removeEventListener('keydown', handleKeyboardShortcuts);
  }, [settings, applySettings]);

  // Quick accessibility shortcuts
<<<<<<< HEAD
  const quickActions = [
    { label: 'Toggle High Contrast', action: () => updateSetting('highContrast', !settings.highContrast) },
    { label: 'Toggle Large Text', action: () => updateSetting('fontSize', settings.fontSize === 'normal' ? 'large' : 'normal') },
    { label: 'Toggle Reduced Motion', action: () => updateSetting('reducedMotion', !settings.reducedMotion) },
    { label: 'Toggle Focus Indicators', action: () => updateSetting('focusIndicators', !settings.focusIndicators) },
  ];
=======
  const toggleHighContrast = () => {
    applySettings({ ...settings, highContrast: !settings.highContrast });
  };

  const toggleLargeText = () => {
    applySettings({ ...settings, largeText: !settings.largeText });
  };

  const toggleReducedMotion = () => {
    applySettings({ ...settings, reducedMotion: !settings.reducedMotion });
  };

  const resetSettings = () => {
    const defaultSettings: AccessibilitySettings = {
      highContrast: false,
      largeText: false,
      reducedMotion: false,
      highSaturation: false,
      focusIndicator: true,
      screenReader: false,
      keyboardNavigation: false,
      colorBlindness: 'none',
      fontSize: 'medium',
      lineSpacing: 'normal',
      cursorSize: 'medium'
    };
    applySettings(defaultSettings);
  };

  if (!showPanel && !isPanelOpen) {
    return null;
  }
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0

  return (
    <>
      {/* Accessibility Toggle Button */}
      <motion.button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-20 right-4 z-50 bg-gradient-to-r from-purple-500 to-pink-600 text-white p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        title="Accessibility Settings"
        aria-label="Open accessibility settings"
      >
        <Accessibility className="w-6 h-6" />
      </motion.button>

      {/* Accessibility Panel */}
      <AnimatePresence>
<<<<<<< HEAD
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 100, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 100, scale: 0.8 }}
            className="fixed bottom-32 right-4 z-50 bg-gray-900/95 backdrop-blur-sm border border-purple-400/30 rounded-2xl shadow-2xl w-96 max-h-[80vh] overflow-hidden"
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-purple-500 to-pink-600 p-4 text-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Accessibility className="w-5 h-5" />
                  <h3 className="font-semibold">Accessibility</h3>
                </div>
                <button
                  onClick={() => setIsOpen(false)}
                  className="hover:bg-white/20 p-1 rounded transition-colors"
                  aria-label="Close accessibility settings"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-4 space-y-4 max-h-[60vh] overflow-y-auto">
              {/* Quick Actions */}
              <div className="space-y-2">
                <h4 className="font-semibold text-purple-400">Quick Actions</h4>
                <div className="grid grid-cols-2 gap-2">
                  {quickActions.map((action, index) => (
                    <button
                      key={index}
                      onClick={action.action}
                      className="bg-gray-800/50 hover:bg-gray-700/50 p-2 rounded text-sm text-white transition-colors"
                    >
                      {action.label}
=======
        {isPanelOpen && (
          <motion.div
            initial={{ opacity: 0, y: 100 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 100 }}
            className="fixed bottom-4 left-4 bg-gray-900/95 backdrop-blur-md border border-cyan-400/20 rounded-xl p-6 w-96 shadow-2xl z-50"
            role="dialog"
            aria-labelledby="accessibility-panel-title"
            aria-describedby="accessibility-panel-description"
          >
            <div className="flex items-center justify-between mb-6">
              <h2 id="accessibility-panel-title" className="text-xl font-semibold text-white flex items-center">
                <Accessibility className="w-6 h-6 mr-2 text-cyan-400" />
                Accessibility
              </h2>
              <button
                onClick={() => setIsPanelOpen(false)}
                className="text-gray-400 hover:text-white transition-colors"
                aria-label="Close accessibility panel"
              >
                ×
              </button>
            </div>
            
            <div id="accessibility-panel-description" className="text-sm text-gray-400 mb-6">
              Customize your viewing experience with these accessibility options
            </div>
            
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {/* High Contrast */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Contrast className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-white font-medium">High Contrast</div>
                    <div className="text-sm text-gray-400">Enhanced color contrast</div>
                  </div>
                </div>
                <button
                  onClick={toggleHighContrast}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.highContrast ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.highContrast}
                  aria-label="Toggle high contrast"
                >
                  <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                  }`} />
                </button>
              </div>

              {/* Large Text */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <ZoomIn className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-white font-medium">Large Text</div>
                    <div className="text-sm text-gray-400">Increased font size</div>
                  </div>
                </div>
                <button
                  onClick={toggleLargeText}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.largeText ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.largeText}
                  aria-label="Toggle large text"
                >
                  <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    settings.largeText ? 'translate-x-6' : 'translate-x-1'
                  }`} />
                </button>
              </div>

              {/* Reduced Motion */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Eye className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-white font-medium">Reduced Motion</div>
                    <div className="text-sm text-gray-400">Minimize animations</div>
                  </div>
                </div>
                <button
                  onClick={toggleReducedMotion}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.reducedMotion ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.reducedMotion}
                  aria-label="Toggle reduced motion"
                >
                  <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    settings.reducedMotion ? 'translate-x-6' : 'translate-x-1'
                  }`} />
                </button>
              </div>

              {/* Font Size Control */}
              <div className="space-y-2">
                <div className="flex items-center space-x-3">
                  <ZoomIn className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-white font-medium">Font Size</div>
                    <div className="text-sm text-gray-400">Adjust text size</div>
                  </div>
                </div>
                <div className="flex space-x-2">
                  {(['small', 'medium', 'large', 'extra-large'] as const).map((size) => (
                    <button
                      key={size}
                      onClick={() => applySettings({ ...settings, fontSize: size })}
                      className={`px-3 py-1 rounded text-sm transition-colors ${
                        settings.fontSize === size
                          ? 'bg-cyan-500 text-white'
                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      }`}
                    >
                      {size.charAt(0).toUpperCase() + size.slice(1)}
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0
                    </button>
                  ))}
                </div>
              </div>

<<<<<<< HEAD
              {/* Visual Settings */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Eye className="w-4 h-4" />
                  <span>Visual Settings</span>
                </h4>
                
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.highContrast}
                      onChange={(e) => updateSetting('highContrast', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">High Contrast</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.largeText}
                      onChange={(e) => updateSetting('largeText', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Large Text</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.focusIndicators}
                      onChange={(e) => updateSetting('focusIndicators', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Focus Indicators</span>
                  </label>
                </div>
              </div>

              {/* Motion Settings */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <MousePointer className="w-4 h-4" />
                  <span>Motion & Interaction</span>
                </h4>
                
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.reducedMotion}
                      onChange={(e) => updateSetting('reducedMotion', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Reduced Motion</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.keyboardNavigation}
                      onChange={(e) => updateSetting('keyboardNavigation', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Enhanced Keyboard Navigation</span>
                  </label>
                </div>
              </div>

              {/* Screen Reader */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Ear className="w-4 h-4" />
                  <span>Screen Reader</span>
                </h4>
                
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.screenReader}
                      onChange={(e) => updateSetting('screenReader', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Enhanced Screen Reader Support</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.soundEffects}
                      onChange={(e) => updateSetting('soundEffects', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Sound Effects</span>
                  </label>
                </div>
              </div>

              {/* Font Size */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Type className="w-4 h-4" />
                  <span>Text Size</span>
                </h4>
                
                <div className="grid grid-cols-3 gap-2">
                  {(['normal', 'large', 'xlarge'] as const).map((size) => (
                    <button
                      key={size}
                      onClick={() => updateSetting('fontSize', size)}
                      className={`p-2 rounded text-sm transition-colors ${
                        settings.fontSize === size
                          ? 'bg-purple-600 text-white'
                          : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                      }`}
                    >
                      {size === 'normal' ? 'Normal' : size === 'large' ? 'Large' : 'X-Large'}
                    </button>
                  ))}
                </div>

              {/* Color Blind Mode */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Contrast className="w-4 h-4" />
                  <span>Color Vision</span>
                </h4>
                
                <div className="grid grid-cols-2 gap-2">
                  {(['none', 'protanopia', 'deuteranopia', 'tritanopia'] as const).map((mode) => (
                    <button
                      key={mode}
                      onClick={() => updateSetting('colorBlindMode', mode)}
                      className={`p-2 rounded text-sm transition-colors ${
                        settings.colorBlindMode === mode
                          ? 'bg-purple-600 text-white'
                          : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                      }`}
                    >
                      {mode === 'none' ? 'Normal' : mode.charAt(0).toUpperCase() + mode.slice(1)}
                    </button>
                  ))}
                </div>
              </div>

              {/* Keyboard Shortcuts Help */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Keyboard className="w-4 h-4" />
                  <span>Keyboard Shortcuts</span>
                </h4>
                
                <div className="text-xs text-gray-400 space-y-1">
                  <div>Ctrl/Cmd + H: Next heading</div>
                  <div>Ctrl/Cmd + L: Next link</div>
                  <div>Ctrl/Cmd + M: Main content</div>
                  <div>Tab: Navigate elements</div>
                  <div>Escape: Close/back</div>
                </div>
              </div>

              {/* Recent Announcements */}
              {announcements.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-semibold text-purple-400">Recent Announcements</h4>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {announcements.map((announcement, index) => (
                      <div key={index} className="bg-gray-800/20 border border-purple-500/30 p-2 rounded text-sm text-purple-300">
                        {announcement}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Render children with accessibility enhancements */}
      {children}
=======
              {/* Color Blindness Support */}
              <div className="space-y-2">
                <div className="flex items-center space-x-3">
                  <Monitor className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-white font-medium">Color Vision</div>
                    <div className="text-sm text-gray-400">Color blindness support</div>
                  </div>
                </div>
                <select
                  value={settings.colorBlindness}
                  onChange={(e) => applySettings({ ...settings, colorBlindness: e.target.value as any })}
                  className="w-full bg-gray-800 border border-gray-600 rounded px-3 py-2 text-white text-sm"
                >
                  <option value="none">Normal Vision</option>
                  <option value="protanopia">Protanopia (Red-Blind)</option>
                  <option value="deuteranopia">Deuteranopia (Green-Blind)</option>
                  <option value="tritanopia">Tritanopia (Blue-Blind)</option>
                </select>
              </div>

              {/* Keyboard Navigation */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Keyboard className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-white font-medium">Keyboard Navigation</div>
                    <div className="text-sm text-gray-400">Enhanced keyboard support</div>
                  </div>
                </div>
                <button
                  onClick={() => applySettings({ ...settings, keyboardNavigation: !settings.keyboardNavigation })}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.keyboardNavigation ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.keyboardNavigation}
                  aria-label="Toggle keyboard navigation"
                >
                  <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    settings.keyboardNavigation ? 'translate-x-6' : 'translate-x-1'
                  }`} />
                </button>
              </div>

              {/* Reset Button */}
              <button
                onClick={resetSettings}
                className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
              >
                <RotateCcw className="w-4 h-4" />
                <span>Reset to Default</span>
              </button>
            </div>

            {/* Keyboard Shortcuts Help */}
            <div className="mt-6 pt-4 border-t border-gray-700">
              <button
                onClick={() => setShowKeyboardShortcuts(!showKeyboardShortcuts)}
                className="text-cyan-400 hover:text-cyan-300 text-sm flex items-center space-x-2"
              >
                <Keyboard className="w-4 h-4" />
                <span>Keyboard Shortcuts</span>
              </button>
              
              {showKeyboardShortcuts && (
                <div className="mt-3 p-3 bg-gray-800/50 rounded text-xs text-gray-300">
                  <div className="space-y-1">
                    <div><kbd className="bg-gray-700 px-1 py-0.5 rounded">Ctrl/Cmd + Shift + A</kbd> Toggle panel</div>
                    <div><kbd className="bg-gray-700 px-1 py-0.5 rounded">Ctrl/Cmd + Shift + H</kbd> High contrast</div>
                    <div><kbd className="bg-gray-700 px-1 py-0.5 rounded">Ctrl/Cmd + Shift + L</kbd> Large text</div>
                    <div><kbd className="bg-gray-700 px-1 py-0.5 rounded">Ctrl/Cmd + Shift + M</kbd> Reduced motion</div>
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Floating Accessibility Button */}
      <motion.button
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={() => setIsPanelOpen(!isPanelOpen)}
        className="fixed bottom-4 right-4 w-14 h-14 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 z-40 flex items-center justify-center"
        aria-label="Open accessibility panel"
        title="Accessibility Options"
      >
        <Accessibility className="w-6 h-6" />
      </motion.button>

      {/* Screen Reader Announcements */}
      <div ref={announcementRef} className="sr-only" aria-live="polite" aria-atomic="true" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-36d0
    </>
  );
};

export default AccessibilityEnhancer;