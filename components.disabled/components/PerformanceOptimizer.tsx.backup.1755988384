<<<<<<< HEAD
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Zap, TrendingUp, AlertTriangle, CheckCircle, X, Settings, RefreshCw } from 'lucide-react';

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
  score: string;
  grade: 'A' | 'B' | 'C' | 'D' | 'F';
=======
import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Zap, Battery, Wifi, Shield } from 'lucide-react';

interface PerformanceMetrics {
  loadTime: number;
  firstPaint: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
}

interface PerformanceOptimizerProps {
  onMetricsUpdate?: (metrics: PerformanceMetrics) => void;
}

<<<<<<< HEAD
const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({ children }) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [showMetrics, setShowMetrics] = useState(false);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationLevel, setOptimizationLevel] = useState<'low' | 'medium' | 'high'>('medium');
  const [showDebugPanel, setShowDebugPanel] = useState(false);
  const [showMetricsState, setShowMetricsState] = useState(showMetrics);
  const [performanceIssues, setPerformanceIssues] = useState<string[]>([]);
  const [optimizations, setOptimizations] = useState<string[]>([]);
  const [serviceWorkerStatus, setServiceWorkerStatus] = useState<'installing' | 'installed' | 'error' | 'not-supported'>('not-supported');

  // Register service worker for PWA capabilities
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker
        .register('/sw.js')
        .then((registration) => {
          setServiceWorkerStatus('installing');
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed') {
                  setServiceWorkerStatus('installed');
                }
              });
            }
          });
        })
        .catch(() => setServiceWorkerStatus('error'));
    }
  }, []);

  // Performance monitoring
  const measurePerformance = useCallback(async () => {
    if ('PerformanceObserver' in window) {
      try {
        // Measure First Contentful Paint
        const fcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');
          if (fcpEntry) {
            setMetrics(prev => prev ? { ...prev, fcp: fcpEntry.startTime } : null);
          }
        });
        fcpObserver.observe({ entryTypes: ['paint'] });

        // Measure Largest Contentful Paint
        const lcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
          }
        });
        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

        // Measure First Input Delay
        const fidObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fidEntry = entries.find(entry => entry.entryType === 'first-input');
          if (fidEntry) {
            setMetrics(prev => prev ? { ...prev, fid: fidEntry.processingStart - fidEntry.startTime } : null);
          }
        });
        fidObserver.observe({ entryTypes: ['first-input'] });

        // Measure Cumulative Layout Shift
        const clsObserver = new PerformanceObserver((list) => {
          let clsValue = 0;
          for (const entry of list.getEntries()) {
            if (!entry.hadRecentInput) {
              clsValue += (entry as any).value;
            }
          }
          setMetrics(prev => prev ? { ...prev, cls: clsValue } : null);
        });
        clsObserver.observe({ entryTypes: ['layout-shift'] });

        // Measure Time to First Byte
        const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        if (navigationEntry) {
          const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
          setMetrics(prev => prev ? { ...prev, ttfb } : null);
        }

        // Calculate performance score
        setTimeout(() => {
          calculatePerformanceScore();
        }, 2000);

      } catch (error) {
        console.error('Performance measurement error:', error);
      }
=======
const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({ onMetricsUpdate }) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    loadTime: 0,
    firstPaint: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    cumulativeLayoutShift: 0,
    firstInputDelay: 0
  });

  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationStatus, setOptimizationStatus] = useState<string>('');

  useEffect(() => {
    // Measure initial performance metrics
    measurePerformance();
    
    // Set up performance observer for real-time monitoring
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            updateMetric('largestContentfulPaint', entry.startTime);
          }
        }
      });
      
      observer.observe({ entryTypes: ['largest-contentful-paint'] });
      
      return () => observer.disconnect();
    }
  }, []);

  const measurePerformance = () => {
    if ('performance' in window) {
      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      const paint = performance.getEntriesByType('paint');
      
      const newMetrics: PerformanceMetrics = {
        loadTime: navigation.loadEventEnd - navigation.loadEventStart,
        firstPaint: paint.find(p => p.name === 'first-paint')?.startTime || 0,
        firstContentfulPaint: paint.find(p => p.name === 'first-contentful-paint')?.startTime || 0,
        largestContentfulPaint: 0,
        cumulativeLayoutShift: 0,
        firstInputDelay: 0
      };

      setMetrics(newMetrics);
      if (onMetricsUpdate) {
        onMetricsUpdate(newMetrics);
      }
    }
  };

  const updateMetric = (key: keyof PerformanceMetrics, value: number) => {
    setMetrics(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const optimizePerformance = async () => {
    setIsOptimizing(true);
    setOptimizationStatus('Analyzing performance...');

    // Simulate performance optimization process
    const steps = [
      'Analyzing performance metrics...',
      'Optimizing image loading...',
      'Compressing assets...',
      'Implementing lazy loading...',
      'Optimizing CSS delivery...',
      'Finalizing optimizations...'
    ];

    for (let i = 0; i < steps.length; i++) {
      setOptimizationStatus(steps[i]);
      await new Promise(resolve => setTimeout(resolve, 800));
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
    }
  }, []);

<<<<<<< HEAD
  const calculatePerformanceScore = useCallback(() => {
    if (!metrics) return;

    let score = 0;
    let grade: 'A' | 'B' | 'C' | 'D' | 'F' = 'F';

    // FCP scoring (0-100)
    if (metrics.fcp < 1800) score += 25;
    else if (metrics.fcp < 3000) score += 15;
    else if (metrics.fcp < 4000) score += 5;

    // LCP scoring (0-100)
    if (metrics.lcp < 2500) score += 25;
    else if (metrics.lcp < 4000) score += 15;
    else if (metrics.lcp < 6000) score += 5;

    // FID scoring (0-100)
    if (metrics.fid < 100) score += 25;
    else if (metrics.fid < 300) score += 15;
    else if (metrics.fid < 500) score += 5;

    // CLS scoring (0-100)
    if (metrics.cls < 0.1) score += 25;
    else if (metrics.cls < 0.25) score += 15;
    else if (metrics.cls < 0.4) score += 5;

    // Grade assignment
    if (score >= 90) grade = 'A';
    else if (score >= 80) grade = 'B';
    else if (score >= 70) grade = 'C';
    else if (score >= 60) grade = 'D';

    setMetrics(prev => prev ? { ...prev, score: score.toString(), grade } : null);
  }, [metrics]);

  // Performance optimizations
  const runOptimizations = useCallback(async () => {
    setIsOptimizing(true);
    const newOptimizations: string[] = [];

    try {
      // Preload critical resources
      const criticalResources = [
        '/fonts/inter-var.woff2',
        '/images/hero-bg.jpg',
        '/api/services'
      ];

      criticalResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource;
        link.as = resource.includes('.woff2') ? 'font' : resource.includes('.jpg') ? 'image' : 'fetch';
        document.head.appendChild(link);
        newOptimizations.push(`Preloaded critical resource: ${resource}`);
      });

      // Optimize images
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.loading) {
          img.loading = 'lazy';
          img.decoding = 'async';
          newOptimizations.push('Added lazy loading to images');
        }
      });

      // Add resource hints
      const resourceHints = [
        { rel: 'dns-prefetch', href: '//fonts.googleapis.com' },
        { rel: 'preconnect', href: '//fonts.googleapis.com' },
        { rel: 'preconnect', href: '//api.ziontechgroup.com' }
      ];

      resourceHints.forEach(hint => {
        const link = document.createElement('link');
        link.rel = hint.rel;
        link.href = hint.href;
        document.head.appendChild(link);
        newOptimizations.push(`Added resource hint: ${hint.rel} ${hint.href}`);
      });

      // Optimize CSS delivery
      const criticalCSS = document.querySelector('style[data-critical]');
      if (criticalCSS) {
        newOptimizations.push('Critical CSS inlined');
      }

      setOptimizations(newOptimizations);
    } catch (error) {
      console.error('Optimization error:', error);
    } finally {
      setIsOptimizing(false);
    }
  }, []);

  useEffect(() => {
    measurePerformance();
    
    // Re-measure performance on route changes
    const handleRouteChange = () => {
      setTimeout(measurePerformance, 1000);
    };

    window.addEventListener('popstate', handleRouteChange);
    return () => window.removeEventListener('popstate', handleRouteChange);
  }, [measurePerformance]);

  const getGradeColor = (grade: string) => {
    switch (grade) {
      case 'A': return 'text-green-400';
      case 'B': return 'text-blue-400';
      case 'C': return 'text-yellow-400';
      case 'D': return 'text-orange-400';
      case 'F': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  return (
    <>
      {children}
      
      {/* Performance Metrics Panel */}
      <AnimatePresence>
        {showMetrics && (
          <motion.div
            initial={{ opacity: 0, x: 300 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 300 }}
            className="fixed top-20 right-4 w-80 bg-black/90 backdrop-blur-lg border border-cyan-400/30 rounded-lg p-4 z-50 shadow-2xl"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <Zap className="w-5 h-5 text-cyan-400" />
                Performance Monitor
              </h3>
              <button
                onClick={() => setShowMetrics(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            {metrics && (
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-300">Performance Score:</span>
                  <span className={`text-lg font-bold ${getGradeColor(metrics.grade)}`}>
                    {metrics.score}/100 ({metrics.grade})
                  </span>
                </div>
                
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">FCP</div>
                    <div className="text-white">{metrics.fcp?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">LCP</div>
                    <div className="text-white">{metrics.lcp?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">FID</div>
                    <div className="text-white">{metrics.fid?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">CLS</div>
                    <div className="text-white">{metrics.cls?.toFixed(3)}</div>
                  </div>
                </div>

                <div className="pt-2 border-t border-gray-700">
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-gray-400">Service Worker:</span>
                    <span className={`${
                      serviceWorkerStatus === 'installed' ? 'text-green-400' :
                      serviceWorkerStatus === 'installing' ? 'text-yellow-400' :
                      serviceWorkerStatus === 'error' ? 'text-red-400' :
                      'text-gray-400'
                    }`}>
                      {serviceWorkerStatus}
                    </span>
                  </div>
                </div>
              </div>
            )}

            <div className="mt-4 space-y-2">
              <button
                onClick={runOptimizations}
                disabled={isOptimizing}
                className="w-full px-3 py-2 bg-cyan-600 hover:bg-cyan-700 disabled:bg-gray-600 text-white text-sm rounded transition-colors flex items-center justify-center gap-2"
              >
                {isOptimizing ? (
                  <RefreshCw className="w-4 h-4 animate-spin" />
                ) : (
                  <TrendingUp className="w-4 h-4" />
                )}
                {isOptimizing ? 'Optimizing...' : 'Run Optimizations'}
              </button>

              {optimizations.length > 0 && (
                <div className="max-h-32 overflow-y-auto">
                  {optimizations.map((opt, index) => (
                    <div key={index} className="text-xs text-green-400 bg-green-400/10 p-2 rounded">
                      ✓ {opt}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Performance Toggle Button */}
      <motion.button
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={() => setShowMetrics(!showMetrics)}
        className="fixed bottom-6 right-6 w-12 h-12 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full shadow-lg shadow-cyan-500/25 flex items-center justify-center text-white z-40 hover:from-cyan-600 hover:to-blue-700 transition-all duration-300"
        title="Performance Monitor"
      >
        <Zap className="w-6 h-6" />
      </motion.button>
    </>
=======
    // Simulate improved metrics
    const optimizedMetrics = {
      ...metrics,
      loadTime: Math.max(metrics.loadTime * 0.7, 100),
      firstPaint: Math.max(metrics.firstPaint * 0.8, 50),
      firstContentfulPaint: Math.max(metrics.firstContentfulPaint * 0.8, 100)
    };

    setMetrics(optimizedMetrics);
    setOptimizationStatus('Optimization complete!');
    
    setTimeout(() => {
      setIsOptimizing(false);
      setOptimizationStatus('');
    }, 2000);
  };

  const getPerformanceScore = () => {
    let score = 100;
    
    if (metrics.loadTime > 3000) score -= 20;
    if (metrics.firstPaint > 1000) score -= 15;
    if (metrics.firstContentfulPaint > 1500) score -= 15;
    if (metrics.largestContentfulPaint > 2500) score -= 20;
    if (metrics.cumulativeLayoutShift > 0.1) score -= 15;
    if (metrics.firstInputDelay > 100) score -= 15;
    
    return Math.max(score, 0);
  };

  const getPerformanceGrade = (score: number) => {
    if (score >= 90) return { grade: 'A', color: 'text-green-400', bg: 'bg-green-500/20' };
    if (score >= 80) return { grade: 'B', color: 'text-yellow-400', bg: 'bg-yellow-500/20' };
    if (score >= 70) return { grade: 'C', color: 'text-orange-400', bg: 'bg-orange-500/20' };
    return { grade: 'D', color: 'text-red-400', bg: 'bg-red-500/20' };
  };

  const score = getPerformanceScore();
  const grade = getPerformanceGrade(score);

  return (
    <div className="fixed bottom-4 left-4 z-40">
      <motion.div
        initial={{ opacity: 0, x: -100 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gray-900/95 backdrop-blur-sm border border-gray-700 rounded-xl p-4 shadow-2xl max-w-sm"
      >
        {/* Performance Score */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <Zap className="w-5 h-5 text-yellow-400" />
            <span className="text-sm font-medium text-white">Performance</span>
          </div>
          <div className={`px-3 py-1 rounded-full text-sm font-bold ${grade.bg} ${grade.color}`}>
            {grade.grade}
          </div>
        </div>

        {/* Score Bar */}
        <div className="w-full bg-gray-700 rounded-full h-2 mb-4">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${score}%` }}
            transition={{ duration: 1, delay: 0.5 }}
            className={`h-2 rounded-full ${
              score >= 90 ? 'bg-green-500' :
              score >= 80 ? 'bg-yellow-500' :
              score >= 70 ? 'bg-orange-500' : 'bg-red-500'
            }`}
          />
        </div>

        {/* Metrics */}
        <div className="space-y-2 mb-4">
          <div className="flex items-center justify-between text-xs">
            <span className="text-gray-400">Load Time:</span>
            <span className="text-white">{Math.round(metrics.loadTime)}ms</span>
          </div>
          <div className="flex items-center justify-between text-xs">
            <span className="text-gray-400">First Paint:</span>
            <span className="text-white">{Math.round(metrics.firstPaint)}ms</span>
          </div>
          <div className="flex items-center justify-between text-xs">
            <span className="text-gray-400">FCP:</span>
            <span className="text-white">{Math.round(metrics.firstContentfulPaint)}ms</span>
          </div>
        </div>

        {/* Optimization Button */}
        <button
          onClick={optimizePerformance}
          disabled={isOptimizing}
          className="w-full bg-gradient-to-r from-cyan-500 to-purple-600 text-white py-2 px-4 rounded-lg text-sm font-medium hover:shadow-lg hover:shadow-cyan-500/25 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isOptimizing ? (
            <div className="flex items-center justify-center">
              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2" />
              Optimizing...
            </div>
          ) : (
            'Optimize Performance'
          )}
        </button>

        {/* Status Message */}
        {optimizationStatus && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-3 text-xs text-center text-cyan-400"
          >
            {optimizationStatus}
          </motion.div>
        )}

        {/* Performance Tips */}
        <div className="mt-4 pt-3 border-t border-gray-700">
          <div className="text-xs text-gray-400 mb-2">Performance Tips:</div>
          <div className="space-y-1 text-xs text-gray-500">
            <div className="flex items-center gap-1">
              <Battery className="w-3 h-3" />
              <span>Enable lazy loading</span>
            </div>
            <div className="flex items-center gap-1">
              <Wifi className="w-3 h-3" />
              <span>Optimize images</span>
            </div>
            <div className="flex items-center gap-1">
              <Shield className="w-3 h-3" />
              <span>Minimize CSS/JS</span>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
  );
};

export default PerformanceOptimizer;