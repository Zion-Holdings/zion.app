import React from 'react';
import { motion } from 'framer-motion';

interface LoadingSpinnerProps {
<<<<<<< HEAD
  size?: 'sm' | 'md' | 'lg';
  color?: 'primary' | 'secondary' | 'white';
  text?: string;
  showText?: boolean;
=======
  size?: 'sm' | 'md' | 'lg' | 'xl';
  color?: 'primary' | 'secondary' | 'accent' | 'white';
  text?: string;
  fullScreen?: boolean;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-a647
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  size = 'md',
  color = 'primary',
<<<<<<< HEAD
  text = 'Loading...',
  showText = true
=======
  text,
  fullScreen = false
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-a647
}) => {
  const sizeClasses = {
    sm: 'w-6 h-6',
    md: 'w-12 h-12',
<<<<<<< HEAD
    lg: 'w-16 h-16'
=======
    lg: 'w-16 h-16',
    xl: 'w-24 h-24'
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-a647
  };

  const colorClasses = {
    primary: 'border-cyan-500',
<<<<<<< HEAD
    secondary: 'border-blue-500',
    white: 'border-white'
  };

  const textSizeClasses = {
    sm: 'text-sm',
    md: 'text-base',
    lg: 'text-lg'
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-4" role="status" aria-label="Loading">
      <motion.div
        className={`${sizeClasses[size]} ${colorClasses[color]} border-4 border-t-transparent rounded-full`}
        animate={{ rotate: 360 }}
        transition={{
          duration: 1,
          repeat: Infinity,
          ease: "linear"
        }}
      />
      
      {showText && (
        <motion.p
          className={`${textSizeClasses[size]} text-gray-400 font-medium`}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
=======
    secondary: 'border-purple-500',
    accent: 'border-emerald-500',
    white: 'border-white'
  };

  const spinner = (
    <div className="flex flex-col items-center justify-center space-y-4">
      <div className="relative">
        <motion.div
          className={`${sizeClasses[size]} ${colorClasses[color]} border-4 border-t-transparent rounded-full`}
          animate={{ rotate: 360 }}
          transition={{
            duration: 1,
            repeat: Infinity,
            ease: "linear"
          }}
        />
        <motion.div
          className={`${sizeClasses[size]} ${colorClasses[color]} border-4 border-b-transparent rounded-full absolute inset-0`}
          animate={{ rotate: -360 }}
          transition={{
            duration: 1.5,
            repeat: Infinity,
            ease: "linear"
          }}
        />
      </div>
      
      {text && (
        <motion.p
          className="text-gray-400 text-center font-medium"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-a647
        >
          {text}
        </motion.p>
      )}
      
<<<<<<< HEAD
      {/* Accessibility: Screen reader only text */}
      <span className="sr-only">Loading, please wait</span>
    </div>
  );
};

// Skeleton loading component for content
export const SkeletonLoader: React.FC<{ className?: string }> = ({ className = '' }) => (
  <div className={`animate-pulse bg-gray-700 rounded ${className}`} />
);

// Page loading component
export const PageLoader: React.FC = () => (
  <div className="min-h-screen flex items-center justify-center bg-black">
    <div className="text-center">
      <LoadingSpinner size="lg" color="primary" text="Loading Zion Tech Group..." />
      <motion.div
        className="mt-8 text-gray-400"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1 }}
      >
        <p className="text-lg">Pioneering the future of technology...</p>
      </motion.div>
    </div>
  </div>
);

// Inline loading component
export const InlineLoader: React.FC<{ text?: string }> = ({ text = 'Loading...' }) => (
  <div className="inline-flex items-center space-x-2">
    <LoadingSpinner size="sm" color="primary" showText={false} />
    <span className="text-sm text-gray-400">{text}</span>
  </div>
);

// Button loading state
export const ButtonLoader: React.FC<{ size?: 'sm' | 'md' | 'lg' }> = ({ size = 'md' }) => (
  <div className="inline-flex items-center space-x-2">
    <LoadingSpinner size="sm" color="white" showText={false} />
    <span className="text-sm">Processing...</span>
  </div>
);

=======
      {/* Loading dots animation */}
      <div className="flex space-x-1">
        {[0, 1, 2].map((i) => (
          <motion.div
            key={i}
            className={`w-2 h-2 ${colorClasses[color].replace('border-', 'bg-')} rounded-full`}
            animate={{
              scale: [1, 1.5, 1],
              opacity: [0.5, 1, 0.5]
            }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              delay: i * 0.2,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>
    </div>
  );

  if (fullScreen) {
    return (
      <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50">
        {spinner}
      </div>
    );
  }

  return spinner;
};

>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-a647
export default LoadingSpinner;