<<<<<<< HEAD
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, TrendingUp, TrendingDown, CheckCircle, AlertTriangle, X, 
  Zap, Clock, BarChart3, Target, Lightbulb, Settings, Monitor, Gauge,
  RefreshCw, Minimize2, Maximize2, Wifi
} from 'lucide-react';

// Web Performance API type definitions
interface LayoutShiftEntry extends PerformanceEntry {
  value: number;
  hadRecentInput: boolean;
}

interface FirstInputEntry extends PerformanceEntry {
  processingStart: number;
  startTime: number;
}

interface LargestContentfulPaintEntry extends PerformanceEntry {
  size: number;
  id: string;
  url?: string;
}

interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  startTime: number;
}

interface PerformanceMetrics {
  loadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
  timeToInteractive: number;
  memoryUsage?: number;
  networkLatency?: number;
}

interface PerformanceMonitorProps {
  showUI?: boolean;
  autoRefresh?: boolean;
  refreshInterval?: number;
}

interface PerformanceMonitorProps {
  onToggle?: (visible: boolean) => void;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ onToggle }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [score, setScore] = useState<PerformanceScore | null>(null);
  const [showDetails, setShowDetails] = useState(false);
  const [optimizationTips, setOptimizationTips] = useState<string[]>([]);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [isMonitoring, setIsMonitoring] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Calculate performance scores
  const calculateScores = useCallback((metrics: PerformanceMetrics): PerformanceScore => {
    const fcpScore = Math.max(0, 100 - (metrics.fcp - 1800) / 20);
    const lcpScore = Math.max(0, 100 - (metrics.lcp - 2500) / 25);
    const fidScore = Math.max(0, 100 - (metrics.fid - 100) / 2);
    const clsScore = Math.max(0, 100 - (metrics.cls * 1000));
    const ttfbScore = Math.max(0, 100 - (metrics.ttfb - 600) / 10);

    const overall = Math.round((fcpScore + lcpScore + fidScore + clsScore + ttfbScore) / 5);

    return {
      overall: Math.max(0, Math.min(100, overall)),
      fcp: Math.max(0, Math.min(100, fcpScore)),
      lcp: Math.max(0, Math.min(100, lcpScore)),
      fid: Math.max(0, Math.min(100, fidScore)),
      cls: Math.max(0, Math.min(100, clsScore)),
      ttfb: Math.max(0, Math.min(100, ttfbScore))
    };
  }, []);

  // Get optimization tips based on performance scores
  const getOptimizationTips = useCallback((score: PerformanceScore): string[] => {
    const tips: string[] = [];

    if (score.fcp < 70) {
      tips.push('Optimize critical rendering path and reduce server response time');
    }
    if (score.lcp < 70) {
      tips.push('Optimize images and implement lazy loading for better LCP');
    }
    if (score.fid < 70) {
      tips.push('Reduce JavaScript execution time and optimize event handlers');
    }
    if (score.cls < 70) {
      tips.push('Set explicit dimensions for images and avoid layout shifts');
    }
    if (score.ttfb < 70) {
      tips.push('Optimize server response time and implement CDN');
    }

    if (tips.length === 0) {
      tips.push('Great performance! Keep monitoring for any regressions');
    }

    return tips;
  }, []);

  // Monitor Core Web Vitals
  const monitorPerformance = useCallback(() => {
    if (!('PerformanceObserver' in window)) return;

    // Monitor Largest Contentful Paint
    const lcpObserver = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      const lastEntry = entries[entries.length - 1] as LargestContentfulPaintEntry;
      if (lastEntry) {
        setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
      }
    });
    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

    // Monitor First Input Delay
    const fidObserver = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      const firstEntry = entries[0] as FirstInputEntry;
      if (firstEntry) {
        const fidValue = firstEntry.processingStart - firstEntry.startTime;
        setMetrics(prev => prev ? { ...prev, fid: fidValue } : null);
      }
    });
    fidObserver.observe({ entryTypes: ['first-input'] });

    // Monitor Cumulative Layout Shift
    const clsObserver = new PerformanceObserver((entryList) => {
      let clsValue = 0;
      entryList.getEntries().forEach((entry) => {
        const layoutEntry = entry as LayoutShiftEntry;
        if (!layoutEntry.hadRecentInput) {
          clsValue += layoutEntry.value;
        }
      });
      setMetrics(prev => prev ? { ...prev, cls: clsValue } : null);
    });
    clsObserver.observe({ entryTypes: ['layout-shift'] });

    // Get other metrics
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigationEntry) {
      const fcp = navigationEntry.domContentLoadedEventEnd - navigationEntry.fetchStart;
      const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
      
      setMetrics(prev => ({
        fcp: prev?.fcp || fcp,
        lcp: prev?.lcp || 0,
        fid: prev?.fid || 0,
        cls: prev?.cls || 0,
        ttfb: prev?.ttfb || ttfb,
        fmp: prev?.fmp || 0,
        si: prev?.si || 0,
        tti: prev?.tti || 0
      }));
    }

    return () => {
      lcpObserver.disconnect();
      fidObserver.disconnect();
      clsObserver.disconnect();
    };
  }, []);

  // Measure performance function
  const measurePerformance = useCallback(() => {
    if (typeof window !== 'undefined' && 'performance' in window) {
      const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigationEntry) {
        const fcp = navigationEntry.domContentLoadedEventEnd - navigationEntry.fetchStart;
        const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
        
        setMetrics(prev => ({
          fcp: prev?.fcp || fcp,
          lcp: prev?.lcp || 0,
          fid: prev?.fid || 0,
          cls: prev?.cls || 0,
          ttfb: prev?.ttfb || ttfb,
          fmp: prev?.fmp || 0,
          si: prev?.si || 0,
          tti: prev?.tti || 0
        }));
      }
    }
  }, []);

  // Start monitoring when component mounts
  useEffect(() => {
    const cleanup = monitorPerformance();
    
    // Show monitor after a delay
    const timer = setTimeout(() => setIsVisible(true), 2000);
    
    return () => {
      cleanup?.();
      clearTimeout(timer);
    };
  }, [monitorPerformance]);

  // Calculate scores when metrics change
  useEffect(() => {
    if (metrics) {
      const newScore = calculateScores(metrics);
      setScore(newScore);
      setOptimizationTips(getOptimizationTips(newScore));
    }
  }, [getPerformanceMetrics]);

  // Auto-refresh functionality
  useEffect(() => {
    if (autoRefresh && isVisible) {
      intervalRef.current = setInterval(measurePerformance, 30000); // Every 30 seconds
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [autoRefresh, isVisible, measurePerformance]);

  // Initial measurement
  useEffect(() => {
    if (isVisible) {
      measurePerformance();
    }
  }, [isVisible, measurePerformance]);

  const toggleExpanded = () => setIsExpanded(!isExpanded);
  const toggleAutoRefresh = () => setAutoRefresh(!autoRefresh);

  if (!isVisible) return null;
=======
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, Zap, Clock, TrendingUp, TrendingDown, 
  AlertTriangle, CheckCircle, X, Settings, RefreshCw,
  BarChart3, Gauge, HardDrive, Wifi, Cpu
} from 'lucide-react';

interface PerformanceMetrics {
  loadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
  timeToInteractive: number;
  memoryUsage?: number;
  networkLatency?: number;
}

interface PerformanceMonitorProps {
  showUI?: boolean;
  autoRefresh?: boolean;
  refreshInterval?: number;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
  showUI = false,
  autoRefresh = false,
  refreshInterval = 30000
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    loadTime: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    cumulativeLayoutShift: 0,
    firstInputDelay: 0,
    timeToInteractive: 0
  });
  const [isVisible, setIsVisible] = useState(showUI);
  const [isExpanded, setIsExpanded] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [alerts, setAlerts] = useState<string[]>([]);

  const getPerformanceMetrics = useCallback(async (): Promise<PerformanceMetrics> => {
    return new Promise((resolve) => {
      if (typeof window !== 'undefined' && 'performance' in window) {
        // Wait for page to be fully loaded
        if (document.readyState === 'complete') {
          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
          const paintEntries = performance.getEntriesByType('paint');
          
          const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint');
          const lcp = performance.getEntriesByType('largest-contentful-paint')[0];
          
          const metrics: PerformanceMetrics = {
            loadTime: navigation.loadEventEnd - navigation.loadEventStart,
            firstContentfulPaint: fcp ? fcp.startTime : 0,
            largestContentfulPaint: lcp ? lcp.startTime : 0,
            cumulativeLayoutShift: 0, // Would need to be calculated from LayoutShift API
            firstInputDelay: 0, // Would need to be calculated from FirstInput API
            timeToInteractive: navigation.domInteractive - navigation.fetchStart
          };

          // Add memory usage if available
          if ('memory' in performance) {
            const memory = (performance as any).memory;
            metrics.memoryUsage = memory.usedJSHeapSize / 1024 / 1024; // Convert to MB
          }

          resolve(metrics);
        } else {
          // Wait for page to load
          window.addEventListener('load', () => {
            setTimeout(() => getPerformanceMetrics().then(resolve), 100);
          });
        }
      } else {
        resolve({
          loadTime: 0,
          firstContentfulPaint: 0,
          largestContentfulPaint: 0,
          cumulativeLayoutShift: 0,
          firstInputDelay: 0,
          timeToInteractive: 0
        });
      }
    });
  }, []);

  const refreshMetrics = useCallback(async () => {
    setIsLoading(true);
    try {
      const newMetrics = await getPerformanceMetrics();
      setMetrics(newMetrics);
      setLastUpdate(new Date());
      
      // Check for performance issues and add alerts
      const newAlerts: string[] = [];
      if (newMetrics.loadTime > 3000) {
        newAlerts.push('Page load time is slow (>3s)');
      }
      if (newMetrics.firstContentfulPaint > 2000) {
        newAlerts.push('First contentful paint is slow (>2s)');
      }
      if (newMetrics.largestContentfulPaint > 4000) {
        newAlerts.push('Largest contentful paint is slow (>4s)');
      }
      
      setAlerts(newAlerts);
    } catch (error) {
      console.error('Failed to get performance metrics:', error);
    } finally {
      setIsLoading(false);
    }
  }, [getPerformanceMetrics]);

  // Auto-refresh functionality
  useEffect(() => {
    if (showUI) {
      refreshMetrics();
    }
  }, [showUI, refreshMetrics]);

  useEffect(() => {
    if (autoRefresh && showUI) {
      const interval = setInterval(refreshMetrics, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, showUI, refreshInterval, refreshMetrics]);

  const getPerformanceScore = (): number => {
    let score = 100;
    
    if (metrics.loadTime > 3000) score -= 20;
    if (metrics.firstContentfulPaint > 2000) score -= 15;
    if (metrics.largestContentfulPaint > 4000) score -= 15;
    if (metrics.timeToInteractive > 5000) score -= 20;
    
    return Math.max(0, score);
  };

  const getScoreColor = (score: number): string => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreIcon = (score: number) => {
    if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
    if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
    return <AlertTriangle className="w-5 h-5 text-red-400" />;
  };

  const formatTime = (ms: number): string => {
    if (ms < 1000) return `${Math.round(ms)}ms`;
    return `${(ms / 1000).toFixed(2)}s`;
  };

  // Format time values
  const formatTime = (ms: number): string => {
    if (ms === 0) return 'N/A';
    if (ms < 1000) return `${Math.round(ms)}ms`;
    return `${(ms / 1000).toFixed(2)}s`;
  };

  // Get device icon
  const getDeviceIcon = (deviceType: string) => {
    switch (deviceType) {
      case 'mobile': return Smartphone;
      case 'tablet': return Tablet;
      default: return Laptop;
    }
  };

  const getPerformanceScore = () => {
    let score = 0;
    let totalMetrics = 0;

    // FCP scoring (0-100)
    if (metrics.fcp !== null) {
      totalMetrics++;
      if (metrics.fcp < 1800) score += 100;
      else if (metrics.fcp < 3000) score += 75;
      else if (metrics.fcp < 4000) score += 50;
      else score += 25;
    }

    // LCP scoring (0-100)
    if (metrics.lcp !== null) {
      totalMetrics++;
      if (metrics.lcp < 2500) score += 100;
      else if (metrics.lcp < 4000) score += 75;
      else if (metrics.lcp < 6000) score += 50;
      else score += 25;
    }

    // FID scoring (0-100)
    if (metrics.fid !== null) {
      totalMetrics++;
      if (metrics.fid < 100) score += 100;
      else if (metrics.fid < 300) score += 75;
      else if (metrics.fid < 500) score += 50;
      else score += 25;
    }

    // CLS scoring (0-100)
    if (metrics.cls !== null) {
      totalMetrics++;
      if (metrics.cls < 0.1) score += 100;
      else if (metrics.cls < 0.25) score += 75;
      else if (metrics.cls < 0.4) score += 50;
      else score += 25;
    }

    return totalMetrics > 0 ? Math.round(score / totalMetrics) : 0;
  };

  // Don't render anything in production
  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  const performanceScore = getPerformanceScore();

  const performanceStatus = metrics ? getPerformanceStatus(performanceScore) : null;
  const StatusIcon = performanceStatus?.icon || Activity;
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: 20, scale: 0.95 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: 20, scale: 0.95 }}
          className="fixed bottom-4 left-4 z-50"
        >
          {/* Performance Monitor Panel */}
          <div className="bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-xl shadow-2xl shadow-black/50 overflow-hidden">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
              <div className="flex items-center space-x-2">
                <Activity className="w-5 h-5 text-cyan-400" />
                <span className="text-white font-semibold">Performance Monitor</span>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={refreshMetrics}
                  disabled={isLoading}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200 disabled:opacity-50"
                  aria-label="Refresh metrics"
                >
                  <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
                </button>
                <button
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label={isExpanded ? 'Collapse' : 'Expand'}
                >
                  <BarChart3 className="w-4 h-4" />
                </button>
                <button
                  onClick={() => setIsVisible(false)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label="Close"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
<<<<<<< HEAD
              <span className="text-sm font-mono text-white">{metrics.lcp}ms</span>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Control Buttons */}
          <div className="flex items-center gap-2 p-2">
            <button
              onClick={toggleAutoRefresh}
              className={`p-1.5 rounded-lg transition-colors ${
                autoRefresh 
                  ? 'bg-cyan-500/20 text-cyan-400' 
                  : 'bg-white/10 text-white/60 hover:bg-white/20'
              }`}
              title={autoRefresh ? 'Disable auto-refresh' : 'Enable auto-refresh'}
            >
              <RefreshCw className={`w-4 h-4 ${autoRefresh ? 'animate-spin' : ''}`} />
            </button>
            <button
              onClick={toggleExpanded}
              className="p-1.5 rounded-lg bg-white/10 text-white/60 hover:bg-white/20 transition-colors"
              title={isExpanded ? 'Minimize' : 'Expand'}
            >
              {isExpanded ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
            </button>
            <button
              onClick={() => onToggle?.(false)}
              className="p-1.5 rounded-lg bg-white/10 text-white/60 hover:bg-white/20 transition-colors"
              title="Close"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
=======
            </div>
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a

            {/* Performance Score */}
            <div className="p-4 border-b border-gray-700/50">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-400">Performance Score</span>
                {getScoreIcon(getPerformanceScore())}
              </div>
<<<<<<< HEAD
              <div className="flex items-center gap-3">
                <div className="relative w-16 h-16">
                  <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                    <path
                      d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeDasharray={`${score.overall}, 100`}
                      className="text-cyan-400"
                    />
                  </svg>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-lg font-bold text-white">{score.overall}</span>
                  </div>
                </div>
                <div className="flex-1">
                  <div className="text-sm text-gray-400 mb-1">Performance Grade</div>
                  <div className="text-lg font-semibold text-white">{getScoreLabel(score.overall)}</div>
                </div>
                <div className="text-sm text-gray-400">/ 100</div>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2 mt-2">
                <div
                  className={`h-2 rounded-full transition-all duration-500 ${
                    getPerformanceScore() >= 90 ? 'bg-green-500' :
                    getPerformanceScore() >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${getPerformanceScore()}%` }}
                />
              </div>
            </div>

          {/* Core Web Vitals */}
          {metrics && (
            <div className="p-4 border-b border-gray-700/50">
              <h4 className="text-sm font-medium text-gray-300 mb-3">Core Web Vitals</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Zap className="w-4 h-4 text-blue-400" />
                    <span className="text-sm text-gray-300">FCP</span>
                  </div>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Target className="w-4 h-4 text-green-400" />
                    <span className="text-sm text-gray-300">LCP</span>
                  </div>
                  <span className="text-sm font-mono text-white">
                    {Math.round(metrics.lcp)}ms
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-purple-400" />
                    <span className="text-sm text-gray-300">FID</span>
                  </div>
                  <span className="text-sm font-mono text-white">
                    {Math.round(metrics.fid)}ms
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Wifi className="w-4 h-4 text-yellow-400" />
                    <span className="text-sm text-gray-300">TTFB</span>
                  </div>
                  <span className="text-sm font-mono text-white">
                    {Math.round(metrics.ttfb)}ms
                  </span>
=======
              <div className="flex items-center space-x-3">
                <div className="text-2xl font-bold text-white">
                  {getPerformanceScore()}
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a
                </div>
              </div>
              
              <div className="text-xs text-gray-400 text-center">
                Last updated: {lastUpdate.toLocaleTimeString()}
              </div>
              <span className="text-sm font-mono text-white">{metrics.fid}ms</span>
            </div>

<<<<<<< HEAD
          {/* Optimization Tips */}
          {optimizationTips.length > 0 && (
            <div className="p-4 border-b border-gray-700/50">
              <div className="flex items-center gap-2 mb-3">
                <TrendingUp className="w-4 h-4 text-emerald-400" />
                <span className="text-sm font-medium text-gray-300">Optimization Tips</span>
              </div>
              <div className="space-y-2">
                {optimizationTips.map((tip, index) => (
                  <div key={index} className="text-xs text-gray-400 leading-relaxed">
                    • {tip}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="p-4">
            <button
              onClick={() => setShowDetails(!showDetails)}
              className="w-full px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-600 text-white text-sm font-medium rounded-lg hover:from-cyan-600 hover:to-blue-700 transition-all duration-200"
            >
              {showDetails ? 'Hide Details' : 'Show Details'}
            </button>
          </div>

          {/* Detailed Metrics */}
          <AnimatePresence>
            {showDetails && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className="border-t border-gray-700/50"
              >
                <div className="p-4 space-y-3">
                  <h4 className="text-sm font-medium text-gray-300 mb-3">Detailed Performance Data</h4>
                  
                  {metrics && (
                    <div className="grid grid-cols-2 gap-3 text-xs">
                      <div className="bg-gray-800/50 p-2 rounded">
                        <div className="text-gray-400">DOM Load</div>
                        <div className="text-white font-mono">
                          {Math.round(metrics.fcp)}ms
                        </div>
                      </div>
=======
            {/* Key Metrics */}
            <div className="p-4 space-y-3">
              <div className="grid grid-cols-2 gap-3">
                <div className="text-center p-2 bg-gray-800/50 rounded-lg">
                  <div className="text-xs text-gray-400 mb-1">Load Time</div>
                  <div className="text-sm font-semibold text-white">
                    {formatTime(metrics.loadTime)}
                  </div>
                </div>
                <div className="text-center p-2 bg-gray-800/50 rounded-lg">
                  <div className="text-xs text-gray-400 mb-1">FCP</div>
                  <div className="text-sm font-semibold text-white">
                    {formatTime(metrics.firstContentfulPaint)}
                  </div>
                </div>
              </div>
              
              <div className="text-xs text-gray-400 text-center">
                Last updated: {lastUpdate.toLocaleTimeString()}
              </div>
            </div>

            {/* Expanded View */}
            <AnimatePresence>
              {isExpanded && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="border-t border-gray-700/50"
                >
                  <div className="p-4 space-y-4">
                    {/* Detailed Metrics */}
                    <div className="space-y-3">
                      <h4 className="text-sm font-semibold text-white">Detailed Metrics</h4>
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a
                      
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Largest Contentful Paint:</span>
                          <span className="text-white">{formatTime(metrics.largestContentfulPaint)}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Time to Interactive:</span>
                          <span className="text-white">{formatTime(metrics.timeToInteractive)}</span>
                        </div>
                        {metrics.memoryUsage && (
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-400">Memory Usage:</span>
                            <span className="text-white">{metrics.memoryUsage.toFixed(1)} MB</span>
                          </div>
                        )}
                      </div>
                    </div>
<<<<<<< HEAD
                  )}
                  
                  <div className="text-xs text-gray-400 text-center pt-2">
                    Monitoring in real-time
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Footer Actions */}
          <div className="p-3 border-t border-cyan-500/20 bg-white/5">
            <button
              onClick={measurePerformance}
              disabled={isMonitoring}
              className="w-full flex items-center justify-center gap-2 px-3 py-2 bg-gradient-to-r from-cyan-500 to-purple-500 text-white text-sm font-medium rounded-lg transition-all duration-300 hover:from-cyan-600 hover:to-purple-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isMonitoring ? (
                <>
                  <RefreshCw className="w-4 h-4 animate-spin" />
                  Measuring...
                </>
              ) : (
                <>
                  <Activity className="w-4 h-4" />
                  Measure Performance
                </>
              )}
            </button>
=======

                    {/* Alerts */}
                    {alerts.length > 0 && (
                      <div className="space-y-2">
                        <h4 className="text-sm font-semibold text-white">Performance Alerts</h4>
                        <div className="space-y-1">
                          {alerts.map((alert, index) => (
                            <div key={index} className="flex items-center space-x-2 text-xs text-yellow-400">
                              <AlertTriangle className="w-3 h-3" />
                              <span>{alert}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Recommendations */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold text-white">Recommendations</h4>
                      <div className="text-xs text-gray-400 space-y-1">
                        {getPerformanceScore() < 90 && (
                          <>
                            <div>• Optimize images and assets</div>
                            <div>• Minimize JavaScript bundles</div>
                            <div>• Enable compression and caching</div>
                          </>
                        )}
                        {getPerformanceScore() >= 90 && (
                          <div>• Excellent performance! Keep monitoring for any regressions.</div>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};

// Helper functions
const getScoreIcon = (score: number) => {
  if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
  if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
  return <AlertTriangle className="w-5 h-5 text-red-400" />;
};

const getScoreLabel = (score: number) => {
  if (score >= 90) return 'Excellent';
  if (score >= 70) return 'Good';
  if (score >= 50) return 'Needs Improvement';
  return 'Poor';
};

export default PerformanceMonitor;