<<<<<<< HEAD
import React, { useEffect, useState, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, Gauge, Target, Activity, AlertTriangle
} from 'lucide-react';

interface PerformanceMetrics {
  loadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
  timeToInteractive: number;
  memoryUsage: number;
  cpuUsage: number;
  networkLatency: number;
  fps: number;
  domSize: number;
  resourceCount: number;
  timestamp: number;
  // Core Web Vitals
=======
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, TrendingUp, TrendingDown, CheckCircle, X, Gauge, Wifi, 
  Smartphone, Tablet, Laptop, AlertTriangle
} from 'lucide-react';

interface PerformanceMetrics {
  fcp: number; // First Contentful Paint
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
  lcp: number; // Largest Contentful Paint
  fid: number; // First Input Delay
  cls: number; // Cumulative Layout Shift
  ttfb: number; // Time to First Byte
<<<<<<< HEAD
  fcp: number; // First Contentful Paint
}

interface MemoryInfo {
  usedJSHeapSize: number;
  jsHeapSizeLimit: number;
=======
  fmp: number; // First Meaningful Paint
  si: number; // Speed Index
  tti: number; // Time to Interactive
}

interface DeviceInfo {
  userAgent: string;
  platform: string;
  language: string;
  cookieEnabled: boolean;
  onLine: boolean;
  hardwareConcurrency?: number;
  deviceMemory?: number;
  maxTouchPoints: number;
  deviceType: string;
}

interface NetworkInfo {
  effectiveType?: string;
  downlink?: number;
  rtt?: number;
  saveData?: boolean;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
}

interface PerformanceMonitorProps {
  showUI?: boolean;
  autoRefresh?: boolean;
  refreshInterval?: number;
<<<<<<< HEAD
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ 
  showUI = false, 
  autoRefresh = true, 
  refreshInterval = 5000 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    loadTime: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    cumulativeLayoutShift: 0,
    firstInputDelay: 0,
    timeToInteractive: 0,
    memoryUsage: 0,
    cpuUsage: 0,
    networkLatency: 0,
    fps: 0,
    domSize: 0,
    resourceCount: 0,
    timestamp: Date.now(),
    lcp: 0,
    fid: 0,
    cls: 0,
    ttfb: 0,
    fcp: 0
  });
  
  const [issues, setIssues] = useState<PerformanceIssue[]>([]);
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [alerts, setAlerts] = useState<string[]>([]);
  const [performanceScore, setPerformanceScore] = useState(0);

  // Enhanced performance monitoring functions
  const measureLoadTime = useCallback(() => {
    if (typeof window !== 'undefined' && window.performance) {
      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigation) {
        return navigation.loadEventEnd - navigation.loadEventStart;
      }
    }

    // Measure initial load time
    if (document.readyState === 'complete') {
      measureLoadTime();
    } else {
      window.addEventListener('load', measureLoadTime);
    }

    // Start monitoring
    startMonitoring();
  }, []);

  const measureCoreWebVitals = useCallback(() => {
    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {
      // LCP (Largest Contentful Paint)
      const lcpObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1];
        if (lastEntry) {
          setMetrics(prev => ({ ...prev, lcp: lastEntry.startTime }));
        }
      });
      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

      // FID (First Input Delay)
      const fidObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          const fidEntry = entry as PerformanceEntry & { processingStart?: number };
          if (fidEntry.processingStart) {
            setMetrics(prev => ({ ...prev, fid: fidEntry.processingStart - fidEntry.startTime }));
          }
        });
      });
      fidObserver.observe({ entryTypes: ['first-input'] });

      // CLS (Cumulative Layout Shift)
      let clsValue = 0;
      const clsObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry: PerformanceEntry & { hadRecentInput?: boolean; value?: number }) => {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
            setMetrics(prev => ({ ...prev, cls: clsValue }));
          }
        });
      });
      clsObserver.observe({ entryTypes: ['layout-shift'] });

      // FCP (First Contentful Paint)
      const fcpObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const firstEntry = entries[0];
        if (firstEntry) {
          setMetrics(prev => ({ ...prev, fcp: firstEntry.startTime }));
        }
      });
      fcpObserver.observe({ entryTypes: ['first-contentful-paint'] });

      // TTFB (Time to First Byte)
      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigation) {
        setMetrics(prev => ({ ...prev, ttfb: navigation.responseStart - navigation.requestStart }));
      }
    }
  }, []);

  const measureMemoryUsage = useCallback(() => {
    if (typeof window !== 'undefined' && (performance as any).memory) {
      const memory = (performance as any).memory as MemoryInfo;
      return Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100);
    }
    return 0;
  }, []);

  const measureNetworkLatency = useCallback(async () => {
    try {
      const start = performance.now();
      await fetch('/api/health', { method: 'HEAD' });
      const end = performance.now();
      return Math.round(end - start);
    } catch {
      return 0;
    }
  }, []);

  const measureDOMSize = useCallback(() => {
    if (typeof document !== 'undefined') {
      return document.getElementsByTagName('*').length;
    }
    return 0;
  }, []);

  const measureResourceCount = useCallback(() => {
    if (typeof window !== 'undefined' && window.performance) {
      return performance.getEntriesByType('resource').length;
    }
    return 0;
  }, []);

  const calculatePerformanceScore = useCallback((metrics: PerformanceMetrics) => {
    let score = 100;
    
    // LCP scoring (target: < 2.5s)
    if (metrics.lcp > 4000) score -= 20;
    else if (metrics.lcp > 2500) score -= 10;
    
    // FID scoring (target: < 100ms)
    if (metrics.fid > 300) score -= 20;
    else if (metrics.fid > 100) score -= 10;
    
    // CLS scoring (target: < 0.1)
    if (metrics.cls > 0.25) score -= 20;
    else if (metrics.cls > 0.1) score -= 10;
    
    // Load time scoring
    if (metrics.loadTime > 5000) score -= 15;
    else if (metrics.loadTime > 3000) score -= 10;
    
    // Memory usage scoring
    if (metrics.memoryUsage > 80) score -= 10;
    
    return Math.max(0, score);
  }, []);

  const updateMetrics = useCallback(async () => {
    const newMetrics: PerformanceMetrics = {
      loadTime: measureLoadTime(),
      memoryUsage: measureMemoryUsage(),
      cpuUsage: Math.random() * 30 + 10, // Simulated CPU usage
      networkLatency: await measureNetworkLatency(),
      fps: 60, // Simulated FPS
      domSize: measureDOMSize(),
      resourceCount: measureResourceCount(),
      timestamp: Date.now(),
      lcp: metrics.lcp,
      fid: metrics.fid,
      cls: metrics.cls,
      ttfb: metrics.ttfb,
      fcp: metrics.fcp
    };

    setMetrics(newMetrics);
    const score = calculatePerformanceScore(newMetrics);
    setPerformanceScore(score);

    // Enhanced performance alerts
    const newAlerts: string[] = [];
    
    if (newMetrics.lcp > 4000) newAlerts.push('⚠️ LCP is very slow (>4s)');
    if (newMetrics.fid > 300) newAlerts.push('⚠️ FID is very slow (>300ms)');
    if (newMetrics.cls > 0.25) newAlerts.push('⚠️ CLS is very poor (>0.25)');
    if (newMetrics.loadTime > 5000) newAlerts.push('⚠️ Page load time is very slow (>5s)');
    if (newMetrics.memoryUsage > 80) newAlerts.push('⚠️ High memory usage (>80%)');
    
    setAlerts(newAlerts);
  }, [measureLoadTime, measureMemoryUsage, measureNetworkLatency, measureDOMSize, measureResourceCount, calculatePerformanceScore, metrics.lcp, metrics.fid, metrics.cls, metrics.ttfb, metrics.fcp]);

  // Start monitoring
  useEffect(() => {
    if (autoRefresh) {
      setIsMonitoring(true);
      measureCoreWebVitals();
      
      const interval = setInterval(updateMetrics, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, refreshInterval, updateMetrics, measureCoreWebVitals]);

  const getPerformanceColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getMetricStatus = (value: number, thresholds: { good: number; needsImprovement: number }) => {
    if (value <= thresholds.good) return 'text-green-400';
    if (value <= thresholds.needsImprovement) return 'text-yellow-400';
    return 'text-red-400';
  };

  return (
    <>
      {/* Performance Toggle Button */}
      <motion.button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-4 right-4 z-50 bg-gradient-to-r from-cyan-500 to-blue-600 text-white p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        title="Performance Monitor"
      >
        <Gauge className="w-6 h-6" />
=======
  enableReporting?: boolean;
  apiEndpoint?: string;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
  showUI = false,
  autoRefresh = false,
  refreshInterval = 30000, // 30 seconds
  enableReporting = false,
  apiEndpoint = '/api/performance'
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);
  const [networkInfo, setNetworkInfo] = useState<NetworkInfo | null>(null);
  const [performanceScore, setPerformanceScore] = useState<number>(0);
  const [isReducedMotion, setIsReducedMotion] = useState(false);

  const observerRef = useRef<PerformanceObserver | null>(null);
  const refreshIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // Check for reduced motion preference
  useEffect(() => {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    setIsReducedMotion(prefersReducedMotion);
  }, []);

  // Get device information
  useEffect(() => {
    const getDeviceInfo = () => {
      const userAgent = navigator.userAgent;
      const platform = navigator.platform;
      const language = navigator.language;
      const cookieEnabled = navigator.cookieEnabled;
      const onLine = navigator.onLine;
      const hardwareConcurrency = (navigator as any).hardwareConcurrency;
      const deviceMemory = (navigator as any).deviceMemory;
      const maxTouchPoints = navigator.maxTouchPoints;

      // Detect device type
      let deviceType = 'desktop';
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {
        deviceType = 'mobile';
      } else if (/iPad|Android/i.test(userAgent)) {
        deviceType = 'tablet';
      }

      setDeviceInfo({
        userAgent,
        platform,
        language,
        cookieEnabled,
        onLine,
        hardwareConcurrency,
        deviceMemory,
        maxTouchPoints,
        deviceType
      });
    };

    getDeviceInfo();
  }, []);

  // Get network information
  useEffect(() => {
    const getNetworkInfo = () => {
      if ('connection' in navigator) {
        const connection = (navigator as any).connection;
        setNetworkInfo({
          effectiveType: connection.effectiveType,
          downlink: connection.downlink,
          rtt: connection.rtt,
          saveData: connection.saveData
        });
      }
    };

    getNetworkInfo();
  }, []);

  // Calculate performance score
  const calculatePerformanceScore = useCallback((metrics: PerformanceMetrics): number => {
    const weights = {
      fcp: 0.15,
      lcp: 0.25,
      fid: 0.25,
      cls: 0.25,
      ttfb: 0.10
    };

    let score = 0;
    
    // FCP scoring (0-100)
    if (metrics.fcp <= 1800) score += weights.fcp * 100;
    else if (metrics.fcp <= 3000) score += weights.fcp * 75;
    else if (metrics.fcp <= 4000) score += weights.fcp * 50;
    else score += weights.fcp * 25;

    // LCP scoring (0-100)
    if (metrics.lcp <= 2500) score += weights.lcp * 100;
    else if (metrics.lcp <= 4000) score += weights.lcp * 75;
    else if (metrics.lcp <= 6000) score += weights.lcp * 50;
    else score += weights.lcp * 25;

    // FID scoring (0-100)
    if (metrics.fid <= 100) score += weights.fid * 100;
    else if (metrics.fid <= 300) score += weights.fid * 75;
    else if (metrics.fid <= 500) score += weights.fid * 50;
    else score += weights.fid * 25;

    // CLS scoring (0-100)
    if (metrics.cls <= 0.1) score += weights.cls * 100;
    else if (metrics.cls <= 0.25) score += weights.cls * 75;
    else if (metrics.cls <= 0.4) score += weights.cls * 50;
    else score += weights.cls * 25;

    // TTFB scoring (0-100)
    if (metrics.ttfb <= 800) score += weights.ttfb * 100;
    else if (metrics.ttfb <= 1800) score += weights.ttfb * 75;
    else if (metrics.ttfb <= 3000) score += weights.ttfb * 50;
    else score += weights.ttfb * 25;

    return Math.round(score);
  }, []);

  // Collect performance metrics
  const collectMetrics = useCallback(async (): Promise<PerformanceMetrics> => {
    return new Promise((resolve) => {
      // Wait for page to be fully loaded
      if (document.readyState === 'complete') {
        resolveMetrics();
      } else {
        window.addEventListener('load', resolveMetrics);
      }

      function resolveMetrics() {
        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        const paintEntries = performance.getEntriesByType('paint');
        const measureEntries = performance.getEntriesByType('measure');

        const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0;
        const lcp = (performance as any).getEntriesByType('largest-contentful-paint')?.[0]?.startTime || 0;
        const ttfb = navigation.responseStart - navigation.requestStart;
        const fmp = measureEntries.find(entry => entry.name === 'first-meaningful-paint')?.startTime || 0;

        // Estimate other metrics if not available
        const estimatedLcp = lcp || fcp * 1.5;
        const estimatedFid = 50; // Conservative estimate
        const estimatedCls = 0.05; // Conservative estimate
        const estimatedTti = Math.max(fcp, estimatedLcp) + 1000; // Estimate TTI
        const estimatedSi = fcp * 1.2; // Estimate Speed Index

        const metrics: PerformanceMetrics = {
          fcp,
          lcp: estimatedLcp,
          fid: estimatedFid,
          cls: estimatedCls,
          ttfb,
          fmp,
          si: estimatedSi,
          tti: estimatedTti
        };

        resolve(metrics);
      }
    });
  }, []);

  // Update metrics
  const updateMetrics = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const newMetrics = await collectMetrics();
      setMetrics(newMetrics);
      
      const score = calculatePerformanceScore(newMetrics);
      setPerformanceScore(score);
      
      setLastUpdate(new Date());

      // Report metrics if enabled
      if (enableReporting && apiEndpoint) {
        try {
          await fetch(apiEndpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              metrics: newMetrics,
              score,
              deviceInfo,
              networkInfo,
              timestamp: new Date().toISOString(),
              url: window.location.href
            })
          });
        } catch {
          // Silently handle reporting errors
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to collect metrics');
    } finally {
      setIsLoading(false);
    }
  }, [collectMetrics, calculatePerformanceScore, enableReporting, apiEndpoint, deviceInfo, networkInfo]);

  // Initialize performance monitoring
  useEffect(() => {
    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {
      // Observe LCP
      try {
        observerRef.current = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
          }
        });
        observerRef.current.observe({ entryTypes: ['largest-contentful-paint'] });
      } catch {
        // Silently handle observer errors
      }
    }

    // Initial metrics collection
    updateMetrics();

    // Set up auto-refresh if enabled
    if (autoRefresh) {
      refreshIntervalRef.current = setInterval(updateMetrics, refreshInterval);
    }

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
      if (refreshIntervalRef.current) {
        clearInterval(refreshIntervalRef.current);
      }
    };
  }, [updateMetrics, autoRefresh, refreshInterval]);

  // Get performance status
  const getPerformanceStatus = (score: number) => {
    if (score >= 90) return { status: 'Excellent', color: 'text-green-400', icon: CheckCircle };
    if (score >= 70) return { status: 'Good', color: 'text-yellow-400', icon: TrendingUp };
    if (score >= 50) return { status: 'Fair', color: 'text-orange-400', icon: AlertTriangle };
    return { status: 'Poor', color: 'text-red-400', icon: TrendingDown };
  };

  // Format time in milliseconds
  const formatTime = (ms: number) => {
    if (ms < 1000) return `${Math.round(ms)}ms`;
    return `${(ms / 1000).toFixed(2)}s`;
  };

  // Get device icon
  const getDeviceIcon = (deviceType: string) => {
    switch (deviceType) {
      case 'mobile': return Smartphone;
      case 'tablet': return Tablet;
      default: return Laptop;
    }
  };

  if (!showUI) return null;

  const performanceStatus = metrics ? getPerformanceStatus(performanceScore) : null;
  const StatusIcon = performanceStatus?.icon || Activity;

  return (
    <>
      {/* Floating Performance Button */}
      <motion.button
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={!isReducedMotion ? { scale: 1.1 } : {}}
        whileTap={!isReducedMotion ? { scale: 0.9 } : {}}
        onClick={() => setIsVisible(!isVisible)}
        className="fixed bottom-6 right-6 z-50 p-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-2xl hover:shadow-cyan-500/50 transition-all duration-300"
        aria-label="Toggle performance monitor"
        title="Performance Monitor"
      >
        <Activity className="w-6 h-6" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
      </motion.button>

      {/* Performance Dashboard */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
<<<<<<< HEAD
            initial={{ opacity: 0, y: 100, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 100, scale: 0.8 }}
            className="fixed bottom-20 right-4 z-50 bg-gray-900/95 backdrop-blur-sm border border-cyan-400/30 rounded-2xl shadow-2xl w-96 max-h-[80vh] overflow-hidden"
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-cyan-500 to-blue-600 p-4 text-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Gauge className="w-5 h-5" />
                  <h3 className="font-semibold">Performance Monitor</h3>
                </div>
                <button
                  onClick={() => setIsOpen(false)}
                  className="hover:bg-white/20 p-1 rounded transition-colors"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
              
              {/* Performance Score */}
              <div className="mt-3 text-center">
                <div className="text-2xl font-bold">
                  <span className={getPerformanceColor(performanceScore)}>
                    {performanceScore}
                  </span>
                  /100
                </div>
                <div className="text-sm opacity-90">Performance Score</div>
              </div>

            {/* Content */}
            <div className="p-4 space-y-4 max-h-[60vh] overflow-y-auto">
              {/* Core Web Vitals */}
              <div className="space-y-3">
                <h4 className="font-semibold text-cyan-400 flex items-center space-x-2">
                  <Target className="w-4 h-4" />
                  <span>Core Web Vitals</span>
                </h4>
                
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">LCP</div>
                    <div className={`font-mono ${getMetricStatus(metrics.lcp, { good: 2500, needsImprovement: 4000 })}`}>
                      {metrics.lcp ? `${Math.round(metrics.lcp)}ms` : 'N/A'}
=======
            initial={{ opacity: 0, x: 300, scale: 0.9 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: 300, scale: 0.9 }}
            transition={{ duration: isReducedMotion ? 0.1 : 0.3 }}
            className="fixed bottom-6 right-20 z-40 w-96 max-h-[80vh] bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-2xl shadow-2xl overflow-hidden"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
              <div className="flex items-center space-x-3">
                <Gauge className="w-5 h-5 text-cyan-400" />
                <h3 className="text-lg font-semibold text-white">Performance Monitor</h3>
              </div>
              <button
                onClick={() => setIsVisible(false)}
                className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                aria-label="Close performance monitor"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Content */}
            <div className="p-4 space-y-4 max-h-[calc(80vh-80px)] overflow-y-auto">
              {/* Performance Score */}
              {metrics && (
                <div className="text-center p-4 bg-gradient-to-br from-gray-800/50 to-gray-900/50 rounded-xl border border-gray-700/50">
                  <div className="text-3xl font-bold text-white mb-2">{performanceScore}</div>
                  <div className={`flex items-center justify-center space-x-2 ${performanceStatus?.color}`}>
                    <StatusIcon className="w-5 h-5" />
                    <span className="font-medium">{performanceStatus?.status}</span>
                  </div>
                  <div className="text-sm text-gray-400 mt-2">Performance Score</div>
                </div>
              )}

              {/* Core Web Vitals */}
              {metrics && (
                <div className="space-y-3">
                  <h4 className="text-sm font-semibold text-gray-300 uppercase tracking-wide">Core Web Vitals</h4>
                  <div className="grid grid-cols-2 gap-3">
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">LCP</div>
                      <div className="text-lg font-semibold text-white">{formatTime(metrics.lcp)}</div>
                      <div className="text-xs text-gray-500">Largest Contentful Paint</div>
                    </div>
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">FID</div>
                      <div className="text-lg font-semibold text-white">{formatTime(metrics.fid)}</div>
                      <div className="text-xs text-gray-500">First Input Delay</div>
                    </div>
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">CLS</div>
                      <div className="text-lg font-semibold text-white">{metrics.cls.toFixed(3)}</div>
                      <div className="text-xs text-gray-500">Cumulative Layout Shift</div>
                    </div>
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">FCP</div>
                      <div className="text-lg font-semibold text-white">{formatTime(metrics.fcp)}</div>
                      <div className="text-xs text-gray-500">First Contentful Paint</div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
                    </div>
                    <div className="text-xs text-gray-500">Target: &lt;2.5s</div>
                  </div>
                  
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">FID</div>
                    <div className={`font-mono ${getMetricStatus(metrics.fid, { good: 100, needsImprovement: 300 })}`}>
                      {metrics.fid ? `${Math.round(metrics.fid)}ms` : 'N/A'}
                    </div>
                    <div className="text-xs text-gray-500">Target: &lt;100ms</div>
                  </div>
                  
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">CLS</div>
                    <div className={`font-mono ${getMetricStatus(metrics.cls, { good: 0.1, needsImprovement: 0.25 })}`}>
                      {metrics.cls ? metrics.cls.toFixed(3) : 'N/A'}
                    </div>
                    <div className="text-xs text-gray-500">Target: &lt;0.1</div>
                  </div>
                  
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">FCP</div>
                    <div className="font-mono text-cyan-400">
                      {metrics.fcp ? `${Math.round(metrics.fcp)}ms` : 'N/A'}
                    </div>
                    <div className="text-xs text-gray-500">First Contentful Paint</div>
                  </div>
                </div>
<<<<<<< HEAD
              </div>

              {/* Performance Metrics */}
              <div className="space-y-3">
                <h4 className="font-semibold text-cyan-400 flex items-center space-x-2">
                  <Activity className="w-4 h-4" />
                  <span>Performance Metrics</span>
                </h4>
                
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">Load Time</div>
                    <div className="font-mono text-cyan-400">{metrics.loadTime}ms</div>
                  </div>
                  
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">Memory</div>
                    <div className="font-mono text-cyan-400">{metrics.memoryUsage}%</div>
                  </div>
                  
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">Network</div>
                    <div className="font-mono text-cyan-400">{metrics.networkLatency}ms</div>
                  </div>
                  
                  <div className="bg-gray-800/50 p-3 rounded-lg">
                    <div className="text-gray-400">DOM Size</div>
                    <div className="font-mono text-cyan-400">{metrics.domSize}</div>
                  </div>
                </div>
              </div>

              {/* Alerts */}
              {alerts.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-semibold text-red-400 flex items-center space-x-2">
                    <AlertTriangle className="w-4 h-4" />
                    <span>Performance Alerts</span>
                  </h4>
                  <div className="space-y-2">
                    {alerts.map((alert, index) => (
                      <div key={index} className="bg-red-900/20 border border-red-500/30 p-2 rounded text-sm text-red-300">
                        {alert}
                      </div>
                    ))}
=======
              )}

              {/* Additional Metrics */}
              {metrics && (
                <div className="space-y-3">
                  <h4 className="text-sm font-semibold text-gray-300 uppercase tracking-wide">Additional Metrics</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between items-center p-2 bg-gray-800/20 rounded-lg">
                      <span className="text-sm text-gray-400">TTFB</span>
                      <span className="text-sm font-medium text-white">{formatTime(metrics.ttfb)}</span>
                    </div>
                    <div className="flex justify-between items-center p-2 bg-gray-800/20 rounded-lg">
                      <span className="text-sm text-gray-400">Speed Index</span>
                      <span className="text-sm font-medium text-white">{formatTime(metrics.si)}</span>
                    </div>
                    <div className="flex justify-between items-center p-2 bg-gray-800/20 rounded-lg">
                      <span className="text-sm text-gray-400">TTI</span>
                      <span className="text-sm font-medium text-white">{formatTime(metrics.tti)}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Device & Network Info */}
              {(deviceInfo || networkInfo) && (
                <div className="space-y-3">
                  <h4 className="text-sm font-semibold text-gray-300 uppercase tracking-wide">System Info</h4>
                  
                  {deviceInfo && (
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="flex items-center space-x-2 mb-2">
                        {React.createElement(getDeviceIcon(deviceInfo.deviceType), { className: "w-4 h-4 text-cyan-400" })}
                        <span className="text-sm font-medium text-white capitalize">{deviceInfo.deviceType}</span>
                      </div>
                      <div className="text-xs text-gray-400 space-y-1">
                        <div>Platform: {deviceInfo.platform}</div>
                        <div>CPU Cores: {deviceInfo.hardwareConcurrency || 'Unknown'}</div>
                        <div>Memory: {deviceInfo.deviceMemory ? `${deviceInfo.deviceMemory}GB` : 'Unknown'}</div>
                      </div>
                    </div>
                  )}

                  {networkInfo && (
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="flex items-center space-x-2 mb-2">
                        <Wifi className="w-4 h-4 text-green-400" />
                        <span className="text-sm font-medium text-white">{networkInfo.effectiveType || 'Unknown'}</span>
                      </div>
                      <div className="text-xs text-gray-400 space-y-1">
                        <div>Downlink: {networkInfo.downlink ? `${networkInfo.downlink}Mbps` : 'Unknown'}</div>
                        <div>RTT: {networkInfo.rtt ? `${networkInfo.rtt}ms` : 'Unknown'}</div>
                        <div>Save Data: {networkInfo.saveData ? 'Yes' : 'No'}</div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Last Update */}
              {lastUpdate && (
                <div className="text-center text-xs text-gray-500">
                  Last updated: {lastUpdate.toLocaleTimeString()}
                </div>
              )}

              {/* Error Display */}
              {error && (
                <div className="p-3 bg-red-600/20 border border-red-500/50 rounded-lg text-red-400 text-sm">
                  <div className="flex items-center space-x-2">
                    <AlertTriangle className="w-4 h-4" />
                    <span>{error}</span>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
                  </div>
                </div>
              )}

<<<<<<< HEAD
              {/* Status */}
              <div className="text-center text-sm text-gray-400">
                <div className="flex items-center justify-center space-x-2">
                  <div className={`w-2 h-2 rounded-full ${isMonitoring ? 'bg-green-400' : 'bg-gray-400'}`}></div>
                  <span>{isMonitoring ? 'Monitoring Active' : 'Monitoring Inactive'}</span>
                </div>
                <div className="mt-1">Last updated: {new Date(metrics.timestamp).toLocaleTimeString()}</div>
              </div>
            </motion.div>
          </>
=======
              {/* Refresh Button */}
              <button
                onClick={updateMetrics}
                disabled={isLoading}
                className="w-full py-2 px-4 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-medium rounded-lg hover:from-cyan-600 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 flex items-center justify-center space-x-2"
              >
                {isLoading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                    <span>Updating...</span>
                  </>
                ) : (
                  <>
                    <Activity className="w-4 h-4" />
                    <span>Refresh Metrics</span>
                  </>
                )}
              </button>
            </div>
          </motion.div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
        )}
      </AnimatePresence>
    </>
  );
};

// Helper function to get score colors
const getScoreColor = (score: string): string => {
  switch (score) {
    case 'Good':
    case 'Excellent':
      return 'text-green-400';
    case 'Needs Improvement':
      return 'text-yellow-400';
    case 'Poor':
      return 'text-red-400';
    default:
      return 'text-white/60';
  }
};

export default PerformanceMonitor;