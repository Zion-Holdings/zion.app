<<<<<<< HEAD
import React, { useEffect } from 'react';

interface AnalyticsTrackerProps {
  trackingId?: string;
  enableTracking?: boolean;
}

const AnalyticsTracker: React.FC<AnalyticsTrackerProps> = ({ 
  trackingId = 'zion-tech-group',
  enableTracking = true 
}) => {
  useEffect(() => {
    if (!enableTracking) return;

    // Basic page view tracking
    const trackPageView = () => {
      // Send page view to analytics service
      console.log(`[Analytics] Page view: ${window.location.pathname}`);
      
      // You can integrate with Google Analytics, Mixpanel, or other services here
      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('config', trackingId, {
          page_path: window.location.pathname,
=======

import React, { useEffect, useCallback } from 'react';

interface AnalyticsTrackerProps {
  pageTitle?: string;
  pagePath?: string;
  customEvents?: Array<{
    name: string;
    parameters?: Record<string, unknown>;
  }>;
}

// Performance entry types for Core Web Vitals
interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  processingEnd: number;
  target?: unknown;
}

// Global type declarations for browser APIs
declare global {
  interface Window {
    gtag?: (...args: unknown[]) => void;
    dataLayer?: unknown[];
  }
}

const AnalyticsTracker: React.FC<AnalyticsTrackerProps> = ({
  pageTitle,
  pagePath,
  customEvents = []
}) => {
  // Track page view
  const trackPageView = useCallback((title: string, path: string) => {
    if (typeof window !== 'undefined') {
      // Google Analytics 4
      if (window.gtag) {
        window.gtag('config', 'G-XXXXXXXXXX', {
          page_title: title,
          page_location: window.location.href,
          page_path: path
        });
      }

      // Google Tag Manager
      if (window.dataLayer) {
        window.dataLayer.push({
          event: 'page_view',
          page_title: title,
          page_location: window.location.href,
          page_path: path,
          timestamp: Date.now()
        });
      }

      // Custom analytics
      if (process.env.NODE_ENV === 'development') {
        console.log('Page View:', { title, path, url: window.location.href });
      }
    }
  }, []);

  // Track custom events
  const trackCustomEvent = useCallback((eventName: string, parameters?: Record<string, unknown>) => {
    if (typeof window !== 'undefined') {
      // Google Analytics 4
      if (window.gtag) {
        window.gtag('event', eventName, {
          ...parameters,
          timestamp: Date.now(),
          page_location: window.location.href
        });
      }

      // Google Tag Manager
      if (window.dataLayer) {
        window.dataLayer.push({
          event: eventName,
          ...parameters,
          timestamp: Date.now(),
          page_location: window.location.href
        });
      }

      // Custom analytics
      if (process.env.NODE_ENV === 'development') {
        console.log('Custom Event:', { eventName, parameters });
      }
    }
  }, []);

  // Track user engagement
  const trackUserEngagement = useCallback(() => {
    let startTime = Date.now();
    let isEngaged = false;

    const trackEngagement = () => {
      const currentTime = Date.now();
      const timeOnPage = currentTime - startTime;

      // Track engagement after 10 seconds
      if (timeOnPage > 10000 && !isEngaged) {
        isEngaged = true;
        trackCustomEvent('user_engagement', {
          engagement_time_msec: timeOnPage,
          engagement_type: 'time_on_page'
        });
      }

      // Track scroll depth
      const scrollDepth = Math.round((window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100);
      if (scrollDepth > 0 && scrollDepth % 25 === 0) {
        trackCustomEvent('scroll_depth', {
          scroll_percentage: scrollDepth,
          page_location: window.location.href
>>>>>>> origin/cursor/website-audit-content-update-and-deployment-e860
        });
      }
    };

    // Track user interactions
    const trackUserInteraction = (event: string, data?: any) => {
      console.log(`[Analytics] User interaction: ${event}`, data);
      
      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('event', event, data);
      }
    };

    // Initialize tracking
    trackPageView();

    // Track route changes
    const handleRouteChange = () => {
      trackPageView();
    };

    // Add event listeners for user interactions
    const addTrackingListeners = () => {
      // Track button clicks
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.tagName === 'BUTTON' || target.closest('button')) {
          const buttonText = target.textContent || target.innerText || 'Unknown Button';
          trackUserInteraction('button_click', { button_text: buttonText });
        }
      });

      // Track form submissions
      document.addEventListener('submit', (e) => {
        const form = e.target as HTMLFormElement;
        const formId = form.id || form.className || 'Unknown Form';
        trackUserInteraction('form_submit', { form_id: formId });
      });

      // Track link clicks
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const link = target.closest('a');
        if (link) {
          const linkText = link.textContent || link.innerText || 'Unknown Link';
          const linkHref = link.href;
          trackUserInteraction('link_click', { 
            link_text: linkText, 
            link_href: linkHref 
          });
        }
      });
    };

    // Add tracking listeners after a short delay to ensure DOM is ready
    setTimeout(addTrackingListeners, 1000);

    // Cleanup
    return () => {
      // Remove event listeners if needed
    };
  }, [trackingId, enableTracking]);

  // This component doesn't render anything visible
  return null;
};

export default AnalyticsTracker;