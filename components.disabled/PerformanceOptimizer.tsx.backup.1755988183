<<<<<<< HEAD
import React, { useEffect, useState, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Zap, 
  Gauge, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Cpu, 
  HardDrive,
  Database,
  Network,
  Battery,
  Settings,
  RefreshCw,
  Eye,
  EyeOff
} from 'lucide-react';

interface PerformanceMetrics {
  fps: number;
  memoryUsage: number;
  cpuUsage: number;
  loadTime: number;
  renderTime: number;
  networkLatency: number;
}

interface PerformanceOptimizerProps {
  children: React.ReactNode;
  targetFPS?: number;
  enableOptimizations?: boolean;
  showMetrics?: boolean;
}

const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({ 
  children, 
  targetFPS = 60,
  enableOptimizations = true,
  showMetrics = false
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fps: 0,
    memoryUsage: 0,
    cpuUsage: 0,
    loadTime: 0,
    renderTime: 0,
    networkLatency: 0
  });
  
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationLevel, setOptimizationLevel] = useState<'low' | 'medium' | 'high'>('medium');
  const [showDebugPanel, setShowDebugPanel] = useState(false);
  const [showMetricsState, setShowMetricsState] = useState(showMetrics);
  const [performanceIssues, setPerformanceIssues] = useState<string[]>([]);
  const [optimizations, setOptimizations] = useState<string[]>([]);
  
  const frameCountRef = useRef(0);
  const lastTimeRef = useRef(performance.now());
  const animationFrameRef = useRef<number | undefined>(undefined);
  const metricsIntervalRef = useRef<NodeJS.Timeout | undefined>(undefined);
  const performanceObserverRef = useRef<PerformanceObserver | null>(null);

  // FPS Counter
  const measureFPS = useCallback(() => {
    frameCountRef.current++;
    const currentTime = performance.now();
    
    if (currentTime - lastTimeRef.current >= 1000) {
      const fps = Math.round((frameCountRef.current * 1000) / (currentTime - lastTimeRef.current));
      setMetrics(prev => ({ ...prev, fps }));
      frameCountRef.current = 0;
      lastTimeRef.current = currentTime;
    }
    
    animationFrameRef.current = requestAnimationFrame(measureFPS);
  }, []);

  // Memory Usage Monitor
  const measureMemory = useCallback(() => {
    if ('memory' in performance) {
      const memory = (performance as any).memory;
      const memoryUsage = Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100);
      setMetrics(prev => ({ ...prev, memoryUsage }));
    }
  }, []);

  // Load Time Monitor
  const measureLoadTime = useCallback(() => {
    if (performance.timing) {
      const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
      setMetrics(prev => ({ ...prev, loadTime }));
    }
  }, []);

  // Network Performance Monitor
  const measureNetworkPerformance = useCallback(async () => {
    try {
      const start = performance.now();
      await fetch('/api/ping', { method: 'HEAD' });
      const end = performance.now();
      const networkLatency = end - start;
      setMetrics(prev => ({ ...prev, networkLatency }));
    } catch (error) {
      // Fallback to navigation timing
      if (performance.timing) {
        const networkLatency = performance.timing.responseEnd - performance.timing.requestStart;
        setMetrics(prev => ({ ...prev, networkLatency }));
      }
    }
  }, []);

  // Performance Issue Detection
  const detectPerformanceIssues = useCallback(() => {
    const issues: string[] = [];
    
    if (metrics.fps < targetFPS * 0.8) {
      issues.push(`Low FPS: ${metrics.fps} (target: ${targetFPS})`);
    }
    
    if (metrics.memoryUsage > 80) {
      issues.push(`High memory usage: ${metrics.memoryUsage}%`);
    }
    
    if (metrics.loadTime > 3000) {
      issues.push(`Slow load time: ${Math.round(metrics.loadTime)}ms`);
    }
    
    if (metrics.networkLatency > 1000) {
      issues.push(`High network latency: ${Math.round(metrics.networkLatency)}ms`);
    }
    
    setPerformanceIssues(issues);
  }, [metrics, targetFPS]);

  // Performance Optimizations
  const applyOptimizations = useCallback(() => {
    const newOptimizations: string[] = [];
    
    if (metrics.fps < targetFPS * 0.8) {
      // Reduce motion and animations
      document.documentElement.style.setProperty('--reduced-motion', 'reduce');
      newOptimizations.push('Reduced motion for better FPS');
    }
    
    if (metrics.memoryUsage > 80) {
      // Trigger garbage collection if possible
      if ('gc' in window) {
        (window as any).gc();
        newOptimizations.push('Triggered garbage collection');
      }
      
      // Reduce image quality
      document.documentElement.style.setProperty('--image-quality', 'low');
      newOptimizations.push('Reduced image quality');
    }
    
    if (metrics.loadTime > 3000) {
      // Preload critical resources
      const criticalResources = document.querySelectorAll('link[rel="preload"]');
      criticalResources.forEach(link => {
        link.setAttribute('rel', 'preload');
        link.setAttribute('as', 'style');
      });
      newOptimizations.push('Preloaded critical resources');
    }
    
    if (metrics.networkLatency > 1000) {
      // Enable offline caching
      document.documentElement.style.setProperty('--offline-mode', 'enabled');
      newOptimizations.push('Enabled offline caching');
    }
    
    setOptimizations(newOptimizations);
  }, [metrics, targetFPS]);

  // Auto-optimization
  useEffect(() => {
    if (enableOptimizations && performanceIssues.length > 0) {
      const timer = setTimeout(() => {
        setIsOptimizing(true);
        applyOptimizations();
        setTimeout(() => setIsOptimizing(false), 1000);
      }, 2000);
      
      return () => clearTimeout(timer);
    }
  }, [performanceIssues, enableOptimizations, applyOptimizations]);

  // Initialize performance monitoring
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    // Start FPS monitoring
    measureFPS();
    
    // Start metrics collection
    metricsIntervalRef.current = setInterval(() => {
      measureMemory();
      measureNetworkPerformance();
    }, 1000);
    
    // Measure load time after page load
    if (document.readyState === 'complete') {
      measureLoadTime();
    } else {
      window.addEventListener('load', measureLoadTime);
    }
    
    // Performance Observer for navigation timing
    if ('PerformanceObserver' in window) {
      performanceObserverRef.current = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'navigation') {
            const navEntry = entry as PerformanceNavigationTiming;
            const renderTime = navEntry.loadEventEnd - navEntry.loadEventStart;
            setMetrics(prev => ({ ...prev, renderTime }));
          }
        }
      });
      
      performanceObserverRef.current.observe({ entryTypes: ['navigation'] });
    }
    
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
      if (metricsIntervalRef.current) {
        clearInterval(metricsIntervalRef.current);
      }
      if (performanceObserverRef.current) {
        performanceObserverRef.current.disconnect();
      }
      window.removeEventListener('load', measureLoadTime);
    };
  }, [measureFPS, measureMemory, measureNetworkPerformance, measureLoadTime]);

  // Detect performance issues
  useEffect(() => {
    detectPerformanceIssues();
  }, [detectPerformanceIssues]);

  // Get performance status
  const getPerformanceStatus = () => {
    if (metrics.fps >= targetFPS * 0.9 && metrics.memoryUsage < 70 && metrics.loadTime < 2000) {
      return { status: 'excellent', color: 'text-green-400', icon: CheckCircle };
    } else if (metrics.fps >= targetFPS * 0.7 && metrics.memoryUsage < 85 && metrics.loadTime < 4000) {
      return { status: 'good', color: 'text-yellow-400', icon: TrendingUp };
    } else {
      return { status: 'needs-attention', color: 'text-red-400', icon: AlertTriangle };
    }
  };

  const performanceStatus = getPerformanceStatus();
  const StatusIcon = performanceStatus.icon;

  return (
    <>
      {/* Performance Status Indicator */}
      {showMetricsState && (
        <motion.div
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          className="fixed top-4 left-4 z-50 bg-black/80 backdrop-blur-sm border border-white/20 rounded-2xl p-4 text-white"
        >
          <div className="flex items-center gap-3 mb-3">
            <StatusIcon className={`w-5 h-5 ${performanceStatus.color}`} />
            <span className="text-sm font-semibold">Performance</span>
            <button
              onClick={() => setShowDebugPanel(!showDebugPanel)}
              className="ml-auto p-1 hover:bg-white/10 rounded-lg transition-colors"
            >
              {showDebugPanel ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
            </button>
          </div>
          
          {/* Quick Metrics */}
          <div className="space-y-2 text-xs">
            <div className="flex items-center justify-between">
              <span className="text-white/70">FPS:</span>
              <span className={metrics.fps >= targetFPS * 0.8 ? 'text-green-400' : 'text-red-400'}>
                {metrics.fps}
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-white/70">Memory:</span>
              <span className={metrics.memoryUsage < 80 ? 'text-green-400' : 'text-red-400'}>
                {metrics.memoryUsage}%
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-white/70">Load:</span>
              <span className={metrics.loadTime < 3000 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.loadTime)}ms
              </span>
            </div>
          </div>
        </motion.div>
      )}

      {/* Debug Panel */}
      <AnimatePresence>
        {showDebugPanel && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="fixed top-20 left-4 z-50 bg-black/90 backdrop-blur-sm border border-white/20 rounded-2xl p-6 text-white max-w-sm"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <Settings className="w-5 h-5" />
                Performance Debug
              </h3>
              <button
                onClick={() => setShowDebugPanel(false)}
                className="p-1 hover:bg-white/10 rounded-lg transition-colors"
              >
                ×
              </button>
            </div>
            
            {/* Detailed Metrics */}
            <div className="space-y-4">
              <div className="space-y-2">
                <h4 className="text-sm font-semibold text-white/90">System Metrics</h4>
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="flex items-center gap-2">
                    <Cpu className="w-3 h-3 text-cyan-400" />
                    <span>CPU: {metrics.cpuUsage}%</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Database className="w-3 h-3 text-purple-400" />
                    <span>RAM: {metrics.memoryUsage}%</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <HardDrive className="w-3 h-3 text-green-400" />
                    <span>Load: {Math.round(metrics.loadTime)}ms</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Network className="w-3 h-3 text-yellow-400" />
                    <span>Net: {Math.round(metrics.networkLatency)}ms</span>
                  </div>
                </div>
              </div>
              
              {/* Performance Issues */}
              {performanceIssues.length > 0 && (
                <div className="space-y-2">
                  <h4 className="text-sm font-semibold text-red-400">Issues Detected</h4>
                  <div className="space-y-1">
                    {performanceIssues.map((issue, index) => (
                      <div key={index} className="text-xs text-red-300 bg-red-500/10 p-2 rounded-lg">
                        {issue}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Applied Optimizations */}
              {optimizations.length > 0 && (
                <div className="space-y-2">
                  <h4 className="text-sm font-semibold text-green-400">Optimizations Applied</h4>
                  <div className="space-y-1">
                    {optimizations.map((optimization, index) => (
                      <div key={index} className="text-xs text-green-300 bg-green-500/10 p-2 rounded-lg">
                        {optimization}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Manual Controls */}
              <div className="space-y-3 pt-4 border-t border-white/10">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-white/70">Optimization Level:</span>
                  <select
                    value={optimizationLevel}
                    onChange={(e) => setOptimizationLevel(e.target.value as 'low' | 'medium' | 'high')}
                    className="bg-white/10 border border-white/20 rounded-lg px-2 py-1 text-xs text-white"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>
                
                <button
                  onClick={() => {
                    setIsOptimizing(true);
                    applyOptimizations();
                    setTimeout(() => setIsOptimizing(false), 1000);
                  }}
                  disabled={isOptimizing}
                  className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-gradient-to-r from-cyan-500 to-purple-500 text-white text-sm font-semibold rounded-lg transition-all duration-300 hover:from-cyan-600 hover:to-purple-600 disabled:opacity-50"
                >
                  {isOptimizing ? (
                    <RefreshCw className="w-4 h-4 animate-spin" />
                  ) : (
                    <Zap className="w-4 h-4" />
                  )}
                  {isOptimizing ? 'Optimizing...' : 'Apply Optimizations'}
                </button>
              </div>
=======
import React, { useEffect, useState, useRef, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Zap, 
  TrendingUp, 
  Clock, 
  Database, 
  Network, 
  Cpu, 
  Memory,
  HardDrive,
  Activity,
  Gauge,
  Target,
  CheckCircle,
  AlertCircle,
  Info
} from 'lucide-react';

interface PerformanceMetrics {
  loadTime: number;
  domContentLoaded: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
  timeToInteractive: number;
  memoryUsage?: number;
  networkRequests: number;
  cacheHitRate: number;
}

interface PerformanceOptimizerProps {
  onMetricsUpdate?: (metrics: PerformanceMetrics) => void;
  showMetrics?: boolean;
}

const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({
  onMetricsUpdate,
  showMetrics = false
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    loadTime: 0,
    domContentLoaded: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    cumulativeLayoutShift: 0,
    firstInputDelay: 0,
    timeToInteractive: 0,
    networkRequests: 0,
    cacheHitRate: 0
  });

  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationHistory, setOptimizationHistory] = useState<Array<{
    timestamp: Date;
    action: string;
    improvement: number;
  }>>([]);

  const observerRef = useRef<PerformanceObserver | null>(null);
  const metricsRef = useRef<PerformanceMetrics>(metrics);

  useEffect(() => {
    metricsRef.current = metrics;
  }, [metrics]);

  useEffect(() => {
    initializePerformanceMonitoring();
    return () => cleanupPerformanceMonitoring();
  }, []);

  const initializePerformanceMonitoring = () => {
    // Monitor Core Web Vitals
    if ('PerformanceObserver' in window) {
      try {
        // Largest Contentful Paint
        observerRef.current = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1] as PerformanceEntry;
          if (lastEntry) {
            updateMetrics({ largestContentfulPaint: lastEntry.startTime });
          }
        });
        observerRef.current.observe({ entryTypes: ['largest-contentful-paint'] });

        // First Input Delay
        observerRef.current = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1] as PerformanceEntry;
          if (lastEntry) {
            updateMetrics({ firstInputDelay: lastEntry.processingStart - lastEntry.startTime });
          }
        });
        observerRef.current.observe({ entryTypes: ['first-input'] });

        // Layout Shift
        observerRef.current = new PerformanceObserver((list) => {
          let cumulativeLayoutShift = 0;
          for (const entry of list.getEntries()) {
            if (!(entry as any).hadRecentInput) {
              cumulativeLayoutShift += (entry as any).value;
            }
          }
          updateMetrics({ cumulativeLayoutShift });
        });
        observerRef.current.observe({ entryTypes: ['layout-shift'] });
      } catch (error) {
        console.warn('Performance monitoring not supported:', error);
      }
    }

    // Measure initial load metrics
    measureInitialMetrics();
    
    // Monitor network requests
    monitorNetworkRequests();
    
    // Monitor memory usage (if available)
    monitorMemoryUsage();
  };

  const cleanupPerformanceMonitoring = () => {
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
  };

  const measureInitialMetrics = () => {
    if (typeof window !== 'undefined' && 'performance' in window) {
      const perf = window.performance;
      
      // Navigation timing
      const navigation = perf.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigation) {
        const loadTime = navigation.loadEventEnd - navigation.loadEventStart;
        const domContentLoaded = navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart;
        
        updateMetrics({
          loadTime,
          domContentLoaded
        });
      }

      // Paint timing
      const paintEntries = perf.getEntriesByType('paint');
      const firstPaint = paintEntries.find(entry => entry.name === 'first-paint');
      if (firstPaint) {
        updateMetrics({ firstContentfulPaint: firstPaint.startTime });
      }

      // Time to interactive (approximation)
      const timeToInteractive = Date.now() - performance.timing.navigationStart;
      updateMetrics({ timeToInteractive });
    }
  };

  const monitorNetworkRequests = () => {
    if ('PerformanceObserver' in window) {
      try {
        const networkObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const networkRequests = entries.length;
          const cacheHits = entries.filter(entry => 
            (entry as any).transferSize === 0
          ).length;
          const cacheHitRate = networkRequests > 0 ? (cacheHits / networkRequests) * 100 : 0;
          
          updateMetrics({ networkRequests, cacheHitRate });
        });
        
        networkObserver.observe({ entryTypes: ['resource'] });
      } catch (error) {
        console.warn('Network monitoring not supported:', error);
      }
    }
  };

  const monitorMemoryUsage = () => {
    if ('memory' in performance) {
      const memory = (performance as any).memory;
      const updateMemoryMetrics = () => {
        const memoryUsage = memory.usedJSHeapSize / memory.jsHeapSizeLimit * 100;
        updateMetrics({ memoryUsage });
      };
      
      updateMemoryMetrics();
      setInterval(updateMemoryMetrics, 5000);
    }
  };

  const updateMetrics = (newMetrics: Partial<PerformanceMetrics>) => {
    const updatedMetrics = { ...metricsRef.current, ...newMetrics };
    setMetrics(updatedMetrics);
    onMetricsUpdate?.(updatedMetrics);
  };

  const optimizePerformance = useCallback(async () => {
    setIsOptimizing(true);
    
    try {
      // Preload critical resources
      await preloadCriticalResources();
      
      // Optimize images
      await optimizeImages();
      
      // Optimize fonts
      await optimizeFonts();
      
      // Clear unnecessary caches
      await clearUnnecessaryCaches();
      
      // Measure improvement
      const improvement = calculateImprovement();
      
      setOptimizationHistory(prev => [...prev, {
        timestamp: new Date(),
        action: 'Performance optimization completed',
        improvement
      }]);
      
      announceOptimizationComplete(improvement);
      
    } catch (error) {
      console.error('Performance optimization failed:', error);
    } finally {
      setIsOptimizing(false);
    }
  }, []);

  const preloadCriticalResources = async () => {
    const criticalResources = [
      '/images/zion-tech-group-logo.png',
      '/images/zion-tech-group-og.jpg',
      '/fonts/inter-var.woff2'
    ];

    for (const resource of criticalResources) {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.href = resource;
      link.as = resource.endsWith('.woff2') ? 'font' : 'image';
      link.crossOrigin = 'anonymous';
      document.head.appendChild(link);
    }
  };

  const optimizeImages = async () => {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      if (!img.loading) {
        img.loading = 'lazy';
      }
      if (!img.decoding) {
        img.decoding = 'async';
      }
    });
  };

  const optimizeFonts = async () => {
    const fontLinks = document.querySelectorAll('link[rel="preload"][as="font"]');
    fontLinks.forEach(link => {
      link.setAttribute('crossorigin', 'anonymous');
    });
  };

  const clearUnnecessaryCaches = async () => {
    if ('caches' in window) {
      try {
        const cacheNames = await caches.keys();
        const unnecessaryCaches = cacheNames.filter(name => 
          !name.includes('zion-tech-group') && !name.includes('static')
        );
        
        await Promise.all(
          unnecessaryCaches.map(name => caches.delete(name))
        );
      } catch (error) {
        console.warn('Cache cleanup failed:', error);
      }
    }
  };

  const calculateImprovement = (): number => {
    // Simple improvement calculation based on metrics
    const baseline = 100;
    const current = Math.min(
      metrics.largestContentfulPaint / 1000,
      metrics.firstInputDelay,
      metrics.cumulativeLayoutShift * 100
    );
    
    return Math.max(0, ((baseline - current) / baseline) * 100);
  };

  const announceOptimizationComplete = (improvement: number) => {
    const message = `Performance optimization completed with ${improvement.toFixed(1)}% improvement`;
    console.log(message);
    
    // Could integrate with notification system here
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification('Performance Optimized', {
        body: message,
        icon: '/images/zion-tech-group-logo.png'
      });
    }
  };

  const getPerformanceScore = (): number => {
    const scores = [
      metrics.largestContentfulPaint < 2500 ? 100 : Math.max(0, 100 - (metrics.largestContentfulPaint - 2500) / 25),
      metrics.firstInputDelay < 100 ? 100 : Math.max(0, 100 - (metrics.firstInputDelay - 100) / 10),
      metrics.cumulativeLayoutShift < 0.1 ? 100 : Math.max(0, 100 - metrics.cumulativeLayoutShift * 1000)
    ];
    
    return Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);
  };

  const getPerformanceGrade = (score: number): string => {
    if (score >= 90) return 'A';
    if (score >= 80) return 'B';
    if (score >= 70) return 'C';
    if (score >= 60) return 'D';
    return 'F';
  };

  const performanceScore = getPerformanceScore();
  const performanceGrade = getPerformanceGrade(performanceScore);

  return (
    <>
      {/* Performance Metrics Display */}
      {showMetrics && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="fixed top-4 left-4 z-50 bg-gray-900/95 backdrop-blur-sm text-white p-4 rounded-lg shadow-lg border border-gray-700 max-w-sm"
        >
          <div className="flex items-center gap-2 mb-3">
            <Activity className="w-5 h-5 text-blue-400" />
            <h3 className="font-semibold">Performance Metrics</h3>
          </div>
          
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>Overall Score:</span>
              <span className={`font-bold ${
                performanceScore >= 90 ? 'text-green-400' :
                performanceScore >= 80 ? 'text-yellow-400' :
                performanceScore >= 70 ? 'text-orange-400' : 'text-red-400'
              }`}>
                {performanceScore}/100 ({performanceGrade})
              </span>
            </div>
            
            <div className="flex justify-between">
              <span>LCP:</span>
              <span>{metrics.largestContentfulPaint.toFixed(0)}ms</span>
            </div>
            
            <div className="flex justify-between">
              <span>FID:</span>
              <span>{metrics.firstInputDelay.toFixed(0)}ms</span>
            </div>
            
            <div className="flex justify-between">
              <span>CLS:</span>
              <span>{metrics.cumulativeLayoutShift.toFixed(3)}</span>
            </div>
            
            <div className="flex justify-between">
              <span>Load Time:</span>
              <span>{metrics.loadTime.toFixed(0)}ms</span>
            </div>
            
            {metrics.memoryUsage && (
              <div className="flex justify-between">
                <span>Memory:</span>
                <span>{metrics.memoryUsage.toFixed(1)}%</span>
              </div>
            )}
          </div>
        </motion.div>
      )}

      {/* Performance Optimization Button */}
      <motion.button
        onClick={optimizePerformance}
        disabled={isOptimizing}
        className="fixed bottom-6 right-6 z-50 bg-gradient-to-r from-green-600 to-emerald-600 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-green-300 focus:ring-opacity-50 disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Optimize performance"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <AnimatePresence mode="wait">
          {isOptimizing ? (
            <motion.div
              key="loading"
              initial={{ rotate: 0 }}
              animate={{ rotate: 360 }}
              transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
            >
              <Activity className="w-6 h-6" />
            </motion.div>
          ) : (
            <motion.div
              key="ready"
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
            >
              <Zap className="w-6 h-6" />
            </motion.div>
          )}
        </AnimatePresence>
      </motion.button>

      {/* Optimization History */}
      <AnimatePresence>
        {optimizationHistory.length > 0 && (
          <motion.div
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 100 }}
            className="fixed bottom-24 right-6 z-40 bg-gray-900/95 backdrop-blur-sm text-white p-4 rounded-lg shadow-lg border border-gray-700 max-w-sm"
          >
            <div className="flex items-center gap-2 mb-3">
              <TrendingUp className="w-5 h-5 text-green-400" />
              <h3 className="font-semibold">Recent Optimizations</h3>
            </div>
            
            <div className="space-y-2 text-sm max-h-32 overflow-y-auto">
              {optimizationHistory.slice(-3).map((item, index) => (
                <div key={index} className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-400" />
                  <div className="flex-1">
                    <div className="text-xs text-gray-400">
                      {item.timestamp.toLocaleTimeString()}
                    </div>
                    <div className="text-xs">
                      {item.action} (+{item.improvement.toFixed(1)}%)
                    </div>
                  </div>
                </div>
              ))}
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-1b0a
            </div>
          </motion.div>
        )}
      </AnimatePresence>

<<<<<<< HEAD
      {/* Performance Toggle Button */}
      <button
        onClick={() => setShowMetricsState(!showMetricsState)}
        className="fixed top-4 right-4 z-40 p-3 bg-black/80 backdrop-blur-sm border border-white/20 rounded-2xl text-white hover:bg-white/10 transition-all duration-300"
        aria-label="Toggle Performance Monitor"
      >
        <Gauge className="w-5 h-5" />
      </button>

      {/* Optimized Content */}
      <div 
        className={`performance-optimized ${optimizationLevel}`}
        style={{
          '--target-fps': targetFPS,
          '--reduced-motion': metrics.fps < targetFPS * 0.8 ? 'reduce' : 'no-preference',
          '--image-quality': metrics.memoryUsage > 80 ? 'low' : 'high',
          '--offline-mode': metrics.networkLatency > 1000 ? 'enabled' : 'disabled'
        } as React.CSSProperties}
      >
        {children}
=======
      {/* Performance Tips */}
      <div className="sr-only">
        <h2>Performance Optimization Tips</h2>
        <ul>
          <li>Enable lazy loading for images</li>
          <li>Use WebP format for images</li>
          <li>Minimize JavaScript bundle size</li>
          <li>Implement proper caching strategies</li>
          <li>Use CDN for static assets</li>
          <li>Optimize critical rendering path</li>
        </ul>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-1b0a
      </div>
    </>
  );
};

export default PerformanceOptimizer;