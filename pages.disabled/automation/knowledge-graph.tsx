import fs from 'fs';
import path from 'path';
import type { GetStaticProps } from 'next';

interface Node { id: string; tokens: string[] }
interface Edge { source: string; target: string; weight: number; terms: string[] }
interface Report { generatedAt: string; nodes: Node[]; edges: Edge[]; topTerms: { term: string; count: number }[] }

type Props = { report: Report | null };

export const getStaticProps: GetStaticProps<Props> = async () => {
  try {
    const file = path.join(process.cwd(), 'public', 'automation', 'knowledge-graph.json');
    const raw = fs.readFileSync(file, 'utf8');
    const data = JSON.parse(raw);
    return { props: { report: data }, revalidate: 86400 };
  } catch {
    return { props: { report: null }, revalidate: 86400 };
  }
};

export default function KnowledgeGraph({ report }: Props) {
  if (!report) return <div>No knowledge graph yet.</div>;
  return (
    <div className="space-y-6">
      <header className="space-y-1">
        <h1 className="text-3xl font-bold">Knowledge Graph</h1>
        <p className="text-gray-600 dark:text-gray-300">Autogenerated topic co-occurrence from site content.</p>
      </header>
      <section>
        <h2 className="font-semibold mb-2">Top Terms</h2>
        <ul className="flex flex-wrap gap-2 text-sm">
          {report.topTerms.map((t, i) => (
            <li key={i} className="px-2 py-1 rounded bg-gray-100 dark:bg-gray-800">{t.term} <span className="text-gray-500">({t.count})</span></li>
          ))}
        </ul>
      </section>
      <section>
        <h2 className="font-semibold mb-2">Graph Stats</h2>
        <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="p-4 rounded-lg border border-gray-200 dark:border-gray-800"><div className="text-xs text-gray-500">Nodes</div><div className="text-2xl font-semibold">{report.nodes.length}</div></div>
          <div className="p-4 rounded-lg border border-gray-200 dark:border-gray-800"><div className="text-xs text-gray-500">Edges</div><div className="text-2xl font-semibold">{report.edges.length}</div></div>
        </div>
      </section>
      <section>
        <h2 className="font-semibold mb-2">Sample Edges</h2>
        <ul className="text-sm space-y-1 max-h-96 overflow-auto border rounded p-3 border-gray-200 dark:border-gray-800">
          {report.edges.slice(0, 200).map((e, i) => (
            <li key={i} className="flex justify-between gap-4"><span className="truncate">{e.source} â‡„ {e.target}</span><span className="text-gray-500 truncate">{e.terms.join(', ')}</span></li>
          ))}
        </ul>
      </section>
    </div>
  );
}