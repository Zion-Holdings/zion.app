<<<<<<< HEAD
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Eye, EyeOff, Volume2, VolumeX, Type, Palette, 
  MousePointer, Keyboard, Smartphone, Monitor,
  X, Settings, CheckCircle, AlertTriangle, Info,
  ZoomIn, ZoomOut, RotateCcw, Accessibility,
  Contrast, Sun, Moon, Highlighter, FontSize
} from 'lucide-react';
=======
import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a

interface AccessibilitySettings {
  highContrast: boolean;
  fontSize: 'small' | 'medium' | 'large' | 'xlarge';
  reducedMotion: boolean;
<<<<<<< HEAD
  screenReader: boolean;
  keyboardNavigation: boolean;
  colorBlindness: 'none' | 'protanopia' | 'deuteranopia' | 'tritanopia';
  fontSize: 'small' | 'medium' | 'large' | 'xlarge';
  theme: 'light' | 'dark' | 'auto';
}

interface AccessibilityFeature {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  enabled: boolean;
  toggle: () => void;
  category: 'visual' | 'navigation' | 'audio' | 'cognitive';
}

const AccessibilityEnhancer: React.FC<{ 
  showPanel?: boolean; 
  autoOptimize?: boolean;
  onSettingsChange?: (settings: AccessibilitySettings) => void;
}> = ({ 
  showPanel = false, 
  autoOptimize = false,
  onSettingsChange 
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [currentFeature, setCurrentFeature] = useState<string>('');
  const [announcements, setAnnouncements] = useState<string[]>([]);
  const [keyboardShortcuts, setKeyboardShortcuts] = useState<Map<string, string>>(new Map());
  const [focusHistory, setFocusHistory] = useState<HTMLElement[]>([]);
  const [lastFocused, setLastFocused] = useState<HTMLElement | null>(null);
  
  const settingsRef = useRef<AccessibilitySettings>({
=======
  focusIndicator: boolean;
  voiceNavigation: boolean;
  screenReaderOptimized: boolean;
  colorBlindFriendly: boolean;
}

interface AccessibilityEnhancerProps {
  showControls?: boolean;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ showControls = false }) => {
  const [settings, setSettings] = useState<AccessibilitySettings>({
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a
    highContrast: false,
    fontSize: 'medium',
    reducedMotion: false,
<<<<<<< HEAD
    highSaturation: false,
    focusIndicator: boolean,
    screenReader: false,
    keyboardNavigation: true,
    colorBlindness: 'none',
    fontSize: 'medium',
    theme: 'auto'
  });

  const [settings, setSettings] = useState<AccessibilitySettings>(settingsRef.current);

  // Accessibility features configuration
  const accessibilityFeatures: AccessibilityFeature[] = [
    {
      id: 'high-contrast',
      name: 'High Contrast',
      description: 'Increase contrast for better visibility',
      icon: <Contrast className="w-5 h-5" />,
      enabled: settings.highContrast,
      toggle: () => toggleSetting('highContrast'),
      category: 'visual'
    },
    {
      id: 'large-text',
      name: 'Large Text',
      description: 'Increase text size for better readability',
      icon: <FontSize className="w-5 h-5" />,
      enabled: settings.largeText,
      toggle: () => toggleSetting('largeText'),
      category: 'visual'
    },
    {
      id: 'reduced-motion',
      name: 'Reduced Motion',
      description: 'Reduce animations for motion sensitivity',
      icon: <RotateCcw className="w-5 h-5" />,
      enabled: settings.reducedMotion,
      toggle: () => toggleSetting('reducedMotion'),
      category: 'visual'
    },
    {
      id: 'high-saturation',
      name: 'High Saturation',
      description: 'Increase color saturation for color blindness',
      icon: <Highlighter className="w-5 h-5" />,
      enabled: settings.highSaturation,
      toggle: () => toggleSetting('highSaturation'),
      category: 'visual'
    },
    {
      id: 'focus-indicator',
      name: 'Focus Indicator',
      description: 'Enhanced focus indicators for keyboard navigation',
      icon: <MousePointer className="w-5 h-5" />,
      enabled: settings.focusIndicator,
      toggle: () => toggleSetting('focusIndicator'),
      category: 'navigation'
    },
    {
      id: 'screen-reader',
      name: 'Screen Reader',
      description: 'Enhanced screen reader support',
      icon: <Volume2 className="w-5 h-5" />,
      enabled: settings.screenReader,
      toggle: () => toggleSetting('screenReader'),
      category: 'audio'
    },
    {
      id: 'keyboard-navigation',
      name: 'Keyboard Navigation',
      description: 'Enhanced keyboard navigation support',
      icon: <Keyboard className="w-5 h-5" />,
      enabled: settings.keyboardNavigation,
      toggle: () => toggleSetting('keyboardNavigation'),
      category: 'navigation'
    }
  ];

  // Toggle accessibility setting
  const toggleSetting = useCallback((setting: keyof AccessibilitySettings) => {
    setSettings(prev => {
      const newSettings = { ...prev, [setting]: !prev[setting] };
      settingsRef.current = newSettings;
      
      // Apply settings immediately
      applyAccessibilitySettings(newSettings);
      
      // Notify parent component
      if (onSettingsChange) {
        onSettingsChange(newSettings);
      }
      
      return newSettings;
    });
  }, [onSettingsChange]);

  // Apply accessibility settings to the document
  const applyAccessibilitySettings = useCallback((newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // High contrast
    if (newSettings.highContrast) {
      root.style.setProperty('--contrast-multiplier', '1.5');
      root.style.setProperty('--text-shadow', '0 0 1px currentColor');
    } else {
      root.style.removeProperty('--contrast-multiplier');
      root.style.removeProperty('--text-shadow');
    }

    // Large text
    if (newSettings.largeText) {
      root.style.setProperty('--font-size-multiplier', '1.25');
    } else {
      root.style.removeProperty('--font-size-multiplier');
    }
    
    // Line spacing
    root.classList.remove('relaxed-spacing', 'very-relaxed-spacing');
    if (newSettings.lineSpacing === 'relaxed') root.classList.add('relaxed-spacing');
    if (newSettings.lineSpacing === 'very-relaxed') root.classList.add('very-relaxed-spacing');
    
    // Cursor size
    root.classList.remove('large-cursor', 'xlarge-cursor');
    if (newSettings.cursorSize === 'large') root.classList.add('large-cursor');
    if (newSettings.cursorSize === 'xlarge') root.classList.add('xlarge-cursor');
    
    // Color blind modes
    root.classList.remove('protanopia', 'deuteranopia', 'tritanopia');
    if (newSettings.colorBlindMode !== 'none') {
      root.classList.add(newSettings.colorBlindMode);
    }

    // Reduced motion
    if (newSettings.reducedMotion) {
      root.style.setProperty('--animation-duration', '0.1s');
      root.style.setProperty('--transition-duration', '0.1s');
    } else {
      root.style.removeProperty('--animation-duration');
      root.style.removeProperty('--transition-duration');
    }

    // Font size adjustment
    root.style.setProperty('--font-size', `${newSettings.fontSize}px`);
    
    // High saturation
    if (newSettings.highSaturation) {
      root.style.setProperty('--saturation-multiplier', '1.3');
    } else {
      root.style.removeProperty('--saturation-multiplier');
    }
    
    // Focus indicator
    if (newSettings.focusIndicator) {
      root.style.setProperty('--focus-outline', '3px solid #06b6d4');
      root.style.setProperty('--focus-outline-offset', '2px');
    } else {
      root.style.removeProperty('--focus-outline');
      root.style.removeProperty('--focus-outline-offset');
    }
    
    // Color blindness simulation
    if (newSettings.colorBlindness !== 'none') {
      const filters = {
        protanopia: 'url("#protanopia-filter")',
        deuteranopia: 'url("#deuteranopia-filter")',
        tritanopia: 'url("#tritanopia-filter")'
      };
      root.style.setProperty('--color-blindness-filter', filters[newSettings.colorBlindness]);
    } else {
      root.style.removeProperty('--color-blindness-filter');
    }
    
    // Font size
    const fontSizeMap = {
      small: '0.875rem',
      medium: '1rem',
      large: '1.125rem',
      xlarge: '1.25rem'
    };
    root.style.setProperty('--base-font-size', fontSizeMap[newSettings.fontSize]);
    
    // Theme
    if (newSettings.theme === 'light') {
      root.classList.remove('dark');
      root.classList.add('light');
    } else if (newSettings.theme === 'dark') {
      root.classList.remove('light');
      root.classList.add('dark');
    } else {
      // Auto theme based on system preference
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      root.classList.remove('light', 'dark');
      root.classList.add(prefersDark ? 'dark' : 'light');
    }
  }, []);

  // Screen reader announcements
  const announceToScreenReader = useCallback((message: string) => {
    if (settings.screenReader) {
      // Create live region for screen reader announcements
      let liveRegion = document.getElementById('accessibility-live-region');
      if (!liveRegion) {
        liveRegion = document.createElement('div');
        liveRegion.id = 'accessibility-live-region';
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.className = 'sr-only';
        document.body.appendChild(liveRegion);
=======
    focusIndicator: true,
    voiceNavigation: false,
    screenReaderOptimized: false,
    colorBlindFriendly: false
  });

  const [isVoiceListening, setIsVoiceListening] = useState(false);
  const [voiceTranscript, setVoiceTranscript] = useState('');
  const [showAccessibilityPanel, setShowAccessibilityPanel] = useState(false);

  // Apply accessibility settings
  useEffect(() => {
    const root = document.documentElement;
    
    // High contrast mode
    if (settings.highContrast) {
      root.classList.add('high-contrast');
      document.body.style.setProperty('--bg-primary', '#000000');
      document.body.style.setProperty('--text-primary', '#ffffff');
      document.body.style.setProperty('--accent-color', '#ffff00');
    } else {
      root.classList.remove('high-contrast');
      document.body.style.removeProperty('--bg-primary');
      document.body.style.removeProperty('--text-primary');
      document.body.style.removeProperty('--accent-color');
    }

    // Font size
    const fontSizeMap = {
      small: '14px',
      medium: '16px',
      large: '18px',
      xlarge: '20px'
    };
    document.body.style.fontSize = fontSizeMap[settings.fontSize];

    // Reduced motion
    if (settings.reducedMotion) {
      root.classList.add('reduced-motion');
    } else {
      root.classList.remove('reduced-motion');
    }

    // Focus indicator
    if (settings.focusIndicator) {
      root.classList.add('focus-visible');
    } else {
      root.classList.remove('focus-visible');
    }

    // Color blind friendly
    if (settings.colorBlindFriendly) {
      root.classList.add('color-blind-friendly');
    } else {
      root.classList.remove('color-blind-friendly');
    }

    // Screen reader optimizations
    if (settings.screenReaderOptimized) {
      optimizeForScreenReaders();
    }

    // Save settings to localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(settings));
  }, [settings]);

  // Load saved settings
  useEffect(() => {
    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
        console.log('Failed to load accessibility settings');
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a
      }
      
      liveRegion.textContent = message;
      
      // Add to announcements list
      setAnnouncements(prev => [...prev.slice(-4), message]);
    }
<<<<<<< HEAD
  }, [settings.screenReader]);

  // Enhanced keyboard navigation
  useEffect(() => {
    if (!settings.keyboardNavigation) return;

    const handleKeyDown = (event: KeyboardEvent) => {
      // Skip if user is typing in an input
      if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {
        return;
      }

      switch (event.key) {
        case 'Tab':
          // Enhanced tab navigation
          handleTabNavigation(event);
          break;
        case 'Escape':
          // Close modals or return to previous focus
          handleEscapeKey();
          break;
        case 'Enter':
        case ' ':
          // Activate focused elements
          handleActivationKey(event);
          break;
        case 'ArrowUp':
        case 'ArrowDown':
        case 'ArrowLeft':
        case 'ArrowRight':
          // Arrow key navigation
          handleArrowNavigation(event);
          break;
      }
    };

    const handleTabNavigation = (event: KeyboardEvent) => {
      const focusableElements = document.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      
      if (focusableElements.length === 0) return;
      
      const currentIndex = Array.from(focusableElements).findIndex(el => el === document.activeElement);
      let nextIndex = 0;
      
      if (event.shiftKey) {
        // Shift+Tab: go backwards
        nextIndex = currentIndex > 0 ? currentIndex - 1 : focusableElements.length - 1;
      } else {
        // Tab: go forwards
        nextIndex = currentIndex < focusableElements.length - 1 ? currentIndex + 1 : 0;
      }
      
      const nextElement = focusableElements[nextIndex] as HTMLElement;
      if (nextElement) {
        nextElement.focus();
        event.preventDefault();
        
        // Announce navigation to screen reader
        announceToScreenReader(`Focused on ${nextElement.textContent || nextElement.tagName.toLowerCase()}`);
      }
    };

    const handleEscapeKey = () => {
      // Close any open modals or panels
      if (isVisible) {
        setIsVisible(false);
        announceToScreenReader('Accessibility panel closed');
      }
      
      // Return to last focused element
      if (lastFocused) {
        lastFocused.focus();
        setLastFocused(null);
      }
    };

    const handleActivationKey = (event: KeyboardEvent) => {
      const target = event.target as HTMLElement;
      if (target && target.click) {
        target.click();
        event.preventDefault();
      }
    };

    const handleArrowNavigation = (event: KeyboardEvent) => {
      // Implement arrow key navigation for custom components
      const target = event.target as HTMLElement;
      const parent = target.parentElement;
      
      if (parent) {
        const siblings = Array.from(parent.children) as HTMLElement[];
        const currentIndex = siblings.indexOf(target);
        
        let nextIndex = currentIndex;
        switch (event.key) {
          case 'ArrowRight':
          case 'ArrowDown':
            nextIndex = (currentIndex + 1) % siblings.length;
            break;
          case 'ArrowLeft':
          case 'ArrowUp':
            nextIndex = currentIndex > 0 ? currentIndex - 1 : siblings.length - 1;
            break;
        }
        
        if (nextIndex !== currentIndex) {
          siblings[nextIndex].focus();
          event.preventDefault();
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [settings.keyboardNavigation, isVisible, lastFocused, announceToScreenReader]);

  // Focus management
  useEffect(() => {
    const handleFocusIn = (event: FocusEvent) => {
      const target = event.target as HTMLElement;
      if (target) {
        setFocusHistory(prev => [...prev.slice(-9), target]);
        setLastFocused(target);
        
        // Enhanced focus indicator
        if (settings.focusIndicator) {
          target.style.outline = '3px solid #06b6d4';
          target.style.outlineOffset = '2px';
        }
      }
    };

    const handleFocusOut = (event: FocusEvent) => {
      const target = event.target as HTMLElement;
      if (target && settings.focusIndicator) {
        target.style.outline = '';
        target.style.outlineOffset = '';
      }
    };

    document.addEventListener('focusin', handleFocusIn);
    document.addEventListener('focusout', handleFocusOut);
    
    return () => {
      document.removeEventListener('focusin', handleFocusIn);
      document.removeEventListener('focusout', handleFocusOut);
    };
  }, [settings.focusIndicator]);

  // Auto-optimization
  useEffect(() => {
    if (!autoOptimize) return;

    // Auto-detect and apply accessibility improvements
    const autoDetectAccessibility = () => {
      const improvements: string[] = [];
      
      // Check for images without alt text
      const imagesWithoutAlt = document.querySelectorAll('img:not([alt])');
      if (imagesWithoutAlt.length > 0) {
        improvements.push(`Found ${imagesWithoutAlt.length} images without alt text`);
        // Auto-add alt text for decorative images
        imagesWithoutAlt.forEach(img => {
          if (!img.alt) {
            img.alt = 'Decorative image';
            img.setAttribute('aria-hidden', 'true');
          }
        });
      }
      
      // Check for form labels
      const inputsWithoutLabels = document.querySelectorAll('input:not([id]), label:not([for])');
      if (inputsWithoutLabels.length > 0) {
        improvements.push(`Found ${inputsWithoutLabels.length} form elements without proper labels`);
      }
      
      // Check for heading structure
      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
      if (headings.length > 0) {
        const headingLevels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));
        let hasSkippedLevels = false;
        for (let i = 1; i < headingLevels.length; i++) {
          if (headingLevels[i] - headingLevels[i-1] > 1) {
            hasSkippedLevels = true;
            break;
          }
        }
        if (hasSkippedLevels) {
          improvements.push('Found skipped heading levels - consider restructuring');
        }
      }
      
      if (improvements.length > 0) {
        announceToScreenReader(`Auto-detected ${improvements.length} accessibility improvements`);
        setAnnouncements(prev => [...prev.slice(-4), ...improvements]);
      }
    };

    // Run auto-detection after page load
    if (document.readyState === 'complete') {
      autoDetectAccessibility();
    } else {
      window.addEventListener('load', autoDetectAccessibility);
      return () => window.removeEventListener('load', autoDetectAccessibility);
    }
  }, [autoOptimize, announceToScreenReader]);

  // Keyboard shortcuts
  useEffect(() => {
    const shortcuts = new Map([
      ['Alt + A', 'Toggle accessibility panel'],
      ['Alt + H', 'Toggle high contrast'],
      ['Alt + L', 'Toggle large text'],
      ['Alt + R', 'Toggle reduced motion'],
      ['Alt + F', 'Toggle focus indicators'],
      ['Alt + S', 'Toggle screen reader mode'],
      ['Escape', 'Close panels / Return to previous focus'],
      ['Tab', 'Navigate between focusable elements'],
      ['Shift + Tab', 'Navigate backwards'],
      ['Enter / Space', 'Activate focused element'],
      ['Arrow Keys', 'Navigate within components']
    ]);
    
    setKeyboardShortcuts(shortcuts);
  }, []);

  // Initialize settings on mount
  useEffect(() => {
    applyAccessibilitySettings(settings);
  }, [applyAccessibilitySettings]);

  if (!showPanel) return null;
=======
  }, []);

  // Voice navigation setup
  useEffect(() => {
    if (settings.voiceNavigation && 'webkitSpeechRecognition' in window) {
      const recognition = new (window as any).webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;

      recognition.onstart = () => {
        setIsVoiceListening(true);
        announceToScreenReader('Voice navigation activated');
      };

      recognition.onresult = (event: any) => {
        const transcript = Array.from(event.results)
          .map((result: any) => result[0].transcript)
          .join('');
        
        setVoiceTranscript(transcript);
        processVoiceCommand(transcript);
      };

      recognition.onend = () => {
        setIsVoiceListening(false);
      };

      recognition.onerror = (event: any) => {
        console.log('Voice recognition error:', event.error);
        setIsVoiceListening(false);
      };

      if (isVoiceListening) {
        recognition.start();
      }

      return () => {
        recognition.stop();
      };
    }
  }, [settings.voiceNavigation, isVoiceListening]);

  const optimizeForScreenReaders = () => {
    // Add ARIA labels to interactive elements
    const interactiveElements = document.querySelectorAll('button, a, input, select, textarea');
    interactiveElements.forEach((element, index) => {
      if (!element.getAttribute('aria-label') && !element.textContent?.trim()) {
        element.setAttribute('aria-label', `Interactive element ${index + 1}`);
      }
    });

    // Add skip links
    addSkipLinks();

    // Enhance form labels
    enhanceFormLabels();

    // Add live regions
    addLiveRegions();
  };

  const addSkipLinks = () => {
    if (!document.getElementById('skip-main')) {
      const skipLink = document.createElement('a');
      skipLink.id = 'skip-main';
      skipLink.href = '#main';
      skipLink.className = 'skip-link sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-cyan-500 focus:text-white focus:rounded';
      skipLink.textContent = 'Skip to main content';
      document.body.insertBefore(skipLink, document.body.firstChild);
    }
  };

  const enhanceFormLabels = () => {
    const inputs = document.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
      const id = input.getAttribute('id');
      const label = document.querySelector(`label[for="${id}"]`);
      
      if (label && !input.getAttribute('aria-describedby')) {
        const descriptionId = `desc-${id}`;
        const description = document.createElement('div');
        description.id = descriptionId;
        description.className = 'sr-only';
        description.textContent = `Enter your ${label.textContent?.toLowerCase()}`;
        
        if (input.parentNode) {
          input.parentNode.insertBefore(description, input.nextSibling);
        }
        
        input.setAttribute('aria-describedby', descriptionId);
      }
    });
  };

  const addLiveRegions = () => {
    if (!document.getElementById('live-region')) {
      const liveRegion = document.createElement('div');
      liveRegion.id = 'live-region';
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.className = 'sr-only';
      document.body.appendChild(liveRegion);
    }
  };

  const announceToScreenReader = (message: string) => {
    const liveRegion = document.getElementById('live-region');
    if (liveRegion) {
      liveRegion.textContent = message;
      setTimeout(() => {
        liveRegion.textContent = '';
      }, 1000);
    }
  };

  const processVoiceCommand = (command: string) => {
    const lowerCommand = command.toLowerCase();
    
    if (lowerCommand.includes('navigate') || lowerCommand.includes('go to')) {
      if (lowerCommand.includes('home')) {
        window.location.href = '/';
        announceToScreenReader('Navigating to home page');
      } else if (lowerCommand.includes('services')) {
        window.location.href = '/services';
        announceToScreenReader('Navigating to services page');
      } else if (lowerCommand.includes('contact')) {
        window.location.href = '/contact';
        announceToScreenReader('Navigating to contact page');
      }
    } else if (lowerCommand.includes('increase font') || lowerCommand.includes('bigger text')) {
      const currentSize = settings.fontSize;
      const sizes: AccessibilitySettings['fontSize'][] = ['small', 'medium', 'large', 'xlarge'];
      const currentIndex = sizes.indexOf(currentSize);
      if (currentIndex < sizes.length - 1) {
        setSettings(prev => ({ ...prev, fontSize: sizes[currentIndex + 1] }));
        announceToScreenReader('Font size increased');
      }
    } else if (lowerCommand.includes('decrease font') || lowerCommand.includes('smaller text')) {
      const currentSize = settings.fontSize;
      const sizes: AccessibilitySettings['fontSize'][] = ['small', 'medium', 'large', 'xlarge'];
      const currentIndex = sizes.indexOf(currentSize);
      if (currentIndex > 0) {
        setSettings(prev => ({ ...prev, fontSize: sizes[currentIndex - 1] }));
        announceToScreenReader('Font size decreased');
      }
    } else if (lowerCommand.includes('high contrast')) {
      setSettings(prev => ({ ...prev, highContrast: !prev.highContrast }));
      announceToScreenReader(settings.highContrast ? 'High contrast disabled' : 'High contrast enabled');
    }
  };

  const toggleSetting = (key: keyof AccessibilitySettings) => {
    setSettings(prev => ({ ...prev, [key]: !prev[key] }));
  };

  const updateFontSize = (size: AccessibilitySettings['fontSize']) => {
    setSettings(prev => ({ ...prev, fontSize: size }));
  };

  if (!showControls) return null;
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a

  return (
    <>
      {/* Accessibility Toggle Button */}
<<<<<<< HEAD
      <motion.div
        className="fixed bottom-8 right-8 z-40"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 1.5, duration: 0.5 }}
      >
        <button
          onClick={() => setIsVisible(!isVisible)}
          className={`p-4 rounded-full shadow-lg transition-all duration-200 ${
            isVisible 
              ? 'bg-red-500 hover:bg-red-600 text-white' 
              : 'bg-green-500 hover:bg-green-600 text-white'
          }`}
          aria-label="Toggle accessibility panel"
          aria-expanded={isVisible}
        >
          <Accessibility className="w-6 h-6" />
        </button>
      </motion.div>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            className="fixed bottom-24 right-8 z-50 w-96 max-h-[80vh] overflow-hidden"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.3 }}
          >
            <div className="bg-white/95 dark:bg-black/95 backdrop-blur-xl rounded-2xl border border-green-500/30 shadow-2xl">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-green-500/30">
                <div className="flex items-center gap-2">
                  <Accessibility className="w-5 h-5 text-green-500" />
                  <h3 className="text-gray-900 dark:text-white font-semibold">Accessibility</h3>
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => setIsExpanded(!isExpanded)}
                    className="p-1 text-green-500 hover:text-green-600 transition-colors"
                    aria-label="Toggle expanded view"
                  >
                    <Settings className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setIsVisible(false)}
                    className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-white transition-colors"
                    aria-label="Close accessibility panel"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="p-4 space-y-4 max-h-[60vh] overflow-y-auto">
                {/* Quick Actions */}
                <div className="space-y-2">
                  <h4 className="text-sm font-medium text-gray-900 dark:text-white">Quick Actions</h4>
                  <div className="grid grid-cols-2 gap-2">
                    {accessibilityFeatures.slice(0, 4).map(feature => (
                      <button
                        key={feature.id}
                        onClick={feature.toggle}
                        className={`p-3 rounded-lg border transition-all duration-200 ${
                          feature.enabled
                            ? 'bg-green-500/20 border-green-500/30 text-green-700 dark:text-green-400'
                            : 'bg-gray-100 dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
                        }`}
                        aria-pressed={feature.enabled}
                      >
                        <div className="flex items-center gap-2">
                          {feature.icon}
                          <span className="text-xs font-medium">{feature.name}</span>
                        </div>
=======
      <button
        onClick={() => setShowAccessibilityPanel(!showAccessibilityPanel)}
        className="fixed top-4 left-4 z-50 p-3 bg-cyan-600 hover:bg-cyan-700 text-white rounded-full shadow-lg transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-500/50"
        aria-label="Accessibility settings"
        aria-expanded={showAccessibilityPanel}
      >
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      </button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {showAccessibilityPanel && (
          <motion.div
            initial={{ opacity: 0, x: -300 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -300 }}
            className="fixed top-0 left-0 h-full w-80 bg-black/95 backdrop-blur-md border-r border-cyan-500/30 z-40 overflow-y-auto"
          >
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-white">Accessibility</h2>
                <button
                  onClick={() => setShowAccessibilityPanel(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                  aria-label="Close accessibility panel"
                >
                  ×
                </button>
              </div>

              {/* Voice Navigation Status */}
              {settings.voiceNavigation && (
                <div className="mb-6 p-4 bg-cyan-500/20 border border-cyan-500/30 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-cyan-400">Voice Navigation</span>
                    <div className={`w-3 h-3 rounded-full ${isVoiceListening ? 'bg-green-400 animate-pulse' : 'bg-gray-400'}`}></div>
                  </div>
                  {isVoiceListening && (
                    <p className="text-xs text-gray-300">Listening... Say "navigate to home" or "increase font"</p>
                  )}
                  {voiceTranscript && (
                    <p className="text-xs text-gray-300 mt-2">Heard: "{voiceTranscript}"</p>
                  )}
                </div>
              )}

              {/* Settings */}
              <div className="space-y-6">
                {/* High Contrast */}
                <div className="flex items-center justify-between">
                  <label className="text-sm font-medium text-white">High Contrast</label>
                  <button
                    onClick={() => toggleSetting('highContrast')}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.highContrast ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.highContrast}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                {/* Font Size */}
                <div>
                  <label className="text-sm font-medium text-white mb-2 block">Font Size</label>
                  <div className="grid grid-cols-4 gap-2">
                    {(['small', 'medium', 'large', 'xlarge'] as const).map((size) => (
                      <button
                        key={size}
                        onClick={() => updateFontSize(size)}
                        className={`px-3 py-2 text-xs rounded transition-colors ${
                          settings.fontSize === size
                            ? 'bg-cyan-500 text-white'
                            : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                        }`}
                      >
                        {size.charAt(0).toUpperCase() + size.slice(1)}
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a
                      </button>
                    ))}
                  </div>
                </div>

<<<<<<< HEAD
                {/* All Features */}
                <div className="space-y-2">
                  <h4 className="text-sm font-medium text-gray-900 dark:text-white">All Features</h4>
                  <div className="space-y-2">
                    {accessibilityFeatures.map(feature => (
                      <div
                        key={feature.id}
                        className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
                      >
                        <div className="flex items-center gap-3">
                          {feature.icon}
                          <div>
                            <div className="text-sm font-medium text-gray-900 dark:text-white">
                              {feature.name}
                            </div>
                            <div className="text-xs text-gray-500 dark:text-gray-400">
                              {feature.description}
                            </div>
                          </div>
                        </div>
                        <button
                          onClick={feature.toggle}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                            feature.enabled ? 'bg-green-500' : 'bg-gray-300 dark:bg-gray-600'
                          }`}
                          role="switch"
                          aria-checked={feature.enabled}
                          aria-label={`Toggle ${feature.name}`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                              feature.enabled ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Advanced Settings */}
                {isExpanded && (
                  <>
                    {/* Color Blindness */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">Color Blindness Support</h4>
                      <select
                        value={settings.colorBlindness}
                        onChange={(e) => {
                          setSettings(prev => ({ ...prev, colorBlindness: e.target.value as any }));
                          applyAccessibilitySettings({ ...settings, colorBlindness: e.target.value as any });
                        }}
                        className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                      >
                        <option value="none">No Color Blindness</option>
                        <option value="protanopia">Protanopia (Red-Blind)</option>
                        <option value="deuteranopia">Deuteranopia (Green-Blind)</option>
                        <option value="tritanopia">Tritanopia (Blue-Blind)</option>
                      </select>
                    </div>

                    {/* Font Size */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">Font Size</h4>
                      <div className="grid grid-cols-4 gap-2">
                        {(['small', 'medium', 'large', 'xlarge'] as const).map(size => (
                          <button
                            key={size}
                            onClick={() => {
                              setSettings(prev => ({ ...prev, fontSize: size }));
                              applyAccessibilitySettings({ ...settings, fontSize: size });
                            }}
                            className={`p-2 rounded-lg border transition-colors ${
                              settings.fontSize === size
                                ? 'bg-green-500/20 border-green-500/30 text-green-700 dark:text-green-400'
                                : 'bg-gray-100 dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
                            }`}
                          >
                            <span className="text-xs font-medium capitalize">{size}</span>
                          </button>
                        ))}
                      </div>
                    </div>

                    {/* Theme */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">Theme</h4>
                      <div className="grid grid-cols-3 gap-2">
                        {(['light', 'dark', 'auto'] as const).map(theme => (
                          <button
                            key={theme}
                            onClick={() => {
                              setSettings(prev => ({ ...prev, theme }));
                              applyAccessibilitySettings({ ...settings, theme });
                            }}
                            className={`p-2 rounded-lg border transition-colors ${
                              settings.theme === theme
                                ? 'bg-green-500/20 border-green-500/30 text-green-700 dark:text-green-400'
                                : 'bg-gray-100 dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
                            }`}
                          >
                            <div className="flex items-center gap-1">
                              {theme === 'light' && <Sun className="w-3 h-3" />}
                              {theme === 'dark' && <Moon className="w-3 h-3" />}
                              {theme === 'auto' && <Monitor className="w-3 h-3" />}
                              <span className="text-xs font-medium capitalize">{theme}</span>
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>
                  </>
                )}

                {/* Keyboard Shortcuts */}
                <div className="space-y-2">
                  <h4 className="text-sm font-medium text-gray-900 dark:text-white">Keyboard Shortcuts</h4>
                  <div className="space-y-1">
                    {Array.from(keyboardShortcuts.entries()).map(([shortcut, description]) => (
                      <div key={shortcut} className="flex items-center justify-between text-xs">
                        <kbd className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-gray-800 dark:text-gray-200">
                          {shortcut}
                        </kbd>
                        <span className="text-gray-600 dark:text-gray-400">{description}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Announcements */}
                {announcements.length > 0 && (
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-gray-900 dark:text-white">Recent Announcements</h4>
                    <div className="space-y-1 max-h-32 overflow-y-auto">
                      {announcements.map((announcement, index) => (
                        <div key={index} className="text-xs text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 p-2 rounded">
                          {announcement}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Focus History */}
                {focusHistory.length > 0 && (
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-gray-900 dark:text-white">Focus History</h4>
                    <div className="space-y-1 max-h-32 overflow-y-auto">
                      {focusHistory.slice(-5).map((element, index) => (
                        <div key={index} className="text-xs text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 p-2 rounded">
                          {element.textContent?.slice(0, 50) || element.tagName.toLowerCase()}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
=======
                {/* Reduced Motion */}
                <div className="flex items-center justify-between">
                  <label className="text-sm font-medium text-white">Reduced Motion</label>
                  <button
                    onClick={() => toggleSetting('reducedMotion')}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.reducedMotion ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.reducedMotion}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.reducedMotion ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                {/* Focus Indicator */}
                <div className="flex items-center justify-between">
                  <label className="text-sm font-medium text-white">Focus Indicator</label>
                  <button
                    onClick={() => toggleSetting('focusIndicator')}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.focusIndicator ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.focusIndicator}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.focusIndicator ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                {/* Voice Navigation */}
                <div className="flex items-center justify-between">
                  <label className="text-sm font-medium text-white">Voice Navigation</label>
                  <button
                    onClick={() => toggleSetting('voiceNavigation')}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.voiceNavigation ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.voiceNavigation}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.voiceNavigation ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                {/* Screen Reader Optimized */}
                <div className="flex items-center justify-between">
                  <label className="text-sm font-medium text-white">Screen Reader Optimized</label>
                  <button
                    onClick={() => toggleSetting('screenReaderOptimized')}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.screenReaderOptimized ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.screenReaderOptimized}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.screenReaderOptimized ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                {/* Color Blind Friendly */}
                <div className="flex items-center justify-between">
                  <label className="text-sm font-medium text-white">Color Blind Friendly</label>
                  <button
                    onClick={() => toggleSetting('colorBlindFriendly')}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      settings.colorBlindFriendly ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    role="switch"
                    aria-checked={settings.colorBlindFriendly}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        settings.colorBlindFriendly ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>
              </div>

              {/* Quick Actions */}
              <div className="mt-8 pt-6 border-t border-gray-700">
                <h3 className="text-sm font-medium text-white mb-3">Quick Actions</h3>
                <div className="space-y-2">
                  <button
                    onClick={() => {
                      setSettings(prev => ({ ...prev, fontSize: 'large', highContrast: true }));
                      announceToScreenReader('Accessibility enhanced');
                    }}
                    className="w-full px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white text-sm rounded transition-colors"
                  >
                    Enhance Accessibility
                  </button>
                  <button
                    onClick={() => {
                      setSettings(prev => ({ ...prev, fontSize: 'medium', highContrast: false, reducedMotion: false }));
                      announceToScreenReader('Settings reset to default');
                    }}
                    className="w-full px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded transition-colors"
                  >
                    Reset to Default
                  </button>
                </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

<<<<<<< HEAD
      {/* Screen Reader Only Live Region */}
      <div
        id="accessibility-live-region"
        className="sr-only"
        aria-live="polite"
        aria-atomic="true"
      />
=======
      {/* Global Styles */}
      <style jsx global>{`
        .high-contrast {
          --bg-primary: #000000 !important;
          --text-primary: #ffffff !important;
          --accent-color: #ffff00 !important;
        }

        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }

        .focus-visible button:focus,
        .focus-visible a:focus,
        .focus-visible input:focus,
        .focus-visible select:focus,
        .focus-visible textarea:focus {
          outline: 3px solid #06b6d4 !important;
          outline-offset: 2px !important;
        }

        .color-blind-friendly {
          filter: grayscale(100%) contrast(150%);
        }

        .skip-link {
          position: absolute;
          top: -40px;
          left: 6px;
          background: #06b6d4;
          color: white;
          padding: 8px;
          text-decoration: none;
          border-radius: 4px;
          z-index: 10000;
        }

        .skip-link:focus {
          top: 6px;
        }

        .sr-only {
          position: absolute;
          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0, 0, 0, 0);
          white-space: nowrap;
          border: 0;
        }
      `}</style>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a
    </>
  );
};

export default AccessibilityEnhancer;