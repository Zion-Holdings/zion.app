import React, { useEffect, useRef } from 'react';
import { cn } from '../../utils/cn';

interface EnhancedFuturisticBackgroundProps {
<<<<<<< HEAD
  children: React.ReactNode;
  variant?: 'neural-quantum' | 'cyberpunk' | 'holographic' | 'matrix' | 'quantum-particles';
=======
  variant?: 'quantum-holographic' | 'neural-quantum' | 'cyberpunk' | 'holographic' | 'quantum-holographic-advanced' | 'neural-advanced' | 'cyberpunk-advanced' | 'holographic-advanced';
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2873
  intensity?: 'low' | 'medium' | 'high';
  children: React.ReactNode;
  className?: string;
}

const EnhancedFuturisticBackground: React.FC<EnhancedFuturisticBackgroundProps> = ({
<<<<<<< HEAD
  children,
  variant = 'neural-quantum',
=======
  variant = 'quantum-holographic',
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2873
  intensity = 'medium',
  children,
  className
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | undefined>(undefined);

  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

<<<<<<< HEAD
    // Particle system for quantum effects
=======
    // Enhanced particle system
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2873
    const particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      opacity: number;
      color: string;
<<<<<<< HEAD
    }> = [];

    const colors = [
      '#3b82f6', // Blue
      '#8b5cf6', // Purple
      '#ec4899', // Pink
      '#10b981', // Green
      '#f59e0b', // Yellow
      '#ef4444', // Red
    ];

    // Initialize particles
    const initParticles = () => {
      const particleCount = intensity === 'high' ? 150 : intensity === 'medium' ? 100 : 50;
      
      for (let i = 0; i < particleCount; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          size: Math.random() * 3 + 1,
          opacity: Math.random() * 0.5 + 0.3,
          color: colors[Math.floor(Math.random() * colors.length)]
        });
      }

    initParticles();

    // Neural network connections
    const drawConnections = () => {
      ctx.strokeStyle = 'rgba(147, 51, 234, 0.1)';
      ctx.lineWidth = 1;

      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 150) {
            const opacity = (150 - distance) / 150 * 0.3;
            ctx.strokeStyle = `rgba(147, 51, 234, ${opacity})`;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
        }
      }

    // Quantum entanglement effect
    const drawQuantumEntanglement = () => {
      ctx.strokeStyle = 'rgba(59, 130, 246, 0.2)';
      ctx.lineWidth = 2;

      for (let i = 0; i < particles.length; i += 2) {
        if (i + 1 < particles.length) {
          const opacity = Math.sin(Date.now() * 0.001 + i) * 0.3 + 0.3;
          ctx.strokeStyle = `rgba(59, 130, 246, ${opacity})`;
          ctx.beginPath();
          ctx.moveTo(particles[i].x, particles[i].y);
          ctx.lineTo(particles[i + 1].x, particles[i + 1].y);
          ctx.stroke();
        }
      }
    };

    // Matrix rain effect
    const drawMatrixRain = () => {
      ctx.fillStyle = '#00ff00';
      ctx.font = '16px monospace';
      
      for (let i = 0; i < 50; i++) {
        const x = (i * 20) % canvas.width;
        const y = (Date.now() * 0.01 + i * 10) % canvas.height;
        const opacity = Math.sin(Date.now() * 0.001 + i) * 0.5 + 0.5;
        
        ctx.fillStyle = `rgba(0, 255, 0, ${opacity})`;
        ctx.fillText('01', x, y);
      }
    };

    // Holographic grid
    const drawHolographicGrid = () => {
      const gridSize = 50;
      const time = Date.now() * 0.001;
      
      ctx.strokeStyle = 'rgba(147, 51, 234, 0.1)';
      ctx.lineWidth = 1;

      // Vertical lines
      for (let x = 0; x < canvas.width; x += gridSize) {
        const opacity = Math.sin(time + x * 0.01) * 0.2 + 0.1;
        ctx.strokeStyle = `rgba(147, 51, 234, ${opacity})`;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
      }

      // Horizontal lines
      for (let y = 0; y < canvas.height; y += gridSize) {
        const opacity = Math.cos(time + y * 0.01) * 0.2 + 0.1;
        ctx.strokeStyle = `rgba(147, 51, 234, ${opacity})`;
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }
    };

    // Main animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update and draw particles
      particles.forEach((particle, index) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;

        // Bounce off edges
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;

=======
      type: 'quantum' | 'neural' | 'holographic' | 'cyberpunk';
    }> = [];

    const createParticle = () => {
      const types = ['quantum', 'neural', 'holographic', 'cyberpunk'] as const;
      const type = types[Math.floor(Math.random() * types.length)];
      
      let color: string;
      switch (type) {
        case 'quantum':
          color = `hsl(${180 + Math.random() * 60}, 70%, 60%)`;
          break;
        case 'neural':
          color = `hsl(${240 + Math.random() * 60}, 70%, 60%)`;
          break;
        case 'holographic':
          color = `hsl(${300 + Math.random() * 60}, 70%, 60%)`;
          break;
        case 'cyberpunk':
          color = `hsl(${0 + Math.random() * 60}, 70%, 60%)`;
          break;
      }

      return {
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 2,
        vy: (Math.random() - 0.5) * 2,
        size: Math.random() * 3 + 1,
        opacity: Math.random() * 0.5 + 0.3,
        color,
        type
      };
    };

    // Initialize particles
    const particleCount = intensity === 'high' ? 200 : intensity === 'medium' ? 120 : 80;
    for (let i = 0; i < particleCount; i++) {
      particles.push(createParticle());
    }

    // Enhanced animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update and draw particles
      particles.forEach((particle, index) => {
        particle.x += particle.vx;
        particle.y += particle.vy;

>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2873
        // Wrap around edges
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;

        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
<<<<<<< HEAD
        ctx.fillStyle = `${particle.color}${Math.floor(particle.opacity * 255).toString(16).padStart(2, '0')}`;
        ctx.fill();

        // Add glow effect
        ctx.shadowColor = particle.color;
        ctx.shadowBlur = 10;
        ctx.fill();
        ctx.shadowBlur = 0;
      });

      // Draw effects based on variant
      switch (variant) {
        case 'neural-quantum':
          drawConnections();
          drawQuantumEntanglement();
          break;
        case 'cyberpunk':
          drawHolographicGrid();
          drawMatrixRain();
          break;
        case 'holographic':
          drawHolographicGrid();
          drawConnections();
          break;
        case 'matrix':
          drawMatrixRain();
          break;
        case 'quantum-particles':
          drawQuantumEntanglement();
          break;
=======
        ctx.fillStyle = particle.color;
        ctx.globalAlpha = particle.opacity;
        ctx.fill();

        // Draw connections between nearby particles
        particles.forEach((otherParticle, otherIndex) => {
          if (index === otherIndex) return;
          
          const dx = particle.x - otherParticle.x;
          const dy = particle.y - otherParticle.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 150) {
            const opacity = (150 - distance) / 150 * 0.3;
            ctx.beginPath();
            ctx.moveTo(particle.x, particle.y);
            ctx.lineTo(otherParticle.x, otherParticle.y);
            ctx.strokeStyle = `rgba(139, 92, 246, ${opacity})`;
            ctx.lineWidth = 1;
            ctx.stroke();
          }
        });

        // Add quantum effects
        if (particle.type === 'quantum' && Math.random() < 0.01) {
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);
          ctx.strokeStyle = particle.color;
          ctx.globalAlpha = 0.3;
          ctx.lineWidth = 2;
          ctx.stroke();
        }

        // Add neural network effects
        if (particle.type === 'neural' && Math.random() < 0.005) {
          ctx.beginPath();
          ctx.moveTo(particle.x, particle.y);
          ctx.lineTo(particle.x + (Math.random() - 0.5) * 100, particle.y + (Math.random() - 0.5) * 100);
          ctx.strokeStyle = particle.color;
          ctx.globalAlpha = 0.2;
          ctx.lineWidth = 1;
          ctx.stroke();
        }
      });

      // Draw enhanced background effects
      if (variant.includes('quantum')) {
        drawQuantumEffects(ctx, canvas);
      }
      
      if (variant.includes('holographic')) {
        drawHolographicEffects(ctx, canvas);
      }
      
      if (variant.includes('cyberpunk')) {
        drawCyberpunkEffects(ctx, canvas);
      }
      
      if (variant.includes('neural')) {
        drawNeuralEffects(ctx, canvas);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2873
      }

      animationRef.current = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [variant, intensity]);

<<<<<<< HEAD
  const getBackgroundClasses = () => {
    const baseClasses = 'relative min-h-screen';
    
    switch (variant) {
      case 'neural-quantum':
        return `${baseClasses} quantum-neural-bg`;
      case 'cyberpunk':
        return `${baseClasses} matrix-rain`;
      case 'holographic':
        return `${baseClasses} holographic`;
      case 'matrix':
        return `${baseClasses} matrix-rain`;
      case 'quantum-particles':
        return `${baseClasses} quantum-particles`;
      default:
        return `${baseClasses} futuristic-bg`;
=======
  const drawQuantumEffects = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {
    const time = Date.now() * 0.001;
    
    // Quantum wave patterns
    for (let i = 0; i < 5; i++) {
      const waveOffset = i * Math.PI * 0.4;
      ctx.beginPath();
      ctx.strokeStyle = `hsla(${180 + i * 30}, 70%, 60%, 0.1)`;
      ctx.lineWidth = 2;
      
      for (let x = 0; x < canvas.width; x += 10) {
        const y = Math.sin((x + time * 50 + waveOffset) * 0.01) * 100 + canvas.height / 2;
        if (x === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      }
      ctx.stroke();
    }
  };

  const drawHolographicEffects = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {
    const time = Date.now() * 0.001;
    
    // Holographic grid
    ctx.strokeStyle = 'rgba(147, 51, 234, 0.1)';
    ctx.lineWidth = 1;
    
    for (let x = 0; x < canvas.width; x += 50) {
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, canvas.height);
      ctx.stroke();
    }
    
    for (let y = 0; y < canvas.height; y += 50) {
      ctx.beginPath();
      ctx.moveTo(0, y);
      ctx.lineTo(canvas.width, y);
      ctx.stroke();
    }

    // Holographic circles
    for (let i = 0; i < 3; i++) {
      const centerX = canvas.width / 2 + Math.cos(time + i) * 100;
      const centerY = canvas.height / 2 + Math.sin(time + i) * 100;
      const radius = 50 + Math.sin(time * 2 + i) * 20;
      
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
      ctx.strokeStyle = `hsla(${300 + i * 30}, 70%, 60%, 0.2)`;
      ctx.lineWidth = 3;
      ctx.stroke();
    }
  };

  const drawCyberpunkEffects = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {
    const time = Date.now() * 0.001;
    
    // Cyberpunk scan lines
    for (let y = 0; y < canvas.height; y += 4) {
      const opacity = Math.sin(time * 10 + y * 0.1) * 0.5 + 0.5;
      ctx.strokeStyle = `rgba(255, 0, 255, ${opacity * 0.1})`;
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(0, y);
      ctx.lineTo(canvas.width, y);
      ctx.stroke();
    }

    // Cyberpunk energy fields
    for (let i = 0; i < 2; i++) {
      const centerX = canvas.width / 2 + Math.cos(time + i * Math.PI) * 200;
      const centerY = canvas.height / 2 + Math.sin(time + i * Math.PI) * 200;
      
      const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, 150);
      gradient.addColorStop(0, `hsla(${0 + i * 180}, 70%, 60%, 0.3)`);
      gradient.addColorStop(1, 'transparent');
      
      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(centerX, centerY, 150, 0, Math.PI * 2);
      ctx.fill();
    }
  };

  const drawNeuralEffects = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {
    const time = Date.now() * 0.001;
    
    // Neural network nodes
    const nodes = [
      { x: canvas.width * 0.2, y: canvas.height * 0.3 },
      { x: canvas.width * 0.8, y: canvas.height * 0.3 },
      { x: canvas.width * 0.2, y: canvas.height * 0.7 },
      { x: canvas.width * 0.8, y: canvas.height * 0.7 },
      { x: canvas.width * 0.5, y: canvas.height * 0.5 }
    ];

    // Draw connections
    ctx.strokeStyle = 'rgba(59, 130, 246, 0.2)';
    ctx.lineWidth = 2;
    
    nodes.forEach((node, i) => {
      nodes.slice(i + 1).forEach(otherNode => {
        ctx.beginPath();
        ctx.moveTo(node.x, node.y);
        ctx.lineTo(otherNode.x, otherNode.y);
        ctx.stroke();
      });
    });

    // Draw nodes with pulse effect
    nodes.forEach((node, i) => {
      const pulse = Math.sin(time * 3 + i) * 0.5 + 0.5;
      ctx.beginPath();
      ctx.arc(node.x, node.y, 8 + pulse * 4, 0, Math.PI * 2);
      ctx.fillStyle = `hsla(240, 70%, 60%, ${0.5 + pulse * 0.3})`;
      ctx.fill();
    });
  };

  const getBackgroundClasses = () => {
    const baseClasses = 'relative min-h-screen overflow-hidden';
    
    switch (variant) {
      case 'quantum-holographic':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-blue-900 to-purple-900');
      case 'neural-quantum':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-indigo-900 to-blue-900');
      case 'cyberpunk':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-purple-900 to-pink-900');
      case 'holographic':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-cyan-900 to-blue-900');
      case 'quantum-holographic-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-blue-900 via-purple-900 to-pink-900');
      case 'neural-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-indigo-900 via-blue-900 to-cyan-900');
      case 'cyberpunk-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-purple-900 via-pink-900 to-red-900');
      case 'holographic-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-black via-cyan-900 via-blue-900 to-purple-900');
      default:
        return cn(baseClasses, 'bg-gradient-to-br from-black via-blue-900 to-purple-900');
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2873
    }
  };

  return (
<<<<<<< HEAD
    <div className={`${getBackgroundClasses()} ${className}`}>
      {/* Animated Canvas Background */}
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{ opacity: intensity === 'high' ? 0.8 : intensity === 'medium' ? 0.6 : 0.4 }}
      />
      
      {/* Gradient Overlay */}
      <div className="absolute inset-0 bg-gradient-to-br from-black/80 via-black/60 to-black/80 z-10" />
      
      {/* Content */}
      <div className="relative z-20">
=======
    <div className={cn(getBackgroundClasses(), className)}>
      {/* Enhanced Canvas Background */}
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full pointer-events-none"
        style={{ zIndex: 0 }}
      />
      
      {/* Enhanced Overlay Effects */}
      <div className="absolute inset-0 pointer-events-none" style={{ zIndex: 1 }}>
        {/* Quantum Holographic Overlay */}
        {variant.includes('quantum') && (
          <div className="absolute inset-0 bg-gradient-to-br from-transparent via-cyan-500/5 to-blue-500/5 animate-pulse" />
        )}
        
        {/* Neural Network Overlay */}
        {variant.includes('neural') && (
          <div className="absolute inset-0 bg-gradient-to-br from-transparent via-indigo-500/5 to-purple-500/5 animate-pulse" />
        )}
        
        {/* Cyberpunk Overlay */}
        {variant.includes('cyberpunk') && (
          <div className="absolute inset-0 bg-gradient-to-br from-transparent via-pink-500/5 to-red-500/5 animate-pulse" />
        )}
        
        {/* Holographic Overlay */}
        {variant.includes('holographic') && (
          <div className="absolute inset-0 bg-gradient-to-br from-transparent via-purple-500/5 to-pink-500/5 animate-pulse" />
        )}
      </div>

      {/* Content */}
      <div className="relative z-10">
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2873
        {children}
      </div>

      {/* Floating Elements */}
      <div className="fixed inset-0 pointer-events-none z-5">
        {/* Floating geometric shapes */}
        <div className="absolute top-20 left-20 w-4 h-4 bg-cyan-400/20 rounded-full animate-pulse" />
        <div className="absolute top-40 right-32 w-6 h-6 bg-purple-400/20 rounded-full animate-pulse" style={{ animationDelay: '1s' }} />
        <div className="absolute bottom-32 left-32 w-3 h-3 bg-pink-400/20 rounded-full animate-pulse" style={{ animationDelay: '2s' }} />
        <div className="absolute bottom-20 right-20 w-5 h-5 bg-green-400/20 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }} />
        
        {/* Floating lines */}
        <div className="absolute top-1/4 left-10 w-20 h-px bg-gradient-to-r from-transparent via-cyan-400/30 to-transparent transform rotate-45" />
        <div className="absolute bottom-1/4 right-10 w-16 h-px bg-gradient-to-r from-transparent via-purple-400/30 to-transparent transform -rotate-45" />
      </div>
    </div>
  );
};

export default EnhancedFuturisticBackground;