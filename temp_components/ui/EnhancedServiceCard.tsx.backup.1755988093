import React, { useState } from 'react';
<<<<<<< HEAD
import Link from 'next/link';
import { motion } from 'framer-motion';
import { 
  ArrowRight, Star, Clock, Users, TrendingUp, 
  Shield, Brain, Atom, Rocket, Cpu, Target,
  CheckCircle, ExternalLink, Play
} from 'lucide-react';

interface ServiceCardProps {
  service: {
    id: string;
    name: string;
    description: string;
    category: string;
    type: string;
    pricing?: {
      starter?: string;
      professional?: string;
      enterprise?: string;
      custom?: string;
    };
    features?: string[];
    benefits?: string[];
    marketSize?: string;
    targetAudience?: string;
    competitiveAdvantage?: string;
    slug: string;
  };
  variant?: 'default' | 'featured' | 'compact';
  showPricing?: boolean;
  showFeatures?: boolean;
  showBenefits?: boolean;
}

const EnhancedServiceCard: React.FC<ServiceCardProps> = ({
  service,
  variant = 'default',
  showPricing = false,
  showFeatures = false,
  showBenefits = false
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);

  const getCategoryIcon = (category: string) => {
    const categoryLower = category.toLowerCase();
    if (categoryLower.includes('ai') || categoryLower.includes('consciousness')) return Brain;
    if (categoryLower.includes('quantum')) return Atom;
    if (categoryLower.includes('security') || categoryLower.includes('cyber')) return Shield;
    if (categoryLower.includes('space')) return Rocket;
    if (categoryLower.includes('infrastructure') || categoryLower.includes('it')) return Cpu;
    if (categoryLower.includes('business') || categoryLower.includes('saas')) return Target;
    return Star;
  };

  const getCategoryColor = (category: string) => {
    const categoryLower = category.toLowerCase();
    if (categoryLower.includes('ai') || categoryLower.includes('consciousness')) return 'from-purple-500 to-pink-500';
    if (categoryLower.includes('quantum')) return 'from-blue-500 to-cyan-500';
    if (categoryLower.includes('security') || categoryLower.includes('cyber')) return 'from-red-500 to-orange-500';
    if (categoryLower.includes('space')) return 'from-indigo-500 to-purple-500';
    if (categoryLower.includes('infrastructure') || categoryLower.includes('it')) return 'from-yellow-500 to-orange-500';
    if (categoryLower.includes('business') || categoryLower.includes('saas')) return 'from-emerald-500 to-teal-500';
    return 'from-gray-500 to-gray-600';
  };

  const CategoryIcon = getCategoryIcon(service.category);
  const categoryColor = getCategoryColor(service.category);

  if (variant === 'compact') {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        whileHover={{ y: -5 }}
        className="group bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 hover:bg-gray-700/50 transition-all duration-300 cursor-pointer border border-gray-700/50 hover:border-cyan-500/50 hover:shadow-2xl hover:shadow-cyan-500/25"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <div className="flex items-center justify-between mb-3">
          <div className={`w-10 h-10 bg-gradient-to-br ${categoryColor} rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>
            <CategoryIcon className="w-5 h-5 text-white" />
          </div>
          <ArrowRight className="w-4 h-4 text-cyan-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        </div>
        <h3 className="text-lg font-bold mb-2 group-hover:text-cyan-300 transition-colors duration-300 line-clamp-2">
          {service.name}
        </h3>
        <p className="text-gray-300 text-sm line-clamp-3 mb-3">
          {service.description}
        </p>
        <div className="flex items-center justify-between">
          <span className="text-xs text-gray-400 bg-gray-700/50 px-2 py-1 rounded-full">
            {service.category}
          </span>
          <span className="text-xs text-cyan-400 font-medium">Learn More</span>
        </div>
      </motion.div>
    );
  }

  if (variant === 'featured') {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        whileHover={{ y: -8, scale: 1.02 }}
        className="group bg-gradient-to-br from-gray-800/50 to-gray-700/50 backdrop-blur-sm rounded-2xl p-8 hover:from-gray-700/50 hover:to-gray-600/50 transition-all duration-500 cursor-pointer border border-gray-700/50 hover:border-cyan-500/50 hover:shadow-2xl hover:shadow-cyan-500/25 relative overflow-hidden"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-5">
          <div className="absolute inset-0" style={{
            backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2306b6d4' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
          }}></div>
        </div>

        {/* Header */}
        <div className="relative z-10">
          <div className="flex items-center justify-between mb-6">
            <div className={`w-16 h-16 bg-gradient-to-br ${categoryColor} rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>
              <CategoryIcon className="w-8 h-8 text-white" />
            </div>
            <div className="flex items-center space-x-2">
              <div className="flex items-center space-x-1 text-yellow-400">
                <Star className="w-4 h-4 fill-current" />
                <Star className="w-4 h-4 fill-current" />
                <Star className="w-4 h-4 fill-current" />
                <Star className="w-4 h-4 fill-current" />
                <Star className="w-4 h-4 fill-current" />
              </div>
            </div>
          </div>

          <h3 className="text-2xl font-bold mb-4 group-hover:text-cyan-300 transition-colors duration-300">
            {service.name}
          </h3>
          
          <p className="text-gray-300 mb-6 leading-relaxed">
            {service.description}
          </p>

          {/* Stats */}
          <div className="grid grid-cols-3 gap-4 mb-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-cyan-400">3000+</div>
              <div className="text-xs text-gray-400">Services</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-cyan-400">99.99%</div>
              <div className="text-xs text-gray-400">Uptime</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-cyan-400">250+</div>
              <div className="text-xs text-gray-400">Countries</div>
            </div>
          </div>

          {/* Features Preview */}
          {showFeatures && service.features && (
            <div className="mb-6">
              <h4 className="text-sm font-semibold text-gray-400 uppercase tracking-wider mb-3">
                Key Features
              </h4>
              <div className="grid grid-cols-2 gap-2">
                {service.features.slice(0, 4).map((feature, index) => (
                  <div key={index} className="flex items-center space-x-2 text-sm text-gray-300">
                    <CheckCircle className="w-4 h-4 text-cyan-400" />
                    <span>{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* CTA */}
          <div className="flex items-center justify-between">
            <Link
              href={service.slug}
              className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-semibold rounded-xl hover:from-cyan-600 hover:to-blue-700 transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/25"
            >
              Get Started
              <ArrowRight className="w-5 h-5 ml-2" />
            </Link>
            
            <button className="p-3 text-gray-400 hover:text-cyan-300 hover:bg-gray-700/50 rounded-lg transition-all duration-300">
              <Play className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Hover Effect */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: isHovered ? 0.1 : 0 }}
          transition={{ duration: 0.3 }}
          className="absolute inset-0 bg-gradient-to-br from-cyan-500 to-blue-600"
        />
      </motion.div>
    );
  }

  // Default variant
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      whileHover={{ y: -5 }}
      className="group bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 hover:bg-gray-700/50 transition-all duration-300 cursor-pointer border border-gray-700/50 hover:border-cyan-500/50 hover:shadow-2xl hover:shadow-cyan-500/25"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <div className={`w-12 h-12 bg-gradient-to-br ${categoryColor} rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>
          <CategoryIcon className="w-6 h-6 text-white" />
        </div>
        <ArrowRight className="w-5 h-5 text-cyan-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
      </div>

      {/* Content */}
      <h3 className="text-xl font-bold mb-3 group-hover:text-cyan-300 transition-colors duration-300 line-clamp-2">
        {service.name}
      </h3>
      
      <p className="text-gray-300 mb-4 line-clamp-3">
        {service.description}
      </p>

      {/* Category & Type */}
      <div className="flex items-center justify-between mb-4">
        <span className="text-xs text-gray-400 bg-gray-700/50 px-3 py-1 rounded-full">
          {service.category}
        </span>
        <span className="text-xs text-cyan-400 bg-cyan-500/10 px-3 py-1 rounded-full">
          {service.type}
        </span>
      </div>

      {/* Pricing Preview */}
      {showPricing && service.pricing && (
        <div className="mb-4 p-3 bg-gray-700/30 rounded-lg">
          <div className="text-sm text-gray-400 mb-2">Starting from</div>
          <div className="text-lg font-bold text-cyan-400">
            {service.pricing.starter || service.pricing.custom}
=======
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Brain, 
  ArrowRight, 
  ExternalLink, 
  CheckCircle, 
  Zap, 
  Star, 
  TrendingUp, 
  Users, 
  Award,
  Clock,
  Shield,
  Rocket,
  Globe,
  Cpu,
  Atom,
  Target
} from 'lucide-react';

interface ServiceFeature {
  name: string;
  description?: string;
  icon?: React.ReactNode;
}

interface ServiceBenefit {
  name: string;
  impact: string;
  icon?: React.ReactNode;
}

interface ServicePricing {
  starter: string;
  professional: string;
  enterprise: string;
  custom: string;
}

interface ServiceCardProps {
  id: string;
  name: string;
  tagline: string;
  description: string;
  category: string;
  type: string;
  pricing: ServicePricing;
  features: string[];
  benefits: string[];
  useCases: string[];
  marketSize: string;
  targetAudience: string;
  competitiveAdvantage: string;
  slug: string;
  featured?: boolean;
  priority?: 'high' | 'medium' | 'low';
  technology?: string[];
  compliance?: string[];
  onCardClick?: (service: any) => void;
}

const getCategoryIcon = (category: string) => {
  const categoryLower = category.toLowerCase();
  if (categoryLower.includes('ai') || categoryLower.includes('machine learning')) return Brain;
  if (categoryLower.includes('quantum')) return Atom;
  if (categoryLower.includes('security') || categoryLower.includes('cyber')) return Shield;
  if (categoryLower.includes('space')) return Rocket;
  if (categoryLower.includes('business')) return Target;
  if (categoryLower.includes('it') || categoryLower.includes('infrastructure')) return Cpu;
  if (categoryLower.includes('global') || categoryLower.includes('worldwide')) return Globe;
  return Star;
};

const getPriorityColor = (priority: string) => {
  switch (priority) {
    case 'high': return 'from-red-500 to-orange-500';
    case 'medium': return 'from-yellow-500 to-orange-500';
    case 'low': return 'from-green-500 to-teal-500';
    default: return 'from-cyan-500 to-purple-500';
  }
};

const getPriorityLabel = (priority: string) => {
  switch (priority) {
    case 'high': return 'High Priority';
    case 'medium': return 'Medium Priority';
    case 'low': return 'Low Priority';
    default: return 'Standard';
  }
};

const EnhancedServiceCard: React.FC<ServiceCardProps> = ({
  id,
  name,
  tagline,
  description,
  category,
  type,
  pricing,
  features,
  benefits,
  useCases,
  marketSize,
  targetAudience,
  competitiveAdvantage,
  slug,
  featured = false,
  priority = 'medium',
  technology = [],
  compliance = [],
  onCardClick
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [showDetails, setShowDetails] = useState(false);
  
  const CategoryIcon = getCategoryIcon(category);
  const priorityColor = getPriorityColor(priority);
  const priorityLabel = getPriorityLabel(priority);

  const handleCardClick = () => {
    if (onCardClick) {
      onCardClick({ id, name, slug, category, type });
    }
  };

  const handleLearnMore = (e: React.MouseEvent) => {
    e.stopPropagation();
    window.location.href = slug;
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      whileHover={{ y: -5 }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      onClick={handleCardClick}
      className="group relative bg-gradient-to-br from-white/5 to-white/10 backdrop-blur-xl border border-white/10 rounded-2xl p-6 h-full transition-all duration-500 hover:border-cyan-400/50 hover:shadow-2xl hover:shadow-cyan-500/25 cursor-pointer overflow-hidden"
    >
      {/* Background Gradient Overlay */}
      <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
      
      {/* Priority Badge */}
      <div className="absolute top-4 right-4 z-10">
        <div className={`text-xs bg-gradient-to-r ${priorityColor} text-white px-3 py-1 rounded-full font-medium shadow-lg`}>
          {priorityLabel}
        </div>
      </div>

      {/* Featured Badge */}
      {featured && (
        <div className="absolute top-4 left-4 z-10">
          <div className="text-xs bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-3 py-1 rounded-full font-medium shadow-lg flex items-center gap-1">
            <Star className="w-3 h-3" />
            Featured
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-bbf1
          </div>
        </div>
      )}

<<<<<<< HEAD
      {/* Benefits Preview */}
      {showBenefits && service.benefits && (
        <div className="mb-4">
          <h4 className="text-sm font-semibold text-gray-400 mb-2">Key Benefits</h4>
          <div className="space-y-1">
            {service.benefits.slice(0, 2).map((benefit, index) => (
              <div key={index} className="flex items-center space-x-2 text-sm text-gray-300">
                <CheckCircle className="w-3 h-3 text-cyan-400" />
                <span>{benefit}</span>
              </div>
=======
      {/* Header Section */}
      <div className="relative z-10 mb-6">
        <div className="flex items-start justify-between mb-4">
          <div className={`w-12 h-12 bg-gradient-to-r from-cyan-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg`}>
            <CategoryIcon className="w-6 h-6 text-white" />
          </div>
          <div className="text-xs bg-gradient-to-r from-cyan-500 to-purple-500 text-white px-3 py-1 rounded-full font-medium">
            {type}
          </div>
        </div>
        
        <h3 className="text-xl font-bold text-white mb-2 group-hover:text-cyan-400 transition-colors duration-300 line-clamp-2">
          {name}
        </h3>
        
        <p className="text-sm text-cyan-400 font-medium mb-2">
          {tagline}
        </p>
        
        <p className="text-white/70 text-sm leading-relaxed line-clamp-3">
          {description}
        </p>
      </div>

      {/* Quick Stats */}
      <div className="relative z-10 mb-6">
        <div className="grid grid-cols-2 gap-3">
          <div className="flex items-center gap-2 text-xs text-white/70">
            <Users className="w-3 h-3 text-cyan-400" />
            <span className="truncate">{targetAudience.split(',')[0]}</span>
          </div>
          <div className="flex items-center gap-2 text-xs text-white/70">
            <TrendingUp className="w-3 h-3 text-yellow-400" />
            <span className="truncate">{marketSize}</span>
          </div>
        </div>
      </div>

      {/* Features Preview */}
      <div className="relative z-10 mb-6">
        <h4 className="text-sm font-semibold text-white/90 mb-3 flex items-center gap-2">
          <CheckCircle className="w-4 h-4 text-cyan-400" />
          Key Features
        </h4>
        <div className="space-y-2">
          {features.slice(0, 3).map((feature, index) => (
            <div key={index} className="flex items-center gap-2 text-sm text-white/70">
              <div className="w-1.5 h-1.5 bg-cyan-400 rounded-full flex-shrink-0" />
              <span className="truncate">{feature}</span>
            </div>
          ))}
          {features.length > 3 && (
            <div className="text-xs text-cyan-400">
              +{features.length - 3} more features
            </div>
          )}
        </div>
      </div>

      {/* Benefits Preview */}
      <div className="relative z-10 mb-6">
        <h4 className="text-sm font-semibold text-white/90 mb-3 flex items-center gap-2">
          <Zap className="w-4 h-4 text-yellow-400" />
          Key Benefits
        </h4>
        <div className="space-y-2">
          {benefits.slice(0, 2).map((benefit, index) => (
            <div key={index} className="flex items-center gap-2 text-sm text-white/70">
              <div className="w-1.5 h-1.5 bg-yellow-400 rounded-full flex-shrink-0" />
              <span className="truncate">{benefit}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Technology & Compliance Tags */}
      {(technology.length > 0 || compliance.length > 0) && (
        <div className="relative z-10 mb-6">
          <div className="flex flex-wrap gap-2">
            {technology.slice(0, 3).map((tech, index) => (
              <span key={index} className="text-xs bg-blue-500/20 text-blue-400 px-2 py-1 rounded-full">
                {tech}
              </span>
            ))}
            {compliance.slice(0, 2).map((comp, index) => (
              <span key={index} className="text-xs bg-green-500/20 text-green-400 px-2 py-1 rounded-full">
                {comp}
              </span>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-bbf1
            ))}
          </div>
        </div>
      )}

<<<<<<< HEAD
      {/* Market Info */}
      {service.marketSize && (
        <div className="mb-4 p-3 bg-gray-700/30 rounded-lg">
          <div className="text-sm text-gray-400 mb-1">Market Size</div>
          <div className="text-sm font-semibold text-green-400">{service.marketSize}</div>
        </div>
      )}

      {/* Footer */}
      <div className="flex items-center justify-between pt-4 border-t border-gray-700/50">
        <div className="flex items-center space-x-4 text-sm text-gray-400">
          <div className="flex items-center space-x-1">
            <Users className="w-4 h-4" />
            <span>Enterprise</span>
          </div>
          <div className="flex items-center space-x-1">
            <TrendingUp className="w-4 h-4" />
            <span>Growth</span>
          </div>
        </div>
        
        <Link
          href={service.slug}
          className="inline-flex items-center text-cyan-400 group-hover:text-cyan-300 transition-colors duration-300 font-medium"
        >
          Explore Service
          <ExternalLink className="w-4 h-4 ml-1" />
        </Link>
      </div>
=======
      {/* Pricing & CTA */}
      <div className="relative z-10 mt-auto">
        <div className="flex items-center justify-between mb-4">
          <div className="text-2xl font-bold text-cyan-400">
            {pricing.starter}
          </div>
          <div className="text-xs text-white/50">
            Starting from
          </div>
        </div>
        
        <div className="flex gap-2">
          <button
            onClick={handleLearnMore}
            className="flex-1 group/btn relative px-4 py-3 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 border border-cyan-400/30 text-cyan-400 font-medium rounded-xl transition-all duration-300 hover:from-cyan-500/30 hover:to-purple-500/30 hover:border-cyan-400/50 hover:scale-105"
          >
            <span className="flex items-center justify-center gap-2">
              Learn More
              <ExternalLink className="w-4 h-4 group-hover/btn:translate-x-1 transition-transform duration-300" />
            </span>
          </button>
          
          <button
            onClick={handleLearnMore}
            className="px-4 py-3 bg-gradient-to-r from-cyan-500 to-purple-500 text-white font-medium rounded-xl transition-all duration-300 hover:from-cyan-600 hover:to-purple-600 hover:scale-105"
          >
            <ArrowRight className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Hover Effect Overlay */}
      <motion.div
        className="absolute inset-0 bg-gradient-to-br from-cyan-500/5 to-purple-500/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
        initial={false}
        animate={{ opacity: isHovered ? 1 : 0 }}
      />

      {/* Expandable Details */}
      <AnimatePresence>
        {showDetails && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className="mt-6 pt-6 border-t border-white/10"
          >
            <div className="space-y-4">
              <div>
                <h5 className="text-sm font-semibold text-white/90 mb-2">Use Cases</h5>
                <div className="flex flex-wrap gap-2">
                  {useCases.slice(0, 4).map((useCase, index) => (
                    <span key={index} className="text-xs bg-white/10 text-white/70 px-2 py-1 rounded-full">
                      {useCase}
                    </span>
                  ))}
                </div>
              </div>
              
              <div>
                <h5 className="text-sm font-semibold text-white/90 mb-2">Competitive Advantage</h5>
                <p className="text-sm text-white/70">{competitiveAdvantage}</p>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Expand/Collapse Button */}
      <button
        onClick={(e) => {
          e.stopPropagation();
          setShowDetails(!showDetails);
        }}
        className="absolute bottom-4 right-4 text-xs text-white/50 hover:text-white transition-colors duration-200"
      >
        {showDetails ? 'Show Less' : 'Show More'}
      </button>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-bbf1
    </motion.div>
  );
};

export default EnhancedServiceCard;