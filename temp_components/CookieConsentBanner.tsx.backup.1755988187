import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
<<<<<<< HEAD
import { X, Settings, Shield, Cookie, Info } from 'lucide-react';
=======
import { 
  Shield, X, Settings, Check, AlertTriangle, 
  Info, Cookie, Lock, Eye, EyeOff
} from 'lucide-react';

// Type declarations for global window properties
declare global {
  interface Window {
    gtag?: (...args: any[]) => void;
    fbq?: (...args: any[]) => void;
  }
}
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-52f1

interface CookiePreferences {
  necessary: boolean;
  analytics: boolean;
  marketing: boolean;
  preferences: boolean;
}

interface CookieConsentBannerProps {
  enabled?: boolean;
  showUI?: boolean;
}

const CookieConsentBanner: React.FC<CookieConsentBannerProps> = ({
  enabled = true,
  showUI = false
}) => {
  const [isVisible, setIsVisible] = useState(false);
<<<<<<< HEAD
  const [showSettings, setShowSettings] = useState(false);
  const [preferences, setPreferences] = useState<CookiePreferences>({
    necessary: true,
=======
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [preferences, setPreferences] = useState<CookiePreferences>({
    necessary: true, // Always required
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-52f1
    analytics: false,
    marketing: false,
    preferences: false
  });
  const [hasConsented, setHasConsented] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Performance optimization: Check consent status
  useEffect(() => {
<<<<<<< HEAD
    // Check if user has already made a choice
    const consent = localStorage.getItem('cookie-consent');
    if (!consent) {
      // Show banner after a short delay
      const timer = setTimeout(() => setIsVisible(true), 2000);
      return () => clearTimeout(timer);
    } else {
      // Load saved preferences
      try {
        const savedPreferences = JSON.parse(consent);
        setPreferences(savedPreferences);
      } catch (error) {
        console.warn('Failed to load cookie preferences:', error);
      }
=======
    if (!enabled) return;

    const consentStatus = localStorage.getItem('cookie-consent');
    if (consentStatus) {
      try {
        const parsed = JSON.parse(consentStatus);
        setHasConsented(true);
        setPreferences(parsed.preferences);
        applyCookiePreferences(parsed.preferences);
      } catch (error) {
        console.warn('Failed to parse cookie consent:', error);
        showBanner();
      }
    } else {
      showBanner();
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-52f1
    }
  }, [enabled]);

  // Performance optimization: Show banner with delay
  const showBanner = useCallback(() => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    timeoutRef.current = setTimeout(() => {
      setIsVisible(true);
    }, 2000); // Show after 2 seconds
  }, []);

<<<<<<< HEAD
  const handleAcceptAll = () => {
=======
  // Performance optimization: Apply cookie preferences
  const applyCookiePreferences = useCallback((prefs: CookiePreferences) => {
    if (!enabled) return;

    // Apply analytics tracking
    if (prefs.analytics) {
      // Enable Google Analytics, etc.
      window.gtag = window.gtag || function() { (window.gtag as any).q = (window.gtag as any).q || []; (window.gtag as any).q.push(arguments); };
    } else {
      // Disable analytics
      window.gtag = undefined;
    }

    // Apply marketing cookies
    if (prefs.marketing) {
      // Enable marketing tracking
      window.fbq = window.fbq || function() { (window.fbq as any).q = (window.fbq as any).q || []; (window.fbq as any).q.push(arguments); };
    } else {
      // Disable marketing
      window.fbq = undefined;
    }

    // Apply preference cookies
    if (prefs.preferences) {
      // Enable preference storage
      localStorage.setItem('preferences-enabled', 'true');
    } else {
      // Disable preference storage
      localStorage.removeItem('preferences-enabled');
    }
  }, [enabled]);

  // Performance optimization: Accept all cookies
  const acceptAll = useCallback(() => {
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-52f1
    const allAccepted: CookiePreferences = {
      necessary: true,
      analytics: true,
      marketing: true,
      preferences: true
    };
<<<<<<< HEAD
    
    setPreferences(allAccepted);
    savePreferences(allAccepted);
    setIsVisible(false);
    
    // Announce to screen readers
    announceToScreenReader('All cookies accepted');
  };

  const handleAcceptNecessary = () => {
=======

    setPreferences(allAccepted);
    setHasConsented(true);
    setIsVisible(false);
    setIsSettingsOpen(false);

    // Save consent
    const consentData = {
      timestamp: new Date().toISOString(),
      preferences: allAccepted,
      version: '1.0'
    };

    localStorage.setItem('cookie-consent', JSON.stringify(consentData));
    applyCookiePreferences(allAccepted);
  }, [applyCookiePreferences]);

  // Performance optimization: Accept necessary only
  const acceptNecessary = useCallback(() => {
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-52f1
    const necessaryOnly: CookiePreferences = {
      necessary: true,
      analytics: false,
      marketing: false,
      preferences: false
    };
<<<<<<< HEAD
    
    setPreferences(necessaryOnly);
    savePreferences(necessaryOnly);
    setIsVisible(false);
    
    // Announce to screen readers
    announceToScreenReader('Only necessary cookies accepted');
  };

  const handleSavePreferences = () => {
    savePreferences(preferences);
    setShowSettings(false);
    setIsVisible(false);
    
    // Announce to screen readers
    announceToScreenReader('Cookie preferences saved');
  };

  const savePreferences = (prefs: CookiePreferences) => {
    localStorage.setItem('cookie-consent', JSON.stringify(prefs));
    
    // Apply preferences
    if (prefs.analytics) {
      enableAnalytics();
    } else {
      disableAnalytics();
    }
    
    if (prefs.marketing) {
      enableMarketing();
    } else {
      disableMarketing();
    }
    
    if (prefs.functional) {
      enableFunctional();
    } else {
      disableFunctional();
    }
  };

  const enableAnalytics = () => {
    // Enable Google Analytics
    if (typeof window !== 'undefined' && 'gtag' in window) {
      (window as any).gtag('consent', 'update', {
        analytics_storage: 'granted'
      });
    }
  };

  const disableAnalytics = () => {
    // Disable Google Analytics
    if (typeof window !== 'undefined' && 'gtag' in window) {
      (window as any).gtag('consent', 'update', {
        analytics_storage: 'denied'
      });
    }
  };

  const enableMarketing = () => {
    // Enable marketing cookies
    if (typeof window !== 'undefined' && 'gtag' in window) {
      (window as any).gtag('consent', 'update', {
        ad_storage: 'granted'
      });
    }
  };

  const disableMarketing = () => {
    // Disable marketing cookies
    if (typeof window !== 'undefined' && 'gtag' in window) {
      (window as any).gtag('consent', 'update', {
        ad_storage: 'denied'
      });
    }
  };

  const enableFunctional = () => {
    // Enable functional cookies
    console.log('Functional cookies enabled');
  };

  const disableFunctional = () => {
    // Disable functional cookies
    console.log('Functional cookies disabled');
  };

  const announceToScreenReader = (message: string) => {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    document.body.appendChild(announcement);
    
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  const cookieTypes = [
    {
      key: 'necessary' as keyof CookiePreferences,
      title: 'Necessary Cookies',
      description: 'Essential for the website to function properly. These cannot be disabled.',
      icon: Shield,
      required: true
    },
    {
      key: 'analytics' as keyof CookiePreferences,
      title: 'Analytics Cookies',
      description: 'Help us understand how visitors interact with our website by collecting and reporting information anonymously.',
      icon: Info,
      required: false
    },
    {
      key: 'marketing' as keyof CookiePreferences,
      title: 'Marketing Cookies',
      description: 'Used to track visitors across websites to display relevant and engaging advertisements.',
      icon: Cookie,
      required: false
    },
    {
      key: 'functional' as keyof CookiePreferences,
      title: 'Functional Cookies',
      description: 'Enable enhanced functionality and personalization, such as live chat support and language preferences.',
      icon: Settings,
      required: false
    }
  ];

  if (!isVisible) return null;

  return (
    <>
      {/* Main Banner */}
      <AnimatePresence>
        {isVisible && !showSettings && (
          <motion.div
            initial={{ y: 100, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: 100, opacity: 0 }}
            className="fixed bottom-0 left-0 right-0 z-50 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 shadow-2xl"
            role="banner"
            aria-labelledby="cookie-banner-title"
          >
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
              <div className="flex flex-col lg:flex-row items-start lg:items-center gap-4">
                {/* Content */}
                <div className="flex-1">
                  <div className="flex items-start gap-3">
                    <div className="flex-shrink-0 mt-1">
                      <Cookie className="w-6 h-6 text-cyan-600 dark:text-cyan-400" />
                    </div>
                    <div>
                      <h2 id="cookie-banner-title" className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                        We use cookies to enhance your experience
                      </h2>
                      <p className="text-sm text-gray-600 dark:text-gray-400 max-w-2xl">
                        We use cookies and similar technologies to help personalize content, tailor and measure ads, 
                        and provide a better experience. By clicking "Accept All", you consent to our use of cookies. 
                        You can customize your preferences in our cookie settings.
                      </p>
                      <div className="mt-3 flex flex-wrap gap-2 text-xs text-gray-500 dark:text-gray-400">
                        <a 
                          href="/privacy" 
                          className="text-cyan-600 dark:text-cyan-400 hover:underline"
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          Privacy Policy
                        </a>
                        <span>•</span>
                        <a 
                          href="/cookies" 
                          className="text-cyan-600 dark:text-cyan-400 hover:underline"
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          Cookie Policy
                        </a>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex flex-col sm:flex-row gap-3 w-full lg:w-auto">
                  <button
                    onClick={() => setShowSettings(true)}
                    className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
                    aria-label="Customize cookie preferences"
                  >
                    <span className="flex items-center gap-2">
                      <Settings className="w-4 h-4" />
                      Customize
                    </span>
                  </button>
                  
                  <button
                    onClick={handleAcceptNecessary}
                    className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
                    aria-label="Accept only necessary cookies"
                  >
                    Necessary Only
                  </button>
                  
                  <button
                    onClick={handleAcceptAll}
                    className="px-6 py-2 text-sm font-medium text-white bg-gradient-to-r from-cyan-600 to-blue-600 rounded-lg hover:from-cyan-700 hover:to-blue-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 shadow-lg hover:shadow-xl"
                    aria-label="Accept all cookies"
                  >
                    Accept All
                  </button>
                </div>

                {/* Close Button */}
                <button
                  onClick={() => setIsVisible(false)}
                  className="absolute top-4 right-4 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 rounded-full"
                  aria-label="Close cookie banner"
=======

    setPreferences(necessaryOnly);
    setHasConsented(true);
    setIsVisible(false);
    setIsSettingsOpen(false);

    // Save consent
    const consentData = {
      timestamp: new Date().toISOString(),
      preferences: necessaryOnly,
      version: '1.0'
    };

    localStorage.setItem('cookie-consent', JSON.stringify(consentData));
    applyCookiePreferences(necessaryOnly);
  }, [applyCookiePreferences]);

  // Performance optimization: Save custom preferences
  const saveCustomPreferences = useCallback(() => {
    setHasConsented(true);
    setIsVisible(false);
    setIsSettingsOpen(false);

    // Save consent
    const consentData = {
      timestamp: new Date().toISOString(),
      preferences,
      version: '1.0'
    };

    localStorage.setItem('cookie-consent', JSON.stringify(consentData));
    applyCookiePreferences(preferences);
  }, [preferences, applyCookiePreferences]);

  // Performance optimization: Toggle preference
  const togglePreference = useCallback((key: keyof CookiePreferences) => {
    if (key === 'necessary') return; // Cannot disable necessary cookies
    
    setPreferences(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  }, []);

  // Performance optimization: Update preferences
  const updatePreferences = useCallback((key: keyof CookiePreferences, value: boolean) => {
    if (key === 'necessary') return; // Cannot disable necessary cookies
    
    setPreferences(prev => ({
      ...prev,
      [key]: value
    }));
  }, []);

  if (!enabled || !showUI || hasConsented || !isVisible) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 100 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 100 }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        className="fixed bottom-0 left-0 right-0 z-50 bg-black/95 backdrop-blur-xl border-t border-cyan-500/30 shadow-2xl shadow-cyan-500/20"
      >
        <div className="max-w-7xl mx-auto p-4 lg:p-6">
          {!isSettingsOpen ? (
            /* Main Banner */
            <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-4">
              <div className="flex items-start space-x-3 flex-1">
                <div className="flex-shrink-0 w-10 h-10 rounded-lg bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/30 flex items-center justify-center">
                  <Shield className="w-5 h-5 text-cyan-400" />
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="text-lg font-semibold text-white mb-2">
                    We value your privacy
                  </h3>
                  <p className="text-sm text-gray-300 leading-relaxed">
                    We use cookies to enhance your browsing experience, serve personalized content, and analyze our traffic. 
                    By clicking "Accept All", you consent to our use of cookies. 
                    <button
                      onClick={() => setIsSettingsOpen(true)}
                      className="text-cyan-400 hover:text-cyan-300 underline ml-1"
                    >
                      Learn more
                    </button>
                  </p>
                </div>
              </div>

              <div className="flex flex-col sm:flex-row gap-3 w-full lg:w-auto">
                <button
                  onClick={acceptNecessary}
                  className="px-6 py-3 border border-gray-600 text-gray-300 hover:text-white hover:border-gray-500 rounded-xl font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-300 focus:ring-offset-2 focus:ring-offset-black"
                >
                  Necessary Only
                </button>
                <button
                  onClick={() => setIsSettingsOpen(true)}
                  className="px-6 py-3 border border-cyan-500/50 text-cyan-400 hover:bg-cyan-500/10 hover:border-cyan-400 rounded-xl font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-300 focus:ring-offset-2 focus:ring-offset-black"
                >
                  <Settings className="w-4 h-4 inline mr-2" />
                  Customize
                </button>
                <button
                  onClick={acceptAll}
                  className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-medium rounded-xl hover:from-cyan-600 hover:to-blue-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-300 focus:ring-offset-2 focus:ring-offset-black"
                >
                  Accept All
                </button>
              </div>
            </div>
          ) : (
            /* Settings Panel */
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h3 className="text-xl font-semibold text-white flex items-center">
                  <Settings className="w-5 h-5 mr-2 text-cyan-400" />
                  Cookie Preferences
                </h3>
                <button
                  onClick={() => setIsSettingsOpen(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                  aria-label="Close settings"
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-52f1
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
<<<<<<< HEAD
=======

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Necessary Cookies */}
                <div className="p-4 rounded-xl bg-gray-800/50 border border-gray-700/50">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      <Lock className="w-4 h-4 text-green-400" />
                      <span className="font-medium text-white">Necessary</span>
                    </div>
                    <span className="px-2 py-1 bg-green-500/20 text-green-300 text-xs rounded-full">
                      Always Active
                    </span>
                  </div>
                  <p className="text-sm text-gray-400 mb-3">
                    Essential cookies required for the website to function properly. Cannot be disabled.
                  </p>
                  <div className="text-xs text-gray-500">
                    Examples: Authentication, security, basic functionality
                  </div>
                </div>

                {/* Analytics Cookies */}
                <div className="p-4 rounded-xl bg-gray-800/50 border border-gray-700/50">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      <Eye className="w-4 h-4 text-blue-400" />
                      <span className="font-medium text-white">Analytics</span>
                    </div>
                    <button
                      onClick={() => togglePreference('analytics')}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        preferences.analytics ? 'bg-blue-500' : 'bg-gray-600'
                      }`}
                      role="switch"
                      aria-checked={preferences.analytics}
                    >
                      <span
                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                          preferences.analytics ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>
                  <p className="text-sm text-gray-400 mb-3">
                    Help us understand how visitors interact with our website.
                  </p>
                  <div className="text-xs text-gray-500">
                    Examples: Page views, user behavior, performance metrics
                  </div>
                </div>

                {/* Marketing Cookies */}
                <div className="p-4 rounded-xl bg-gray-800/50 border border-gray-700/50">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      <Cookie className="w-4 h-4 text-purple-400" />
                      <span className="font-medium text-white">Marketing</span>
                    </div>
                    <button
                      onClick={() => togglePreference('marketing')}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        preferences.marketing ? 'bg-purple-500' : 'bg-gray-600'
                      }`}
                      role="switch"
                      aria-checked={preferences.marketing}
                    >
                      <span
                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                          preferences.marketing ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>
                  <p className="text-sm text-gray-400 mb-3">
                    Used to deliver personalized advertisements and content.
                  </p>
                  <div className="text-xs text-gray-500">
                    Examples: Ad targeting, social media integration
                  </div>
                </div>

                {/* Preferences Cookies */}
                <div className="p-4 rounded-xl bg-gray-800/50 border border-gray-700/50">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      <Settings className="w-4 h-4 text-cyan-400" />
                      <span className="font-medium text-white">Preferences</span>
                    </div>
                    <button
                      onClick={() => togglePreference('preferences')}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        preferences.preferences ? 'bg-cyan-500' : 'bg-gray-600'
                      }`}
                      role="switch"
                      aria-checked={preferences.preferences}
                    >
                      <span
                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                          preferences.preferences ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>
                  <p className="text-sm text-gray-400 mb-3">
                    Store your preferences and settings for a better experience.
                  </p>
                  <div className="text-xs text-gray-500">
                    Examples: Language, theme, accessibility settings
                  </div>
                </div>
              </div>

              <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t border-gray-700/50">
                <button
                  onClick={() => setIsSettingsOpen(false)}
                  className="px-6 py-3 border border-gray-600 text-gray-300 hover:text-white hover:border-gray-500 rounded-xl font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-300 focus:ring-offset-2 focus:ring-offset-black"
                >
                  Back
                </button>
                <button
                  onClick={saveCustomPreferences}
                  className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-medium rounded-xl hover:from-cyan-600 hover:to-blue-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-300 focus:ring-offset-2 focus:ring-offset-black"
                >
                  <Check className="w-4 h-4 inline mr-2" />
                  Save Preferences
                </button>
              </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-52f1
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Settings Modal */}
      <AnimatePresence>
        {showSettings && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4"
            role="dialog"
            aria-modal="true"
            aria-labelledby="cookie-settings-title"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white dark:bg-gray-900 rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
            >
              {/* Header */}
              <div className="sticky top-0 bg-gradient-to-r from-cyan-600 to-blue-600 text-white p-6 rounded-t-2xl">
                <div className="flex items-center justify-between">
                  <h2 id="cookie-settings-title" className="text-xl font-bold flex items-center gap-3">
                    <Settings className="w-6 h-6" />
                    Cookie Preferences
                  </h2>
                  <button
                    onClick={() => setShowSettings(false)}
                    className="p-2 hover:bg-white/20 rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-white/50"
                    aria-label="Close cookie settings"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>
                <p className="mt-2 text-cyan-100">
                  Customize your cookie preferences to control how we use your data.
                </p>
              </div>

              {/* Content */}
              <div className="p-6 space-y-6">
                {cookieTypes.map((cookieType) => (
                  <div key={cookieType.key} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                    <div className="flex items-start gap-4">
                      <div className="flex-shrink-0 mt-1">
                        <cookieType.icon className="w-5 h-5 text-cyan-600 dark:text-cyan-400" />
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                            {cookieType.title}
                          </h3>
                          <div className="flex items-center gap-2">
                            {cookieType.required && (
                              <span className="text-xs bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 px-2 py-1 rounded-full">
                                Required
                              </span>
                            )}
                            <label className="relative inline-flex items-center cursor-pointer">
                              <input
                                type="checkbox"
                                checked={preferences[cookieType.key]}
                                onChange={(e) => {
                                  if (!cookieType.required) {
                                    setPreferences(prev => ({
                                      ...prev,
                                      [cookieType.key]: e.target.checked
                                    }));
                                  }
                                }}
                                disabled={cookieType.required}
                                className="sr-only"
                                aria-label={`Enable ${cookieType.title}`}
                              />
                              <div className={`
                                w-11 h-6 rounded-full transition-colors duration-200 ease-in-out
                                ${cookieType.required || preferences[cookieType.key] 
                                  ? 'bg-cyan-600' 
                                  : 'bg-gray-300 dark:bg-gray-600'
                                }
                                ${cookieType.required ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
                              `}>
                                <div className={`
                                  w-5 h-5 bg-white rounded-full transition-transform duration-200 ease-in-out transform
                                  ${preferences[cookieType.key] ? 'translate-x-5' : 'translate-x-0'}
                                `} />
                              </div>
                            </label>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {cookieType.description}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}

                {/* Information */}
                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                  <div className="flex items-start gap-3">
                    <Info className="w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
                    <div className="text-sm text-blue-800 dark:text-blue-200">
                      <p className="font-medium mb-1">Your privacy matters to us</p>
                      <p>
                        You can change your cookie preferences at any time. Your choices will be remembered 
                        and you can update them through our privacy settings or by clearing your browser cookies.
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Footer */}
              <div className="sticky bottom-0 bg-gray-50 dark:bg-gray-800 p-6 rounded-b-2xl border-t border-gray-200 dark:border-gray-700">
                <div className="flex flex-col sm:flex-row gap-3 justify-end">
                  <button
                    onClick={() => setShowSettings(false)}
                    className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleSavePreferences}
                    className="px-6 py-2 text-sm font-medium text-white bg-gradient-to-r from-cyan-600 to-blue-600 rounded-lg hover:from-cyan-700 hover:to-blue-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 shadow-lg hover:shadow-xl"
                  >
                    Save Preferences
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default CookieConsentBanner;