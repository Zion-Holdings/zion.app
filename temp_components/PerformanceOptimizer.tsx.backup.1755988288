<<<<<<< HEAD
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Zap, TrendingUp, AlertTriangle, CheckCircle, X, Settings, RefreshCw } from 'lucide-react';
=======
import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Gauge, TrendingUp, Zap, Clock, Wifi, HardDrive, 
  Cpu, X, Settings, RefreshCw, AlertTriangle
} from 'lucide-react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dd4c

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
<<<<<<< HEAD
  score: string;
  grade: 'A' | 'B' | 'C' | 'D' | 'F';
=======
  domLoad: number;
  windowLoad: number;
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dd4c
}

interface PerformanceOptimizerProps {
  children: React.ReactNode;
}

<<<<<<< HEAD
const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({ children }) => {
=======
const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({ 
  showMetrics = false, 
  autoOptimize = false 
}) => {
  const [isVisible, setIsVisible] = useState(false);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dd4c
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [showMetrics, setShowMetrics] = useState(false);
  const [isOptimizing, setIsOptimizing] = useState(false);
<<<<<<< HEAD
  const [optimizationLevel, setOptimizationLevel] = useState<'low' | 'medium' | 'high'>('medium');
  const [showDebugPanel, setShowDebugPanel] = useState(false);
  const [showMetricsState, setShowMetricsState] = useState(showMetrics);
  const [performanceIssues, setPerformanceIssues] = useState<string[]>([]);
  const [optimizations, setOptimizations] = useState<string[]>([]);
  const [serviceWorkerStatus, setServiceWorkerStatus] = useState<'installing' | 'installed' | 'error' | 'not-supported'>('not-supported');

  // Register service worker for PWA capabilities
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker
        .register('/sw.js')
        .then((registration) => {
          setServiceWorkerStatus('installing');
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed') {
                  setServiceWorkerStatus('installed');
                }
              });
            }
          });
        })
        .catch(() => setServiceWorkerStatus('error'));
    }
  }, []);

  // Performance monitoring
  const measurePerformance = useCallback(async () => {
    if ('PerformanceObserver' in window) {
      try {
        // Measure First Contentful Paint
        const fcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');
          if (fcpEntry) {
            setMetrics(prev => prev ? { ...prev, fcp: fcpEntry.startTime } : null);
          }
        });
        fcpObserver.observe({ entryTypes: ['paint'] });

        // Measure Largest Contentful Paint
        const lcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
          }
        });
        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

        // Measure First Input Delay
        const fidObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fidEntry = entries.find(entry => entry.entryType === 'first-input');
          if (fidEntry) {
            setMetrics(prev => prev ? { ...prev, fid: fidEntry.processingStart - fidEntry.startTime } : null);
          }
        });
        fidObserver.observe({ entryTypes: ['first-input'] });

        // Measure Cumulative Layout Shift
        const clsObserver = new PerformanceObserver((list) => {
          let clsValue = 0;
          for (const entry of list.getEntries()) {
            if (!entry.hadRecentInput) {
              clsValue += (entry as any).value;
            }
          }
          setMetrics(prev => prev ? { ...prev, cls: clsValue } : null);
        });
        clsObserver.observe({ entryTypes: ['layout-shift'] });

        // Measure Time to First Byte
        const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        if (navigationEntry) {
          const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
          setMetrics(prev => prev ? { ...prev, ttfb } : null);
        }

        // Calculate performance score
        setTimeout(() => {
          calculatePerformanceScore();
        }, 2000);

      } catch (error) {
        console.error('Performance measurement error:', error);
      }
    }
  }, []);

  const calculatePerformanceScore = useCallback(() => {
    if (!metrics) return;

    let score = 0;
    let grade: 'A' | 'B' | 'C' | 'D' | 'F' = 'F';

    // FCP scoring (0-100)
    if (metrics.fcp < 1800) score += 25;
    else if (metrics.fcp < 3000) score += 15;
    else if (metrics.fcp < 4000) score += 5;

    // LCP scoring (0-100)
    if (metrics.lcp < 2500) score += 25;
    else if (metrics.lcp < 4000) score += 15;
    else if (metrics.lcp < 6000) score += 5;

    // FID scoring (0-100)
    if (metrics.fid < 100) score += 25;
    else if (metrics.fid < 300) score += 15;
    else if (metrics.fid < 500) score += 5;

    // CLS scoring (0-100)
    if (metrics.cls < 0.1) score += 25;
    else if (metrics.cls < 0.25) score += 15;
    else if (metrics.cls < 0.4) score += 5;

    // Grade assignment
    if (score >= 90) grade = 'A';
    else if (score >= 80) grade = 'B';
    else if (score >= 70) grade = 'C';
    else if (score >= 60) grade = 'D';

    setMetrics(prev => prev ? { ...prev, score: score.toString(), grade } : null);
  }, [metrics]);

  // Performance optimizations
  const runOptimizations = useCallback(async () => {
    setIsOptimizing(true);
    const newOptimizations: string[] = [];

    try {
      // Preload critical resources
      const criticalResources = [
        '/fonts/inter-var.woff2',
        '/images/hero-bg.jpg',
        '/api/services'
      ];

      criticalResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource;
        link.as = resource.includes('.woff2') ? 'font' : resource.includes('.jpg') ? 'image' : 'fetch';
        document.head.appendChild(link);
        newOptimizations.push(`Preloaded critical resource: ${resource}`);
      });

      // Optimize images
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.loading) {
          img.loading = 'lazy';
          img.decoding = 'async';
          newOptimizations.push('Added lazy loading to images');
        }
      });

      // Add resource hints
      const resourceHints = [
        { rel: 'dns-prefetch', href: '//fonts.googleapis.com' },
        { rel: 'preconnect', href: '//fonts.googleapis.com' },
        { rel: 'preconnect', href: '//api.ziontechgroup.com' }
      ];

      resourceHints.forEach(hint => {
        const link = document.createElement('link');
        link.rel = hint.rel;
        link.href = hint.href;
        document.head.appendChild(link);
        newOptimizations.push(`Added resource hint: ${hint.rel} ${hint.href}`);
      });

      // Optimize CSS delivery
      const criticalCSS = document.querySelector('style[data-critical]');
      if (criticalCSS) {
        newOptimizations.push('Critical CSS inlined');
      }

      setOptimizations(newOptimizations);
    } catch (error) {
      console.error('Optimization error:', error);
=======
  const [optimizationHistory, setOptimizationHistory] = useState<string[]>([]);
  const [showPanel, setShowPanel] = useState(false);

  // Performance monitoring
  const measurePerformance = useCallback(() => {
    if ('PerformanceObserver' in window) {
      // First Contentful Paint
      const fcpObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const fcp = entries[entries.length - 1];
        if (fcp) {
          setMetrics(prev => ({ ...prev, fcp: fcp.startTime }));
        }
      });
      fcpObserver.observe({ entryTypes: ['paint'] });

      // Largest Contentful Paint
      const lcpObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lcp = entries[entries.length - 1];
        if (lcp) {
          setMetrics(prev => ({ ...prev, lcp: lcp.startTime }));
        }
      });
      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

      // First Input Delay
      const fidObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const fid = entries[entries.length - 1] as PerformanceEventTiming;
        if (fid && 'processingStart' in fid) {
          setMetrics(prev => ({ ...prev, fid: fid.processingStart - fid.startTime }));
        }
      });
      fidObserver.observe({ entryTypes: ['first-input'] });

      // Cumulative Layout Shift
      const clsObserver = new PerformanceObserver((list) => {
        let clsValue = 0;
        for (const entry of list.getEntries()) {
          // Type guard for LayoutShiftEntry
          if ('hadRecentInput' in entry && !entry.hadRecentInput) {
            clsValue += (entry as any).value;
          }
        }
        setMetrics(prev => ({ ...prev, cls: clsValue }));
      });
      clsObserver.observe({ entryTypes: ['layout-shift'] });
    }

    // Time to First Byte
    if (performance.timing) {
      const ttfb = performance.timing.responseStart - performance.timing.requestStart;
      setMetrics(prev => ({ ...prev, ttfb }));
    }

    // DOM and Window load times
    const domLoad = performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart;
    const windowLoad = performance.timing.loadEventEnd - performance.timing.navigationStart;
    setMetrics(prev => ({ ...prev, domLoad, windowLoad }));
  }, []);

  // Auto-optimization
  const performOptimizations = useCallback(async () => {
    setIsOptimizing(true);
    const optimizations: string[] = [];

    try {
      // Image optimization
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.loading) {
          img.loading = 'lazy';
          optimizations.push('Added lazy loading to images');
        }
      });

      // Preload critical resources
      const criticalResources = [
        '/fonts/inter-var.woff2',
        '/static/css/main.css'
      ];

      criticalResources.forEach(resource => {
        if (!document.querySelector(`link[href="${resource}"]`)) {
          const link = document.createElement('link');
          link.rel = 'preload';
          link.href = resource;
          link.as = resource.endsWith('.woff2') ? 'font' : 'style';
          link.crossOrigin = 'anonymous';
          document.head.appendChild(link);
          optimizations.push(`Preloaded critical resource: ${resource}`);
        }
      });

      // Service worker optimization
      if ('serviceWorker' in navigator) {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration) {
          await registration.update();
          optimizations.push('Updated service worker');
        }
      }

      // Memory optimization
      if ('memory' in performance) {
        const memory = (performance as any).memory;
        if (memory.usedJSHeapSize > 50 * 1024 * 1024) { // 50MB
          // Suggest garbage collection
          if ('gc' in window) {
            (window as any).gc();
            optimizations.push('Triggered garbage collection');
          }
        }
      }

      setOptimizationHistory(prev => [...optimizations, ...prev].slice(0, 10));
    } catch (error) {
      console.error('Optimization failed:', error);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dd4c
    } finally {
      setIsOptimizing(false);
    }
  }, []);

  useEffect(() => {
<<<<<<< HEAD
    measurePerformance();
    
    // Re-measure performance on route changes
    const handleRouteChange = () => {
      setTimeout(measurePerformance, 1000);
    };

    window.addEventListener('popstate', handleRouteChange);
    return () => window.removeEventListener('popstate', handleRouteChange);
  }, [measurePerformance]);

  const getGradeColor = (grade: string) => {
    switch (grade) {
      case 'A': return 'text-green-400';
      case 'B': return 'text-blue-400';
      case 'C': return 'text-yellow-400';
      case 'D': return 'text-orange-400';
      case 'F': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  return (
    <>
      {children}
      
      {/* Performance Metrics Panel */}
      <AnimatePresence>
        {showMetrics && (
          <motion.div
            initial={{ opacity: 0, x: 300 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 300 }}
            className="fixed top-20 right-4 w-80 bg-black/90 backdrop-blur-lg border border-cyan-400/30 rounded-lg p-4 z-50 shadow-2xl"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <Zap className="w-5 h-5 text-cyan-400" />
                Performance Monitor
              </h3>
              <button
                onClick={() => setShowMetrics(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            {metrics && (
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-300">Performance Score:</span>
                  <span className={`text-lg font-bold ${getGradeColor(metrics.grade)}`}>
                    {metrics.score}/100 ({metrics.grade})
                  </span>
                </div>
                
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">FCP</div>
                    <div className="text-white">{metrics.fcp?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">LCP</div>
                    <div className="text-white">{metrics.lcp?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">FID</div>
                    <div className="text-white">{metrics.fid?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">CLS</div>
                    <div className="text-white">{metrics.cls?.toFixed(3)}</div>
                  </div>
                </div>

                <div className="pt-2 border-t border-gray-700">
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-gray-400">Service Worker:</span>
                    <span className={`${
                      serviceWorkerStatus === 'installed' ? 'text-green-400' :
                      serviceWorkerStatus === 'installing' ? 'text-yellow-400' :
                      serviceWorkerStatus === 'error' ? 'text-red-400' :
                      'text-gray-400'
                    }`}>
                      {serviceWorkerStatus}
                    </span>
=======
    if (showMetrics) {
      setIsVisible(true);
      measurePerformance();
    }

    if (autoOptimize) {
      const interval = setInterval(performOptimizations, 30000); // Every 30 seconds
      return () => clearInterval(interval);
    }
  }, [showMetrics, autoOptimize, measurePerformance, performOptimizations]);

  const getPerformanceScore = (): number => {
    if (!metrics) return 0;

    let score = 100;

    // FCP scoring (0-100)
    if (metrics.fcp > 2000) score -= 20;
    else if (metrics.fcp > 1500) score -= 10;

    // LCP scoring (0-100)
    if (metrics.lcp > 4000) score -= 20;
    else if (metrics.lcp > 2500) score -= 10;

    // FID scoring (0-100)
    if (metrics.fid > 300) score -= 20;
    else if (metrics.fid > 100) score -= 10;

    // CLS scoring (0-100)
    if (metrics.cls > 0.25) score -= 20;
    else if (metrics.cls > 0.1) score -= 10;

    return Math.max(0, score);
  };

  const getPerformanceGrade = (score: number): string => {
    if (score >= 90) return 'A';
    if (score >= 80) return 'B';
    if (score >= 70) return 'C';
    if (score >= 60) return 'D';
    return 'F';
  };

  const getPerformanceColor = (score: number): string => {
    if (score >= 90) return 'text-green-400';
    if (score >= 80) return 'text-yellow-400';
    if (score >= 70) return 'text-orange-400';
    return 'text-red-400';
  };

  if (!isVisible) return null;

  return (
    <>
      {/* Performance Monitor Button */}
      <button
        onClick={() => setShowPanel(!showPanel)}
        className="fixed bottom-4 right-4 z-50 p-3 bg-gradient-to-r from-green-500 to-blue-600 text-white rounded-full shadow-2xl hover:from-green-600 hover:to-blue-700 transition-all duration-300 transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-green-300/50"
        aria-label="Performance Monitor"
        aria-expanded={showPanel}
      >
        <Gauge className="w-6 h-6" />
      </button>

      {/* Performance Panel */}
      <AnimatePresence>
        {showPanel && (
          <motion.div
            initial={{ opacity: 0, y: 100 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 100 }}
            className="fixed bottom-20 right-4 bg-gray-900/95 backdrop-blur-md border border-cyan-400/20 rounded-xl p-6 w-96 shadow-2xl z-50"
            role="dialog"
            aria-labelledby="performance-panel-title"
          >
            <div className="flex items-center justify-between mb-6">
              <h2 id="performance-panel-title" className="text-xl font-semibold text-white flex items-center">
                <Gauge className="w-6 h-6 mr-2 text-cyan-400" />
                Performance Monitor
              </h2>
              <button
                onClick={() => setShowPanel(false)}
                className="text-gray-400 hover:text-white transition-colors"
                aria-label="Close performance panel"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Performance Score */}
            {metrics && (
              <div className="mb-6">
                <div className="text-center mb-4">
                  <div className={`text-4xl font-bold ${getPerformanceColor(getPerformanceScore())}`}>
                    {getPerformanceScore()}
                  </div>
                  <div className="text-2xl font-bold text-white">
                    Grade: {getPerformanceGrade(getPerformanceScore())}
                  </div>
                </div>

                {/* Metrics Grid */}
                <div className="grid grid-cols-2 gap-3 mb-4">
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <div className="text-xs text-gray-400 mb-1">FCP</div>
                    <div className="text-sm text-white font-mono">
                      {metrics.fcp ? `${Math.round(metrics.fcp)}ms` : 'N/A'}
                    </div>
                  </div>
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <div className="text-xs text-gray-400 mb-1">LCP</div>
                    <div className="text-sm text-white font-mono">
                      {metrics.lcp ? `${Math.round(metrics.lcp)}ms` : 'N/A'}
                    </div>
                  </div>
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <div className="text-xs text-gray-400 mb-1">FID</div>
                    <div className="text-sm text-white font-mono">
                      {metrics.fid ? `${Math.round(metrics.fid)}ms` : 'N/A'}
                    </div>
                  </div>
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <div className="text-xs text-gray-400 mb-1">CLS</div>
                    <div className="text-sm text-white font-mono">
                      {metrics.cls ? metrics.cls.toFixed(3) : 'N/A'}
                    </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dd4c
                  </div>
                </div>
              </div>
            )}

<<<<<<< HEAD
            <div className="mt-4 space-y-2">
              <button
                onClick={runOptimizations}
                disabled={isOptimizing}
                className="w-full px-3 py-2 bg-cyan-600 hover:bg-cyan-700 disabled:bg-gray-600 text-white text-sm rounded transition-colors flex items-center justify-center gap-2"
=======
            {/* Optimization Controls */}
            <div className="space-y-3 mb-4">
              <button
                onClick={performOptimizations}
                disabled={isOptimizing}
                className="w-full px-4 py-2 bg-gradient-to-r from-cyan-400 to-blue-500 text-white font-medium rounded-lg hover:from-cyan-500 hover:to-blue-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dd4c
              >
                {isOptimizing ? (
                  <RefreshCw className="w-4 h-4 animate-spin" />
                ) : (
<<<<<<< HEAD
                  <TrendingUp className="w-4 h-4" />
                )}
                {isOptimizing ? 'Optimizing...' : 'Run Optimizations'}
              </button>

              {optimizations.length > 0 && (
                <div className="max-h-32 overflow-y-auto">
                  {optimizations.map((opt, index) => (
                    <div key={index} className="text-xs text-green-400 bg-green-400/10 p-2 rounded">
                      ✓ {opt}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Performance Toggle Button */}
      <motion.button
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={() => setShowMetrics(!showMetrics)}
        className="fixed bottom-6 right-6 w-12 h-12 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full shadow-lg shadow-cyan-500/25 flex items-center justify-center text-white z-40 hover:from-cyan-600 hover:to-blue-700 transition-all duration-300"
        title="Performance Monitor"
      >
        <Zap className="w-6 h-6" />
      </motion.button>
=======
                  <Zap className="w-4 h-4" />
                )}
                <span>{isOptimizing ? 'Optimizing...' : 'Run Optimizations'}</span>
              </button>

              <button
                onClick={measurePerformance}
                className="w-full px-4 py-2 border border-gray-600 text-gray-300 font-medium rounded-lg hover:border-gray-500 hover:text-white transition-all duration-200 flex items-center justify-center space-x-2"
              >
                <RefreshCw className="w-4 h-4" />
                <span>Refresh Metrics</span>
              </button>
            </div>

            {/* Optimization History */}
            {optimizationHistory.length > 0 && (
              <div className="border-t border-gray-700 pt-4">
                <h3 className="text-sm font-semibold text-white mb-3">Recent Optimizations</h3>
                <div className="space-y-2 max-h-32 overflow-y-auto">
                  {optimizationHistory.map((optimization, index) => (
                    <div key={index} className="text-xs text-gray-400 bg-gray-800/50 rounded p-2">
                      {optimization}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dd4c
    </>
  );
};

export default PerformanceOptimizer;