<<<<<<< HEAD
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import { vi } from 'vitest';
import { LoginForm } from '@/components/auth/login';
import * as authHook from '@/hooks/useAuth';
import axios from 'axios';

vi.mock('axios', () => {
  const instance = { post: vi.fn(), interceptors: { request: { use: vi.fn() } } };
  return { default: { create: () => instance } };
}, { virtual: true });

vi.mock('@/services/auth');

// Get the mocked axios instance
const mockedAxios: any = (axios as any).create();

describe('LoginForm', () => {
  it('redirects to dashboard on successful login', async () => {
    mockedAxios.post.mockResolvedValue({ status: 200, data: { token: 'abc' } });
    const navigateMock = vi.fn();
    vi.spyOn(require('react-router-dom'), 'useNavigate').mockReturnValue(navigateMock);
=======
import { render, screen, fireEvent } from @testing-library/react';import { MemoryRouter } from react-router-dom';import { describe, it, vi } from vitest';import { LoginForm } from @/components/auth/login';import * as authService from @/services/authService';import * as authHook from @/hooks/useAuth';
vi.spyOn(authHook, useAuth').mockReturnValue({ isLoading: false, login: vi.fn() } as any);
describe('LoginForm', () => {'  it('shows server error on 401 response', async () => {'    vi.spyOn(authService, loginUser').mockResolvedValue({'      res: { status: 401 } as Response,
      data: { error: Invalid credentials' },    });
>>>>>>> origin/automation-error-fixes

    render(
      <MemoryRouter>
        <>
          <Toaster />
          <LoginForm />
        </>
      </MemoryRouter>
    );

<<<<<<< HEAD
    fireEvent.input(screen.getByLabelText(/email/i), { target: { value: 'a@b.com' } });
    fireEvent.input(screen.getByLabelText(/password/i), { target: { value: 'secret' } });
    fireEvent.click(screen.getByRole('button', { name: /login/i }));

    await waitFor(() => {
      expect(navigateMock).toHaveBeenCalledWith('/dashboard');
    });
  });
=======
    fireEvent.input(screen.getByLabelText(/email address/i), { target: { value: a@b.com' } });    fireEvent.input(screen.getByLabelText(/password/i), { target: { value: secret' } });    fireEvent.submit(screen.getByRole('button', { name: /login/i }));
    // wait for error message to appear
    await screen.findByText('Incorrect email or password');  });
>>>>>>> origin/automation-error-fixes
});
