<<<<<<< HEAD
import { useEffect, useState } from 'react';
import { Header } from '@/components/Header';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import type { TokenTransaction } from '@/types/tokens';
import { ProtectedRoute } from '@/components/ProtectedRoute';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { apiClient } from '@/utils/apiClient';

export default function TokenManager() {

  const { user } = useAuth();
  const { toast } = useToast();
  const [transactions, setTransactions] = useState<TokenTransaction[]>([]);
  const [userId, setUserId] = useState('');
  const [amount, setAmount] = useState(0);
  const [processing, setProcessing] = useState(false);

  const isAdmin = user?.userType === 'admin';

  useEffect(() => {
    if (isAdmin) fetchTransactions();
  }, [isAdmin]);

  const fetchTransactions = async () => {
    if (!supabase) throw new Error('Supabase client not initialized');
    const { data, error } = await supabase
      .from('token_transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(100);
    if (!error) setTransactions(data || []);
  };

  const handleIssue = async (type: 'earn' | 'burn') => {
    if (!userId || amount <= 0) return;
    const res = await apiClient(`/functions/v1/token-manager/${type === 'earn' ? 'earn' : 'burn'}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId, amount }),
    });
    if (res.ok) {
      toast({
        title: 'Success',
        description: 'Transaction processed'
      });
      fetchTransactions();
    } catch (err: unknown) {
      logErrorToProduction('Failed to process transaction:', { data: err });
      toast({
        title: 'Error',
        description: (typeof err === 'object' && err && 'message' in err ? (err as { message?: string }).message : 'Failed') || 'Unknown error occurred',
        variant: 'destructive'
      });
    } finally {
      setProcessing(false);
    }
  };

=======
import React from 'react';
export function TokenManager() {
>>>>>>> origin/automation-error-fixes
  return (
    <div>
      <h1>Component</h1>
      <p>Component placeholder</p>
    </div>
  );
}
