const path = require('path');

let withSentryConfig = (cfg) => cfg;
try {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const sentry = require('@sentry/nextjs');
  withSentryConfig = (cfg) => sentry.withSentryConfig(cfg, { silent: true });
} catch {}

const baseConfig = {
  assetPrefix: process.env.NODE_ENV === 'production' ? 'https://ziontechgroup.com' : '',
  poweredByHeader: false,
  trailingSlash: false,
  reactStrictMode: true,
<<<<<<< HEAD

  // Optimized for fast builds (hanging issue SOLVED)
  // outputFileTracing: false, // Intentionally disabled via env vars in build scripts and netlify.toml to prevent hanging.
  productionBrowserSourceMaps: false, // Disable for faster builds
=======
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-28d9
  
  // Environment configuration
  env: {
    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
<<<<<<< HEAD
    NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL || '',
    NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '',
  },

  modularizeImports: {
    'lucide-react': {
      transform: 'lucide-react/dist/esm/icons/{{kebabCase member}}',
      skipDefaultConversion: true,
    },
    '@radix-ui/react-icons': {
      transform: '@radix-ui/react-icons/dist/{{member}}',
    },
  },
  experimental: {
    optimizePackageImports: [
      'lucide-react',
      '@radix-ui/react-icons',
      'framer-motion'
    ],
=======
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-28d9
  },

  images: {
    domains: ["localhost"],
    unoptimized: true,
  },

  compiler: {
    removeConsole: process.env.NODE_ENV === "production",
  },

<<<<<<< HEAD
  transpilePackages: [
    'react-markdown',
    'date-fns',
    'react-day-picker',
    'bail',
    'is-plain-obj',
    'mdast-util-from-markdown',
    'mdast-util-to-hast',
    'mdast-util-to-string',
    'unified',
    'remark-parse',
    'remark-rehype',
    'formik',
    'lodash',
    'lodash-es',
    'lodash/isPlainObject',
    'lodash/cloneDeep',
    'lodash/clone',
    'lodash/toPath',
    'helia',
    '@helia/json',
    'multiformats',
    'libp2p',
    '@libp2p/identify',
    'ajv',
    'ajv-keywords',
    '@ungap/structured-clone',
    'axios-retry',
  ],

  webpack: (config, { dev, isServer, webpack }) => {
    // Exclude blockchain contracts from the build
    config.module.rules.push({
      test: /\.(sol|ts)$/,
      include: /contracts/,
      use: 'ignore-loader'
    });

    // Fix EventEmitter memory leak by increasing max listeners
    // events.EventEmitter.defaultMaxListeners = 20; // Will be set by build script
    
    // CRITICAL: Add comprehensive polyfills as the very first entry point
    if (!isServer) {
      const originalEntry = config.entry;
      config.entry = async () => {
        const entries = await originalEntry();
        
        // Create comprehensive polyfill array
        const polyfills = [
          './src/utils/esm-polyfill.ts',        // ESM module resolution fix
          './src/utils/serverless-polyfill.ts',  // New serverless polyfill
          './src/utils/env-polyfill.ts'         // Existing env polyfill
        ];
        
        // Add polyfills to every entry point
        Object.keys(entries).forEach(entryName => {
          if (Array.isArray(entries[entryName])) {
            polyfills.forEach(polyfill => {
              if (!entries[entryName].includes(polyfill)) {
                entries[entryName].unshift(polyfill);
              }
            });
          }
        });
        
        return entries;
      };

      // SIMPLIFIED DefinePlugin 
      config.plugins.push(
        new webpack.DefinePlugin({
          'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production'),
          'process.env': JSON.stringify({
            NODE_ENV: process.env.NODE_ENV || 'production',
            NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL || '',
            NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL || '',
            NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '',
          }),
        })
      );
    }
    
    // Development optimizations to prevent memory leaks with 176+ pages
    if (dev) {
      if (!isServer) {
        config.watchOptions = {
          ignored: /node_modules/,
          aggregateTimeout: 300,
          poll: false, // Use native file watching instead of polling
        };

        // Disable source maps in development for faster HMR startup
        config.devtool = false;
      }

      // Alias react-router-dom to a lightweight stub to avoid build errors
      config.resolve.alias = {
        ...config.resolve.alias,
        'react-router-dom': require('path').resolve(__dirname, 'src/stubs/react-router-dom.ts'),
      };

      if (!isServer) {
        // Optimize memory usage in development
        config.stats = 'errors-warnings';
        config.infrastructureLogging = {
          level: 'error',
        };
      }
    }

    // Smart Sentry detection: Disable automatically if would cause build issues
    const shouldDisableSentry = process.env.SKIP_SENTRY_BUILD === 'true' || 
                                process.env.CI === 'true' ||
                                process.env.NODE_ENV === 'production' ||
                                !process.env.SENTRY_DSN ||
                                process.env.SENTRY_DSN?.includes('dummy') ||
                                process.env.SENTRY_DSN?.includes('placeholder');
    
    if (shouldDisableSentry) {
      console.log('ðŸš« Sentry disabled - using mock implementation (Smart Detection)');
      
      // Use webpack aliases to completely replace all Sentry imports with mocks
      config.resolve.alias = {
        ...config.resolve.alias,
        '@sentry/nextjs': require('path').resolve(__dirname, 'src/utils/sentry-mock.ts'),
        '@sentry/node': require('path').resolve(__dirname, 'src/utils/sentry-mock.ts'),
        '@sentry/tracing': require('path').resolve(__dirname, 'src/utils/sentry-mock.ts'),
        '@sentry/react': require('path').resolve(__dirname, 'src/utils/sentry-mock.ts'),
        '@sentry/browser': require('path').resolve(__dirname, 'src/utils/sentry-mock.ts'),
      };
    }

    // Completely exclude dd-trace during CI builds to prevent native module issues  
    if (process.env.SKIP_DATADOG === 'true' || process.env.CI === 'true') {
      console.log('ðŸš« DD-Trace disabled for CI build - using mock implementation');
      
      // Use webpack alias to replace dd-trace with mock implementation
      config.resolve.alias = {
        ...config.resolve.alias,
        'dd-trace': require('path').resolve(__dirname, 'src/utils/dd-trace-mock.ts'),
      };
    }

    // CRITICAL FIX FOR ESM IMPORTS: Configure module resolution for problematic packages
    // This fixes the "ESM packages need to be imported" errors for formik, lodash, and date-fns
    
    // Force specific lodash modules to use ESM variants
    config.resolve.alias = {
      ...config.resolve.alias,
      'lodash/isPlainObject': 'lodash-es/isPlainObject',
      'lodash/cloneDeep': 'lodash-es/cloneDeep',
      'lodash/clone': 'lodash-es/clone',
      'lodash/toPath': 'lodash-es/toPath',
      'lodash/isEqual': 'lodash-es/isEqual',
      'lodash/isFunction': 'lodash-es/isFunction',
      'lodash/isString': 'lodash-es/isString',
      'lodash/isArray': 'lodash-es/isArray',
      'lodash/isObject': 'lodash-es/isObject',
      'lodash': 'lodash-es',
    };

    // Handle ESM modules properly
    config.module.rules.push({
      test: /\.m?js$/,
      type: 'javascript/auto',
      resolve: {
        fullySpecified: false,
      },
    });

    // Add polyfills for Node.js APIs
    config.resolve.fallback = {
      ...config.resolve.fallback,
      fs: false,
      net: false,
      tls: false,
      crypto: false,
      async_hooks: false,
      diagnostics_channel: false,
      worker_threads: false,
      module: false,
      child_process: false,
      http: false,
      https: false,
      os: false,
      path: false,
      stream: false,
      util: false,
      zlib: false,
      url: false,
    };

=======
  webpack: (config, { dev, isServer }) => {
    // Simple webpack configuration
    if (!isServer) {
      // Client-side optimizations
      config.resolve.fallback = {
        fs: false,
        net: false,
        tls: false,
        crypto: false,
      };
    }

>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-28d9
    return config;
  },
};

module.exports = withSentryConfig(baseConfig);
