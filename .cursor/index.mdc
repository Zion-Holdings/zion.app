# Repository Context and Always-On Rules

## Project Overview
- Name: This repository hosts a Next.js/React web app with extensive automation scripts
- Stack: Node.js 20+, React 17, Next.js, TypeScript tooling, Tailwind CSS, GitHub Actions
- Purpose: Deliver a production web app and run autonomous automation to improve quality and DX

## Code Patterns
- Prefer functional components and hooks; avoid classes for UI logic
- Keep functions pure; avoid mutating inputs or global state
- Small, composable modules; minimize side effects; early returns for guards
- TypeScript: use explicit types for public APIs; prefer interfaces over type aliases for objects

## Error Handling
- Throw explicit, descriptive errors; no silent failures
- Avoid catch-all handlers that swallow the root cause; log with context then rethrow

## Testing and Linting
- Run ESLint before commit; fix warnings proactively
- Add focused tests for critical logic and utilities when feasible

## Git Practices
- Conventional Commits (feat, fix, chore, docs, refactor, perf, test)
- Keep changes minimal and scoped; avoid unrelated edits

## Cursor Rule Hygiene
- Context-aware rules live under `.cursor/rules/*.mdc`
- Each rule file MUST start with YAML front matter containing ONLY `description` and `globs`
- Keep each rule under ~100 lines and single-purpose for token efficiency

## Memory System
- Persistent project memory lives at `.cursor/rules/learned-memories.mdc`
- The `memory.mdc` rule governs how memory is updated/used across tasks

## Where to Start
- For TypeScript patterns, see `typescript-guidelines.mdc`
- For Next.js patterns, see `nextjs-guidelines.mdc`
- For continuous improvement, see `000-auto-rules.mdc`