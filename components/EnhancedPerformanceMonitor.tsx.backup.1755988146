<<<<<<< HEAD
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, 
  Zap, 
  Clock, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle,
  RefreshCw,
  BarChart3,
  Cpu,
  HardDrive,
  Network,
  Monitor
} from 'lucide-react';

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
  fcpScore: string;
  lcpScore: string;
  fidScore: string;
  clsScore: string;
  ttfbScore: string;
}

interface SystemMetrics {
  memory: {
    used: number;
    total: number;
    percentage: number;
  };
  cpu: number;
  network: {
    downlink: number;
    effectiveType: string;
  };
  battery?: {
    level: number;
    charging: boolean;
  };
}

const EnhancedPerformanceMonitor: React.FC = () => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics | null>(null);
  const [isVisible, setIsVisible] = useState(false);
  const [optimizationTips, setOptimizationTips] = useState<string[]>([]);
  const [isMonitoring, setIsMonitoring] = useState(false);

  const calculateScore = (value: number, threshold: number): string => {
    if (value <= threshold) return 'good';
    if (value <= threshold * 1.5) return 'needs-improvement';
    return 'poor';
  };

  const getScoreColor = (score: string): string => {
    switch (score) {
      case 'good': return 'text-green-400';
      case 'needs-improvement': return 'text-yellow-400';
      case 'poor': return 'text-red-400';
=======
import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, TrendingUp, TrendingDown, Clock, Zap, 
  Database, Network, Cpu, HardDrive, AlertTriangle,
  CheckCircle, Info, Settings, RefreshCw, BarChart3
} from 'lucide-react';

interface PerformanceMetric {
  name: string;
  value: number;
  unit: string;
  status: 'good' | 'warning' | 'critical';
  trend: 'up' | 'down' | 'stable';
  change: number;
  description: string;
}

interface PerformanceData {
  timestamp: Date;
  metrics: PerformanceMetric[];
  overallScore: number;
  recommendations: string[];
}

interface EnhancedPerformanceMonitorProps {
  className?: string;
  autoRefresh?: boolean;
  refreshInterval?: number;
}

const EnhancedPerformanceMonitor: React.FC<EnhancedPerformanceMonitorProps> = ({
  className = '',
  autoRefresh = true,
  refreshInterval = 30000
}) => {
  const [performanceData, setPerformanceData] = useState<PerformanceData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [showDetails, setShowDetails] = useState(false);

  const generateMockPerformanceData = useCallback((): PerformanceData => {
    const baseMetrics: PerformanceMetric[] = [
      {
        name: 'Page Load Time',
        value: Math.random() * 2000 + 500,
        unit: 'ms',
        status: Math.random() > 0.7 ? 'good' : Math.random() > 0.4 ? 'warning' : 'critical',
        trend: Math.random() > 0.6 ? 'up' : Math.random() > 0.3 ? 'down' : 'stable',
        change: Math.random() * 20 - 10,
        description: 'Time to fully load the page'
      },
      {
        name: 'First Contentful Paint',
        value: Math.random() * 1000 + 200,
        unit: 'ms',
        status: Math.random() > 0.8 ? 'good' : Math.random() > 0.5 ? 'warning' : 'critical',
        trend: Math.random() > 0.6 ? 'up' : Math.random() > 0.3 ? 'down' : 'stable',
        change: Math.random() * 15 - 7.5,
        description: 'Time to first visual content'
      },
      {
        name: 'Largest Contentful Paint',
        value: Math.random() * 2500 + 800,
        unit: 'ms',
        status: Math.random() > 0.7 ? 'good' : Math.random() > 0.4 ? 'warning' : 'critical',
        trend: Math.random() > 0.6 ? 'up' : Math.random() > 0.3 ? 'down' : 'stable',
        change: Math.random() * 25 - 12.5,
        description: 'Time to largest content element'
      },
      {
        name: 'Cumulative Layout Shift',
        value: Math.random() * 0.3,
        unit: '',
        status: Math.random() > 0.8 ? 'good' : Math.random() > 0.5 ? 'warning' : 'critical',
        trend: Math.random() > 0.6 ? 'up' : Math.random() > 0.3 ? 'down' : 'stable',
        change: Math.random() * 0.1 - 0.05,
        description: 'Visual stability metric'
      },
      {
        name: 'Total Blocking Time',
        value: Math.random() * 300 + 100,
        unit: 'ms',
        status: Math.random() > 0.7 ? 'good' : Math.random() > 0.4 ? 'warning' : 'critical',
        trend: Math.random() > 0.6 ? 'up' : Math.random() > 0.3 ? 'down' : 'stable',
        change: Math.random() * 20 - 10,
        description: 'Time blocking main thread'
      },
      {
        name: 'Speed Index',
        value: Math.random() * 2000 + 800,
        unit: 'ms',
        status: Math.random() > 0.7 ? 'good' : Math.random() > 0.4 ? 'warning' : 'critical',
        trend: Math.random() > 0.6 ? 'up' : Math.random() > 0.3 ? 'down' : 'stable',
        change: Math.random() * 25 - 12.5,
        description: 'Visual loading speed'
      }
    ];

    const overallScore = Math.round(
      baseMetrics.reduce((acc, metric) => {
        const score = metric.status === 'good' ? 100 : metric.status === 'warning' ? 70 : 40;
        return acc + score;
      }, 0) / baseMetrics.length
    );

    const recommendations = [
      'Optimize image compression and formats',
      'Implement lazy loading for non-critical resources',
      'Minimize JavaScript bundle size',
      'Use CDN for static assets',
      'Enable HTTP/2 or HTTP/3',
      'Implement service worker for caching'
    ].slice(0, Math.floor(Math.random() * 3) + 2);

    return {
      timestamp: new Date(),
      metrics: baseMetrics,
      overallScore,
      recommendations
    };
  }, []);

  const updatePerformanceData = useCallback(async () => {
    setIsLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      const newData = generateMockPerformanceData();
      setPerformanceData(newData);
      setLastUpdate(new Date());
    } catch (error) {
      console.error('Failed to update performance data:', error);
    } finally {
      setIsLoading(false);
    }
  }, [generateMockPerformanceData]);

  useEffect(() => {
    updatePerformanceData();
  }, [updatePerformanceData]);

  useEffect(() => {
    if (!autoRefresh) return;

    const interval = setInterval(updatePerformanceData, refreshInterval);
    return () => clearInterval(interval);
  }, [autoRefresh, refreshInterval, updatePerformanceData]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'good': return 'text-green-400';
      case 'warning': return 'text-yellow-400';
      case 'critical': return 'text-red-400';
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-53c0
      default: return 'text-gray-400';
    }
  };

<<<<<<< HEAD
  const getScoreIcon = (score: string) => {
    switch (score) {
      case 'good': return <CheckCircle className="w-5 h-5 text-green-400" />;
      case 'needs-improvement': return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
      case 'poor': return <AlertTriangle className="w-5 h-5 text-red-400" />;
      default: return <Activity className="w-5 h-5 text-gray-400" />;
    }
  };

  const measurePerformance = useCallback(async () => {
    if ('PerformanceObserver' in window) {
      try {
        // Measure First Contentful Paint (FCP)
        const fcpEntry = performance.getEntriesByName('first-contentful-paint')[0];
        const fcp = fcpEntry ? fcpEntry.startTime : 0;

        // Measure Largest Contentful Paint (LCP)
        const lcpEntry = performance.getEntriesByName('largest-contentful-paint')[0];
        const lcp = lcpEntry ? lcpEntry.startTime : 0;

        // Measure Time to First Byte (TTFB)
        const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        const ttfb = navigationEntry ? navigationEntry.responseStart - navigationEntry.requestStart : 0;

        // Calculate scores
        const fcpScore = calculateScore(fcp, 1800);
        const lcpScore = calculateScore(lcp, 2500);
        const ttfbScore = calculateScore(ttfb, 800);

        setMetrics({
          fcp,
          lcp,
          fid: 0, // FID requires user interaction
          cls: 0, // CLS requires more complex measurement
          ttfb,
          fcpScore,
          lcpScore,
          fidScore: 'good', // Default
          clsScore: 'good', // Default
          ttfbScore
        });

        // Generate optimization tips
        const tips: string[] = [];
        if (fcpScore !== 'good') tips.push('Optimize First Contentful Paint by reducing render-blocking resources');
        if (lcpScore !== 'good') tips.push('Improve Largest Contentful Paint by optimizing images and critical resources');
        if (ttfbScore !== 'good') tips.push('Reduce Time to First Byte by optimizing server response time');
        
        setOptimizationTips(tips);
      } catch (error) {
        console.error('Error measuring performance:', error);
      }
    }
  }, []);

  const measureSystemMetrics = useCallback(() => {
    if ('memory' in performance) {
      const memory = (performance as any).memory;
      const memoryData = {
        used: Math.round(memory.usedJSHeapSize / 1024 / 1024),
        total: Math.round(memory.totalJSHeapSize / 1024 / 1024),
        percentage: Math.round((memory.usedJSHeapSize / memory.totalJSHeapSize) * 100)
      };

      // Simulate CPU usage (not available in browser)
      const cpuUsage = Math.random() * 100;

      // Network information
      const connection = (navigator as any).connection;
      const networkData = {
        downlink: connection ? connection.downlink : 0,
        effectiveType: connection ? connection.effectiveType : 'unknown'
      };

      // Battery information
      let batteryData;
      if ('getBattery' in navigator) {
        navigator.getBattery?.().then((battery: any) => {
          batteryData = {
            level: Math.round(battery.level * 100),
            charging: battery.charging
          };
          setSystemMetrics(prev => prev ? { ...prev, battery: batteryData } : null);
        });
      }

      setSystemMetrics({
        memory: memoryData,
        cpu: cpuUsage,
        network: networkData,
        battery: batteryData
      });
    }
  }, []);

  const startMonitoring = useCallback(() => {
    setIsMonitoring(true);
    const interval = setInterval(() => {
      measureSystemMetrics();
    }, 2000);

    return () => clearInterval(interval);
  }, [measureSystemMetrics]);

  useEffect(() => {
    setIsVisible(true);
    measurePerformance();
    measureSystemMetrics();
    
    if (isMonitoring) {
      startMonitoring();
    }

    // Monitor for performance changes
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'largest-contentful-paint') {
          measurePerformance();
        }
      }
    });

    try {
      observer.observe({ entryTypes: ['largest-contentful-paint'] });
    } catch (error) {
      console.error('PerformanceObserver not supported:', error);
    }

    return () => observer.disconnect();
  }, [measurePerformance, measureSystemMetrics, isMonitoring, startMonitoring]);

  return (
    <div className="w-full">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}
        transition={{ duration: 0.6 }}
        className="bg-gradient-to-br from-gray-900/80 to-gray-800/80 border border-gray-700/50 rounded-3xl backdrop-blur-xl p-8"
      >
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center">
              <Monitor className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-2xl font-bold text-white">Performance Monitor</h3>
              <p className="text-gray-400">Real-time performance metrics and optimization</p>
            </div>
          </div>
          
          <button
            onClick={() => {
              setIsMonitoring(!isMonitoring);
              if (!isMonitoring) startMonitoring();
            }}
            className={`px-4 py-2 rounded-xl font-medium transition-all duration-300 ${
              isMonitoring 
                ? 'bg-green-600 text-white' 
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            {isMonitoring ? 'Monitoring' : 'Start Monitor'}
          </button>
        </div>

        {/* Performance Metrics Grid */}
        {metrics && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {/* FCP */}
            <div className="bg-gray-800/50 rounded-2xl p-6 border border-gray-700/30">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center">
                    <Clock className="w-5 h-5 text-white" />
                  </div>
                  <span className="text-white font-medium">FCP</span>
                </div>
                {getScoreIcon(metrics.fcpScore)}
              </div>
              <div className="text-3xl font-bold text-white mb-2">
                {Math.round(metrics.fcp)}ms
              </div>
              <div className={`text-sm font-medium ${getScoreColor(metrics.fcpScore)}`}>
                {metrics.fcpScore.replace('-', ' ').toUpperCase()}
              </div>
            </div>

            {/* LCP */}
            <div className="bg-gray-800/50 rounded-2xl p-6 border border-gray-700/30">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
                    <TrendingUp className="w-5 h-5 text-white" />
                  </div>
                  <span className="text-white font-medium">LCP</span>
                </div>
                {getScoreIcon(metrics.lcpScore)}
              </div>
              <div className="text-3xl font-bold text-white mb-2">
                {Math.round(metrics.lcp)}ms
              </div>
              <div className={`text-sm font-medium ${getScoreColor(metrics.lcpScore)}`}>
                {metrics.lcpScore.replace('-', ' ').toUpperCase()}
              </div>
            </div>

            {/* TTFB */}
            <div className="bg-gray-800/50 rounded-2xl p-6 border border-gray-700/30">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-emerald-500 to-teal-500 rounded-xl flex items-center justify-center">
                    <Zap className="w-5 h-5 text-white" />
                  </div>
                  <span className="text-white font-medium">TTFB</span>
                </div>
                {getScoreIcon(metrics.ttfbScore)}
              </div>
              <div className="text-3xl font-bold text-white mb-2">
                {Math.round(metrics.ttfb)}ms
              </div>
              <div className={`text-sm font-medium ${getScoreColor(metrics.ttfbScore)}`}>
                {metrics.ttfbScore.replace('-', ' ').toUpperCase()}
              </div>
            </div>
          </div>
        )}

        {/* System Metrics */}
        {systemMetrics && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {/* Memory */}
            <div className="bg-gray-800/50 rounded-2xl p-6 border border-gray-700/30">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-orange-500 to-red-500 rounded-xl flex items-center justify-center">
                  <HardDrive className="w-5 h-5 text-white" />
                </div>
                <span className="text-white font-medium">Memory</span>
              </div>
              <div className="text-2xl font-bold text-white mb-2">
                {systemMetrics.memory.used}MB
              </div>
              <div className="text-sm text-gray-400">
                {systemMetrics.memory.percentage}% used
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2 mt-3">
                <div 
                  className={`h-2 rounded-full transition-all duration-300 ${
                    systemMetrics.memory.percentage > 80 ? 'bg-red-500' : 
                    systemMetrics.memory.percentage > 60 ? 'bg-yellow-500' : 'bg-green-500'
                  }`}
                  style={{ width: `${systemMetrics.memory.percentage}%` }}
                />
              </div>
            </div>

            {/* CPU */}
            <div className="bg-gray-800/50 rounded-2xl p-6 border border-gray-700/30">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-xl flex items-center justify-center">
                  <Cpu className="w-5 h-5 text-white" />
                </div>
                <span className="text-white font-medium">CPU</span>
              </div>
              <div className="text-2xl font-bold text-white mb-2">
                {Math.round(systemMetrics.cpu)}%
              </div>
              <div className="text-sm text-gray-400">Usage</div>
              <div className="w-full bg-gray-700 rounded-full h-2 mt-3">
                <div 
                  className={`h-2 rounded-full transition-all duration-300 ${
                    systemMetrics.cpu > 80 ? 'bg-red-500' : 
                    systemMetrics.cpu > 60 ? 'bg-yellow-500' : 'bg-green-500'
                  }`}
                  style={{ width: `${systemMetrics.cpu}%` }}
                />
              </div>
            </div>

            {/* Network */}
            <div className="bg-gray-800/50 rounded-2xl p-6 border border-gray-700/30">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-xl flex items-center justify-center">
                  <Network className="w-5 h-5 text-white" />
                </div>
                <span className="text-white font-medium">Network</span>
              </div>
              <div className="text-2xl font-bold text-white mb-2">
                {systemMetrics.network.downlink}Mbps
              </div>
              <div className="text-sm text-gray-400">
                {systemMetrics.network.effectiveType}
              </div>
            </div>

            {/* Battery */}
            {systemMetrics.battery && (
              <div className="bg-gray-800/50 rounded-2xl p-6 border border-gray-700/30">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-500 rounded-xl flex items-center justify-center">
                    <Activity className="w-5 h-5 text-white" />
                  </div>
                  <span className="text-white font-medium">Battery</span>
                </div>
                <div className="text-2xl font-bold text-white mb-2">
                  {systemMetrics.battery.level}%
                </div>
                <div className="text-sm text-gray-400">
                  {systemMetrics.battery.charging ? 'Charging' : 'Discharging'}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Optimization Tips */}
        {optimizationTips.length > 0 && (
          <div className="bg-gradient-to-r from-yellow-500/10 to-orange-500/10 border border-yellow-500/30 rounded-2xl p-6">
            <div className="flex items-center space-x-3 mb-4">
              <AlertTriangle className="w-6 h-6 text-yellow-400" />
              <h4 className="text-lg font-semibold text-white">Optimization Tips</h4>
            </div>
            <ul className="space-y-2">
              {optimizationTips.map((tip, index) => (
                <li key={index} className="text-gray-300 flex items-start space-x-2">
                  <span className="text-yellow-400 mt-1">•</span>
                  <span>{tip}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Refresh Button */}
        <div className="flex justify-center mt-8">
          <button
            onClick={measurePerformance}
            className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-medium rounded-xl hover:from-cyan-600 hover:to-blue-700 transition-all duration-300 flex items-center space-x-2"
          >
            <RefreshCw className="w-5 h-5" />
            <span>Refresh Metrics</span>
          </button>
        </div>
      </motion.div>
    </div>
=======
  const getStatusBgColor = (status: string) => {
    switch (status) {
      case 'good': return 'bg-green-500/20';
      case 'warning': return 'bg-yellow-500/20';
      case 'critical': return 'bg-red-500/20';
      default: return 'bg-gray-500/20';
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return <TrendingUp className="w-4 h-4 text-green-400" />;
      case 'down': return <TrendingDown className="w-4 h-4 text-red-400" />;
      default: return <Activity className="w-4 h-4 text-blue-400" />;
    }
  };

  const getOverallScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getOverallScoreBg = (score: number) => {
    if (score >= 90) return 'bg-green-500/20';
    if (score >= 70) return 'bg-yellow-500/20';
    return 'bg-red-500/20';
  };

  if (!performanceData) {
    return (
      <div className={`p-4 bg-gray-900 rounded-lg border border-gray-700 ${className}`}>
        <div className="animate-pulse">
          <div className="h-4 bg-gray-700 rounded w-1/3 mb-4"></div>
          <div className="space-y-3">
            <div className="h-3 bg-gray-700 rounded"></div>
            <div className="h-3 bg-gray-700 rounded w-5/6"></div>
            <div className="h-3 bg-gray-700 rounded w-4/6"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className={`bg-gray-900 rounded-lg border border-gray-700 overflow-hidden ${className}`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
    >
      {/* Header */}
      <div className="p-4 bg-gray-800/50 border-b border-gray-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-500/20 rounded-lg">
              <Activity className="w-5 h-5 text-blue-400" />
            </div>
            <div>
              <h3 className="text-white font-semibold">Performance Monitor</h3>
              <p className="text-gray-400 text-sm">
                Last updated: {lastUpdate.toLocaleTimeString()}
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowDetails(!showDetails)}
              className="p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-colors"
              title={showDetails ? 'Hide details' : 'Show details'}
            >
              <BarChart3 className="w-4 h-4" />
            </button>
            <button
              onClick={updatePerformanceData}
              disabled={isLoading}
              className="p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-colors disabled:opacity-50"
              title="Refresh data"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            </button>
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-colors"
              title={isExpanded ? 'Collapse' : 'Expand'}
            >
              <Settings className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Overall Score */}
      <div className="p-4">
        <div className="text-center mb-6">
          <div className={`inline-flex items-center justify-center w-20 h-20 rounded-full ${getOverallScoreBg(performanceData.overallScore)} mb-3`}>
            <span className={`text-2xl font-bold ${getOverallScoreColor(performanceData.overallScore)}`}>
              {performanceData.overallScore}
            </span>
          </div>
          <h4 className="text-white font-semibold mb-1">Performance Score</h4>
          <p className="text-gray-400 text-sm">
            {performanceData.overallScore >= 90 ? 'Excellent' : 
             performanceData.overallScore >= 70 ? 'Good' : 'Needs Improvement'}
          </p>
        </div>

        {/* Key Metrics Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
          {performanceData.metrics.slice(0, 6).map((metric, index) => (
            <motion.div
              key={metric.name}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.1 }}
              className={`p-3 rounded-lg border ${getStatusBgColor(metric.status)} border-gray-600/50`}
            >
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-300 font-medium">{metric.name}</span>
                {getTrendIcon(metric.trend)}
              </div>
              <div className="flex items-baseline space-x-2">
                <span className={`text-xl font-bold ${getStatusColor(metric.status)}`}>
                  {metric.value.toFixed(metric.unit ? 0 : 2)}
                </span>
                <span className="text-sm text-gray-400">{metric.unit}</span>
              </div>
              <div className="flex items-center space-x-2 mt-1">
                <span className={`text-xs ${metric.change >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%
                </span>
                <span className="text-xs text-gray-500">vs last check</span>
              </div>
            </motion.div>
          ))}
        </div>

        {/* Recommendations */}
        {showDetails && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            className="border-t border-gray-700 pt-4"
          >
            <h4 className="text-white font-semibold mb-3 flex items-center space-x-2">
              <Info className="w-4 h-4 text-blue-400" />
              <span>Optimization Recommendations</span>
            </h4>
            <div className="space-y-2">
              {performanceData.recommendations.map((recommendation, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="flex items-start space-x-3 p-3 bg-gray-800/50 rounded-lg"
                >
                  <CheckCircle className="w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" />
                  <span className="text-sm text-gray-300">{recommendation}</span>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}

        {/* Expandable Details */}
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            className="border-t border-gray-700 pt-4"
          >
            <h4 className="text-white font-semibold mb-3">Detailed Metrics</h4>
            <div className="space-y-3">
              {performanceData.metrics.map((metric, index) => (
                <div key={metric.name} className="p-3 bg-gray-800/30 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-white font-medium">{metric.name}</span>
                    <span className={`text-sm px-2 py-1 rounded-full ${getStatusBgColor(metric.status)} ${getStatusColor(metric.status)}`}>
                      {metric.status}
                    </span>
                  </div>
                  <p className="text-sm text-gray-400 mb-2">{metric.description}</p>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-300">
                      Current: {metric.value.toFixed(metric.unit ? 0 : 2)} {metric.unit}
                    </span>
                    <span className={`${metric.change >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </motion.div>
        )}
      </div>
    </motion.div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-53c0
  );
};

export default EnhancedPerformanceMonitor;