<<<<<<< HEAD
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Smartphone, 
  Tablet, 
  Monitor, 
  Zap, 
  MousePointer, 
  Wifi, 
  Battery, 
  WifiOff,
  BatteryCharging,
  Signal,
  SignalHigh,
  SignalLow
=======
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Smartphone, Tablet, Monitor, RotateCcw, 
  Wifi, WifiOff, Signal, SignalHigh, 
  Mouse, Hand
>>>>>>> origin/cursor/website-audit-content-update-and-deployment-5426
} from 'lucide-react';

interface MobileOptimizerProps {
  children: React.ReactNode;
}

const MobileOptimizer: React.FC<MobileOptimizerProps> = ({ children }) => {
  const [isMobile, setIsMobile] = useState(false);
  const [isTablet, setIsTablet] = useState(false);
  const [isLandscape, setIsLandscape] = useState(false);
  const [touchSupported, setTouchSupported] = useState(false);
  const [connectionType, setConnectionType] = useState<string>('unknown');
  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);
  const [isCharging, setIsCharging] = useState<boolean | null>(null);
  const [showMobileIndicator, setShowMobileIndicator] = useState(false);

  useEffect(() => {
    const checkDevice = () => {
      const userAgent = navigator.userAgent;
      const mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
      const tablet = /iPad|Android(?=.*\bMobile\b)(?=.*\bSafari\b)/i.test(userAgent);
      
      setIsMobile(mobile);
      setIsTablet(tablet);
      setIsLandscape(window.innerWidth > window.innerHeight);
      setTouchSupported('ontouchstart' in window || navigator.maxTouchPoints > 0);
    };

    const checkConnection = () => {
      if ('connection' in navigator) {
        const connection = (navigator as any).connection;
        setConnectionType(connection.effectiveType || connection.type || 'unknown');
      }
    };

<<<<<<< HEAD
    const checkBattery = async () => {
      if ('getBattery' in navigator) {
        try {
          const battery = await (navigator as any).getBattery();
          setBatteryLevel(battery.level * 100);
          setIsCharging(battery.charging);
          
          battery.addEventListener('levelchange', () => {
            setBatteryLevel(battery.level * 100);
          });
          
          battery.addEventListener('chargingchange', () => {
            setIsCharging(battery.charging);
          });
        } catch (error) {
          console.log('Battery API not supported');
=======
    // Initial detection
    detectDevice();
    
    // Listen for resize events
    window.addEventListener('resize', detectDevice);
    window.addEventListener('orientationchange', detectDevice);
    
    // Network information
    if ('connection' in navigator) {
      const connection = (navigator as { connection: { effectiveType?: string; downlink?: number; rtt?: number; addEventListener: (event: string, handler: () => void) => void; removeEventListener: (event: string, handler: () => void) => void } }).connection;
      const updateNetworkInfo = () => {
        setNetworkInfo({
          effectiveType: connection.effectiveType || 'unknown',
          downlink: connection.downlink || 0,
          rtt: connection.rtt || 0
        });
      };
      
      updateNetworkInfo();
      connection.addEventListener('change', updateNetworkInfo);
      
      return () => {
        connection.removeEventListener('change', updateNetworkInfo);
      };
    }
    
    return () => {
      window.removeEventListener('resize', detectDevice);
      window.removeEventListener('orientationchange', detectDevice);
    };
  }, []);

  // Apply mobile-specific optimizations
  useEffect(() => {
    const root = document.documentElement;
    
    // Add device-specific classes
    root.classList.remove('mobile-device', 'tablet-device', 'desktop-device');
    root.classList.add(`${deviceType}-device`);
    
    // Add orientation classes
    root.classList.remove('portrait', 'landscape');
    root.classList.add(orientation);
    
    // Add touch support classes
    if (touchSupport) {
      root.classList.add('touch-device');
    } else {
      root.classList.remove('touch-device');
    }
    
    // Apply mobile-specific CSS variables
    if (deviceType === 'mobile') {
      root.style.setProperty('--mobile-padding', '1rem');
      root.style.setProperty('--mobile-font-size', '0.875rem');
      root.style.setProperty('--mobile-button-height', '3rem');
    } else if (deviceType === 'tablet') {
      root.style.setProperty('--tablet-padding', '1.5rem');
      root.style.setProperty('--tablet-font-size', '1rem');
      root.style.setProperty('--tablet-button-height', '3.5rem');
    } else {
      root.style.setProperty('--desktop-padding', '2rem');
      root.style.setProperty('--desktop-font-size', '1.125rem');
      root.style.setProperty('--desktop-button-height', '4rem');
    }
  }, [deviceType, orientation, touchSupport]);

  // Touch gesture handling
  useEffect(() => {
    if (!touchSupport) return;

    let startY = 0;
    let startX = 0;
    let isScrolling = false;

    const handleTouchStart = (e: TouchEvent) => {
      startY = e.touches[0].clientY;
      startX = e.touches[0].clientX;
      isScrolling = false;
    };

    const handleTouchMove = (e: TouchEvent) => {
      if (!isScrolling) {
        const deltaY = Math.abs(e.touches[0].clientY - startY);
        const deltaX = Math.abs(e.touches[0].clientX - startX);
        
        if (deltaY > deltaX && deltaY > 10) {
          isScrolling = true;
>>>>>>> origin/cursor/website-audit-content-update-and-deployment-5426
        }
      }
    };

<<<<<<< HEAD
    const handleResize = () => {
      setIsLandscape(window.innerWidth > window.innerHeight);
=======
    const handleTouchEnd = (e: TouchEvent) => {
      if (!isScrolling) {
        const deltaY = e.changedTouches[0].clientY - startY;
        const deltaX = e.changedTouches[0].clientX - startX;
        
        // Swipe up gesture
        if (deltaY < -50 && Math.abs(deltaX) < 100) {
          // Handle swipe up
          document.dispatchEvent(new Event('swipeUp'));
        }
        
        // Swipe down gesture
        if (deltaY > 50 && Math.abs(deltaX) < 100) {
          // Handle swipe down
          document.dispatchEvent(new Event('swipeDown'));
        }
      }
>>>>>>> origin/cursor/website-audit-content-update-and-deployment-5426
    };

    const handleOrientationChange = () => {
      setTimeout(() => {
        setIsLandscape(window.innerWidth > window.innerHeight);
      }, 100);
    };

    checkDevice();
    checkConnection();
    checkBattery();
    
    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', handleOrientationChange);
    
    // Show mobile indicator briefly on mobile devices
    if (isMobile || isTablet) {
      setShowMobileIndicator(true);
      setTimeout(() => setShowMobileIndicator(false), 3000);
    }

    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('orientationchange', handleOrientationChange);
    };
  }, [isMobile, isTablet]);

  // Enhanced touch interactions for mobile
  const handleTouchStart = useCallback((e: React.TouchEvent) => {
    if (touchSupported) {
      // Add touch feedback
      const target = e.currentTarget as HTMLElement;
      target.style.transform = 'scale(0.98)';
      target.style.transition = 'transform 0.1s ease';
    }
  }, [touchSupported]);

  const handleTouchEnd = useCallback((e: React.TouchEvent) => {
    if (touchSupported) {
      const target = e.currentTarget as HTMLElement;
      target.style.transform = 'scale(1)';
    }
  }, [touchSupported]);

  // Performance optimizations for mobile
  useEffect(() => {
    if (isMobile || isTablet) {
      // Reduce motion for mobile devices
      document.documentElement.style.setProperty('--reduced-motion', 'reduce');
      
      // Optimize images for mobile
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (img.dataset.mobileSrc) {
          img.src = img.dataset.mobileSrc;
        }
      });
    }
  }, [isMobile, isTablet]);

  // Connection-aware loading
  const shouldShowLowQuality = connectionType === 'slow-2g' || connectionType === '2g';
  
  if (shouldShowLowQuality) {
    // Apply low-quality optimizations
    document.documentElement.style.setProperty('--image-quality', 'low');
  }

  return (
    <>
      {/* Mobile Status Indicator */}
      <AnimatePresence>
        {showMobileIndicator && (isMobile || isTablet) && (
          <motion.div
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -50 }}
            className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-black/80 backdrop-blur-sm border border-white/20 rounded-2xl px-4 py-2 text-white text-sm"
          >
<<<<<<< HEAD
            <div className="flex items-center gap-2">
              {isMobile ? <Smartphone className="w-4 h-4" /> : <Tablet className="w-4 h-4" />}
              <span>Mobile Optimized</span>
              {touchSupported && <MousePointer className="w-4 h-4 text-cyan-400" />}
=======
            {/* Header */}
            <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 p-4 border-b border-blue-400/30">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                  <Smartphone className="w-5 h-5" />
                  Mobile Debug
                </h3>
                <button
                  onClick={() => setShowDebugPanel(false)}
                  className="p-1 hover:bg-white/10 rounded-lg transition-colors"
                  aria-label="Close debug panel"
                >
                  <RotateCcw className="w-5 h-5 text-white" />
                </button>
              </div>
            </div>

            {/* Device Info */}
            <div className="p-4 space-y-4">
              {/* Device Type */}
              <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                    {deviceType === 'mobile' && <Smartphone className="w-4 h-4 text-white" />}
                    {deviceType === 'tablet' && <Tablet className="w-4 h-4 text-white" />}
                    {deviceType === 'desktop' && <Monitor className="w-4 h-4 text-white" />}
                  </div>
                  <div>
                    <div className="text-white font-medium text-sm">Device Type</div>
                    <div className="text-gray-400 text-xs capitalize">{deviceType}</div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-blue-400 font-medium capitalize">{deviceType}</div>
                </div>
              </div>

              {/* Orientation */}
              <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-teal-600 rounded-lg flex items-center justify-center">
                    <RotateCcw className="w-4 h-4 text-white" />
                  </div>
                  <div>
                    <div className="text-white font-medium text-sm">Orientation</div>
                    <div className="text-gray-400 text-xs capitalize">{orientation}</div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-green-400 font-medium capitalize">{orientation}</div>
                </div>
              </div>

              {/* Touch Support */}
              <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-600 rounded-lg flex items-center justify-center">
                    {touchSupport ? <Hand className="w-4 h-4 text-white" /> : <Mouse className="w-4 h-4 text-white" />}
                  </div>
                  <div>
                    <div className="text-white font-medium text-sm">Input Method</div>
                    <div className="text-gray-400 text-xs">
                      {touchSupport ? 'Touch Enabled' : 'Mouse/Keyboard'}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className={`text-sm font-medium ${touchSupport ? 'text-green-400' : 'text-blue-400'}`}>
                    {touchSupport ? 'Touch' : 'Mouse'}
                  </div>
                </div>
              </div>

              {/* Network Info */}
              <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                    <Wifi className="w-4 h-4 text-white" />
                  </div>
                  <div>
                    <div className="text-white font-medium text-sm">Network</div>
                    <div className="text-gray-400 text-xs">
                      {networkInfo.effectiveType} • {networkInfo.downlink}Mbps
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-purple-400 font-medium">
                    {networkInfo.effectiveType}
                  </div>
                  <div className="text-xs text-gray-400">
                    {networkInfo.rtt}ms RTT
                  </div>
                </div>
              </div>

              {/* Screen Info */}
              <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center">
                    <Monitor className="w-4 h-4 text-white" />
                  </div>
                  <div>
                    <div className="text-white font-medium text-sm">Screen</div>
                    <div className="text-gray-400 text-xs">
                      {window.innerWidth} × {window.innerHeight}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-cyan-400 font-medium">
                    {window.innerWidth}×{window.innerHeight}
                  </div>
                  <div className="text-xs text-gray-400">
                    {window.devicePixelRatio}x DPR
                  </div>
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 p-3 border-t border-blue-400/30">
              <div className="flex items-center justify-between text-xs text-gray-400">
                <span>Real-time monitoring</span>
                <span className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                  Live
                </span>
              </div>
>>>>>>> origin/cursor/website-audit-content-update-and-deployment-5426
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Connection Status */}
      {isMobile && connectionType !== 'unknown' && (
        <div className="fixed top-4 right-4 z-50 flex items-center gap-2 bg-black/80 backdrop-blur-sm border border-white/20 rounded-2xl px-3 py-2">
          {connectionType === '4g' || connectionType === '5g' ? (
            <SignalHigh className="w-4 h-4 text-green-400" />
          ) : connectionType === '3g' ? (
            <Signal className="w-4 h-4 text-yellow-400" />
          ) : (
            <SignalLow className="w-4 h-4 text-red-400" />
          )}
          <span className="text-white text-xs">{connectionType.toUpperCase()}</span>
        </div>
      )}

      {/* Battery Status */}
      {isMobile && batteryLevel !== null && (
        <div className="fixed top-16 right-4 z-50 flex items-center gap-2 bg-black/80 backdrop-blur-sm border border-white/20 rounded-2xl px-3 py-2">
          {isCharging ? (
            <BatteryCharging className="w-4 h-4 text-green-400" />
          ) : (
            <Battery className="w-4 h-4 text-white" />
          )}
          <span className="text-white text-xs">{Math.round(batteryLevel)}%</span>
        </div>
      )}

      {/* Enhanced Mobile Content */}
      <div 
        className={`mobile-optimized ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''} ${isLandscape ? 'landscape' : 'portrait'}`}
        style={{
          '--touch-supported': touchSupported ? '1' : '0',
          '--connection-type': connectionType,
          '--battery-level': batteryLevel || 0,
          '--is-charging': isCharging ? '1' : '0'
        } as React.CSSProperties}
      >
        {/* Apply touch handlers to interactive elements */}
        <div
          onTouchStart={handleTouchStart}
          onTouchEnd={handleTouchEnd}
          className="touch-optimized"
        >
          {children}
        </div>
      </div>

      {/* Mobile Performance Monitor */}
      {isMobile && (
        <div className="fixed bottom-4 left-4 z-50 bg-black/80 backdrop-blur-sm border border-white/20 rounded-2xl px-3 py-2 text-white text-xs">
          <div className="flex items-center gap-2">
            <Zap className="w-3 h-3 text-cyan-400" />
            <span>Mobile Mode</span>
          </div>
          <div className="text-white/60 mt-1">
            {touchSupported ? 'Touch' : 'No Touch'} • {connectionType}
          </div>
        </div>
      )}
    </>
  );
};

export default MobileOptimizer;