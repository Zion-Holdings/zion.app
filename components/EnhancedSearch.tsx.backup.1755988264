<<<<<<< HEAD
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search, X, Filter, TrendingUp, Clock, 
  Star, Zap, Brain, Shield, Rocket, 
  Globe, Cpu, Database, Cloud
} from 'lucide-react';
=======
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, Filter, X, ArrowRight, Star, Brain, Atom, Rocket, Shield, Zap } from 'lucide-react';
import Link from 'next/link';
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-82b7

interface SearchResult {
  id: string;
  title: string;
  description: string;
  category: string;
<<<<<<< HEAD
  url: string;
  relevance: number;
  lastUpdated: string;
  tags: string[];
  type: 'service' | 'page' | 'blog' | 'case-study';
}

interface SearchFilters {
  category: string[];
  type: string[];
  dateRange: 'all' | 'week' | 'month' | 'year';
  relevance: 'all' | 'high' | 'medium' | 'low';
}

interface EnhancedSearchProps {
  placeholder?: string;
  showFilters?: boolean;
  onSearch?: (query: string, filters: SearchFilters) => void;
  onResultClick?: (result: SearchResult) => void;
}

const EnhancedSearch: React.FC<EnhancedSearchProps> = ({
  placeholder = "Search for AI, Quantum, Space Tech solutions...",
  showFilters = true,
  onSearch,
  onResultClick
}) => {
  const [query, setQuery] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [results, setResults] = useState<SearchResult[]>([]);
  const [filters, setFilters] = useState<SearchFilters>({
    category: [],
    type: [],
    dateRange: 'all',
    relevance: 'all'
  });
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [popularSearches, setPopularSearches] = useState<string[]>([]);
  
  const searchInputRef = useRef<HTMLInputElement>(null);
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Mock search results - in real app, this would come from API
  const mockSearchResults: SearchResult[] = [
    {
      id: '1',
      title: 'Quantum AI Brain-Computer Interface',
      description: 'Revolutionary neural interface powered by quantum AI for unprecedented human-computer symbiosis',
      category: 'AI & Neuroscience',
      url: '/quantum-ai-brain-computer-interface',
      relevance: 0.95,
      lastUpdated: '2024-08-23',
      tags: ['AI', 'Quantum', 'Neuroscience', 'Brain-Computer Interface'],
      type: 'service'
    },
    {
      id: '2',
      title: 'Holographic Quantum Workspace 2045',
      description: 'Immersive 3D workspace powered by quantum computing for unprecedented productivity',
      category: 'Quantum & Emerging Tech',
      url: '/holographic-quantum-workspace-2045',
      relevance: 0.92,
      lastUpdated: '2024-08-22',
      tags: ['Quantum', 'Holographic', '3D', 'Productivity'],
      type: 'service'
    },
    {
      id: '3',
      title: 'AI Autonomous Business Operations',
      description: 'Fully autonomous business process automation powered by advanced AI',
      category: 'AI & Automation',
      url: '/ai-autonomous-business-operations',
      relevance: 0.89,
      lastUpdated: '2024-08-21',
      tags: ['AI', 'Automation', 'Business', 'Operations'],
      type: 'service'
    },
    {
      id: '4',
      title: 'Space Resource Intelligence Platform',
      description: 'Advanced AI platform for space resource discovery and optimization',
      category: 'Space Technology',
      url: '/space-resource-intelligence-2040',
      relevance: 0.87,
      lastUpdated: '2024-08-20',
      tags: ['Space', 'AI', 'Resources', 'Intelligence'],
      type: 'service'
    },
    {
      id: '5',
      title: 'Quantum Cybersecurity Platform',
      description: 'Next-generation cybersecurity powered by quantum computing',
      category: 'Cybersecurity',
      url: '/quantum-cybersecurity-platform',
      relevance: 0.85,
      lastUpdated: '2024-08-19',
      tags: ['Quantum', 'Cybersecurity', 'Security', 'Platform'],
      type: 'service'
    }
  ];

  // Popular searches
  const popularSearchesData = [
    'AI automation', 'Quantum computing', 'Space technology', 
    'Cybersecurity', 'Machine learning', 'Neural networks',
    'Autonomous systems', 'Digital transformation', 'Cloud solutions'
  ];

  // Categories
  const categories = [
    { id: 'ai', name: 'AI & Machine Learning', icon: <Brain className="w-4 h-4" /> },
    { id: 'quantum', name: 'Quantum Computing', icon: <Zap className="w-4 h-4" /> },
    { id: 'space', name: 'Space Technology', icon: <Rocket className="w-4 h-4" /> },
    { id: 'cybersecurity', name: 'Cybersecurity', icon: <Shield className="w-4 h-4" /> },
    { id: 'cloud', name: 'Cloud Solutions', icon: <Cloud className="w-4 h-4" /> },
    { id: 'automation', name: 'Automation', icon: <Cpu className="w-4 h-4" /> },
    { id: 'data', name: 'Data & Analytics', icon: <Database className="w-4 h-4" /> },
    { id: 'blockchain', name: 'Blockchain', icon: <Globe className="w-4 h-4" /> }
  ];

  // Types
  const types = [
    { id: 'service', name: 'Services', icon: <Star className="w-4 h-4" /> },
    { id: 'page', name: 'Pages', icon: <Globe className="w-4 h-4" /> },
    { id: 'blog', name: 'Blog Posts', icon: <Clock className="w-4 h-4" /> },
    { id: 'case-study', name: 'Case Studies', icon: <TrendingUp className="w-4 h-4" /> }
  ];

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('recent-searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        // Failed to load recent searches
      }
    }
    
    setPopularSearches(popularSearchesData);
  }, []);

  // Handle search input changes
  const handleSearchChange = useCallback((value: string) => {
    setQuery(value);
    
    // Clear previous timeout
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    
    // Debounce search
    if (value.trim()) {
      searchTimeoutRef.current = setTimeout(() => {
        performSearch(value);
      }, 300);
    } else {
      setResults([]);
      setIsOpen(false);
    }
  }, []);
=======
  tags: string[];
  url: string;
  relevance: number;
  icon: React.ReactNode;
}

interface SearchFilter {
  category: string;
  priceRange: string;
  technology: string;
  complexity: string;
}

const EnhancedSearch: React.FC = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<SearchResult[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState<SearchFilter>({
    category: 'all',
    priceRange: 'all',
    technology: 'all',
    complexity: 'all'
  });
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const searchRef = useRef<HTMLDivElement>(null);

  // Mock search results - in a real app, this would come from an API
  const mockResults: SearchResult[] = [
    {
      id: 'ai-bi-platform',
      title: 'AI Business Intelligence Platform',
      description: 'Transform data into actionable insights with advanced AI analytics',
      category: 'AI & Machine Learning',
      tags: ['analytics', 'business intelligence', 'machine learning', 'data visualization'],
      url: '/ai-business-intelligence-platform',
      relevance: 0.95,
      icon: <Brain className="w-5 h-5" />
    },
    {
      id: 'quantum-secure-cloud',
      title: 'Quantum-Secure Cloud Infrastructure',
      description: 'Future-proof security with quantum-resistant encryption',
      category: 'Quantum Computing',
      tags: ['quantum', 'security', 'cloud', 'encryption'],
      url: '/quantum-secure-cloud-infrastructure',
      relevance: 0.92,
      icon: <Atom className="w-5 h-5" />
    },
    {
      id: 'metaverse-platform',
      title: 'Metaverse Development Platform',
      description: 'Build immersive virtual worlds and experiences',
      category: 'Emerging Technologies',
      tags: ['metaverse', 'VR', 'AR', '3D', 'virtual reality'],
      url: '/metaverse-development-platform',
      relevance: 0.88,
      icon: <Rocket className="w-5 h-5" />
    },
    {
      id: 'enterprise-security',
      title: 'Enterprise Security Suite',
      description: 'Comprehensive security solutions for enterprise environments',
      category: 'Enterprise Solutions',
      tags: ['security', 'enterprise', 'compliance', 'threat detection'],
      url: '/enterprise-security-suite',
      relevance: 0.85,
      icon: <Shield className="w-5 h-5" />
    },
    {
      id: 'micro-saas-platform',
      title: 'Micro SAAS Platform',
      description: 'Scalable software-as-a-service solutions for modern businesses',
      category: 'Micro SAAS',
      tags: ['saas', 'software', 'subscription', 'business tools'],
      url: '/micro-saas-platform',
      relevance: 0.82,
      icon: <Zap className="w-5 h-5" />
    }
  ];

  // AI-powered search suggestions
  const aiSuggestions = [
    'AI automation for business processes',
    'Quantum computing solutions',
    'Cloud security and compliance',
    'Machine learning platforms',
    'Blockchain enterprise solutions',
    'IoT and edge computing',
    'Cybersecurity automation',
    'Data analytics and visualization'
  ];

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
        setShowSuggestions(false);
      }
    };
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-82b7

  // Perform search
  const performSearch = useCallback(async (searchQuery: string) => {
    if (!searchQuery.trim()) return;
    
    setIsSearching(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Filter results based on query and filters
      let filteredResults = mockSearchResults.filter(result => {
        const matchesQuery = result.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           result.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           result.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
        
        const matchesCategory = filters.category.length === 0 || 
                               filters.category.some(cat => result.category.toLowerCase().includes(cat));
        
        const matchesType = filters.type.length === 0 || 
                           filters.type.includes(result.type);
        
        return matchesQuery && matchesCategory && matchesType;
      });
      
      // Sort by relevance
      filteredResults.sort((a, b) => b.relevance - a.relevance);
      
      setResults(filteredResults);
      setIsOpen(true);
      
      // Add to recent searches
      if (!recentSearches.includes(searchQuery)) {
        const newRecentSearches = [searchQuery, ...recentSearches.slice(0, 4)];
        setRecentSearches(newRecentSearches);
        localStorage.setItem('recent-searches', JSON.stringify(newRecentSearches));
      }
      
      // Call onSearch callback
      onSearch?.(searchQuery, filters);
      
    } catch (error) {
      // Search failed
      setResults([]);
    } finally {
      setIsSearching(false);
    }
  }, [filters, recentSearches, onSearch]);

  // Handle result click
  const handleResultClick = useCallback((result: SearchResult) => {
    // Add to search history
    // setSearchHistory(prev => [result, ...prev.slice(0, 9)]); // This line was removed
    
    // Call onResultClick callback
    onResultClick?.(result);
    
    // Close search
    setIsOpen(false);
    setQuery('');
  }, [onResultClick]);

  // Handle filter change
  const handleFilterChange = useCallback((filterType: keyof SearchFilters, value: string | boolean | string[]) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value
    }));
    
    // Re-search if we have a query
    if (query.trim()) {
      performSearch(query);
    }
  }, [query, performSearch]);

  // Handle popular search click
  const handlePopularSearchClick = useCallback((popularSearch: string) => {
    setQuery(popularSearch);
    performSearch(popularSearch);
  }, [performSearch]);

  // Handle recent search click
  const handleRecentSearchClick = useCallback((recentSearch: string) => {
    setQuery(recentSearch);
    performSearch(recentSearch);
  }, [performSearch]);

  // Clear search
  const clearSearch = useCallback(() => {
    setQuery('');
    setResults([]);
    setIsOpen(false);
    searchInputRef.current?.focus();
  }, []);

  // Close search on escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        setIsOpen(false);
      }
    };
    
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, []);

  // Close search when clicking outside
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (searchInputRef.current && !searchInputRef.current.contains(e.target as Node)) {
        setIsOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

<<<<<<< HEAD
  return (
    <div className="relative w-full max-w-2xl mx-auto">
      {/* Search Input */}
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search className="h-5 w-5 text-gray-400" />
        </div>
        
        <input
          ref={searchInputRef}
          type="text"
          value={query}
          onChange={(e) => handleSearchChange(e.target.value)}
          onFocus={() => query.trim() && setIsOpen(true)}
          placeholder={placeholder}
          className="block w-full pl-10 pr-12 py-3 border border-gray-300 rounded-2xl leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-all duration-200"
        />
        
        {query && (
          <button
            onClick={clearSearch}
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
          >
            <X className="h-5 w-5 text-gray-400 hover:text-gray-600 transition-colors" />
          </button>
        )}
      </div>

      {/* Search Results Dropdown */}
      <AnimatePresence>
        {showResults && (
          <motion.div
            initial={{ opacity: 0, y: -10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -10, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className="absolute z-50 w-full mt-2 bg-white rounded-2xl shadow-2xl border border-gray-200 max-h-96 overflow-hidden"
          >
            {/* Search Results */}
            {results.length > 0 ? (
              <div className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-gray-900">
                    {results.length} result{results.length !== 1 ? 's' : ''} found
                  </h3>
                  {showFilters && (
                    <button className="text-sm text-cyan-600 hover:text-cyan-700 flex items-center space-x-1">
                      <Filter className="w-4 h-4" />
                      <span>Filters</span>
                    </button>
                  )}
                </div>
                
                <div className="space-y-2">
                  {results.map((result) => (
                    <motion.div
                      key={result.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors border border-transparent hover:border-gray-200"
                      onClick={() => handleResultClick(result)}
                    >
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0 mt-1">
                          {result.type === 'service' && <Star className="w-4 h-4 text-cyan-500" />}
                          {result.type === 'page' && <Globe className="w-4 h-4 text-blue-500" />}
                          {result.type === 'blog' && <Clock className="w-4 h-4 text-green-500" />}
                          {result.type === 'case-study' && <TrendingUp className="w-4 h-4 text-purple-500" />}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <h4 className="text-sm font-medium text-gray-900 truncate">
                            {result.title}
                          </h4>
                          <p className="text-sm text-gray-600 mt-1 line-clamp-2">
                            {result.description}
                          </p>
                          <div className="flex items-center space-x-2 mt-2">
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-cyan-100 text-cyan-800">
                              {result.category}
                            </span>
                            <span className="text-xs text-gray-500">
                              {result.lastUpdated}
                            </span>
                          </div>
                        </div>
                        
                        <div className="flex-shrink-0">
                          <div className="text-xs text-gray-500">
                            {Math.round(result.relevance * 100)}%
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            ) : query.trim() && !isSearching ? (
              /* No Results */
              <div className="p-8 text-center">
                <Search className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No results found</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Try adjusting your search terms or filters
                </p>
              </div>
            ) : (
              /* Search Suggestions */
              <div className="p-4">
                {/* Recent Searches */}
                {recentSearches.length > 0 && (
                  <div className="mb-4">
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Recent Searches</h3>
                    <div className="flex flex-wrap gap-2">
                      {recentSearches.map((search, index) => (
                        <button
                          key={index}
                          onClick={() => handleRecentSearchClick(search)}
                          className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
                        >
                          <Clock className="w-3 h-3 mr-1" />
                          {search}
                        </button>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* Popular Searches */}
                <div>
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Popular Searches</h3>
                  <div className="flex flex-wrap gap-2">
                    {popularSearches.map((search, index) => (
                      <button
                        key={index}
                        onClick={() => handlePopularSearchClick(search)}
                        className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-cyan-100 text-cyan-700 hover:bg-cyan-200 transition-colors"
                      >
                        <TrendingUp className="w-3 h-3 mr-1" />
                        {search}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}
            
            {/* Loading State */}
            {isSearching && (
              <div className="p-4 text-center">
                <div className="inline-flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-cyan-500"></div>
                  <span className="text-sm text-gray-500">Searching...</span>
                </div>
              </div>
            )}
=======
  useEffect(() => {
    if (query.length > 2) {
      // Simulate AI-powered search
      setIsSearching(true);
      const timer = setTimeout(() => {
        const filtered = mockResults.filter(result => 
          result.title.toLowerCase().includes(query.toLowerCase()) ||
          result.description.toLowerCase().includes(query.toLowerCase()) ||
          result.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))
        );
        
        // Apply filters
        const filteredResults = filtered.filter(result => {
          if (filters.category !== 'all' && result.category !== filters.category) return false;
          if (filters.technology !== 'all' && !result.tags.includes(filters.technology)) return false;
          return true;
        });

        setResults(filteredResults);
        setIsSearching(false);
      }, 300);

      return () => clearTimeout(timer);
    } else {
      setResults([]);
    }
  }, [query, filters]);

  useEffect(() => {
    if (query.length > 2) {
      const filtered = aiSuggestions.filter(suggestion =>
        suggestion.toLowerCase().includes(query.toLowerCase())
      );
      setSuggestions(filtered.slice(0, 5));
      setShowSuggestions(true);
    } else {
      setSuggestions([]);
      setShowSuggestions(false);
    }
  }, [query]);

  const handleSearch = (searchQuery: string) => {
    setQuery(searchQuery);
    setShowSuggestions(false);
  };

  const clearSearch = () => {
    setQuery('');
    setResults([]);
    setShowSuggestions(false);
  };

  const updateFilter = (key: keyof SearchFilter, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  return (
    <div className="relative w-full max-w-4xl mx-auto" ref={searchRef}>
      {/* Search Input */}
      <div className="relative">
        <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
        <input
          type="text"
          placeholder="Search for AI services, quantum solutions, emerging tech..."
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="w-full px-12 py-4 bg-white/10 backdrop-blur-md border border-cyan-400/30 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/50 focus:border-cyan-400/50 transition-all duration-300"
          onFocus={() => query.length > 2 && setShowSuggestions(true)}
        />
        
        {/* Filter Toggle */}
        <button
          onClick={() => setShowFilters(!showFilters)}
          className={`absolute right-20 top-1/2 transform -translate-y-1/2 p-2 rounded-lg transition-all duration-300 ${
            showFilters ? 'bg-cyan-500 text-white' : 'text-gray-400 hover:text-cyan-400'
          }`}
          aria-label="Toggle search filters"
        >
          <Filter className="w-4 h-4" />
        </button>

        {/* Clear Button */}
        {query && (
          <button
            onClick={clearSearch}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 text-gray-400 hover:text-white transition-colors"
            aria-label="Clear search"
          >
            <X className="w-4 h-4" />
          </button>
        )}
      </div>

      {/* AI Suggestions */}
      <AnimatePresence>
        {showSuggestions && suggestions.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full left-0 right-0 mt-2 bg-gray-900/95 backdrop-blur-md border border-cyan-400/30 rounded-xl shadow-2xl z-50"
          >
            <div className="p-4">
              <div className="flex items-center space-x-2 mb-3">
                <Brain className="w-4 h-4 text-cyan-400" />
                <span className="text-sm text-cyan-400 font-medium">AI Suggestions</span>
              </div>
              <div className="space-y-2">
                {suggestions.map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => handleSearch(suggestion)}
                    className="w-full text-left p-3 rounded-lg hover:bg-white/5 transition-colors text-gray-300 hover:text-white"
                  >
                    <div className="flex items-center justify-between">
                      <span className="text-sm">{suggestion}</span>
                      <ArrowRight className="w-4 h-4 text-cyan-400" />
                    </div>
                  </button>
                ))}
              </div>
            </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-82b7
          </motion.div>
        )}
      </AnimatePresence>

<<<<<<< HEAD
      {/* Filters Panel */}
      {showFilters && (
        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="absolute z-40 w-full mt-2 bg-white rounded-2xl shadow-lg border border-gray-200 p-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Categories */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Categories</h4>
                  <div className="space-y-2">
                    {categories.map((category) => (
                      <label key={category.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={filters.category.includes(category.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleFilterChange('category', [...filters.category, category.id]);
                            } else {
                              handleFilterChange('category', filters.category.filter(c => c !== category.id));
                            }
                          }}
                          className="rounded border-gray-300 text-cyan-600 focus:ring-cyan-500"
                        />
                        <span className="text-sm text-gray-700 flex items-center space-x-1">
                          {category.icon}
                          <span>{category.name}</span>
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Types */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Types</h4>
                  <div className="space-y-2">
                    {types.map((type) => (
                      <label key={type.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={filters.type.includes(type.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleFilterChange('type', [...filters.type, type.id]);
                            } else {
                              handleFilterChange('type', filters.type.filter(t => t !== type.id));
                            }
                          }}
                          className="rounded border-gray-300 text-cyan-600 focus:ring-cyan-500"
                        />
                        <span className="text-sm text-gray-700 flex items-center space-x-1">
                          {type.icon}
                          <span>{type.name}</span>
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Date Range */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Date Range</h4>
                  <select
                    value={filters.dateRange}
                    onChange={(e) => handleFilterChange('dateRange', e.target.value)}
                    className="w-full rounded-md border-gray-300 text-sm focus:ring-cyan-500 focus:border-cyan-500"
                  >
                    <option value="all">All Time</option>
                    <option value="week">Past Week</option>
                    <option value="month">Past Month</option>
                    <option value="year">Past Year</option>
                  </select>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
=======
      {/* Advanced Filters */}
      <AnimatePresence>
        {showFilters && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="mt-4 bg-gray-900/50 backdrop-blur-md border border-cyan-400/20 rounded-xl p-4"
          >
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Category Filter */}
              <div>
                <label className="block text-sm font-medium text-cyan-400 mb-2">Category</label>
                <select
                  value={filters.category}
                  onChange={(e) => updateFilter('category', e.target.value)}
                  className="w-full px-3 py-2 bg-white/10 border border-cyan-400/30 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-cyan-400/50"
                >
                  <option value="all">All Categories</option>
                  <option value="AI & Machine Learning">AI & Machine Learning</option>
                  <option value="Quantum Computing">Quantum Computing</option>
                  <option value="Emerging Technologies">Emerging Technologies</option>
                  <option value="Enterprise Solutions">Enterprise Solutions</option>
                  <option value="Micro SAAS">Micro SAAS</option>
                </select>
              </div>

              {/* Technology Filter */}
              <div>
                <label className="block text-sm font-medium text-cyan-400 mb-2">Technology</label>
                <select
                  value={filters.technology}
                  onChange={(e) => updateFilter('technology', e.target.value)}
                  className="w-full px-3 py-2 bg-white/10 border border-cyan-400/30 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-cyan-400/50"
                >
                  <option value="all">All Technologies</option>
                  <option value="ai">AI & ML</option>
                  <option value="quantum">Quantum</option>
                  <option value="blockchain">Blockchain</option>
                  <option value="iot">IoT</option>
                  <option value="cybersecurity">Cybersecurity</option>
                </select>
              </div>

              {/* Price Range Filter */}
              <div>
                <label className="block text-sm font-medium text-cyan-400 mb-2">Price Range</label>
                <select
                  value={filters.priceRange}
                  onChange={(e) => updateFilter('priceRange', e.target.value)}
                  className="w-full px-3 py-2 bg-white/10 border border-cyan-400/30 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-cyan-400/50"
                >
                  <option value="all">All Prices</option>
                  <option value="free">Free</option>
                  <option value="low">$1 - $100</option>
                  <option value="medium">$100 - $1000</option>
                  <option value="high">$1000+</option>
                </select>
              </div>

              {/* Complexity Filter */}
              <div>
                <label className="block text-sm font-medium text-cyan-400 mb-2">Complexity</label>
                <select
                  value={filters.complexity}
                  onChange={(e) => updateFilter('complexity', e.target.value)}
                  className="w-full px-3 py-2 bg-white/10 border border-cyan-400/30 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-cyan-400/50"
                >
                  <option value="all">All Levels</option>
                  <option value="beginner">Beginner</option>
                  <option value="intermediate">Intermediate</option>
                  <option value="advanced">Advanced</option>
                  <option value="enterprise">Enterprise</option>
                </select>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Search Results */}
      <AnimatePresence>
        {results.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="mt-6 bg-gray-900/50 backdrop-blur-md border border-cyan-400/20 rounded-xl p-4"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">
                Search Results ({results.length})
              </h3>
              {isSearching && (
                <div className="flex items-center space-x-2 text-cyan-400">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-cyan-400"></div>
                  <span className="text-sm">Searching...</span>
                </div>
              )}
            </div>

            <div className="space-y-3">
              {results.map((result, index) => (
                <motion.div
                  key={result.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="p-4 bg-white/5 rounded-lg border border-cyan-400/20 hover:border-cyan-400/40 transition-all duration-300"
                >
                  <Link href={result.url}>
                    <div className="flex items-start space-x-3 cursor-pointer group">
                      <div className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-cyan-500/20 to-purple-500/20 rounded-lg flex items-center justify-center text-cyan-400 group-hover:text-cyan-300 transition-colors">
                        {result.icon}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-2 mb-1">
                          <h4 className="text-white font-medium group-hover:text-cyan-300 transition-colors">
                            {result.title}
                          </h4>
                          <span className="px-2 py-1 bg-cyan-500/20 text-cyan-400 text-xs rounded-full">
                            {result.category}
                          </span>
                          {result.relevance > 0.9 && (
                            <Star className="w-4 h-4 text-yellow-400 fill-current" />
                          )}
                        </div>
                        <p className="text-gray-300 text-sm mb-2">{result.description}</p>
                        <div className="flex flex-wrap gap-2">
                          {result.tags.slice(0, 3).map((tag, tagIndex) => (
                            <span
                              key={tagIndex}
                              className="px-2 py-1 bg-white/10 text-gray-400 text-xs rounded-md"
                            >
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                      <ArrowRight className="w-5 h-5 text-cyan-400 group-hover:translate-x-1 transition-transform" />
                    </div>
                  </Link>
                </motion.div>
              ))}
            </div>

            {results.length > 0 && (
              <div className="mt-4 pt-4 border-t border-cyan-400/20 text-center">
                <Link href="/services">
                  <button className="px-6 py-2 border border-cyan-400 text-cyan-400 rounded-lg hover:bg-cyan-400 hover:text-black transition-all duration-300">
                    View All Services
                  </button>
                </Link>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>

      {/* No Results */}
      {query.length > 2 && results.length === 0 && !isSearching && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mt-6 text-center py-8"
        >
          <div className="text-gray-400 mb-4">
            <Search className="w-12 h-12 mx-auto mb-2 opacity-50" />
            <p className="text-lg">No results found for "{query}"</p>
            <p className="text-sm">Try adjusting your search terms or filters</p>
          </div>
          <div className="flex flex-wrap justify-center gap-2">
            <button
              onClick={() => handleSearch('AI services')}
              className="px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-sm hover:bg-cyan-500/30 transition-colors"
            >
              AI services
            </button>
            <button
              onClick={() => handleSearch('quantum computing')}
              className="px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-sm hover:bg-cyan-500/30 transition-colors"
            >
              quantum computing
            </button>
            <button
              onClick={() => handleSearch('enterprise solutions')}
              className="px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-sm hover:bg-cyan-500/30 transition-colors"
            >
              enterprise solutions
            </button>
          </div>
        </motion.div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-82b7
      )}
    </div>
  );
};

export default EnhancedSearch;