<<<<<<< HEAD
import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Volume2, VolumeX, Eye, EyeOff, Keyboard, MousePointer } from 'lucide-react';

const AccessibilityEnhancer: React.FC = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [highContrast, setHighContrast] = useState(false);
  const [reducedMotion, setReducedMotion] = useState(false);
  const [fontSize, setFontSize] = useState(16);
  const [showAccessibilityMenu, setShowAccessibilityMenu] = useState(false);

  useEffect(() => {
    // Check user preferences
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const prefersHighContrast = window.matchMedia('(prefers-contrast: high)').matches;
    
    setReducedMotion(prefersReducedMotion);
    setHighContrast(prefersHighContrast);

    // Apply accessibility settings
    if (highContrast) {
      document.documentElement.classList.add('high-contrast');
    }
    if (reducedMotion) {
      document.documentElement.classList.add('reduced-motion');
    }

    // Show accessibility button after a delay
    const timer = setTimeout(() => setIsVisible(true), 3000);
    return () => clearTimeout(timer);
  }, [highContrast, reducedMotion]);

  useEffect(() => {
    // Apply font size
    document.documentElement.style.fontSize = `${fontSize}px`;
  }, [fontSize]);

  const toggleMute = () => {
    setIsMuted(!isMuted);
    // Implement actual audio muting logic here
  };

  const toggleHighContrast = () => {
    const newValue = !highContrast;
    setHighContrast(newValue);
    document.documentElement.classList.toggle('high-contrast', newValue);
  };

  const toggleReducedMotion = () => {
    const newValue = !reducedMotion;
    setReducedMotion(newValue);
    document.documentElement.classList.toggle('reduced-motion', newValue);
  };

  const increaseFontSize = () => {
    setFontSize(prev => Math.min(prev + 2, 24));
  };

  const decreaseFontSize = () => {
    setFontSize(prev => Math.max(prev - 2, 12));
  };

  const resetFontSize = () => {
    setFontSize(16);
  };

  if (!isVisible) return null;

  return (
    <>
      {/* Accessibility Button */}
      <motion.button
        className="fixed bottom-6 left-6 z-50 w-14 h-14 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-2xl hover:shadow-[0_0_30px_rgba(6,182,212,0.5)] transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-500/50"
        onClick={() => setShowAccessibilityMenu(!showAccessibilityMenu)}
        aria-label="Accessibility options"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Eye className="w-6 h-6 mx-auto" />
      </motion.button>

      {/* Accessibility Menu */}
      <AnimatePresence>
        {showAccessibilityMenu && (
          <motion.div
            className="fixed bottom-24 left-6 z-50 bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl p-4 shadow-2xl min-w-[280px]"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.3 }}
          >
            <h3 className="text-white font-bold mb-4 text-center">Accessibility Options</h3>
            
            <div className="space-y-4">
              {/* Audio Controls */}
              <div className="flex items-center justify-between">
                <span className="text-gray-300 text-sm">Audio</span>
                <button
                  onClick={toggleMute}
                  className={`p-2 rounded-lg transition-colors duration-200 ${
                    isMuted ? 'bg-red-500/20 text-red-400' : 'bg-green-500/20 text-green-400'
                  }`}
                  aria-label={isMuted ? 'Unmute audio' : 'Mute audio'}
                >
                  {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
                </button>
              </div>

              {/* High Contrast */}
              <div className="flex items-center justify-between">
                <span className="text-gray-300 text-sm">High Contrast</span>
                <button
                  onClick={toggleHighContrast}
                  className={`p-2 rounded-lg transition-colors duration-200 ${
                    highContrast ? 'bg-blue-500/20 text-blue-400' : 'bg-gray-500/20 text-gray-400'
                  }`}
                  aria-label="Toggle high contrast"
                >
                  <Eye className="w-4 h-4" />
                </button>
              </div>

              {/* Reduced Motion */}
              <div className="flex items-center justify-between">
                <span className="text-gray-300 text-sm">Reduced Motion</span>
                <button
                  onClick={toggleReducedMotion}
                  className={`p-2 rounded-lg transition-colors duration-200 ${
                    reducedMotion ? 'bg-purple-500/20 text-purple-400' : 'bg-gray-500/20 text-gray-400'
                  }`}
                  aria-label="Toggle reduced motion"
                >
                  <MousePointer className="w-4 h-4" />
                </button>
              </div>

              {/* Font Size Controls */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">Font Size</span>
                  <span className="text-cyan-400 text-sm font-mono">{fontSize}px</span>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={decreaseFontSize}
                    className="flex-1 py-2 px-3 bg-gray-500/20 text-gray-300 rounded-lg hover:bg-gray-500/30 transition-colors duration-200 text-sm"
                    aria-label="Decrease font size"
                  >
                    A-
                  </button>
                  <button
                    onClick={resetFontSize}
                    className="flex-1 py-2 px-3 bg-gray-500/20 text-gray-300 rounded-lg hover:bg-gray-500/30 transition-colors duration-200 text-sm"
                    aria-label="Reset font size"
                  >
                    Reset
                  </button>
                  <button
                    onClick={increaseFontSize}
                    className="flex-1 py-2 px-3 bg-gray-500/20 text-gray-300 rounded-lg hover:bg-gray-500/30 transition-colors duration-200 text-sm"
                    aria-label="Increase font size"
                  >
                    A+
                  </button>
                </div>
              </div>

              {/* Keyboard Navigation Info */}
              <div className="pt-2 border-t border-white/20">
                <div className="text-center">
                  <Keyboard className="w-4 h-4 mx-auto text-gray-400 mb-1" />
                  <p className="text-xs text-gray-400">
                    Use Tab to navigate, Enter/Space to activate
                  </p>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* High Contrast Styles */}
      <style jsx global>{`
        .high-contrast {
          --tw-text-opacity: 1;
          --tw-bg-opacity: 1;
        }
        
        .high-contrast * {
          border-color: white !important;
          color: white !important;
          background-color: black !important;
        }
        
        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
        
        .reduced-motion .animate-pulse {
          animation: none !important;
        }
      `}</style>
    </>
  );
};

// Keyboard Navigation Hook
export const useKeyboardNavigation = (items: string[], onSelect: (item: string) => void) => {
  const [selectedIndex, setSelectedIndex] = useState(0);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          setSelectedIndex(prev => (prev + 1) % items.length);
          break;
        case 'ArrowUp':
          event.preventDefault();
          setSelectedIndex(prev => (prev - 1 + items.length) % items.length);
          break;
        case 'Enter':
        case ' ':
          event.preventDefault();
          onSelect(items[selectedIndex]);
          break;
        case 'Home':
          event.preventDefault();
          setSelectedIndex(0);
          break;
        case 'End':
          event.preventDefault();
          setSelectedIndex(items.length - 1);
          break;
=======
  const setupKeyboardNavigation = useCallback(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (!settings.keyboardNavigation) return;
      
      // Skip to main content
      if (event.key === 'Tab' && event.altKey) {
        event.preventDefault();
        const mainContent = document.querySelector('main') || document.querySelector('#main-content');
        if (mainContent) {
          (mainContent as HTMLElement).focus();
          announceToScreenReader('Skipped to main content');
        }
      }
      
      // Toggle accessibility panel
      if (event.key === 'Escape' && isExpanded) {
        setIsExpanded(false);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [settings.keyboardNavigation, isExpanded]);

  const setupFocusIndicators = useCallback(() => {
    const style = document.createElement('style');
    style.textContent = `
      .focus-visible *:focus {
        outline: 3px solid #06b6d4 !important;
        outline-offset: 2px !important;
        border-radius: 4px !important;
      }
      
      .high-contrast {
        --text-primary: #ffffff !important;
        --text-secondary: #e5e7eb !important;
        --bg-primary: #000000 !important;
        --bg-secondary: #1f2937 !important;
        --accent: #ffff00 !important;
      }
      
      .large-text {
        font-size: 1.2em !important;
      }
      
      .large-text h1 { font-size: 2.5em !important; }
      .large-text h2 { font-size: 2em !important; }
      .large-text h3 { font-size: 1.75em !important; }
      .large-text p { font-size: 1.3em !important; }
      
      .reduced-motion * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    `;
    document.head.appendChild(style);
  }, []);

  const announceToScreenReader = useCallback((message: string) => {
    if (!settings.screenReader) return;
    
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    
    document.body.appendChild(announcement);
    
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
    
    // Add to announcements list
    setAnnouncements(prev => [...prev.slice(-4), message]);
  }, [settings.screenReader]);

  const toggleFeature = useCallback((feature: keyof AccessibilitySettings) => {
    const newValue = !settings[feature];
    saveAccessibilitySettings({ [feature]: newValue });
    
    const featureNames = {
      highContrast: 'High contrast',
      largeText: 'Large text',
      reducedMotion: 'Reduced motion',
      screenReader: 'Screen reader',
      keyboardNavigation: 'Keyboard navigation',
      focusIndicator: 'Focus indicators'
    };
    
    announceToScreenReader(
      `${featureNames[feature]} ${newValue ? 'enabled' : 'disabled'}`
    );
  }, [settings, saveAccessibilitySettings, announceToScreenReader]);

  const accessibilityFeatures: AccessibilityFeature[] = [
    {
      id: 'highContrast',
      name: 'High Contrast',
      description: 'Increase contrast for better visibility',
      icon: <Contrast className="w-5 h-5" />,
      enabled: settings.highContrast,
      toggle: () => toggleFeature('highContrast')
    },
    {
      id: 'largeText',
      name: 'Large Text',
      description: 'Increase text size for better readability',
      icon: <Type className="w-5 h-5" />,
      enabled: settings.largeText,
      toggle: () => toggleFeature('largeText')
    },
    {
      id: 'reducedMotion',
      name: 'Reduced Motion',
      description: 'Reduce animations and transitions',
      icon: <Eye className="w-5 h-5" />,
      enabled: settings.reducedMotion,
      toggle: () => toggleFeature('reducedMotion')
    },
    {
      id: 'screenReader',
      name: 'Screen Reader',
      description: 'Enable screen reader announcements',
      icon: <Volume2 className="w-5 h-5" />,
      enabled: settings.screenReader,
      toggle: () => toggleFeature('screenReader')
    },
    {
      id: 'keyboardNavigation',
      name: 'Keyboard Navigation',
      description: 'Enhanced keyboard navigation support',
      icon: <Keyboard className="w-5 h-5" />,
      enabled: settings.keyboardNavigation,
      toggle: () => toggleFeature('keyboardNavigation')
    },
    {
      id: 'focusIndicator',
      name: 'Focus Indicators',
      description: 'Show focus indicators for keyboard users',
      icon: <MousePointer className="w-5 h-5" />,
      enabled: settings.focusIndicator,
      toggle: () => toggleFeature('focusIndicator')
    }
  ];

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, scale: 0.8, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.8, y: 20 }}
          className="fixed bottom-6 left-6 z-50"
        >
          {/* Accessibility Button */}
          <motion.button
            onClick={() => setIsExpanded(!isExpanded)}
            className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110"
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.95 }}
            aria-label="Accessibility settings"
            aria-expanded={isExpanded}
            aria-controls="accessibility-panel"
          >
            <Accessibility className="w-6 h-6" />
          </motion.button>

          {/* Expanded Accessibility Panel */}
          <AnimatePresence>
            {isExpanded && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8, y: 10 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.8, y: 10 }}
                className="absolute bottom-16 left-0 w-96 bg-gray-900 border border-gray-700 rounded-xl shadow-2xl overflow-hidden"
                id="accessibility-panel"
                role="dialog"
                aria-labelledby="accessibility-title"
                aria-describedby="accessibility-description"
              >
                {/* Header */}
                <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <Accessibility className="w-5 h-5 text-white" />
                      <h3 id="accessibility-title" className="text-white font-semibold">
                        Accessibility Settings
                      </h3>
                    </div>
                    <button
                      onClick={() => setIsExpanded(false)}
                      className="text-white hover:text-gray-200 transition-colors"
                      aria-label="Close accessibility panel"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                  <p id="accessibility-description" className="text-sm text-purple-100 mt-1">
                    Customize your experience for better accessibility
                  </p>
                </div>

                {/* Accessibility Features */}
                <div className="p-4 space-y-4 max-h-96 overflow-y-auto">
                  {accessibilityFeatures.map((feature) => (
                    <motion.div
                      key={feature.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="bg-gray-800 p-3 rounded-lg border border-gray-700 hover:border-purple-500 transition-colors"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="text-purple-400">
                            {feature.icon}
                          </div>
                          <div>
                            <div className="text-sm font-medium text-white">
                              {feature.name}
                            </div>
                            <div className="text-xs text-gray-400">
                              {feature.description}
                            </div>
                          </div>
                        </div>
                        <button
                          onClick={feature.toggle}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 ${
                            feature.enabled ? 'bg-purple-600' : 'bg-gray-600'
                          }`}
                          role="switch"
                          aria-checked={feature.enabled}
                          aria-label={`Toggle ${feature.name}`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                              feature.enabled ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      </div>
                    </motion.div>
                  ))}

                  {/* Keyboard Shortcuts */}
                  <div className="bg-gray-800 p-3 rounded-lg border border-gray-700">
                    <h4 className="text-sm font-medium text-white mb-2">Keyboard Shortcuts</h4>
                    <div className="space-y-1 text-xs text-gray-400">
                      <div>• <kbd className="px-1 py-0.5 bg-gray-700 rounded text-xs">Alt + Tab</kbd> Skip to main content</div>
                      <div>• <kbd className="px-1 py-0.5 bg-gray-700 rounded text-xs">Escape</kbd> Close panels</div>
                      <div>• <kbd className="px-1 py-0.5 bg-gray-700 rounded text-xs">Tab</kbd> Navigate elements</div>
                    </div>
                  </div>

                  {/* Recent Announcements */}
                  {announcements.length > 0 && (
                    <div className="bg-gray-800 p-3 rounded-lg border border-gray-700">
                      <h4 className="text-sm font-medium text-white mb-2">Recent Updates</h4>
                      <div className="space-y-1">
                        {announcements.map((announcement, index) => (
                          <div key={index} className="text-xs text-gray-400 flex items-center space-x-2">
                            <CheckCircle className="w-3 h-3 text-green-400" />
                            <span>{announcement}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      )}
    </AnimatePresence>
=======
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Eye, EyeOff, Volume2, VolumeX, Type, 
  Contrast, ZoomIn, ZoomOut, RotateCcw,
  Settings, X, Accessibility, Sun, Moon,
  Highlighter, TextCursor, AlignJustify
} from 'lucide-react';

interface AccessibilitySettings {
  highContrast: boolean;
  largeText: boolean;
  reducedMotion: boolean;
  highlighter: boolean;
  fontSize: number;
  lineSpacing: number;
  colorBlindMode: 'none' | 'protanopia' | 'deuteranopia' | 'tritanopia';
}

interface AccessibilityEnhancerProps {
  children: React.ReactNode;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ children }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isVisible, setIsVisible] = useState(false);
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    largeText: false,
    reducedMotion: false,
    highlighter: false,
    fontSize: 16,
    lineSpacing: 1.5,
    colorBlindMode: 'none'
  });
  const [isReading, setIsReading] = useState(false);
  const [currentText, setCurrentText] = useState('');
  const [speechRate, setSpeechRate] = useState(1);
  const settingsRef = useRef<HTMLDivElement>(null);

  // Load settings from localStorage on mount
  useEffect(() => {
    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
        console.error('Failed to parse accessibility settings:', error);
      }
    }
  }, []);

  // Save settings to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('accessibility-settings', JSON.stringify(settings));
  }, [settings]);

  // Apply accessibility settings to the document
  useEffect(() => {
    const root = document.documentElement;
    
    // High contrast
    if (settings.highContrast) {
      root.style.setProperty('--text-color', '#ffffff');
      root.style.setProperty('--bg-color', '#000000');
      root.style.setProperty('--accent-color', '#ffff00');
    } else {
      root.style.removeProperty('--text-color');
      root.style.removeProperty('--bg-color');
      root.style.removeProperty('--accent-color');
    }

    // Large text
    if (settings.largeText) {
      root.style.fontSize = '18px';
    } else {
      root.style.fontSize = '16px';
    }

    // Reduced motion
    if (settings.reducedMotion) {
      root.style.setProperty('--reduced-motion', 'reduce');
    } else {
      root.style.removeProperty('--reduced-motion');
    }

    // Font size
    root.style.setProperty('--font-size', `${settings.fontSize}px`);
    
    // Line spacing
    root.style.setProperty('--line-spacing', settings.lineSpacing.toString());

    // Color blind modes
    if (settings.colorBlindMode !== 'none') {
      const filters = {
        protanopia: 'url(#protanopia)',
        deuteranopia: 'url(#deuteranopia)',
        tritanopia: 'url(#tritanopia)'
      };
      root.style.filter = filters[settings.colorBlindMode];
    } else {
      root.style.filter = 'none';
    }
  }, [settings]);

  // Handle click outside to close settings
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (settingsRef.current && !settingsRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Text-to-speech functionality
  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      // Stop any current speech
      window.speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = speechRate;
      utterance.onstart = () => setIsReading(true);
      utterance.onend = () => setIsReading(false);
      utterance.onerror = () => setIsReading(false);
      
      window.speechSynthesis.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if ('speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      setIsReading(false);
    }
  };

  // Screen reader mode
  const toggleScreenReader = () => {
    if (isReading) {
      stopSpeaking();
    } else {
      // Get main content text
      const mainContent = document.querySelector('main');
      if (mainContent) {
        const text = mainContent.textContent || '';
        speakText(text.substring(0, 500) + '...'); // Limit text length
      }
    }
  };

  // Highlighter mode
  const toggleHighlighter = () => {
    setSettings(prev => ({ ...prev, highlighter: !prev.highlighter }));
  };

  // Font size controls
  const increaseFontSize = () => {
    setSettings(prev => ({ ...prev, fontSize: Math.min(prev.fontSize + 2, 24) }));
  };

  const decreaseFontSize = () => {
    setSettings(prev => ({ ...prev, fontSize: Math.max(prev.fontSize - 2, 12) }));
  };

  // Line spacing controls
  const increaseLineSpacing = () => {
    setSettings(prev => ({ ...prev, lineSpacing: Math.min(prev.lineSpacing + 0.1, 2.5) }));
  };

  const decreaseLineSpacing = () => {
    setSettings(prev => ({ ...prev, lineSpacing: Math.max(prev.lineSpacing - 0.1, 1.0) }));
  };

  // Reset all settings
  const resetSettings = () => {
    setSettings({
      highContrast: false,
      largeText: false,
      reducedMotion: false,
      highlighter: false,
      fontSize: 16,
      lineSpacing: 1.5,
      colorBlindMode: 'none'
    });
  };

  return (
    <>
      {/* Accessibility Floating Button */}
      <motion.button
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        onClick={() => setIsVisible(!isVisible)}
        className="fixed bottom-4 right-4 z-50 p-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-full shadow-2xl hover:from-purple-600 hover:to-pink-700 transition-all duration-300 transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-purple-300/50"
        aria-label="Accessibility options"
        aria-expanded={isVisible}
      >
        <Accessibility className="w-6 h-6" />
      </motion.button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.95 }}
            className="fixed bottom-20 right-4 z-50 w-80 bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-xl shadow-2xl shadow-black/50 overflow-hidden"
            ref={settingsRef}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
              <div className="flex items-center space-x-2">
                <Accessibility className="w-5 h-5 text-purple-400" />
                <span className="text-white font-semibold">Accessibility</span>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setIsOpen(!isOpen)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label="Settings"
                >
                  <Settings className="w-4 h-4" />
                </button>
                <button
                  onClick={() => setIsVisible(false)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label="Close"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="p-4 space-y-3">
              {/* Screen Reader */}
              <button
                onClick={toggleScreenReader}
                className={`w-full flex items-center justify-between p-3 rounded-lg transition-all duration-200 ${
                  isReading 
                    ? 'bg-red-500/20 border border-red-500/50 text-red-400' 
                    : 'bg-gray-800/50 border border-gray-700/50 text-gray-300 hover:bg-gray-700/50'
                }`}
                aria-label={isReading ? 'Stop reading' : 'Start reading'}
              >
                <span className="flex items-center space-x-2">
                  {isReading ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
                  <span>{isReading ? 'Stop Reading' : 'Screen Reader'}</span>
                </span>
              </button>

              {/* High Contrast Toggle */}
              <button
                onClick={() => setSettings(prev => ({ ...prev, highContrast: !prev.highContrast }))}
                className={`w-full flex items-center justify-between p-3 rounded-lg transition-all duration-200 ${
                  settings.highContrast 
                    ? 'bg-yellow-500/20 border border-yellow-500/50 text-yellow-400' 
                    : 'bg-gray-800/50 border border-gray-700/50 text-gray-300 hover:bg-gray-700/50'
                }`}
                aria-label="Toggle high contrast"
              >
                <span className="flex items-center space-x-2">
                  <Contrast className="w-4 h-4" />
                  <span>High Contrast</span>
                </span>
                <div className={`w-4 h-4 rounded border-2 ${
                  settings.highContrast ? 'bg-yellow-400 border-yellow-400' : 'border-gray-500'
                }`} />
              </button>

              {/* Large Text Toggle */}
              <button
                onClick={() => setSettings(prev => ({ ...prev, largeText: !prev.largeText }))}
                className={`w-full flex items-center justify-between p-3 rounded-lg transition-all duration-200 ${
                  settings.largeText 
                    ? 'bg-blue-500/20 border border-blue-500/50 text-blue-400' 
                    : 'bg-gray-800/50 border border-gray-700/50 text-gray-300 hover:bg-gray-700/50'
                }`}
                aria-label="Toggle large text"
              >
                <span className="flex items-center space-x-2">
                  <Type className="w-4 h-4" />
                  <span>Large Text</span>
                </span>
                <div className={`w-4 h-4 rounded border-2 ${
                  settings.largeText ? 'bg-blue-400 border-blue-400' : 'border-gray-500'
                }`} />
              </button>

              {/* Reduced Motion Toggle */}
              <button
                onClick={() => setSettings(prev => ({ ...prev, reducedMotion: !prev.reducedMotion }))}
                className={`w-full flex items-center justify-between p-3 rounded-lg transition-all duration-200 ${
                  settings.reducedMotion 
                    ? 'bg-green-500/20 border border-green-500/50 text-green-400' 
                    : 'bg-gray-800/50 border border-gray-700/50 text-gray-300 hover:bg-gray-700/50'
                }`}
                aria-label="Toggle reduced motion"
              >
                <span className="flex items-center space-x-2">
                  <EyeOff className="w-4 h-4" />
                  <span>Reduced Motion</span>
                </span>
                <div className={`w-4 h-4 rounded border-2 ${
                  settings.reducedMotion ? 'bg-green-400 border-green-400' : 'border-gray-500'
                }`} />
              </button>
            </div>

            {/* Settings Panel */}
            <AnimatePresence>
              {isOpen && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="border-t border-gray-700/50"
                >
                  <div className="p-4 space-y-4">
                    {/* Font Size Controls */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold text-white">Font Size</h4>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={decreaseFontSize}
                          className="p-2 bg-gray-800/50 hover:bg-gray-700/50 rounded-lg text-gray-300 hover:text-white transition-colors duration-200"
                          aria-label="Decrease font size"
                        >
                          <ZoomOut className="w-4 h-4" />
                        </button>
                        <span className="text-white min-w-[3rem] text-center">{settings.fontSize}px</span>
                        <button
                          onClick={increaseFontSize}
                          className="p-2 bg-gray-800/50 hover:bg-gray-700/50 rounded-lg text-gray-300 hover:text-white transition-colors duration-200"
                          aria-label="Increase font size"
                        >
                          <ZoomIn className="w-4 h-4" />
                        </button>
                      </div>
                    </div>

                    {/* Line Spacing Controls */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold text-white">Line Spacing</h4>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={decreaseLineSpacing}
                          className="p-2 bg-gray-800/50 hover:bg-gray-700/50 rounded-lg text-gray-300 hover:text-white transition-colors duration-200"
                          aria-label="Decrease line spacing"
                        >
                          <AlignJustify className="w-4 h-4" />
                        </button>
                        <span className="text-white min-w-[3rem] text-center">{settings.lineSpacing.toFixed(1)}</span>
                        <button
                          onClick={increaseLineSpacing}
                          className="p-2 bg-gray-800/50 hover:bg-gray-700/50 rounded-lg text-gray-300 hover:text-white transition-colors duration-200"
                          aria-label="Increase line spacing"
                        >
                          <AlignJustify className="w-4 h-4 rotate-90" />
                        </button>
                      </div>
                    </div>

                    {/* Color Blind Mode */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold text-white">Color Blind Mode</h4>
                      <select
                        value={settings.colorBlindMode}
                        onChange={(e) => setSettings(prev => ({ ...prev, colorBlindMode: e.target.value as any }))}
                        className="w-full p-2 bg-gray-800/50 border border-gray-700/50 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                      >
                        <option value="none">None</option>
                        <option value="protanopia">Protanopia (Red-Blind)</option>
                        <option value="deuteranopia">Deuteranopia (Green-Blind)</option>
                        <option value="tritanopia">Tritanopia (Blue-Blind)</option>
                      </select>
                    </div>

                    {/* Speech Rate */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold text-white">Speech Rate</h4>
                      <input
                        type="range"
                        min="0.5"
                        max="2"
                        step="0.1"
                        value={speechRate}
                        onChange={(e) => setSpeechRate(parseFloat(e.target.value))}
                        className="w-full"
                        aria-label="Speech rate"
                      />
                      <div className="text-xs text-gray-400 text-center">
                        {speechRate.toFixed(1)}x
                      </div>
                    </div>

                    {/* Reset Button */}
                    <button
                      onClick={resetSettings}
                      className="w-full p-3 bg-red-500/20 border border-red-500/50 text-red-400 rounded-lg hover:bg-red-500/30 transition-colors duration-200 flex items-center justify-center space-x-2"
                    >
                      <RotateCcw className="w-4 h-4" />
                      <span>Reset All Settings</span>
                    </button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Render children with accessibility enhancements */}
      {children}
    </>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-9800
  );
};

// Focus Trap Hook
export const useFocusTrap = (isActive: boolean) => {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isActive) return;

    const container = containerRef.current;
    if (!container) return;

    const focusableElements = container.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );

    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

    const handleTabKey = (event: KeyboardEvent) => {
      if (event.key === 'Tab') {
        if (event.shiftKey) {
          if (document.activeElement === firstElement) {
            event.preventDefault();
            lastElement.focus();
          }
        } else {
          if (document.activeElement === lastElement) {
            event.preventDefault();
            firstElement.focus();
          }
        }
      }
    };

    container.addEventListener('keydown', handleTabKey);
    return () => container.removeEventListener('keydown', handleTabKey);
  }, [isActive]);

  return containerRef;
};

// Screen Reader Announcement Hook
export const useScreenReaderAnnouncement = () => {
  const announce = (message: string, priority: 'polite' | 'assertive' = 'polite') => {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', priority);
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    
    document.body.appendChild(announcement);
    
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  return announce;
};

// Skip Link Component
export const SkipLink: React.FC<{ href: string; children: React.ReactNode }> = ({ href, children }) => (
  <a
    href={href}
    className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 z-50 px-4 py-2 bg-cyan-500 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-offset-2"
  >
    {children}
  </a>
);

// Screen Reader Only Text
export const SrOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <span className="sr-only">{children}</span>
);

// Export the main provider component as default
export default AccessibilityProvider;