<<<<<<< HEAD
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, X, Filter, TrendingUp, Clock, Star, Zap, Brain, Atom, Shield, Rocket } from 'lucide-react';

interface SearchResult {
  id: string;
  name: string;
  description: string;
  category: string;
  type: string;
  slug: string;
  relevance: number;
  features?: string[];
  pricing?: {
    starter?: string;
    enterprise?: string;
  };
}

interface SearchProps {
  onSearch: (query: string) => void;
  onResultSelect: (result: SearchResult) => void;
  placeholder?: string;
  className?: string;
  showFilters?: boolean;
}

const EnhancedSearch: React.FC<SearchProps> = ({
  onSearch,
  onResultSelect,
  placeholder = "Search revolutionary services...",
  className = "",
  showFilters = true
}) => {
  const [query, setQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [results, setResults] = useState<SearchResult[]>([]);
  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);
  const [searchHistory, setSearchHistory] = useState<string[]>([]);
  const [popularSearches] = useState([
    'AI Consciousness',
    'Quantum Computing',
    'Cybersecurity',
    'Business Intelligence',
    'Space Technology',
    'Autonomous Systems'
  ]);

  // Mock search results - in real app, this would come from API
  const mockSearchResults: SearchResult[] = [
    {
      id: '1',
      name: 'AI Consciousness Evolution Platform 2045',
      description: 'Next-generation AI consciousness with emotional intelligence and self-awareness capabilities.',
      category: 'AI & Machine Learning',
      type: 'Platform',
      slug: '/ai-consciousness-evolution-platform-2045',
      relevance: 95,
      features: ['Emotional Intelligence', 'Self-Awareness', 'Consciousness Evolution'],
      pricing: { starter: '$999/month', enterprise: 'Contact Sales' }
    },
    {
      id: '2',
      name: 'Quantum AI Hybrid Computing',
      description: 'Quantum-powered AI with consciousness integration and quantum supremacy.',
      category: 'Quantum Computing',
      type: 'Platform',
      slug: '/quantum-ai-hybrid-computing',
      relevance: 92,
      features: ['Quantum Supremacy', 'AI Integration', 'Hybrid Computing'],
      pricing: { starter: '$1,499/month', enterprise: 'Contact Sales' }
    },
    {
      id: '3',
      name: 'Quantum Cybersecurity Intelligence',
      description: 'Quantum-resistant security with AI consciousness and threat prediction.',
      category: 'Cybersecurity',
      type: 'Platform',
      slug: '/quantum-cybersecurity-intelligence',
      relevance: 88,
      features: ['Quantum Resistance', 'Threat Prediction', 'AI Security'],
      pricing: { starter: '$799/month', enterprise: 'Contact Sales' }
    }
  ];

  const categories = [
    { id: 'ai', name: 'AI & ML', icon: Brain, color: 'from-purple-500 to-pink-500' },
    { id: 'quantum', name: 'Quantum', icon: Atom, color: 'from-blue-500 to-cyan-500' },
    { id: 'security', name: 'Security', icon: Shield, color: 'from-red-500 to-orange-500' },
    { id: 'business', name: 'Business', icon: Rocket, color: 'from-emerald-500 to-teal-500' }
  ];

  // Debounced search function
  const debouncedSearch = useCallback(
    useMemo(
      () => debounce((searchQuery: string) => {
        if (searchQuery.trim().length < 2) {
          setResults([]);
          setShowResults(false);
          return;
        }

        setIsSearching(true);
        
        // Simulate API call delay
        setTimeout(() => {
          const filteredResults = mockSearchResults.filter(result => {
            const matchesQuery = result.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                               result.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                               result.category.toLowerCase().includes(searchQuery.toLowerCase());
            
            const matchesFilters = selectedFilters.length === 0 || 
                                 selectedFilters.some(filter => 
                                   result.category.toLowerCase().includes(filter.toLowerCase()) ||
                                   result.type.toLowerCase().includes(filter.toLowerCase())
                                 );
            
            return matchesQuery && matchesFilters;
          });

          // Sort by relevance
          const sortedResults = filteredResults.sort((a, b) => b.relevance - a.relevance);
          
          setResults(sortedResults);
          setShowResults(true);
          setIsSearching(false);
        }, 300);
      }, 300),
      [selectedFilters]
    ),
    [selectedFilters]
  );
=======
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search, 
  X, 
  Clock, 
  TrendingUp, 
  Sparkles, 
  ArrowRight,
  Filter,
  History,
  Zap,
  Globe,
  Brain,
  Shield,
  Rocket,
  Cloud,
  Target,
  Building,
  Users,
  BookOpen,
  FileText,
  Video,
  Code,
  Star,
  Layers,
  Grid,
  BarChart3,
  Settings,
  HelpCircle,
  MessageCircle,
  Calendar,
  Award,
  Lightbulb,
  Play,
  DollarSign,
  GraduationCap,
  Lock,
  Key,
  Network,
  Satellite,
  Server,
  Store,
  Truck
} from 'lucide-react';
import { useRouter } from 'next/router';

interface SearchResult {
  id: string;
  title: string;
  description: string;
  url: string;
  category: string;
  icon: React.ReactNode;
  relevance: number;
  tags: string[];
}

interface SearchSuggestion {
  id: string;
  text: string;
  category: string;
  icon: React.ReactNode;
  type: 'recent' | 'trending' | 'quick-action';
}

interface SearchCategory {
  id: string;
  name: string;
  icon: React.ReactNode;
  color: string;
  count: number;
}

const EnhancedSearch: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<SearchResult[]>([]);
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isSearching, setIsSearching] = useState(false);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  
  const searchInputRef = useRef<HTMLInputElement>(null);
  const router = useRouter();
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-69f0

  // Search categories with icons and colors
  const searchCategories: SearchCategory[] = [
    { id: 'all', name: 'All', icon: <Sparkles className="w-4 h-4" />, color: 'from-purple-500 to-pink-500', count: 0 },
    { id: 'ai', name: 'AI & ML', icon: <Brain className="w-4 h-4" />, color: 'from-cyan-500 to-blue-500', count: 0 },
    { id: 'security', name: 'Security', icon: <Shield className="w-4 h-4" />, color: 'from-red-500 to-orange-500', count: 0 },
    { id: 'cloud', name: 'Cloud', icon: <Cloud className="w-4 h-4" />, color: 'from-blue-500 to-indigo-500', count: 0 },
    { id: 'business', name: 'Business', icon: <Target className="w-4 h-4" />, color: 'from-emerald-500 to-teal-500', count: 0 },
    { id: 'infrastructure', name: 'Infrastructure', icon: <Server className="w-4 h-4" />, color: 'from-yellow-500 to-orange-500', count: 0 }
  ];

  // Quick action buttons
  const quickActions = [
    { name: 'AI Services', icon: <Brain className="w-4 h-4" />, action: '/services?category=ai' },
    { name: 'Security Solutions', icon: <Shield className="w-4 h-4" />, action: '/services?category=security' },
    { name: 'Cloud Platform', icon: <Cloud className="w-4 h-4" />, action: '/services?category=cloud' },
    { name: 'Contact Us', icon: <MessageCircle className="w-4 h-4" />, action: '/contact' }
  ];

  // Load recent searches from localStorage
  useEffect(() => {
<<<<<<< HEAD
    debouncedSearch(query);
  }, [query, debouncedSearch]);

  // Handle search input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
    
    if (value.trim().length === 0) {
      setShowResults(false);
      setResults([]);
    }
  };

  // Handle search submission
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (query.trim()) {
      onSearch(query);
      addToSearchHistory(query);
      setShowResults(false);
    }
  };

  // Add search to history
  const addToSearchHistory = (searchTerm: string) => {
    const newHistory = [searchTerm, ...searchHistory.filter(item => item !== searchTerm)].slice(0, 5);
    setSearchHistory(newHistory);
    localStorage.setItem('zion-search-history', JSON.stringify(newHistory));
  };

  // Load search history from localStorage
  useEffect(() => {
    const savedHistory = localStorage.getItem('zion-search-history');
    if (savedHistory) {
      try {
        setSearchHistory(JSON.parse(savedHistory));
      } catch (error) {
        console.error('Failed to parse search history:', error);
=======
    const saved = localStorage.getItem('recent-searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        console.error('Failed to load recent searches:', error);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-69f0
      }
    }
  }, []);

<<<<<<< HEAD
  // Handle filter toggle
  const toggleFilter = (filterId: string) => {
    setSelectedFilters(prev => 
      prev.includes(filterId) 
        ? prev.filter(id => id !== filterId)
        : [...prev, filterId]
    );
  };

  // Handle result selection
  const handleResultSelect = (result: SearchResult) => {
    onResultSelect(result);
    setShowResults(false);
    setQuery('');
  };

  // Clear search
  const clearSearch = () => {
    setQuery('');
    setShowResults(false);
    setResults([]);
  };

  return (
    <div className={`relative ${className}`}>
      {/* Search Form */}
      <form onSubmit={handleSearch} className="relative">
        <div className="relative">
          <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            value={query}
            onChange={handleInputChange}
            placeholder={placeholder}
            className="w-full pl-12 pr-20 py-3 bg-gray-800/50 border border-gray-700 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent transition-all duration-300"
            onFocus={() => setShowResults(true)}
          />
          
          {/* Clear Button */}
          {query && (
            <button
              type="button"
              onClick={clearSearch}
              className="absolute right-16 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
            >
              <X className="w-4 h-4" />
            </button>
          )}
          
          {/* Search Button */}
          <button
            type="submit"
            className="absolute right-2 top-1/2 transform -translate-y-1/2 px-4 py-1.5 bg-gradient-to-r from-cyan-500 to-blue-600 text-white text-sm font-medium rounded-lg hover:from-cyan-600 hover:to-blue-700 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-500/50"
          >
            Search
          </button>
        </div>
      </form>

      {/* Search Results Dropdown */}
=======
  // Save recent searches to localStorage
  const saveRecentSearch = useCallback((searchTerm: string) => {
    if (!searchTerm.trim()) return;
    
    const updated = [searchTerm, ...recentSearches.filter(s => s !== searchTerm)].slice(0, 10);
    setRecentSearches(updated);
    localStorage.setItem('recent-searches', JSON.stringify(updated));
  }, [recentSearches]);

  // Generate trending suggestions
  const generateTrendingSuggestions = useCallback(() => {
    return [
      { id: 'ai-automation', text: 'AI Automation', category: 'ai', icon: <Brain className="w-4 h-4" />, type: 'trending' as const },
      { id: 'quantum-security', text: 'Quantum Security', category: 'security', icon: <Shield className="w-4 h-4" />, type: 'trending' as const },
      { id: 'cloud-migration', text: 'Cloud Migration', category: 'cloud', icon: <Cloud className="w-4 h-4" />, type: 'trending' as const },
      { id: 'business-intelligence', text: 'Business Intelligence', category: 'business', icon: <Target className="w-4 h-4" />, type: 'trending' as const }
    ];
  }, []);

  // Generate recent search suggestions
  const generateRecentSuggestions = useCallback(() => {
    return recentSearches.map(search => ({
      id: `recent-${search}`,
      text: search,
      category: 'recent',
      icon: <Clock className="w-4 h-4" />,
      type: 'recent' as const
    }));
  }, [recentSearches]);

  // Update suggestions when query changes
  useEffect(() => {
    if (query.trim()) {
      const trending = generateTrendingSuggestions();
      const recent = generateRecentSuggestions();
      const filtered = [...trending, ...recent].filter(suggestion =>
        suggestion.text.toLowerCase().includes(query.toLowerCase())
      );
      setSuggestions(filtered);
      setShowSuggestions(true);
    } else {
      setSuggestions([...generateTrendingSuggestions(), ...generateRecentSuggestions()]);
      setShowSuggestions(true);
    }
  }, [query, generateTrendingSuggestions, generateRecentSuggestions]);

  // Handle search submission
  const handleSearch = useCallback(async (searchTerm?: string) => {
    const term = searchTerm || query.trim();
    if (!term) return;

    setIsSearching(true);
    saveRecentSearch(term);
    
    try {
      // Simulate search API call
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Mock search results
      const mockResults: SearchResult[] = [
        {
          id: '1',
          title: 'AI Autonomous Business Orchestrator',
          description: 'Fully autonomous AI system for business operations with quantum computing integration',
          url: '/ai-autonomous-business-orchestrator',
          category: 'ai',
          icon: <Brain className="w-5 h-5" />,
          relevance: 0.95,
          tags: ['AI', 'Automation', 'Business', 'Quantum']
        },
        {
          id: '2',
          title: 'Quantum AI Cybersecurity Sentinel',
          description: 'Quantum-powered AI security with consciousness-level threat detection',
          url: '/quantum-ai-cybersecurity-sentinel',
          category: 'security',
          icon: <Shield className="w-5 h-5" />,
          relevance: 0.92,
          tags: ['Quantum', 'AI', 'Security', 'Cybersecurity']
        },
        {
          id: '3',
          title: 'Cloud Infrastructure Optimization',
          description: 'Advanced cloud infrastructure management with AI-driven optimization',
          url: '/cloud-infrastructure-optimization',
          category: 'cloud',
          icon: <Cloud className="w-5 h-5" />,
          relevance: 0.88,
          tags: ['Cloud', 'Infrastructure', 'AI', 'Optimization']
        }
      ];

      setResults(mockResults);
      setIsOpen(true);
      setShowSuggestions(false);
    } catch (error) {
      console.error('Search failed:', error);
    } finally {
      setIsSearching(false);
    }
  }, [query, saveRecentSearch]);

  // Handle suggestion click
  const handleSuggestionClick = useCallback((suggestion: SearchSuggestion) => {
    if (suggestion.type === 'quick-action') {
      router.push(suggestion.text);
    } else {
      setQuery(suggestion.text);
      handleSearch(suggestion.text);
    }
  }, [router, handleSearch]);

  // Handle quick action click
  const handleQuickAction = useCallback((action: string) => {
    router.push(action);
    setIsOpen(false);
  }, [router]);

  // Handle result click
  const handleResultClick = useCallback((result: SearchResult) => {
    router.push(result.url);
    setIsOpen(false);
    setQuery('');
  }, [router]);

  // Handle keyboard navigation
  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSearch();
    } else if (e.key === 'Escape') {
      setIsOpen(false);
      setShowSuggestions(false);
    }
  }, [handleSearch]);

  // Focus search input when opened
  useEffect(() => {
    if (isOpen && searchInputRef.current) {
      searchInputRef.current.focus();
    }
  }, [isOpen]);

  return (
    <>
      {/* Search Button */}
      <motion.button
        onClick={() => setIsOpen(true)}
        className="relative flex items-center space-x-2 px-4 py-2 bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg text-gray-300 hover:text-white hover:bg-gray-800/70 transition-all duration-300 group"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        <Search className="w-4 h-4" />
        <span className="hidden sm:inline text-sm">Search</span>
        <kbd className="hidden lg:inline-flex items-center px-2 py-1 text-xs font-medium text-gray-400 bg-gray-700 rounded border border-gray-600">
          ⌘K
        </kbd>
      </motion.button>

      {/* Search Modal */}
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-69f0
      <AnimatePresence>
        {showResults && (
          <motion.div
<<<<<<< HEAD
            initial={{ opacity: 0, y: -10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -10, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className="absolute top-full left-0 right-0 mt-2 bg-gray-900/95 backdrop-blur-md border border-gray-700 rounded-xl shadow-2xl z-50 max-h-96 overflow-y-auto"
          >
            {/* Filters */}
            {showFilters && (
              <div className="p-4 border-b border-gray-700">
                <div className="flex items-center gap-2 mb-3">
                  <Filter className="w-4 h-4 text-gray-400" />
                  <span className="text-sm font-medium text-gray-300">Filter by Category</span>
                </div>
                <div className="flex flex-wrap gap-2">
                  {categories.map((category) => (
                    <button
                      key={category.id}
                      onClick={() => toggleFilter(category.id)}
                      className={`flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-medium transition-all duration-300 ${
                        selectedFilters.includes(category.id)
                          ? `bg-gradient-to-r ${category.color} text-white`
                          : 'bg-gray-700/50 text-gray-300 hover:bg-gray-600/50'
                      }`}
                    >
                      <category.icon className="w-3 h-3" />
                      {category.name}
=======
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm"
            onClick={() => setIsOpen(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: -20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: -20 }}
              className="relative max-w-4xl mx-auto mt-20 mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Search Input */}
              <div className="relative">
                <div className="relative flex items-center bg-gray-900 border border-gray-700 rounded-2xl shadow-2xl overflow-hidden">
                  <div className="flex-shrink-0 pl-4">
                    <Search className="w-6 h-6 text-gray-400" />
                  </div>
                  <input
                    ref={searchInputRef}
                    type="text"
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Search for services, solutions, or information..."
                    className="flex-1 px-4 py-4 bg-transparent text-white placeholder-gray-400 focus:outline-none text-lg"
                  />
                  {query && (
                    <button
                      onClick={() => setQuery('')}
                      className="flex-shrink-0 p-2 text-gray-400 hover:text-white transition-colors"
                    >
                      <X className="w-5 h-5" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-69f0
                    </button>
                  )}
                  <div className="flex-shrink-0 pr-4">
                    <button
                      onClick={() => handleSearch()}
                      disabled={isSearching || !query.trim()}
                      className="px-6 py-2 bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-lg font-medium hover:from-cyan-600 hover:to-blue-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {isSearching ? 'Searching...' : 'Search'}
                    </button>
                  </div>
                </div>

<<<<<<< HEAD
            {/* Search Results */}
            <div className="p-4">
              {isSearching ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400"></div>
                  <span className="ml-3 text-gray-400">Searching...</span>
                </div>
              ) : results.length > 0 ? (
                <div className="space-y-3">
                  {results.map((result) => (
                    <motion.div
                      key={result.id}
                      whileHover={{ scale: 1.02 }}
                      className="p-3 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-700/50 transition-all duration-300 border border-transparent hover:border-cyan-400/30"
                      onClick={() => handleResultSelect(result)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h4 className="font-medium text-white mb-1">{result.name}</h4>
                          <p className="text-sm text-gray-300 mb-2 line-clamp-2">{result.description}</p>
                          <div className="flex items-center gap-2">
                            <span className="px-2 py-1 bg-cyan-500/20 text-cyan-400 text-xs rounded-full">
                              {result.category}
                            </span>
                            {result.pricing?.starter && (
                              <span className="px-2 py-1 bg-green-500/20 text-green-400 text-xs rounded-full">
                                From {result.pricing.starter}
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center gap-1 text-cyan-400">
                          <Star className="w-4 h-4 fill-current" />
                          <span className="text-xs">{result.relevance}</span>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              ) : query.trim().length > 0 ? (
                <div className="text-center py-8">
                  <div className="text-gray-400 mb-2">No results found for "{query}"</div>
                  <div className="text-sm text-gray-500">Try adjusting your search terms or filters</div>
                </div>
              ) : (
                <div className="space-y-4">
                  {/* Search History */}
                  {searchHistory.length > 0 && (
                    <div>
                      <div className="flex items-center gap-2 mb-3">
                        <Clock className="w-4 h-4 text-gray-400" />
                        <span className="text-sm font-medium text-gray-300">Recent Searches</span>
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {searchHistory.map((term, index) => (
                          <button
                            key={index}
                            onClick={() => setQuery(term)}
                            className="px-3 py-1.5 bg-gray-700/50 text-gray-300 text-sm rounded-lg hover:bg-gray-600/50 transition-colors"
                          >
                            {term}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Popular Searches */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <TrendingUp className="w-4 h-4 text-gray-400" />
                      <span className="text-sm font-medium text-gray-300">Popular Searches</span>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {popularSearches.map((term, index) => (
                        <button
                          key={index}
                          onClick={() => setQuery(term)}
                          className="px-3 py-1.5 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 text-cyan-400 text-sm rounded-lg hover:from-cyan-500/30 hover:to-blue-500/30 transition-all duration-300 border border-cyan-400/30"
                        >
                          {term}
                        </button>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
=======
                {/* Search Suggestions */}
                <AnimatePresence>
                  {showSuggestions && suggestions.length > 0 && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      className="absolute top-full left-0 right-0 mt-2 bg-gray-900 border border-gray-700 rounded-xl shadow-2xl overflow-hidden z-10"
                    >
                      {/* Quick Actions */}
                      <div className="p-4 border-b border-gray-700">
                        <h3 className="text-sm font-medium text-gray-400 mb-3">Quick Actions</h3>
                        <div className="grid grid-cols-2 gap-2">
                          {quickActions.map((action) => (
                            <button
                              key={action.name}
                              onClick={() => handleQuickAction(action.action)}
                              className="flex items-center space-x-2 p-2 text-sm text-gray-300 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
                            >
                              {action.icon}
                              <span>{action.name}</span>
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* Suggestions */}
                      <div className="max-h-64 overflow-y-auto">
                        {suggestions.map((suggestion) => (
                          <button
                            key={suggestion.id}
                            onClick={() => handleSuggestionClick(suggestion)}
                            className="w-full flex items-center space-x-3 p-3 text-left hover:bg-gray-800 transition-colors"
                          >
                            <div className="text-gray-400">
                              {suggestion.icon}
                            </div>
                            <div className="flex-1">
                              <div className="text-white">{suggestion.text}</div>
                              <div className="text-sm text-gray-400 capitalize">
                                {suggestion.type} • {suggestion.category}
                              </div>
                            </div>
                            <ArrowRight className="w-4 h-4 text-gray-400" />
                          </button>
                        ))}
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              {/* Search Results */}
              <AnimatePresence>
                {results.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 20 }}
                    className="mt-4 bg-gray-900 border border-gray-700 rounded-xl shadow-2xl overflow-hidden"
                  >
                    {/* Results Header */}
                    <div className="p-4 border-b border-gray-700">
                      <div className="flex items-center justify-between">
                        <h3 className="text-lg font-semibold text-white">
                          Search Results ({results.length})
                        </h3>
                        <div className="flex items-center space-x-2">
                          <Filter className="w-4 h-4 text-gray-400" />
                          <select
                            value={selectedCategory}
                            onChange={(e) => setSelectedCategory(e.target.value)}
                            className="bg-gray-800 border border-gray-600 text-white text-sm rounded-lg px-3 py-1 focus:outline-none focus:ring-2 focus:ring-cyan-500"
                          >
                            {searchCategories.map((category) => (
                              <option key={category.id} value={category.id}>
                                {category.name}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>
                    </div>

                    {/* Results List */}
                    <div className="max-h-96 overflow-y-auto">
                      {results
                        .filter(result => selectedCategory === 'all' || result.category === selectedCategory)
                        .map((result) => (
                          <motion.button
                            key={result.id}
                            onClick={() => handleResultClick(result)}
                            className="w-full flex items-start space-x-4 p-4 text-left hover:bg-gray-800 transition-colors border-b border-gray-700 last:border-b-0"
                            whileHover={{ x: 4 }}
                          >
                            <div className="flex-shrink-0 text-cyan-400">
                              {result.icon}
                            </div>
                            <div className="flex-1 min-w-0">
                              <h4 className="text-white font-medium mb-1">{result.title}</h4>
                              <p className="text-gray-400 text-sm mb-2">{result.description}</p>
                              <div className="flex flex-wrap gap-1">
                                {result.tags.map((tag) => (
                                  <span
                                    key={tag}
                                    className="px-2 py-1 text-xs bg-gray-800 text-gray-300 rounded-full"
                                  >
                                    {tag}
                                  </span>
                                ))}
                              </div>
                            </div>
                            <div className="flex-shrink-0">
                              <div className="text-sm text-gray-500">
                                {Math.round(result.relevance * 100)}% match
                              </div>
                            </div>
                          </motion.button>
                        ))}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-69f0
  );
};

// Debounce utility function
function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

export default EnhancedSearch;