<<<<<<< HEAD
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, Zap, Clock, TrendingUp, AlertTriangle, 
  CheckCircle, X, Settings, BarChart3, Gauge,
  Wifi, WifiOff, Battery, BatteryCharging, Monitor,
  Smartphone, Tablet, Laptop, HardDrive, Memory
=======
import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, 
  Zap, 
  Clock, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle,
  X,
  Info,
  BarChart3,
  Gauge,
  Target,
  AlertCircle
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-c321
} from 'lucide-react';

interface PerformanceMetrics {
  fcp: number; // First Contentful Paint
  lcp: number; // Largest Contentful Paint
  fid: number; // First Input Delay
  cls: number; // Cumulative Layout Shift
  ttfb: number; // Time to First Byte
<<<<<<< HEAD
  fmp: number; // First Meaningful Paint
  si: number; // Speed Index
  tti: number; // Time to Interactive
  tbt: number; // Total Blocking Time
}

interface DeviceInfo {
  type: 'mobile' | 'tablet' | 'desktop';
  screenSize: string;
  userAgent: string;
  connection: string;
  memory?: number;
  cores?: number;
}

interface PerformanceAlert {
  id: string;
  type: 'warning' | 'error' | 'info' | 'success';
  message: string;
  metric: keyof PerformanceMetrics;
  value: number;
  threshold: number;
  timestamp: Date;
}

const PerformanceMonitor: React.FC<{ showUI?: boolean }> = ({ showUI = false }) => {
=======
  domLoad: number; // DOM Content Loaded
  windowLoad: number; // Window Load
}

interface PerformanceScore {
  overall: number;
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
}

interface PerformanceMonitorProps {
  onPerformanceChange?: (metrics: PerformanceMetrics) => void;
  showPanel?: boolean;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
  onPerformanceChange,
  showPanel = false
}) => {
  const [isVisible, setIsVisible] = useState(showPanel);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-c321
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fcp: 0,
    lcp: 0,
    fid: 0,
    cls: 0,
    ttfb: 0,
<<<<<<< HEAD
    fmp: 0,
    si: 0,
    tti: 0,
    tbt: 0
  });
  
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>({
    type: 'desktop',
    screenSize: '0x0',
    userAgent: '',
    connection: 'unknown'
  });
  
  const [alerts, setAlerts] = useState<PerformanceAlert[]>([]);
  const [isVisible, setIsVisible] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [autoOptimize, setAutoOptimize] = useState(false);
  const [optimizationHistory, setOptimizationHistory] = useState<string[]>([]);

  // Performance thresholds for different metrics
  const thresholds = useMemo(() => ({
    fcp: { good: 1800, poor: 3000 },
    lcp: { good: 2500, poor: 4000 },
    fid: { good: 100, poor: 300 },
    cls: { good: 0.1, poor: 0.25 },
    ttfb: { good: 800, poor: 1800 },
    fmp: { good: 2000, poor: 4000 },
    si: { good: 3400, poor: 5800 },
    tti: { good: 3800, poor: 7300 },
    tbt: { good: 300, poor: 600 }
  }), []);

  // Get performance grade based on metric value
  const getGrade = useCallback((metric: keyof PerformanceMetrics, value: number): 'good' | 'needs-improvement' | 'poor' => {
    const threshold = thresholds[metric];
    if (value <= threshold.good) return 'good';
    if (value <= threshold.poor) return 'needs-improvement';
    return 'poor';
  }, [thresholds]);

  // Get grade color
  const getGradeColor = useCallback((grade: string): string => {
    switch (grade) {
      case 'good': return 'text-green-400';
      case 'needs-improvement': return 'text-yellow-400';
      case 'poor': return 'text-red-400';
      default: return 'text-gray-400';
    }
  }, []);

  // Get grade icon
  const getGradeIcon = useCallback((grade: string) => {
    switch (grade) {
      case 'good': return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'needs-improvement': return <AlertTriangle className="w-4 h-4 text-yellow-400" />;
      case 'poor': return <AlertTriangle className="w-4 h-4 text-red-400" />;
      default: return <Activity className="w-4 h-4 text-gray-400" />;
    }
  }, []);

  // Detect device type and capabilities
  useEffect(() => {
    const detectDevice = () => {
      const userAgent = navigator.userAgent;
      const screenWidth = window.screen.width;
      const screenHeight = window.screen.height;
      
      let type: 'mobile' | 'tablet' | 'desktop' = 'desktop';
      if (screenWidth < 768) type = 'mobile';
      else if (screenWidth < 1024) type = 'tablet';
      
      const connection = (navigator as any).connection?.effectiveType || 'unknown';
      const memory = (navigator as any).deviceMemory;
      const cores = (navigator as any).hardwareConcurrency;
      
      setDeviceInfo({
        type,
        screenSize: `${screenWidth}x${screenHeight}`,
        userAgent,
        connection,
        memory,
        cores
      });
    };

    detectDevice();
    window.addEventListener('resize', detectDevice);
    return () => window.removeEventListener('resize', detectDevice);
  }, []);

  // Monitor performance metrics
  useEffect(() => {
    if (!showUI) return;

    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      
      entries.forEach((entry) => {
        if (entry.entryType === 'paint') {
          const paintEntry = entry as PerformancePaintTiming;
          if (paintEntry.name === 'first-contentful-paint') {
            setMetrics(prev => ({ ...prev, fcp: paintEntry.startTime }));
          }
        } else if (entry.entryType === 'largest-contentful-paint') {
          const lcpEntry = entry as any;
          setMetrics(prev => ({ ...prev, lcp: lcpEntry.startTime }));
        } else if (entry.entryType === 'first-input') {
          const fidEntry = entry as any;
          setMetrics(prev => ({ ...prev, fid: fidEntry.processingStart - fidEntry.startTime }));
        } else if (entry.entryType === 'layout-shift') {
          const clsEntry = entry as any;
          setMetrics(prev => ({ ...prev, cls: prev.cls + clsEntry.value }));
        }
      });
    });

    // Observe different performance entry types
    observer.observe({ entryTypes: ['paint', 'largest-contentful-paint', 'first-input', 'layout-shift'] });

    // Measure TTFB
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigationEntry) {
      setMetrics(prev => ({ ...prev, ttfb: navigationEntry.responseStart - navigationEntry.requestStart }));
    }

    // Measure other metrics
    const measureSpeedIndex = () => {
      const images = document.querySelectorAll('img');
      let totalLoadTime = 0;
      let loadedImages = 0;
      
      images.forEach(img => {
        if (img.complete) {
          totalLoadTime += performance.now();
          loadedImages++;
        }
      });
      
      if (loadedImages > 0) {
        const speedIndex = totalLoadTime / loadedImages;
        setMetrics(prev => ({ ...prev, si: speedIndex }));
      }
    };

    // Measure after images load
    if (document.readyState === 'complete') {
      measureSpeedIndex();
    } else {
      window.addEventListener('load', measureSpeedIndex);
    }

    return () => {
      observer.disconnect();
      window.removeEventListener('load', measureSpeedIndex);
=======
    domLoad: 0,
    windowLoad: 0
  });
  const [score, setScore] = useState<PerformanceScore>({
    overall: 0,
    fcp: 0,
    lcp: 0,
    fid: 0,
    cls: 0,
    ttfb: 0
  });
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [optimizationTips, setOptimizationTips] = useState<string[]>([]);

  // Calculate performance scores based on metrics
  const calculateScore = useCallback((metrics: PerformanceMetrics): PerformanceScore => {
    const fcpScore = Math.max(0, 100 - Math.floor(metrics.fcp / 10));
    const lcpScore = Math.max(0, 100 - Math.floor(metrics.lcp / 100));
    const fidScore = Math.max(0, 100 - Math.floor(metrics.fid / 10));
    const clsScore = Math.max(0, 100 - Math.floor(metrics.cls * 1000));
    const ttfbScore = Math.max(0, 100 - Math.floor(metrics.ttfb / 100));

    const overall = Math.round((fcpScore + lcpScore + fidScore + clsScore + ttfbScore) / 5);

    return {
      overall,
      fcp: fcpScore,
      lcp: lcpScore,
      fid: fidScore,
      cls: clsScore,
      ttfb: ttfbScore
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-c321
    };
  }, [showUI]);

  // Generate performance alerts
  useEffect(() => {
    const newAlerts: PerformanceAlert[] = [];
    
    Object.entries(metrics).forEach(([metric, value]) => {
      if (value > 0) {
        const grade = getGrade(metric as keyof PerformanceMetrics, value);
        if (grade !== 'good') {
          const threshold = thresholds[metric as keyof PerformanceMetrics];
          const alert: PerformanceAlert = {
            id: `${metric}-${Date.now()}`,
            type: grade === 'poor' ? 'error' : 'warning',
            message: `${metric.toUpperCase()} is ${grade === 'poor' ? 'poor' : 'needs improvement'} (${value.toFixed(2)}ms)`,
            metric: metric as keyof PerformanceMetrics,
            value,
            threshold: grade === 'poor' ? threshold.poor : threshold.good,
            timestamp: new Date()
          };
          newAlerts.push(alert);
        }
      }
    });

    setAlerts(prev => {
      const existingAlertIds = prev.map(a => a.metric);
      const filteredNewAlerts = newAlerts.filter(alert => !existingAlertIds.includes(alert.alert.metric));
      return [...prev, ...filteredNewAlerts];
    });
  }, [metrics, getGrade, thresholds]);

  // Auto-optimization suggestions
  useEffect(() => {
    if (!autoOptimize) return;

    const suggestions: string[] = [];
    
    if (metrics.fcp > thresholds.fcp.needs-improvement) {
      suggestions.push('Optimize critical rendering path');
    }
    if (metrics.lcp > thresholds.lcp.needs-improvement) {
      suggestions.push('Optimize largest contentful paint');
    }
    if (metrics.cls > thresholds.cls.needs-improvement) {
      suggestions.push('Fix layout shifts');
    }
    if (metrics.ttfb > thresholds.ttfb.needs-improvement) {
      suggestions.push('Optimize server response time');
    }

    if (suggestions.length > 0) {
      setOptimizationHistory(prev => [...prev, ...suggestions]);
    }
  }, [metrics, thresholds, autoOptimize]);

  // Performance optimization functions
  const optimizeImages = useCallback(() => {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      if (!img.loading) {
        img.loading = 'lazy';
      }
      if (!img.decoding) {
        img.decoding = 'async';
      }
    });
    setOptimizationHistory(prev => [...prev, 'Images optimized with lazy loading']);
  }, []);

<<<<<<< HEAD
  const optimizeFonts = useCallback(() => {
    const fontLinks = document.querySelectorAll('link[rel="preload"][as="font"]');
    fontLinks.forEach(link => {
      link.setAttribute('crossorigin', 'anonymous');
    });
    setOptimizationHistory(prev => [...prev, 'Fonts optimized with proper crossorigin']);
  }, []);

  const clearOptimizationHistory = useCallback(() => {
    setOptimizationHistory([]);
  }, []);

  // Calculate overall performance score
  const overallScore = useMemo(() => {
    const scores = Object.entries(metrics).map(([metric, value]) => {
      if (value === 0) return 100;
      const grade = getGrade(metric as keyof PerformanceMetrics, value);
      switch (grade) {
        case 'good': return 100;
        case 'needs-improvement': return 60;
        case 'poor': return 20;
        default: return 0;
      }
    }).filter(score => score > 0);
    
    return scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;
  }, [metrics, getGrade]);

  // Get score color
  const getScoreColor = useCallback((score: number): string => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  }, []);

    // Send performance data to analytics
    if (typeof window.gtag !== 'undefined') {
      window.gtag('event', 'performance_metrics', {
        event_category: 'Performance',
        custom_parameter: {
          fcp: metrics.fcp,
          lcp: metrics.lcp,
          fid: metrics.fid,
          cls: metrics.cls,
          ttfb: metrics.ttfb,
          issues: issues.length
        }
      });
    }
  }, [metrics, enabled, logToConsole]);

  return (
    <>
      {/* Floating Performance Button */}
      <motion.div
        className="fixed bottom-8 left-8 z-40"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 1, duration: 0.5 }}
      >
        <button
          onClick={() => setIsVisible(!isVisible)}
          className={`p-4 rounded-full shadow-lg transition-all duration-200 ${
            isVisible 
              ? 'bg-red-500 hover:bg-red-600 text-white' 
              : 'bg-cyan-500 hover:bg-cyan-600 text-white'
          }`}
          aria-label="Toggle performance monitor"
        >
          <Activity className="w-6 h-6" />
        </button>
      </motion.div>
=======
  // Generate optimization tips based on performance metrics
  const generateOptimizationTips = useCallback((metrics: PerformanceMetrics): string[] => {
    const tips: string[] = [];

    if (metrics.fcp > 1800) {
      tips.push('Optimize critical rendering path and reduce render-blocking resources');
    }
    if (metrics.lcp > 2500) {
      tips.push('Optimize images and implement lazy loading for better LCP');
    }
    if (metrics.fid > 100) {
      tips.push('Reduce JavaScript execution time and optimize event handlers');
    }
    if (metrics.cls > 0.1) {
      tips.push('Avoid layout shifts by setting explicit dimensions for images and ads');
    }
    if (metrics.ttfb > 600) {
      tips.push('Optimize server response time and implement caching strategies');
    }

    if (tips.length === 0) {
      tips.push('Great performance! Keep monitoring for any regressions');
    }

    return tips;
  }, []);

  // Monitor Core Web Vitals
  const monitorCoreWebVitals = useCallback(() => {
    if (!('PerformanceObserver' in window)) {
      console.warn('PerformanceObserver not supported');
      return;
    }

    // First Contentful Paint
    try {
      new PerformanceObserver((entryList) => {
        const entries = entryList.getEntries();
        const lastEntry = entries[entries.length - 1];
        if (lastEntry) {
          setMetrics(prev => ({ ...prev, fcp: lastEntry.startTime }));
        }
      }).observe({ entryTypes: ['paint'] });
    } catch (e) {
      console.warn('FCP monitoring failed:', e);
    }

    // Largest Contentful Paint
    try {
      new PerformanceObserver((entryList) => {
        const entries = entryList.getEntries();
        const lastEntry = entries[entries.length - 1];
        if (lastEntry) {
          setMetrics(prev => ({ ...prev, lcp: lastEntry.startTime }));
        }
      }).observe({ entryTypes: ['largest-contentful-paint'] });
    } catch (e) {
      console.warn('LCP monitoring failed:', e);
    }

    // First Input Delay
    try {
      new PerformanceObserver((entryList) => {
        const entries = entryList.getEntries();
        entries.forEach((entry: any) => {
          if (entry.processingStart > 0) {
            const fid = entry.processingStart - entry.startTime;
            setMetrics(prev => ({ ...prev, fid }));
          }
        });
      }).observe({ entryTypes: ['first-input'] });
    } catch (e) {
      console.warn('FID monitoring failed:', e);
    }

    // Cumulative Layout Shift
    try {
      new PerformanceObserver((entryList) => {
        let clsValue = 0;
        const entries = entryList.getEntries();
        entries.forEach((entry: any) => {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
          }
        });
        setMetrics(prev => ({ ...prev, cls: clsValue }));
      }).observe({ entryTypes: ['layout-shift'] });
    } catch (e) {
      console.warn('CLS monitoring failed:', e);
    }
  }, []);

  // Monitor additional performance metrics
  const monitorAdditionalMetrics = useCallback(() => {
    // Time to First Byte
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigationEntry) {
      setMetrics(prev => ({ ...prev, ttfb: navigationEntry.responseStart - navigationEntry.requestStart }));
    }

    // DOM Content Loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        const domLoadTime = performance.now();
        setMetrics(prev => ({ ...prev, domLoad: domLoadTime }));
      });
    } else {
      setMetrics(prev => ({ ...prev, domLoad: performance.now() }));
    }

    // Window Load
    if (document.readyState === 'complete') {
      setMetrics(prev => ({ ...prev, windowLoad: performance.now() }));
    } else {
      window.addEventListener('load', () => {
        const windowLoadTime = performance.now();
        setMetrics(prev => ({ ...prev, windowLoad: windowLoadTime }));
      });
    }
  }, []);

  // Start performance monitoring
  const startMonitoring = useCallback(() => {
    setIsMonitoring(true);
    monitorCoreWebVitals();
    monitorAdditionalMetrics();
  }, [monitorCoreWebVitals, monitorAdditionalMetrics]);

  // Stop performance monitoring
  const stopMonitoring = useCallback(() => {
    setIsMonitoring(false);
  }, []);

  // Reset metrics
  const resetMetrics = useCallback(() => {
    setMetrics({
      fcp: 0,
      lcp: 0,
      fid: 0,
      cls: 0,
      ttfb: 0,
      domLoad: 0,
      windowLoad: 0
    });
    setScore({
      overall: 0,
      fcp: 0,
      lcp: 0,
      fid: 0,
      cls: 0,
      ttfb: 0
    });
    setOptimizationTips([]);
  }, []);

  // Update scores and tips when metrics change
  useEffect(() => {
    const newScore = calculateScore(metrics);
    setScore(newScore);
    setOptimizationTips(generateOptimizationTips(metrics));
    
    if (onPerformanceChange) {
      onPerformanceChange(metrics);
    }
  }, [metrics, calculateScore, generateOptimizationTips, onPerformanceChange]);

  // Start monitoring on mount
  useEffect(() => {
    startMonitoring();
    return () => stopMonitoring();
  }, [startMonitoring, stopMonitoring]);

  // Get performance status color
  const getStatusColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  // Get performance status icon
  const getStatusIcon = (score: number) => {
    if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
    if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
    return <AlertCircle className="w-5 h-5 text-red-400" />;
  };

  return (
    <>
      {/* Performance Monitor Toggle Button */}
      <motion.button
        className="fixed bottom-6 left-6 z-50 w-14 h-14 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-black"
        onClick={() => setIsVisible(!isVisible)}
        aria-label="Toggle performance monitor"
        aria-expanded={isVisible}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Activity className="w-6 h-6 mx-auto" />
      </motion.button>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-c321

      {/* Performance Monitor Panel */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
<<<<<<< HEAD
            className="fixed bottom-24 left-8 z-50 w-96 max-h-[80vh] overflow-hidden"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.3 }}
          >
            <div className="bg-black/90 backdrop-blur-xl rounded-2xl border border-cyan-500/30 shadow-2xl">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-cyan-500/30">
                <div className="flex items-center gap-2">
                  <Activity className="w-5 h-5 text-cyan-400" />
                  <h3 className="text-white font-semibold">Performance Monitor</h3>
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => setIsExpanded(!isExpanded)}
                    className="p-1 text-cyan-400 hover:text-cyan-300 transition-colors"
                    aria-label="Toggle expanded view"
                  >
                    <BarChart3 className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setIsVisible(false)}
                    className="p-1 text-gray-400 hover:text-white transition-colors"
                    aria-label="Close performance monitor"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="p-4 space-y-4 max-h-[60vh] overflow-y-auto">
                {/* Overall Score */}
                <div className="text-center p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-xl border border-cyan-500/30">
                  <div className="text-3xl font-bold text-white mb-2">
                    <span className={getScoreColor(overallScore)}>{overallScore}</span>
                    <span className="text-gray-400">/100</span>
                  </div>
                  <div className="text-sm text-gray-400">Performance Score</div>
                </div>

                {/* Device Info */}
                <div className="bg-black/30 rounded-xl p-3 border border-cyan-500/20">
                  <div className="flex items-center gap-2 mb-2">
                    <Monitor className="w-4 h-4 text-cyan-400" />
                    <span className="text-white text-sm font-medium">Device Info</span>
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-xs text-gray-400">
                    <div>Type: <span className="text-white">{deviceInfo.type}</span></div>
                    <div>Screen: <span className="text-white">{deviceInfo.screenSize}</span></div>
                    <div>Connection: <span className="text-white">{deviceInfo.connection}</span></div>
                    {deviceInfo.memory && <div>Memory: <span className="text-white">{deviceInfo.memory}GB</span></div>}
                    {deviceInfo.cores && <div>Cores: <span className="text-white">{deviceInfo.cores}</span></div>}
                  </div>
                </div>

                {/* Performance Metrics */}
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Gauge className="w-4 h-4 text-cyan-400" />
                    <span className="text-white text-sm font-medium">Metrics</span>
                  </div>
                  
                  {Object.entries(metrics).map(([metric, value]) => {
                    if (value === 0) return null;
                    const grade = getGrade(metric as keyof PerformanceMetrics, value);
                    const color = getGradeColor(grade);
                    
                    return (
                      <div key={metric} className="flex items-center justify-between p-2 bg-black/20 rounded-lg">
                        <div className="flex items-center gap-2">
                          {getGradeIcon(grade)}
                          <span className="text-gray-300 text-xs uppercase">{metric}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className={`text-sm font-mono ${color}`}>
                            {value.toFixed(2)}ms
                          </span>
                          <span className={`text-xs px-2 py-1 rounded-full ${
                            grade === 'good' ? 'bg-green-500/20 text-green-400' :
                            grade === 'needs-improvement' ? 'bg-yellow-500/20 text-yellow-400' :
                            'bg-red-500/20 text-red-400'
                          }`}>
                            {grade}
                          </span>
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* Alerts */}
                {alerts.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <AlertTriangle className="w-4 h-4 text-yellow-400" />
                      <span className="text-white text-sm font-medium">Alerts</span>
                    </div>
                    {alerts.slice(0, 3).map(alert => (
                      <div key={alert.id} className={`p-2 rounded-lg text-xs border ${
                        alert.type === 'error' ? 'bg-red-500/20 border-red-500/30 text-red-400' :
                        alert.type === 'warning' ? 'bg-yellow-500/20 border-yellow-500/30 text-yellow-400' :
                        'bg-blue-500/20 border-blue-500/30 text-blue-400'
                      }`}>
                        {alert.message}
                      </div>
                    ))}
                  </div>
                )}

                {/* Optimization Controls */}
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <Settings className="w-4 h-4 text-cyan-400" />
                    <span className="text-white text-sm font-medium">Optimization</span>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      id="autoOptimize"
                      checked={autoOptimize}
                      onChange={(e) => setAutoOptimize(e.target.checked)}
                      className="rounded border-cyan-500/30 text-cyan-500 focus:ring-cyan-500"
                    />
                    <label htmlFor="autoOptimize" className="text-gray-300 text-sm">
                      Auto-optimize
                    </label>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2">
                    <button
                      onClick={optimizeImages}
                      className="px-3 py-2 bg-cyan-500/20 text-cyan-400 rounded-lg hover:bg-cyan-500/30 transition-colors text-xs"
                    >
                      Optimize Images
                    </button>
                    <button
                      onClick={optimizeFonts}
                      className="px-3 py-2 bg-cyan-500/20 text-cyan-400 rounded-lg hover:bg-cyan-500/30 transition-colors text-xs"
                    >
                      Optimize Fonts
                    </button>
                  </div>
                </div>

                {/* Optimization History */}
                {optimizationHistory.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-white text-sm font-medium">History</span>
                      <button
                        onClick={clearOptimizationHistory}
                        className="text-xs text-gray-400 hover:text-white transition-colors"
                      >
                        Clear
                      </button>
                    </div>
                    <div className="max-h-32 overflow-y-auto space-y-1">
                      {optimizationHistory.slice(-5).map((item, index) => (
                        <div key={index} className="text-xs text-gray-400 bg-black/20 p-2 rounded">
                          {item}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
=======
            initial={{ opacity: 0, x: -20, scale: 0.9 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: -20, scale: 0.9 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
            className="fixed bottom-24 left-6 z-40 w-96 bg-black/90 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-2xl"
            role="dialog"
            aria-labelledby="performance-panel-title"
          >
            <div className="flex items-center justify-between mb-6">
              <h2 id="performance-panel-title" className="text-xl font-bold text-white flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-purple-400" />
                Performance Monitor
              </h2>
              <button
                onClick={() => setIsVisible(false)}
                className="text-gray-400 hover:text-white transition-colors"
                aria-label="Close performance monitor"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Overall Performance Score */}
            <div className="mb-6 p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-xl border border-purple-400/20">
              <div className="flex items-center justify-between mb-3">
                <span className="text-white font-medium">Overall Score</span>
                {getStatusIcon(score.overall)}
              </div>
              <div className="flex items-center gap-3">
                <div className="text-3xl font-bold text-white">{score.overall}</div>
                <div className="text-sm text-gray-400">out of 100</div>
              </div>
              <div className="mt-2">
                <div className="w-full bg-white/20 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full transition-all duration-500 ${
                      score.overall >= 90 ? 'bg-green-500' : 
                      score.overall >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                    }`}
                    style={{ width: `${score.overall}%` }}
                  />
                </div>
              </div>
            </div>

            {/* Core Web Vitals */}
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <Target className="w-4 h-4 text-blue-400" />
                Core Web Vitals
              </h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">First Contentful Paint</span>
                  <div className="flex items-center gap-2">
                    <span className={`text-sm font-medium ${getStatusColor(score.fcp)}`}>
                      {metrics.fcp > 0 ? `${Math.round(metrics.fcp)}ms` : 'N/A'}
                    </span>
                    <span className="text-xs text-gray-400">({score.fcp}/100)</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">Largest Contentful Paint</span>
                  <div className="flex items-center gap-2">
                    <span className={`text-sm font-medium ${getStatusColor(score.lcp)}`}>
                      {metrics.lcp > 0 ? `${Math.round(metrics.lcp)}ms` : 'N/A'}
                    </span>
                    <span className="text-xs text-gray-400">({score.lcp}/100)</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">First Input Delay</span>
                  <div className="flex items-center gap-2">
                    <span className={`text-sm font-medium ${getStatusColor(score.fid)}`}>
                      {metrics.fid > 0 ? `${Math.round(metrics.fid)}ms` : 'N/A'}
                    </span>
                    <span className="text-xs text-gray-400">({score.fid}/100)</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">Cumulative Layout Shift</span>
                  <div className="flex items-center gap-2">
                    <span className={`text-sm font-medium ${getStatusColor(score.cls)}`}>
                      {metrics.cls > 0 ? metrics.cls.toFixed(3) : 'N/A'}
                    </span>
                    <span className="text-xs text-gray-400">({score.cls}/100)</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Additional Metrics */}
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <Gauge className="w-4 h-4 text-green-400" />
                Additional Metrics
              </h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">Time to First Byte</span>
                  <span className="text-sm text-white">
                    {metrics.ttfb > 0 ? `${Math.round(metrics.ttfb)}ms` : 'N/A'}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">DOM Load</span>
                  <span className="text-sm text-white">
                    {metrics.domLoad > 0 ? `${Math.round(metrics.domLoad)}ms` : 'N/A'}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 text-sm">Window Load</span>
                  <span className="text-sm text-white">
                    {metrics.windowLoad > 0 ? `${Math.round(metrics.windowLoad)}ms` : 'N/A'}
                  </span>
                </div>
              </div>
            </div>

            {/* Optimization Tips */}
            {optimizationTips.length > 0 && (
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                  <Info className="w-4 h-4 text-yellow-400" />
                  Optimization Tips
                </h3>
                <div className="space-y-2">
                  {optimizationTips.map((tip, index) => (
                    <div key={index} className="text-sm text-gray-300 bg-white/5 rounded-lg p-3">
                      {tip}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Control Buttons */}
            <div className="flex gap-3">
              <button
                onClick={isMonitoring ? stopMonitoring : startMonitoring}
                className={`flex-1 px-4 py-2 rounded-lg text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-black ${
                  isMonitoring 
                    ? 'bg-red-600 hover:bg-red-700 text-white' 
                    : 'bg-green-600 hover:bg-green-700 text-white'
                }`}
                aria-label={isMonitoring ? 'Stop monitoring' : 'Start monitoring'}
              >
                {isMonitoring ? 'Stop' : 'Start'} Monitoring
              </button>
              <button
                onClick={resetMetrics}
                className="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-black"
                aria-label="Reset performance metrics"
              >
                Reset
              </button>
            </div>

            {/* Monitoring Status */}
            <div className="mt-4 text-center">
              <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs ${
                isMonitoring 
                  ? 'bg-green-500/20 text-green-400 border border-green-500/30' 
                  : 'bg-red-500/20 text-red-400 border border-red-500/30'
              }`}>
                <div className={`w-2 h-2 rounded-full ${isMonitoring ? 'bg-green-400' : 'bg-red-400'}`} />
                {isMonitoring ? 'Monitoring Active' : 'Monitoring Stopped'}
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-c321
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
<<<<<<< HEAD
=======

      {/* Screen Reader Announcements */}
      <div className="sr-only" aria-live="polite" aria-atomic="true">
        Performance score: {score.overall} out of 100
      </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-c321
    </>
  );
};

// Helper function to get score colors
const getScoreColor = (score: string): string => {
  switch (score) {
    case 'Good':
    case 'Excellent':
      return 'text-green-400';
    case 'Needs Improvement':
      return 'text-yellow-400';
    case 'Poor':
      return 'text-red-400';
    default:
      return 'text-white/60';
  }
};

export default PerformanceMonitor;