<<<<<<< HEAD
import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  TrendingUp, AlertTriangle, CheckCircle, Clock, 
  Zap, Database, Network, Cpu, HardDrive, X
} from 'lucide-react';
=======
import React, { useEffect, useState } from 'react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd

// Custom interfaces for Performance API types
interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  processingEnd: number;
  target: EventTarget | null;
}

interface LayoutShiftEntry extends PerformanceEntry {
  hadRecentInput: boolean;
  lastInputTime: number;
  value: number;
}

interface PerformanceMetrics {
<<<<<<< HEAD
  fcp: number;
  lcp: number;
  cls: number;
  tti: number;
  fid: number;
  ttfb: number;
  bundleSize: number;
  loadTime: number;
}

interface PerformanceIssue {
  type: 'warning' | 'error' | 'info';
  message: string;
  suggestion: string;
  priority: 'low' | 'medium' | 'high';
}

const PerformanceMonitor: React.FC = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [issues, setIssues] = useState<PerformanceIssue[]>([]);
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    // Show performance monitor after page load
    const timer = setTimeout(() => setIsVisible(true), 5000);
    
    // Measure performance metrics
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          if (entry.entryType === 'largest-contentful-paint') {
            const lcp = entry.startTime;
            setMetrics(prev => prev ? { ...prev, lcp } : null);
          }
        });
      });
      
      observer.observe({ entryTypes: ['largest-contentful-paint'] });
    }

    // Measure First Contentful Paint
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {
            const fcp = entry.startTime;
            setMetrics(prev => prev ? { ...prev, fcp } : null);
          }
        });
      });
      
      observer.observe({ entryTypes: ['paint'] });
    }

    // Measure bundle size and load time
    const measureBundleSize = () => {
      const loadTime = performance.now();
      const bundleSize = performance.memory?.usedJSHeapSize || 0;
      
      setMetrics(prev => ({
        fcp: prev?.fcp || 0,
        lcp: prev?.lcp || 0,
        cls: prev?.cls || 0,
        tti: prev?.tti || 0,
        fid: prev?.fid || 0,
        ttfb: prev?.ttfb || 0,
        bundleSize,
        loadTime
      }));
    };

    // Wait for page to fully load
    if (document.readyState === 'complete') {
      measureBundleSize();
    } else {
      window.addEventListener('load', measureBundleSize);
    }
  }, [calculateScore]);

    return () => {
      clearTimeout(timer);
      window.removeEventListener('load', measureBundleSize);
=======
  fcp: number | null;
  lcp: number | null;
  fid: number | null;
  cls: number | null;
  ttfb: number | null;
  fmp: number | null;
}

interface PerformanceMonitorProps {
  enabled?: boolean;
  showUI?: boolean;
}

// Type definitions for Performance API
interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  processingEnd: number;
  target?: EventTarget;
}

interface LayoutShiftEntry extends PerformanceEntry {
  value: number;
  hadRecentInput: boolean;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ 
  enabled = true, 
  showUI = false 
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fcp: null,
    lcp: null,
    fid: null,
    cls: null,
    ttfb: null,
    fmp: null
  });

  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (!enabled) return;

    // Measure Time to First Byte
    const measureTTFB = () => {
      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigation) {
        setMetrics(prev => ({ ...prev, ttfb: navigation.responseStart - navigation.requestStart }));
      }
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
    };

<<<<<<< HEAD
  // Analyze performance and generate suggestions
  useEffect(() => {
    if (!metrics) return;

    const newIssues: PerformanceIssue[] = [];

    // FCP analysis
    if (metrics.fcp > 1500) {
      newIssues.push({
        type: 'warning',
        message: 'First Contentful Paint is slow',
        suggestion: 'Optimize critical rendering path, reduce server response time',
        priority: 'high'
      });
    }

    // LCP analysis
    if (metrics.lcp > 2500) {
      newIssues.push({
        type: 'error',
        message: 'Largest Contentful Paint exceeds target',
        suggestion: 'Optimize images, implement lazy loading, use CDN',
        priority: 'high'
      });
    }

    // Bundle size analysis
    if (metrics.bundleSize > 5000000) { // 5MB
      newIssues.push({
        type: 'warning',
        message: 'Bundle size is large',
        suggestion: 'Implement code splitting, tree shaking, and bundle analysis',
        priority: 'medium'
      });
    }

    // Load time analysis
    if (metrics.loadTime > 3000) {
      newIssues.push({
        type: 'info',
        message: 'Page load time could be improved',
        suggestion: 'Enable compression, optimize images, use caching',
        priority: 'low'
      });
    }

    setIssues(newIssues);
  }, [metrics]);

  const getPerformanceScore = useCallback(() => {
    if (!metrics) return 0;
    
    let score = 100;
    
    if (metrics.fcp > 1500) score -= 20;
    if (metrics.lcp > 2500) score -= 25;
    if (metrics.cls > 0.1) score -= 15;
    if (metrics.bundleSize > 5000000) score -= 10;
    if (metrics.loadTime > 3000) score -= 10;
    
    return Math.max(0, score);
  }, [metrics]);

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-500';
    if (score >= 70) return 'text-yellow-500';
    return 'text-red-500';
  };

  // Format time values
  const formatTime = (ms: number): string => {
    if (ms === 0) return 'N/A';
    if (ms < 1000) return `${Math.round(ms)}ms`;
    return `${(ms / 1000).toFixed(2)}s`;
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        className="fixed bottom-4 right-4 z-50"
      >
        <div className="bg-white dark:bg-gray-900 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 max-w-sm">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-2">
              <TrendingUp className="w-5 h-5 text-blue-500" />
              <span className="font-semibold text-gray-900 dark:text-white">
                Performance Monitor
              </span>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
            >
              <X className="w-4 h-4" />
            </button>
          </div>

          {/* Performance Score */}
          {metrics && (
            <div className="p-4">
              <div className="text-center mb-4">
                <div className={`text-3xl font-bold ${getScoreColor(getPerformanceScore())}`}>
                  {getPerformanceScore()}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Performance Score
                </div>
              </div>

              {/* Key Metrics */}
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">FCP</span>
                  <span className={metrics.fcp > 1500 ? 'text-red-500' : 'text-green-500'}>
                    {metrics.fcp.toFixed(0)}ms
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">LCP</span>
                  <span className={metrics.lcp > 2500 ? 'text-red-500' : 'text-green-500'}>
                    {metrics.lcp.toFixed(0)}ms
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">Bundle Size</span>
                  <span className={metrics.bundleSize > 5000000 ? 'text-yellow-500' : 'text-green-500'}>
                    {(metrics.bundleSize / 1000000).toFixed(1)}MB
                  </span>
                </div>
              </div>

          {/* Issues */}
          {issues.length > 0 && (
            <div className="border-t border-gray-200 dark:border-gray-700">
              <div className="p-4">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                  Optimization Suggestions
                </h4>
                <div className="space-y-3">
                  {issues.slice(0, 3).map((issue, index) => (
                    <div key={index} className="flex items-start space-x-2">
                      <div className={`mt-1 w-2 h-2 rounded-full ${
                        issue.type === 'error' ? 'bg-red-500' :
                        issue.type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
                      }`} />
                      <div className="flex-1">
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          {issue.message}
                        </div>
                        <div className="text-xs text-gray-600 dark:text-gray-400">
                          {issue.suggestion}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Expand Button */}
          <div className="border-t border-gray-200 dark:border-gray-700 p-2">
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="w-full text-center text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
            >
              {isExpanded ? 'Show Less' : 'Show More'}
            </button>
          </div>
=======
    // Measure First Contentful Paint
    const measureFCP = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');
          if (fcpEntry) {
            setMetrics(prev => ({ ...prev, fcp: fcpEntry.startTime }));
          }
        });
        observer.observe({ entryTypes: ['paint'] });
      }
    };

    // Measure Largest Contentful Paint
    const measureLCP = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            setMetrics(prev => ({ ...prev, lcp: lastEntry.startTime }));
          }
        });
        observer.observe({ entryTypes: ['largest-contentful-paint'] });
      }
    };

    // Measure First Input Delay
    const measureFID = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          entries.forEach(entry => {
            const eventEntry = entry as PerformanceEventTiming;
            if (eventEntry.processingStart) {
              setMetrics(prev => ({ ...prev, fid: eventEntry.processingStart - eventEntry.startTime }));
            }
          });
        });
        observer.observe({ entryTypes: ['first-input'] });
      }
    };

    // Measure Cumulative Layout Shift
    const measureCLS = () => {
      if ('PerformanceObserver' in window) {
        let clsValue = 0;
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          entries.forEach(entry => {
            const layoutEntry = entry as LayoutShiftEntry;
            if (!layoutEntry.hadRecentInput) {
              clsValue += layoutEntry.value;
            }
          });
          setMetrics(prev => ({ ...prev, cls: clsValue }));
        });
        observer.observe({ entryTypes: ['layout-shift'] });
      }
    };

    // Measure First Meaningful Paint (if available)
    const measureFMP = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fmpEntry = entries.find(entry => entry.name === 'first-meaningful-paint');
          if (fmpEntry) {
            setMetrics(prev => ({ ...prev, fmp: fmpEntry.startTime }));
          }
        });
        observer.observe({ entryTypes: ['paint'] });
      }
    };

    // Initialize measurements
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        measureTTFB();
        measureFCP();
        measureLCP();
        measureFID();
        measureCLS();
        measureFMP();
      });
    } else {
      measureTTFB();
      measureFCP();
      measureLCP();
      measureFID();
      measureCLS();
      measureFMP();
    }

    // Show UI after a delay if enabled
    if (showUI) {
      const timer = setTimeout(() => setIsVisible(true), 2000);
      return () => clearTimeout(timer);
    }
  }, [enabled, showUI]);

  // Send metrics to analytics (if configured)
  useEffect(() => {
    if (enabled && metrics.lcp && metrics.fid && metrics.cls) {
      // Send to Google Analytics or other analytics service
      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('event', 'web_vitals', {
          event_category: 'Web Vitals',
          event_label: 'Zion Tech Group',
          value: Math.round(metrics.lcp),
          non_interaction: true,
          custom_map: {
            metric1: 'lcp',
            metric2: 'fid',
            metric3: 'cls'
          }
        });
      }

      // Log to console in development
      if (process.env.NODE_ENV === 'development') {
        // Performance metrics logged for development
      }
    }
  }, [metrics, enabled]);

  // Performance score calculation
  const getPerformanceScore = () => {
    let score = 100;
    
    if (metrics.lcp && metrics.lcp > 2500) score -= 20;
    if (metrics.fid && metrics.fid > 100) score -= 20;
    if (metrics.cls && metrics.cls > 0.1) score -= 20;
    if (metrics.fcp && metrics.fcp > 1800) score -= 20;
    if (metrics.ttfb && metrics.ttfb > 200) score -= 20;
    
    return Math.max(0, score);
  };

  // Get performance grade
  const getPerformanceGrade = (score: number) => {
    if (score >= 90) return { grade: 'A', color: 'text-green-400', bgColor: 'bg-green-500/20' };
    if (score >= 80) return { grade: 'B', color: 'text-yellow-400', bgColor: 'bg-yellow-500/20' };
    if (score >= 70) return { grade: 'C', color: 'text-orange-400', bgColor: 'bg-orange-500/20' };
    return { grade: 'D', color: 'text-red-400', bgColor: 'bg-red-500/20' };
  };

  if (!showUI || !isVisible) return null;

  const score = getPerformanceScore();
  const grade = getPerformanceGrade(score);

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <div className="bg-gray-900/95 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-4 shadow-2xl max-w-sm">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-semibold text-white">Performance Monitor</h3>
          <button
            onClick={() => setIsVisible(false)}
            className="text-gray-400 hover:text-white transition-colors"
            aria-label="Close performance monitor"
          >
            ×
          </button>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-ffbd
        </div>

        {/* Performance Score */}
        <div className={`text-center p-3 rounded-xl mb-3 ${grade.bgColor}`}>
          <div className={`text-2xl font-bold ${grade.color}`}>{grade.grade}</div>
          <div className="text-sm text-gray-300">Score: {score}/100</div>
        </div>

        {/* Metrics */}
        <div className="space-y-2 text-xs">
          {metrics.fcp && (
            <div className="flex justify-between">
              <span className="text-gray-400">FCP:</span>
              <span className={metrics.fcp <= 1800 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.fcp)}ms
              </span>
            </div>
          )}
          
          {metrics.lcp && (
            <div className="flex justify-between">
              <span className="text-gray-400">LCP:</span>
              <span className={metrics.lcp <= 2500 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.lcp)}ms
              </span>
            </div>
          )}
          
          {metrics.fid && (
            <div className="flex justify-between">
              <span className="text-gray-400">FID:</span>
              <span className={metrics.fid <= 100 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.fid)}ms
              </span>
            </div>
          )}
          
          {metrics.cls && (
            <div className="flex justify-between">
              <span className="text-gray-400">CLS:</span>
              <span className={metrics.cls <= 0.1 ? 'text-green-400' : 'text-red-400'}>
                {metrics.cls.toFixed(3)}
              </span>
            </div>
          )}
          
          {metrics.ttfb && (
            <div className="flex justify-between">
              <span className="text-gray-400">TTFB:</span>
              <span className={metrics.ttfb <= 200 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.ttfb)}ms
              </span>
            </div>
          )}
        </div>

        {/* Recommendations */}
        {score < 90 && (
          <div className="mt-3 p-2 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
            <div className="text-xs text-yellow-400 font-medium mb-1">Recommendations:</div>
            <ul className="text-xs text-gray-300 space-y-1">
              {metrics.lcp && metrics.lcp > 2500 && (
                <li>• Optimize images and reduce LCP</li>
              )}
              {metrics.fid && metrics.fid > 100 && (
                <li>• Reduce JavaScript execution time</li>
              )}
              {metrics.cls && metrics.cls > 0.1 && (
                <li>• Fix layout shifts and stabilize elements</li>
              )}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

// Helper functions
const getScoreIcon = (score: number) => {
  if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
  if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
  return <AlertTriangle className="w-5 h-5 text-red-400" />;
};

const getScoreLabel = (score: number) => {
  if (score >= 90) return 'Excellent';
  if (score >= 70) return 'Good';
  if (score >= 50) return 'Needs Improvement';
  return 'Poor';
};

export default PerformanceMonitor;