import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, Menu, X, ChevronDown, Rocket, Star } from 'lucide-react';
import Link from 'next/link';
import DarkModeToggle from '../community/DarkModeToggle';

interface NavigationItem {
  name: string;
  description: string;
  href: string;
  icon: React.ReactNode;
  children?: {
    name: string;
    description: string;
    href: string;
  }[];
}

const EnhancedNavigation: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const [isScrolled, setIsScrolled] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearchFocused, setIsSearchFocused] = useState(false);
  
  const searchRef = useRef<HTMLInputElement>(null);
  const mobileMenuRef = useRef<HTMLButtonElement>(null);
  const mobileMenuContentRef = useRef<HTMLDivElement>(null);

  const navigationItems: NavigationItem[] = [
    {
      name: 'Services',
      description: 'Explore our comprehensive service offerings',
      href: '/services',
      icon: <Star className="w-4 h-4" />,
      children: [
        { label: 'AI & Automation', href: '/ai-automation-services' },
        { label: 'Quantum Computing', href: '/quantum-services' },
        { label: 'IT Infrastructure', href: '/it-services' },
        { label: 'Cloud Solutions', href: '/cloud-platform' },
        { label: 'Cybersecurity', href: '/security' },
        { label: 'Micro SAAS', href: '/micro-saas' }
      ]
    },
    {
      name: 'Showcase',
      description: 'See our work in action',
      href: '/showcase',
      icon: <Star className="w-4 h-4" />,
      children: [
        { label: 'Case Studies', href: '/case-studies' },
        { label: 'Success Stories', href: '/success-stories' },
        { label: 'Innovation Lab', href: '/innovation-lab' },
        { label: '2025 Services', href: '/comprehensive-2025-services-showcase' },
        { label: '2026 Services', href: '/ultimate-2026-services-showcase' },
        { label: '2037 Services', href: '/2037-innovative-services-showcase' }
      ]
    },
    {
      name: 'Resources',
      description: 'Knowledge and insights',
      href: '/resources',
      icon: <Star className="w-4 h-4" />,
      children: [
        { label: 'Documentation', href: '/docs' },
        { label: 'Blog', href: '/blog' },
        { label: 'Research', href: '/research-development' },
        { label: 'Training', href: '/training' },
        { label: 'Reports', href: '/reports' },
        { label: 'Events', href: '/events' }
      ]
    },
    {
      name: 'Company',
      description: 'Learn about Zion Tech Group',
      href: '/about',
      icon: <Star className="w-4 h-4" />,
      children: [
        { label: 'About Us', href: '/about' },
        { label: 'Careers', href: '/careers' },
        { label: 'Contact', href: '/contact' },
        { label: 'Partners', href: '/partners' },
        { label: 'Investors', href: '/investors' },
        { label: 'Locations', href: '/locations' }
      ]
    }
  ];

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 20);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Close mobile menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as any;
      if (!target.closest('.navigation-dropdown')) {
        closeDropdown();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as any;
      if (!target.closest('.navigation-dropdown')) {
        setActiveDropdown(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Handle escape key
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        setIsOpen(false);
        setActiveDropdown(null);
        setIsSearchFocused(false);
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, []);

  const handleDropdownToggle = (name: string) => {
    setActiveDropdown(activeDropdown === name ? null : name);
  };

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (navRef.current && !navRef.current.contains(event.target as Node)) {
        setActiveDropdown(null);
      }
    };

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
    closeMobileMenu();
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      window.location.href = `/search?q=${encodeURIComponent(searchQuery.trim())}`;
    }
  };

  const handleSearchFocus = () => {
    setIsSearchFocused(true);
  };

  const handleSearchBlur = () => {
    setTimeout(() => setIsSearchFocused(false), 200);
  };

  return (
    <nav className="border-b border-gray-200 dark:border-gray-800 bg-white/70 dark:bg-black/40 backdrop-blur supports-backdrop-blur:bg-white/50 sticky top-0 z-40">
      <div className="container mx-auto px-4 h-14 flex items-center justify-between">
        <Link href="/">
          <a className="font-semibold">Zion</a>
        </Link>
        <div className="flex items-center gap-4 text-sm">
<<<<<<< HEAD
          <Link href="/nations"><a>Nations</a></Link>
          <Link href="/nation-builder"><a>Create Nation</a></Link>
=======
          <Link href="/providers"><a>Providers</a></Link>
>>>>>>> origin/cursor/build-it-service-provider-directory-page-d0d3
          <Link href="/about"><a>About</a></Link>
          <Link href="/blog"><a>Blog</a></Link>
          <Link href="/investor-match"><a>Investor Match</a></Link>
          <Link href="/automation/reports"><a>Reports</a></Link>
          <Link href="/contact"><a>Contact</a></Link>
          <Link href="/investors"><a>Investors</a></Link>
          <Link href="/franchise-portal"><a>Franchise</a></Link>
        </div>
      </nav>

      {/* Mobile Navigation */}
      <AnimatePresence>
        {isMobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className="lg:hidden bg-gray-900/95 backdrop-blur-md border-t border-gray-700/50"
            ref={mobileMenuContentRef}
          >
            <div className="px-4 py-6 space-y-6">
              {/* Mobile Search */}
              <form onSubmit={handleSearch} className="relative">
                <input
                  type="text"
                  placeholder="Search services..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-300 focus:border-transparent"
                  aria-label="Search services and content"
                />
                <button
                  type="submit"
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
                  aria-label="Submit search"
                >
                  <Search className="w-5 h-5" />
                </button>
              </form>

              {/* Mobile Navigation Items */}
              <div className="space-y-4">
                {navigationItems.map((item) => (
                  <div key={item.name} className="border-b border-gray-700/50 pb-4 last:border-b-0">
                    <Link
                      href={item.href}
                      onClick={closeAllDropdowns}
                      className="block text-lg font-medium text-white hover:text-cyan-300 transition-colors py-2"
                    >
                      {item.name}
                    </Link>
                    {item.children && (
                      <div className="mt-2 space-y-2">
                        {item.children.map((child) => (
                          <Link
                            key={child.name}
                            href={child.href}
                            onClick={closeAllDropdowns}
                            className="block text-sm text-gray-400 hover:text-cyan-300 transition-colors py-1 pl-4"
                          >
                            {child.name}
                          </Link>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>

              {/* Mobile CTA */}
              <div className="pt-4 border-t border-gray-700/50">
                <Link
                  href="/get-started"
                  onClick={closeAllDropdowns}
                  className="block w-full text-center px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-semibold rounded-lg hover:from-cyan-600 hover:to-blue-700 transition-all duration-300"
                >
                  Get Started Today
                </Link>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}
