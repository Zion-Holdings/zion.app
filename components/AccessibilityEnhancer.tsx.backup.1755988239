<<<<<<< HEAD
import React, { useEffect, useState, FocusEvent } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Eye, EyeOff, Volume2, VolumeX, Contrast, 
  Type, MousePointer, Keyboard, Accessibility,
  Settings, X, CheckCircle, AlertTriangle
} from 'lucide-react';

interface AccessibilityContextType {
  highContrast: boolean;
  largeText: boolean;
  reducedMotion: boolean;
  screenReader: boolean;
  keyboardNavigation: boolean;
  focusIndicators: boolean;
}

=======
import React, { useEffect, useState, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Eye, EyeOff, Volume2, VolumeX, Keyboard, MousePointer, 
  Monitor, Smartphone, Tablet, CheckCircle, AlertTriangle, 
  Info, Settings, X, Plus, Minus, RotateCcw
} from 'lucide-react';

>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
interface AccessibilityEnhancerProps {
  showUI?: boolean;
}

<<<<<<< HEAD
const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ showUI = false }) => {
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    largeText: false,
    reducedMotion: false,
    screenReader: false,
    keyboardNavigation: false,
    focusIndicators: true
  });

  const [isOpen, setIsOpen] = useState(false);
  const [currentFocus, setCurrentFocus] = useState<HTMLElement | null>(null);
  const [announcements, setAnnouncements] = useState<string[]>([]);

  // Apply accessibility settings
  useEffect(() => {
    const root = document.documentElement;
    
    if (settings.highContrast) {
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
    }

    if (settings.largeText) {
      root.style.fontSize = '18px';
      root.style.setProperty('--text-scale', '1.2');
    } else {
      root.style.fontSize = '16px';
      root.style.setProperty('--text-scale', '1');
    }

    if (settings.reducedMotion) {
      root.style.setProperty('--reduced-motion', 'reduce');
    } else {
      root.classList.remove('reduced-motion');
    }

  const value: AccessibilityContextType = {
    highContrast,
    largeText,
    reducedMotion,
    screenReader,
    fontSize,
    toggleHighContrast,
    toggleLargeText,
    toggleReducedMotion,
    toggleScreenReader,
    setFontSize,
    resetSettings
  };

  return (
    <AccessibilityContext.Provider value={value}>
      {children}
      <AccessibilityPanel isOpen={isOpen} setIsOpen={setIsOpen} />
    </AccessibilityContext.Provider>
  );
};

interface AccessibilityPanelProps {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

const AccessibilityPanel: React.FC<AccessibilityPanelProps> = ({ isOpen, setIsOpen }) => {
  const {
    highContrast,
    largeText,
    reducedMotion,
    screenReader,
    fontSize,
    toggleHighContrast,
    toggleLargeText,
    toggleReducedMotion,
    toggleScreenReader,
    setFontSize,
    resetSettings
  } = useAccessibility();

  const panelRef = useRef<HTMLDivElement>(null);

  // Close panel when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (panelRef.current && !panelRef.current.contains(event.target as HTMLElement)) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [isOpen, setIsOpen]);

  // Handle escape key
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isOpen) {
        setIsOpen(false);
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [isOpen, setIsOpen]);

  return (
    <>
      {/* Accessibility Toggle Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-4 left-4 z-50 p-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-400/50"
        aria-label="Open accessibility panel"
        aria-expanded={isOpen}
        aria-controls="accessibility-panel"
=======
    if (settings.focusIndicators) {
      root.style.setProperty('--focus-visible', '2px solid #3b82f6');
    } else {
      root.style.removeProperty('--focus-visible');
    }
  }, [settings]);

  // Enhanced keyboard navigation
  useEffect(() => {
    if (!settings.keyboardNavigation) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      const target = e.target as HTMLElement;
      
      // Skip if target is an input, textarea, or contenteditable
      if (target.matches('input, textarea, [contenteditable="true"]')) return;

      switch (e.key) {
        case 'Tab':
          // Enhanced tab navigation with visual feedback
          setCurrentFocus(target);
          break;
        case 'Enter':
        case ' ':
          // Enhanced enter/space handling for custom elements
          if (target.getAttribute('role') === 'button' || target.classList.contains('clickable')) {
            e.preventDefault();
            target.click();
            announceToScreenReader(`Activated ${target.textContent || target.getAttribute('aria-label') || 'element'}`);
          }
          break;
        case 'Escape': {
          // Close modals, dropdowns, etc.
          const modals = document.querySelectorAll('[role="dialog"], [data-modal]');
          modals.forEach(modal => {
            if (modal.getAttribute('aria-hidden') === 'false') {
              (modal as HTMLElement).click();
            }
          });
          break;
        }
        case 'h':
        case 'H':
          // Quick navigation to headings
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));
            const currentIndex = headings.findIndex(h => h === document.activeElement);
            const nextIndex = (currentIndex + 1) % headings.length;
            (headings[nextIndex] as HTMLElement).focus();
            announceToScreenReader(`Navigated to ${(headings[nextIndex] as HTMLElement).textContent}`);
          }
          break;
        case 'n':
        case 'N':
          // Quick navigation to navigation elements
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            const navElements = document.querySelectorAll('nav, [role="navigation"]');
            if (navElements.length > 0) {
              (navElements[0] as HTMLElement).focus();
              announceToScreenReader('Navigated to navigation');
            }
          }
          break;
        case 'm':
        case 'M':
          // Quick navigation to main content
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            const mainContent = document.querySelector('main, [role="main"]');
            if (mainContent) {
              (mainContent as HTMLElement).focus();
              announceToScreenReader('Navigated to main content');
            }
          }
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [settings.keyboardNavigation]);

  // Screen reader announcements
  const announceToScreenReader = (message: string) => {
    if (!settings.screenReader) return;

    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;

    document.body.appendChild(announcement);
    
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);

    // Add to announcements list for UI
    setAnnouncements(prev => [...prev, message]);
    setTimeout(() => {
      setAnnouncements(prev => prev.filter(a => a !== message));
    }, 3000);
  };

  // Enhanced focus management
  useEffect(() => {
    if (!settings.focusIndicators) return;

    const handleFocusIn = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      target.style.outline = '2px solid #3b82f6';
      target.style.outlineOffset = '2px';
      
      // Announce focus changes to screen reader
      if (settings.screenReader) {
        const label = target.getAttribute('aria-label') || 
                     target.getAttribute('alt') || 
                     target.textContent || 
                     target.tagName.toLowerCase();
        announceToScreenReader(`Focused on ${label}`);
      }
    };

    const handleFocusOut = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      target.style.outline = '';
      target.style.outlineOffset = '';
    };

    document.addEventListener('focusin', handleFocusIn);
    document.addEventListener('focusout', handleFocusOut);

    return () => {
      document.removeEventListener('focusin', handleFocusIn);
      document.removeEventListener('focusout', handleFocusOut);
    };
  }, [settings.focusIndicators, settings.screenReader]);

  // Enhanced ARIA attributes
  useEffect(() => {
    if (!settings.screenReader) return;

    // Add missing ARIA labels to interactive elements
    const interactiveElements = document.querySelectorAll('button, a, input, select, textarea');
    interactiveElements.forEach(element => {
      const el = element as HTMLElement;
      if (!el.getAttribute('aria-label') && !el.textContent?.trim()) {
        el.setAttribute('aria-label', `${el.tagName.toLowerCase()} element`);
      }
    });

    // Enhance form labels
    const formElements = document.querySelectorAll('input, select, textarea');
    formElements.forEach(element => {
      const el = element as HTMLElement;
      const id = el.getAttribute('id');
      if (id) {
        const label = document.querySelector(`label[for="${id}"]`);
        if (label && !el.getAttribute('aria-describedby')) {
          el.setAttribute('aria-describedby', `${id}-description`);
          
          // Add description if it doesn't exist
          if (!document.getElementById(`${id}-description`)) {
            const description = document.createElement('div');
            description.id = `${id}-description`;
            description.className = 'sr-only';
            description.textContent = `Description for ${label.textContent}`;
            el.parentNode?.insertBefore(description, el.nextSibling);
          }
        }
      }
    });
  }, [settings.screenReader]);

  const toggleSetting = (key: keyof AccessibilitySettings) => {
    setSettings(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  if (!showUI) return null;

  return (
    <>
      {/* Accessibility Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed top-4 right-4 z-50 p-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-full shadow-2xl hover:from-purple-600 hover:to-pink-700 transition-all duration-300 transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-purple-300/50"
        aria-label="Accessibility Settings"
        aria-expanded={isOpen}
        aria-haspopup="dialog"
      >
        <Accessibility className="w-6 h-6" />
      </button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: -20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: -20 }}
            transition={{ duration: 0.2 }}
            className="fixed top-20 right-4 z-50 w-80 bg-gray-900/95 backdrop-blur-sm border border-gray-700 rounded-2xl shadow-2xl"
            role="dialog"
            aria-labelledby="accessibility-title"
            aria-describedby="accessibility-description"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <div className="flex items-center gap-2">
                <Accessibility className="w-5 h-5 text-purple-400" />
                <h3 id="accessibility-title" className="text-lg font-semibold text-white">
                  Accessibility Settings
                </h3>
              </div>
              <button
                onClick={() => setIsOpen(false)}
                className="text-gray-400 hover:text-white transition-colors"
                aria-label="Close accessibility settings"
=======
interface AccessibilityFeature {
  id: string;
  name: string;
  description: string;
  enabled: boolean;
  category: 'visual' | 'auditory' | 'motor' | 'cognitive';
  wcagLevel: 'A' | 'AA' | 'AAA';
}

interface AccessibilityReport {
  score: number;
  issues: string[];
  warnings: string[];
  suggestions: string[];
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ 
  showPanel = false, 
  autoOptimize = true 
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [activeFeatures, setActiveFeatures] = useState<AccessibilityFeature[]>([]);
  const [report, setReport] = useState<AccessibilityReport | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [fontSize, setFontSize] = useState(16);
  const [contrastMode, setContrastMode] = useState(false);
  const [reducedMotion, setReducedMotion] = useState(false);
  const [highContrast, setHighContrast] = useState(false);
  const [focusIndicator, setFocusIndicator] = useState(true);
  const [skipLinks, setSkipLinks] = useState(true);
  const [announcements, setAnnouncements] = useState<string[]>([]);
  
  const focusableElementsRef = useRef<HTMLElement[]>([]);
  const liveRegionRef = useRef<HTMLDivElement>(null);

  // Initialize accessibility features
  const initializeFeatures = useCallback(() => {
    const features: AccessibilityFeature[] = [
      {
        id: 'high-contrast',
        name: 'High Contrast',
        description: 'Increase color contrast for better visibility',
        enabled: false,
        category: 'visual',
        wcagLevel: 'AA'
      },
      {
        id: 'font-size',
        name: 'Font Size Control',
        description: 'Adjustable font sizes for better readability',
        enabled: true,
        category: 'visual',
        wcagLevel: 'AA'
      },
      {
        id: 'reduced-motion',
        name: 'Reduced Motion',
        description: 'Reduce animations for users with vestibular disorders',
        enabled: false,
        category: 'cognitive',
        wcagLevel: 'A'
      },
      {
        id: 'focus-indicator',
        name: 'Focus Indicators',
        description: 'Clear focus indicators for keyboard navigation',
        enabled: true,
        category: 'motor',
        wcagLevel: 'A'
      },
      {
        id: 'skip-links',
        name: 'Skip Links',
        description: 'Skip to main content for keyboard users',
        enabled: true,
        category: 'motor',
        wcagLevel: 'A'
      },
      {
        id: 'screen-reader',
        name: 'Screen Reader Support',
        description: 'Enhanced ARIA labels and semantic markup',
        enabled: true,
        category: 'auditory',
        wcagLevel: 'AA'
      },
      {
        id: 'keyboard-navigation',
        name: 'Keyboard Navigation',
        description: 'Full keyboard accessibility',
        enabled: true,
        category: 'motor',
        wcagLevel: 'A'
      },
      {
        id: 'color-blindness',
        name: 'Color Blindness Support',
        description: 'Color-independent information design',
        enabled: false,
        category: 'visual',
        wcagLevel: 'AA'
      }
    ];
    
    setActiveFeatures(features);
  }, []);

  // Enhanced accessibility analysis
  const analyzeAccessibility = useCallback(async () => {
    setIsAnalyzing(true);
    
    try {
      const issues: string[] = [];
      const warnings: string[] = [];
      const suggestions: string[] = [];
      let score = 100;

      // Check for missing alt text
      const images = document.querySelectorAll('img');
      const imagesWithoutAlt = Array.from(images).filter(img => !img.alt);
      if (imagesWithoutAlt.length > 0) {
        issues.push(`${imagesWithoutAlt.length} images missing alt text`);
        score -= 10;
      }

      // Check for proper heading structure
      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
      const headingLevels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));
      let previousLevel = 0;
      for (const level of headingLevels) {
        if (level - previousLevel > 1) {
          warnings.push('Heading levels should not be skipped');
          score -= 5;
          break;
        }
        previousLevel = level;
      }

      // Check for form labels
      const formInputs = document.querySelectorAll('input, select, textarea');
      const inputsWithoutLabels = Array.from(formInputs).filter(input => {
        const id = input.getAttribute('id');
        const label = document.querySelector(`label[for="${id}"]`);
        const ariaLabel = input.getAttribute('aria-label');
        return !label && !ariaLabel;
      });
      if (inputsWithoutLabels.length > 0) {
        issues.push(`${inputsWithoutLabels.length} form inputs missing labels`);
        score -= 15;
      }

      // Check for sufficient color contrast
      if (!contrastMode) {
        suggestions.push('Enable high contrast mode for better visibility');
      }

      // Check for keyboard navigation
      const focusableElements = document.querySelectorAll(
        'a, button, input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      focusableElementsRef.current = Array.from(focusableElements) as HTMLElement[];
      
      if (focusableElements.length === 0) {
        warnings.push('No focusable elements found');
        score -= 10;
      }

      // Check for ARIA landmarks
      const landmarks = document.querySelectorAll('main, nav, aside, header, footer, [role="main"], [role="navigation"], [role="complementary"], [role="banner"], [role="contentinfo"]');
      if (landmarks.length < 3) {
        suggestions.push('Add more ARIA landmarks for better navigation');
        score -= 5;
      }

      // Check for language declaration
      const html = document.documentElement;
      if (!html.lang) {
        issues.push('HTML language attribute not set');
        score -= 5;
      }

      // Check for skip links
      if (!skipLinks) {
        suggestions.push('Add skip links for keyboard users');
        score -= 5;
      }

      // Check for focus management
      if (!focusIndicator) {
        warnings.push('Focus indicators are disabled');
        score -= 10;
      }

      score = Math.max(0, score);

      const newReport: AccessibilityReport = {
        score,
        issues,
        warnings,
        suggestions
      };

      setReport(newReport);

      // Auto-optimize if enabled
      if (autoOptimize) {
        applyAccessibilityOptimizations(newReport);
      }
    } catch (error) {
      console.warn('Accessibility analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  }, [contrastMode, skipLinks, focusIndicator, autoOptimize]);

  // Apply accessibility optimizations
  const applyAccessibilityOptimizations = useCallback((currentReport: AccessibilityReport) => {
    // Apply high contrast if needed
    if (currentReport.score < 80 && !contrastMode) {
      setContrastMode(true);
      announceChange('High contrast mode enabled for better visibility');
    }

    // Add missing alt text placeholders
    const images = document.querySelectorAll('img:not([alt])');
    images.forEach(img => {
      const imgElement = img as HTMLImageElement;
      if (!imgElement.alt) {
        imgElement.alt = 'Image description needed';
        imgElement.setAttribute('data-accessibility-fix', 'true');
      }
    });

    // Add missing form labels
    const formInputs = document.querySelectorAll('input:not([aria-label]):not([id])');
    formInputs.forEach((input, index) => {
      const id = `input-${index}`;
      input.setAttribute('id', id);
      input.setAttribute('aria-label', 'Form input');
    });

    // Ensure focus indicators
    if (!focusIndicator) {
      setFocusIndicator(true);
      announceChange('Focus indicators enabled');
    }
  }, [contrastMode, focusIndicator]);

  // Announce changes to screen readers
  const announceChange = useCallback((message: string) => {
    setAnnouncements(prev => [...prev, message]);
    
    if (liveRegionRef.current) {
      liveRegionRef.current.textContent = message;
    }

    // Clear announcement after 3 seconds
    setTimeout(() => {
      setAnnouncements(prev => prev.filter(announcement => announcement !== message));
    }, 3000);
  }, []);

  // Enhanced keyboard navigation
  const setupKeyboardNavigation = useCallback(() => {
    if (typeof window === 'undefined') return;

    const handleKeyDown = (e: KeyboardEvent) => {
      // Skip to main content
      if (e.key === 'Tab' && e.altKey) {
        e.preventDefault();
        const main = document.querySelector('main') || document.querySelector('[role="main"]');
        if (main) {
          (main as HTMLElement).focus();
          announceChange('Skipped to main content');
        }
      }

      // Toggle high contrast
      if (e.key === 'c' && e.ctrlKey && e.altKey) {
        e.preventDefault();
        setContrastMode(prev => !prev);
        announceChange(contrastMode ? 'High contrast disabled' : 'High contrast enabled');
      }

      // Toggle reduced motion
      if (e.key === 'm' && e.ctrlKey && e.altKey) {
        e.preventDefault();
        setReducedMotion(prev => !prev);
        announceChange(reducedMotion ? 'Motion restored' : 'Motion reduced');
      }

      // Font size controls
      if (e.key === '=' && e.ctrlKey) {
        e.preventDefault();
        setFontSize(prev => Math.min(prev + 2, 32));
        announceChange(`Font size increased to ${fontSize + 2}px`);
      }

      if (e.key === '-' && e.ctrlKey) {
        e.preventDefault();
        setFontSize(prev => Math.max(prev - 2, 12));
        announceChange(`Font size decreased to ${fontSize - 2}px`);
      }

      // Reset font size
      if (e.key === '0' && e.ctrlKey) {
        e.preventDefault();
        setFontSize(16);
        announceChange('Font size reset to default');
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [contrastMode, reducedMotion, fontSize, announceChange]);

  // Apply visual accessibility features
  useEffect(() => {
    const root = document.documentElement;
    
    // Apply font size
    root.style.fontSize = `${fontSize}px`;
    
    // Apply contrast mode
    if (contrastMode) {
      root.classList.add('high-contrast');
      root.style.setProperty('--contrast-ratio', '4.5');
    } else {
      root.classList.remove('high-contrast');
      root.style.removeProperty('--contrast-ratio');
    }
    
    // Apply reduced motion
    if (reducedMotion) {
      root.classList.add('reduced-motion');
      root.style.setProperty('--animation-duration', '0.01ms');
      root.style.setProperty('--transition-duration', '0.01ms');
    } else {
      root.classList.remove('reduced-motion');
      root.style.removeProperty('--animation-duration');
      root.style.removeProperty('--transition-duration');
    }
    
    // Apply high contrast
    if (highContrast) {
      root.classList.add('ultra-high-contrast');
      root.style.setProperty('--contrast-ratio', '7');
    } else {
      root.classList.remove('ultra-high-contrast');
      root.style.removeProperty('--contrast-ratio');
    }
    
    // Apply focus indicators
    if (focusIndicator) {
      root.classList.add('focus-visible');
    } else {
      root.classList.remove('focus-visible');
    }
  }, [fontSize, contrastMode, reducedMotion, highContrast, focusIndicator]);

  // Setup skip links
  useEffect(() => {
    if (!skipLinks) return;

    // Add skip link if it doesn't exist
    if (!document.getElementById('skip-link')) {
      const skipLink = document.createElement('a');
      skipLink.id = 'skip-link';
      skipLink.href = '#main-content';
      skipLink.textContent = 'Skip to main content';
      skipLink.className = 'sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded z-50';
      
      document.body.insertBefore(skipLink, document.body.firstChild);
    }

    // Add main content id if it doesn't exist
    const main = document.querySelector('main') || document.querySelector('[role="main"]');
    if (main && !main.id) {
      main.id = 'main-content';
    }
  }, [skipLinks]);

  // Initialize component
  useEffect(() => {
    if (showPanel) {
      setIsVisible(true);
      initializeFeatures();
      setupKeyboardNavigation();
      
      if (autoOptimize) {
        analyzeAccessibility();
      }
    }
  }, [showPanel, initializeFeatures, setupKeyboardNavigation, autoOptimize, analyzeAccessibility]);

  // Continuous monitoring
  useEffect(() => {
    if (!showPanel || !autoOptimize) return;

    const interval = setInterval(() => {
      analyzeAccessibility();
    }, 30000); // Every 30 seconds

    return () => clearInterval(interval);
  }, [showPanel, autoOptimize, analyzeAccessibility]);

  if (!showPanel || !isVisible) return null;

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreIcon = (score: number) => {
    if (score >= 90) return <CheckCircle className="w-4 h-4" />;
    if (score >= 70) return <AlertTriangle className="w-4 h-4" />;
    return <AlertTriangle className="w-4 h-4" />;
  };

  const toggleFeature = (featureId: string) => {
    setActiveFeatures(prev => 
      prev.map(feature => 
        feature.id === featureId 
          ? { ...feature, enabled: !feature.enabled }
          : feature
      )
    );
  };

  return (
    <>
      {/* Live region for screen reader announcements */}
      <div
        ref={liveRegionRef}
        aria-live="polite"
        aria-atomic="true"
        className="sr-only"
      />

      {/* Accessibility Panel */}
      <AnimatePresence>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          className="fixed top-4 right-4 z-50"
        >
          <div className="bg-gray-900/95 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-2xl max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <Eye className="w-5 h-5 text-cyan-400" />
                Accessibility
              </h3>
              <button
                onClick={() => setIsVisible(false)}
                className="text-gray-400 hover:text-white transition-colors"
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
              >
                <X className="w-5 h-5" />
              </button>
            </div>

<<<<<<< HEAD
            <div id="accessibility-description" className="sr-only">
              Panel to configure accessibility options including contrast, text size, motion, and screen reader support
            </div>

            {/* Settings */}
            <div className="p-4 space-y-4">
              {/* High Contrast */}
              <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-xl">
                <div className="flex items-center gap-3">
                  <Contrast className="w-5 h-5 text-blue-400" />
                  <div>
                    <div className="text-sm text-gray-300">High Contrast</div>
                    <div className="text-xs text-gray-400">Enhanced color contrast</div>
                  </div>
                </div>
                <button
                  onClick={() => toggleSetting('highContrast')}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.highContrast ? 'bg-blue-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.highContrast}
                  aria-label="Toggle high contrast mode"
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Large Text */}
              <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-xl">
                <div className="flex items-center gap-3">
                  <Type className="w-5 h-5 text-green-400" />
                  <div>
                    <div className="text-sm text-gray-300">Large Text</div>
                    <div className="text-xs text-gray-400">Increased font size</div>
                  </div>
                </div>
                <button
                  onClick={() => toggleSetting('largeText')}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.largeText ? 'bg-green-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.largeText}
                  aria-label="Toggle large text mode"
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.largeText ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Reduced Motion */}
              <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-xl">
                <div className="flex items-center gap-3">
                  <Eye className="w-5 h-5 text-yellow-400" />
                  <div>
                    <div className="text-sm text-gray-300">Reduced Motion</div>
                    <div className="text-xs text-gray-400">Minimize animations</div>
                  </div>
                </div>
                <button
                  onClick={() => toggleSetting('reducedMotion')}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.reducedMotion ? 'bg-yellow-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.reducedMotion}
                  aria-label="Toggle reduced motion mode"
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.reducedMotion ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Screen Reader */}
              <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-xl">
                <div className="flex items-center gap-3">
                  <Volume2 className="w-5 h-5 text-purple-400" />
                  <div>
                    <div className="text-sm text-gray-300">Screen Reader</div>
                    <div className="text-xs text-gray-400">Enhanced announcements</div>
                  </div>
                </div>
                <button
                  onClick={() => toggleSetting('screenReader')}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.screenReader ? 'bg-purple-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.screenReader}
                  aria-label="Toggle screen reader enhancements"
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.screenReader ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Keyboard Navigation */}
              <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-xl">
                <div className="flex items-center gap-3">
                  <Keyboard className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-sm text-gray-300">Keyboard Navigation</div>
                    <div className="text-xs text-gray-400">Enhanced keyboard support</div>
                  </div>
                </div>
                <button
                  onClick={() => toggleSetting('keyboardNavigation')}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.keyboardNavigation ? 'bg-cyan-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.keyboardNavigation}
                  aria-label="Toggle enhanced keyboard navigation"
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.keyboardNavigation ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Focus Indicators */}
              <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-xl">
                <div className="flex items-center gap-3">
                  <MousePointer className="w-5 h-5 text-pink-400" />
                  <div>
                    <div className="text-sm text-gray-300">Focus Indicators</div>
                    <div className="text-xs text-gray-400">Visible focus outlines</div>
                  </div>
                </div>
                <button
                  onClick={() => toggleSetting('focusIndicators')}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-offset-2 focus:ring-offset-gray-900 ${
                    settings.focusIndicators ? 'bg-pink-600' : 'bg-gray-600'
                  }`}
                  role="switch"
                  aria-checked={settings.focusIndicators}
                  aria-label="Toggle focus indicators"
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.focusIndicators ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>
            </div>

            {/* Screen Reader Announcements */}
            {announcements.length > 0 && (
              <div className="p-4 border-t border-gray-700">
                <div className="flex items-center gap-2 mb-3">
                  <Volume2 className="w-4 h-4 text-purple-400" />
                  <h4 className="text-sm font-semibold text-white">Recent Announcements</h4>
                </div>
                <div className="space-y-2 max-h-32 overflow-y-auto">
                  {announcements.map((announcement, index) => (
                    <div key={index} className="text-xs text-purple-300 bg-purple-400/10 p-2 rounded-lg">
                      {announcement}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Keyboard Shortcuts Help */}
            {settings.keyboardNavigation && (
              <div className="p-4 border-t border-gray-700">
                <div className="flex items-center gap-2 mb-3">
                  <Keyboard className="w-4 h-4 text-cyan-400" />
                  <h4 className="text-sm font-semibold text-white">Keyboard Shortcuts</h4>
                </div>
                <div className="space-y-2 text-xs text-gray-300">
                  <div className="flex justify-between">
                    <span>Ctrl/Cmd + H:</span>
                    <span>Navigate headings</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Ctrl/Cmd + N:</span>
                    <span>Go to navigation</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Ctrl/Cmd + M:</span>
                    <span>Go to main content</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Escape:</span>
                    <span>Close modals</span>
                  </div>
                </div>
              </div>
            )}

            {/* Footer */}
            <div className="p-4 border-t border-gray-700">
              <div className="text-xs text-gray-400 text-center">
                Settings are automatically applied and saved
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Screen Reader Only Class */}
=======
            {/* Quick Controls */}
            <div className="grid grid-cols-2 gap-3 mb-4">
              <button
                onClick={() => setFontSize(prev => Math.max(prev - 2, 12))}
                className="bg-gray-700 hover:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <Minus className="w-4 h-4" />
                A-
              </button>
              <button
                onClick={() => setFontSize(prev => Math.min(prev + 2, 32))}
                className="bg-gray-700 hover:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <Plus className="w-4 h-4" />
                A+
              </button>
              <button
                onClick={() => setContrastMode(!contrastMode)}
                className={`text-sm font-medium py-2 px-3 rounded-lg transition-colors flex items-center justify-center gap-2 ${
                  contrastMode 
                    ? 'bg-cyan-500 hover:bg-cyan-600 text-white' 
                    : 'bg-gray-700 hover:bg-gray-600 text-white'
                }`}
              >
                <Monitor className="w-4 h-4" />
                Contrast
              </button>
              <button
                onClick={() => setReducedMotion(!reducedMotion)}
                className={`text-sm font-medium py-2 px-3 rounded-lg transition-colors flex items-center justify-center gap-2 ${
                  reducedMotion 
                    ? 'bg-cyan-500 hover:bg-cyan-600 text-white' 
                    : 'bg-gray-700 hover:bg-gray-600 text-white'
                }`}
              >
                <RotateCcw className="w-4 h-4" />
                Motion
              </button>
            </div>

            {/* Accessibility Score */}
            {report && (
              <div className="bg-gray-800/50 rounded-xl p-4 mb-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="text-sm font-semibold text-white">Accessibility Score</h4>
                  <div className={`flex items-center gap-2 ${getScoreColor(report.score)}`}>
                    {getScoreIcon(report.score)}
                    <span className="text-lg font-bold">{report.score}/100</span>
                  </div>
                </div>
                
                {report.issues.length > 0 && (
                  <div className="mb-3">
                    <h5 className="text-xs font-medium text-red-400 mb-2">Issues ({report.issues.length})</h5>
                    <ul className="text-xs text-red-300 space-y-1">
                      {report.issues.slice(0, 3).map((issue, index) => (
                        <li key={index}>• {issue}</li>
                      ))}
                    </ul>
                  </div>
                )}
                
                {report.warnings.length > 0 && (
                  <div className="mb-3">
                    <h5 className="text-xs font-medium text-yellow-400 mb-2">Warnings ({report.warnings.length})</h5>
                    <ul className="text-xs text-yellow-300 space-y-1">
                      {report.warnings.slice(0, 2).map((warning, index) => (
                        <li key={index}>• {warning}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}

            {/* Features */}
            <div className="space-y-2 mb-4">
              <h4 className="text-sm font-semibold text-white">Features</h4>
              {activeFeatures.map(feature => (
                <div key={feature.id} className="flex items-center justify-between p-2 bg-gray-800/30 rounded-lg">
                  <div className="flex-1">
                    <div className="text-sm text-white">{feature.name}</div>
                    <div className="text-xs text-gray-400">{feature.description}</div>
                    <div className="text-xs text-gray-500">WCAG {feature.wcagLevel}</div>
                  </div>
                  <button
                    onClick={() => toggleFeature(feature.id)}
                    className={`w-10 h-6 rounded-full transition-colors ${
                      feature.enabled ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                  >
                    <div className={`w-4 h-4 bg-white rounded-full transition-transform ${
                      feature.enabled ? 'translate-x-4' : 'translate-x-0'
                    }`} />
                  </button>
                </div>
              ))}
            </div>

            {/* Action Buttons */}
            <div className="flex gap-2">
              <button
                onClick={analyzeAccessibility}
                disabled={isAnalyzing}
                className="flex-1 bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors disabled:cursor-not-allowed"
              >
                {isAnalyzing ? 'Analyzing...' : 'Analyze'}
              </button>
              <button
                onClick={() => {
                  setFontSize(16);
                  setContrastMode(false);
                  setReducedMotion(false);
                  setHighContrast(false);
                  announceChange('All accessibility settings reset to default');
                }}
                className="bg-gray-700 hover:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors"
              >
                Reset
              </button>
            </div>

            {/* Keyboard Shortcuts Info */}
            <div className="mt-4 p-3 bg-gray-800/30 rounded-lg">
              <h5 className="text-xs font-medium text-gray-300 mb-2">Keyboard Shortcuts</h5>
              <div className="text-xs text-gray-400 space-y-1">
                <div>Ctrl + Alt + C: Toggle contrast</div>
                <div>Ctrl + Alt + M: Toggle motion</div>
                <div>Ctrl + =: Increase font</div>
                <div>Ctrl + -: Decrease font</div>
                <div>Ctrl + 0: Reset font</div>
                <div>Alt + Tab: Skip to content</div>
              </div>
            </div>
          </div>
        </motion.div>
      </AnimatePresence>

      {/* Global Accessibility Styles */}
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
      <style jsx global>{`
        .sr-only {
          position: absolute;
          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0, 0, 0, 0);
          white-space: nowrap;
          border: 0;
        }
<<<<<<< HEAD
        
        .high-contrast {
          --text-primary: #ffffff !important;
          --text-secondary: #e5e7eb !important;
          --bg-primary: #000000 !important;
          --bg-secondary: #1f2937 !important;
        }
        
        [data-reduced-motion="reduce"] *,
        [data-reduced-motion="reduce"] *::before,
        [data-reduced-motion="reduce"] *::after {
=======

        .high-contrast {
          --text-color: #000000;
          --bg-color: #ffffff;
          --accent-color: #0000ff;
          --border-color: #000000;
        }

        .ultra-high-contrast {
          --text-color: #000000;
          --bg-color: #ffffff;
          --accent-color: #0000ff;
          --border-color: #000000;
          filter: contrast(200%);
        }

        .reduced-motion * {
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
<<<<<<< HEAD
=======

        .focus-visible :focus {
          outline: 3px solid #3b82f6 !important;
          outline-offset: 2px !important;
        }

        .high-contrast .focus-visible :focus {
          outline: 3px solid #000000 !important;
        }

        .ultra-high-contrast .focus-visible :focus {
          outline: 5px solid #000000 !important;
        }

        @media (prefers-reduced-motion: reduce) {
          .reduced-motion * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
          }
        }
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
      `}</style>
    </>
  );
};

// Keyboard Navigation Hook
export const useKeyboardNavigation = (items: string[], onSelect: (item: string) => void) => {
  const [selectedIndex, setSelectedIndex] = useState(0);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          setSelectedIndex(prev => (prev + 1) % items.length);
          break;
        case 'ArrowUp':
          event.preventDefault();
          setSelectedIndex(prev => (prev - 1 + items.length) % items.length);
          break;
        case 'Enter':
        case ' ':
          event.preventDefault();
          onSelect(items[selectedIndex]);
          break;
        case 'Home':
          event.preventDefault();
          setSelectedIndex(0);
          break;
        case 'End':
          event.preventDefault();
          setSelectedIndex(items.length - 1);
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [items, selectedIndex, onSelect]);

  return { selectedIndex, setSelectedIndex };
};

// Focus Trap Hook
export const useFocusTrap = (isActive: boolean) => {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isActive) return;

    const container = containerRef.current;
    if (!container) return;

    const focusableElements = container.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );

    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

    const handleTabKey = (event: KeyboardEvent) => {
      if (event.key === 'Tab') {
        if (event.shiftKey) {
          if (document.activeElement === firstElement) {
            event.preventDefault();
            lastElement.focus();
          }
        } else {
          if (document.activeElement === lastElement) {
            event.preventDefault();
            firstElement.focus();
          }
        }
      }
    };

    container.addEventListener('keydown', handleTabKey);
    return () => container.removeEventListener('keydown', handleTabKey);
  }, [isActive]);

  return containerRef;
};

// Screen Reader Announcement Hook
export const useScreenReaderAnnouncement = () => {
  const announce = (message: string, priority: 'polite' | 'assertive' = 'polite') => {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', priority);
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    
    document.body.appendChild(announcement);
    
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  return announce;
};

// Skip Link Component
export const SkipLink: React.FC<{ href: string; children: React.ReactNode }> = ({ href, children }) => (
  <a
    href={href}
    className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 z-50 px-4 py-2 bg-cyan-500 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-offset-2"
  >
    {children}
  </a>
);

// Screen Reader Only Text
export const SrOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <span className="sr-only">{children}</span>
);

// Export the main provider component as default
export default AccessibilityProvider;