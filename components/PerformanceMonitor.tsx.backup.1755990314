<<<<<<< HEAD
<<<<<<< HEAD
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, Zap, Clock, TrendingUp, AlertTriangle, 
  CheckCircle, XCircle, Info, BarChart3, Gauge
} from 'lucide-react';

interface PerformanceMetrics {
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
  fcp: number;
  fmp: number;
  tti: number;
=======
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, TrendingUp, TrendingDown, CheckCircle, X, Gauge, Wifi, 
  Smartphone, Tablet, Laptop, AlertTriangle
=======
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
<<<<<<< HEAD
  Activity, TrendingUp, TrendingDown, Zap, 
  Clock, Gauge, BarChart3, X, RefreshCw, AlertTriangle
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
} from 'lucide-react';

interface PerformanceMetrics {
  fcp: number; // First Contentful Paint
  lcp: number; // Largest Contentful Paint
  fid: number; // First Input Delay
  cls: number; // Cumulative Layout Shift
  ttfb: number; // Time to First Byte
  fmp: number; // First Meaningful Paint
<<<<<<< HEAD
  si: number; // Speed Index
  tti: number; // Time to Interactive
}

interface DeviceInfo {
  userAgent: string;
  platform: string;
  language: string;
  cookieEnabled: boolean;
  onLine: boolean;
  hardwareConcurrency?: number;
  deviceMemory?: number;
  maxTouchPoints: number;
  deviceType: string;
}

interface NetworkInfo {
  effectiveType?: string;
  downlink?: number;
  rtt?: number;
  saveData?: boolean;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
=======
=======
  Activity, Zap, Clock, TrendingUp, TrendingDown, 
  AlertTriangle, CheckCircle, X, Settings, RefreshCw,
  BarChart3, Gauge, HardDrive, Wifi, Cpu
} from 'lucide-react';

interface PerformanceMetrics {
  loadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
  timeToInteractive: number;
  memoryUsage?: number;
  networkLatency?: number;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-9800
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
}

interface PerformanceMonitorProps {
  showUI?: boolean;
<<<<<<< HEAD
<<<<<<< HEAD
  autoHide?: boolean;
  threshold?: {
    lcp: number;
    fid: number;
    cls: number;
    ttfb: number;
  };
}

// Type definitions for PerformanceObserver entries
interface FirstInputEntry extends PerformanceEntry {
  processingStart: number;
  processingEnd: number;
  target?: EventTarget;
}

interface LayoutShiftEntry extends PerformanceEntry {
  value: number;
  hadRecentInput: boolean;
}

interface PerformanceResourceTiming extends PerformanceEntry {
  initiatorType: string;
  duration: number;
  name: string;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
  showUI = false,
  autoHide = true,
  threshold = {
    lcp: 2500,
    fid: 100,
    cls: 0.1,
    ttfb: 800
  }
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
    lcp: 0,
    fid: 0,
    cls: 0,
    ttfb: 0,
    fcp: 0,
    fmp: 0,
    tti: 0
  });
  const [isVisible, setIsVisible] = useState(showUI);
  const [alerts, setAlerts] = useState<string[]>([]);
  const [overallScore, setOverallScore] = useState(0);

  const calculateScore = useCallback((metrics: PerformanceMetrics) => {
    let score = 100;
    
    // LCP scoring (0-2500ms, lower is better)
    if (metrics.lcp > threshold.lcp) {
      score -= Math.min(30, (metrics.lcp - threshold.lcp) / 100);
    }
    
    // FID scoring (0-100ms, lower is better)
    if (metrics.fid > threshold.fid) {
      score -= Math.min(25, (metrics.fid - threshold.fid) / 10);
    }
    
    // CLS scoring (0-0.1, lower is better)
    if (metrics.cls > threshold.cls) {
      score -= Math.min(25, (metrics.cls / threshold.cls) * 25);
    }
    
    // TTFB scoring (0-800ms, lower is better)
    if (metrics.ttfb > threshold.ttfb) {
      score -= Math.min(20, (metrics.ttfb - threshold.ttfb) / 100);
    }
    
    return Math.max(0, Math.round(score));
  }, [threshold]);

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  useEffect(() => {
    if (isVisible) {
      startMonitoring();
    }
  }, [isVisible]);

  useEffect(() => {
    // Calculate scores when metrics change
    const newScores: Record<string, PerformanceScore> = {};
    
    Object.entries(metrics).forEach(([metric, value]) => {
      if (value !== null) {
        newScores[metric] = calculateScore(metric, value);
      }
    });
    
    setScores(newScores);
  }, [metrics]);

  const formatMetricValue = (metric: string, value: number | null) => {
    if (value === null) return 'N/A';
    
    switch (metric) {
      case 'fcp':
      case 'lcp':
      case 'fid':
      case 'ttfb':
      case 'fmp':
        return `${Math.round(value)}ms`;
      case 'cls':
        return value.toFixed(3);
      default:
        return value.toString();
    }
  }, [metrics, sendMetricsToAnalytics]);

  const getMetricDescription = (metric: string) => {
    const descriptions = {
      fcp: 'First Contentful Paint - Time until first content is rendered',
      lcp: 'Largest Contentful Paint - Time until largest content is rendered',
      fid: 'First Input Delay - Time until first user interaction is processed',
      cls: 'Cumulative Layout Shift - Visual stability measure',
      ttfb: 'Time to First Byte - Server response time',
      fmp: 'First Meaningful Paint - Time until meaningful content is rendered'
    };
    return descriptions[metric as keyof typeof descriptions] || '';
=======
  autoRefresh?: boolean;
  refreshInterval?: number;
  enableReporting?: boolean;
  apiEndpoint?: string;
=======
  autoRefresh?: boolean;
  refreshInterval?: number;
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
  showUI = false,
  autoRefresh = false,
<<<<<<< HEAD
  refreshInterval = 30000, // 30 seconds
  enableReporting = false,
  apiEndpoint = '/api/performance'
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);
  const [networkInfo, setNetworkInfo] = useState<NetworkInfo | null>(null);
  const [performanceScore, setPerformanceScore] = useState<number>(0);
  const [isReducedMotion, setIsReducedMotion] = useState(false);

  const observerRef = useRef<PerformanceObserver | null>(null);
  const refreshIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // Check for reduced motion preference
  useEffect(() => {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    setIsReducedMotion(prefersReducedMotion);
  }, []);

  // Get device information
  useEffect(() => {
    const getDeviceInfo = () => {
      const userAgent = navigator.userAgent;
      const platform = navigator.platform;
      const language = navigator.language;
      const cookieEnabled = navigator.cookieEnabled;
      const onLine = navigator.onLine;
      const hardwareConcurrency = (navigator as any).hardwareConcurrency;
      const deviceMemory = (navigator as any).deviceMemory;
      const maxTouchPoints = navigator.maxTouchPoints;

      // Detect device type
      let deviceType = 'desktop';
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {
        deviceType = 'mobile';
      } else if (/iPad|Android/i.test(userAgent)) {
        deviceType = 'tablet';
      }

      setDeviceInfo({
        userAgent,
        platform,
        language,
        cookieEnabled,
        onLine,
        hardwareConcurrency,
        deviceMemory,
        maxTouchPoints,
        deviceType
      });
    };

    getDeviceInfo();
  }, []);

  // Get network information
  useEffect(() => {
    const getNetworkInfo = () => {
      if ('connection' in navigator) {
        const connection = (navigator as any).connection;
        setNetworkInfo({
          effectiveType: connection.effectiveType,
          downlink: connection.downlink,
          rtt: connection.rtt,
          saveData: connection.saveData
        });
      }
    };

    getNetworkInfo();
  }, []);

  // Calculate performance score
  const calculatePerformanceScore = useCallback((metrics: PerformanceMetrics): number => {
    const weights = {
      fcp: 0.15,
      lcp: 0.25,
      fid: 0.25,
      cls: 0.25,
      ttfb: 0.10
    };

    let score = 0;
    
    // FCP scoring (0-100)
    if (metrics.fcp <= 1800) score += weights.fcp * 100;
    else if (metrics.fcp <= 3000) score += weights.fcp * 75;
    else if (metrics.fcp <= 4000) score += weights.fcp * 50;
    else score += weights.fcp * 25;

    // LCP scoring (0-100)
    if (metrics.lcp <= 2500) score += weights.lcp * 100;
    else if (metrics.lcp <= 4000) score += weights.lcp * 75;
    else if (metrics.lcp <= 6000) score += weights.lcp * 50;
    else score += weights.lcp * 25;

    // FID scoring (0-100)
    if (metrics.fid <= 100) score += weights.fid * 100;
    else if (metrics.fid <= 300) score += weights.fid * 75;
    else if (metrics.fid <= 500) score += weights.fid * 50;
    else score += weights.fid * 25;

    // CLS scoring (0-100)
    if (metrics.cls <= 0.1) score += weights.cls * 100;
    else if (metrics.cls <= 0.25) score += weights.cls * 75;
    else if (metrics.cls <= 0.4) score += weights.cls * 50;
    else score += weights.cls * 25;

    // TTFB scoring (0-100)
    if (metrics.ttfb <= 800) score += weights.ttfb * 100;
    else if (metrics.ttfb <= 1800) score += weights.ttfb * 75;
    else if (metrics.ttfb <= 3000) score += weights.ttfb * 50;
    else score += weights.ttfb * 25;

    return Math.round(score);
  }, []);

  // Collect performance metrics
  const collectMetrics = useCallback(async (): Promise<PerformanceMetrics> => {
    return new Promise((resolve) => {
      // Wait for page to be fully loaded
      if (document.readyState === 'complete') {
        resolveMetrics();
      } else {
        window.addEventListener('load', resolveMetrics);
      }

      function resolveMetrics() {
        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        const paintEntries = performance.getEntriesByType('paint');
        const measureEntries = performance.getEntriesByType('measure');

        const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0;
        const lcp = (performance as any).getEntriesByType('largest-contentful-paint')?.[0]?.startTime || 0;
        const ttfb = navigation.responseStart - navigation.requestStart;
        const fmp = measureEntries.find(entry => entry.name === 'first-meaningful-paint')?.startTime || 0;

        // Estimate other metrics if not available
        const estimatedLcp = lcp || fcp * 1.5;
        const estimatedFid = 50; // Conservative estimate
        const estimatedCls = 0.05; // Conservative estimate
        const estimatedTti = Math.max(fcp, estimatedLcp) + 1000; // Estimate TTI
        const estimatedSi = fcp * 1.2; // Estimate Speed Index

        const metrics: PerformanceMetrics = {
          fcp,
          lcp: estimatedLcp,
          fid: estimatedFid,
          cls: estimatedCls,
          ttfb,
          fmp,
          si: estimatedSi,
          tti: estimatedTti
        };

        resolve(metrics);
=======
  refreshInterval = 30000
}) => {
<<<<<<< HEAD
  const [isOpen, setIsOpen] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fcp: 0,
    lcp: 0,
    fid: 0,
    cls: 0,
    ttfb: 0,
    fmp: 0
  });
  const [isLoading, setIsLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [performanceScore, setPerformanceScore] = useState<number>(0);

  // Performance thresholds based on Core Web Vitals
  const thresholds = {
    fcp: { good: 1800, poor: 3000 },
    lcp: { good: 2500, poor: 4000 },
    fid: { good: 100, poor: 300 },
    cls: { good: 0.1, poor: 0.25 }
  };

  // Calculate performance score
  const calculateScore = useCallback((metrics: PerformanceMetrics): number => {
    let score = 100;
    
    // FCP scoring
    if (metrics.fcp > thresholds.fcp.poor) score -= 25;
    else if (metrics.fcp > thresholds.fcp.good) score -= 10;
    
    // LCP scoring
    if (metrics.lcp > thresholds.lcp.poor) score -= 25;
    else if (metrics.lcp > thresholds.lcp.good) score -= 10;
    
    // FID scoring
    if (metrics.fid > thresholds.fid.poor) score -= 25;
    else if (metrics.fid > thresholds.fid.good) score -= 10;
    
    // CLS scoring
    if (metrics.cls > thresholds.cls.poor) score -= 25;
    else if (metrics.cls > thresholds.cls.good) score -= 10;
    
    return Math.max(0, score);
  }, []);

  // Get performance metrics
  const getPerformanceMetrics = useCallback(async () => {
    setIsLoading(true);
    
    try {
      // Use Performance API to get metrics
      if ('performance' in window) {
        const perf = window.performance;
        
        // Get navigation timing
        const navigation = perf.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        
        // Get paint timing
        const paintEntries = perf.getEntriesByType('paint');
        const fcpEntry = paintEntries.find(entry => entry.name === 'first-contentful-paint');
        const fmpEntry = paintEntries.find(entry => entry.name === 'first-meaningful-paint');
        
        // Get layout shift
        let cls = 0;
        if ('PerformanceObserver' in window) {
          // This would need to be set up earlier in the app lifecycle
          // For now, we'll use a placeholder
          cls = 0.05; // Placeholder value
        }
        
        const newMetrics: PerformanceMetrics = {
          fcp: fcpEntry ? fcpEntry.startTime : 0,
          lcp: 0, // Would need LCP observer
          fid: 0, // Would need FID observer
          cls: cls,
          ttfb: navigation ? navigation.responseStart - navigation.requestStart : 0,
          fmp: fmpEntry ? fmpEntry.startTime : 0
        };
        
        setMetrics(newMetrics);
        setPerformanceScore(calculateScore(newMetrics));
        setLastUpdate(new Date());
      }
    } catch (error) {
      console.error('Error getting performance metrics:', error);
    } finally {
      setIsLoading(false);
    }
  }, [calculateScore]);
=======
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    loadTime: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    cumulativeLayoutShift: 0,
    firstInputDelay: 0,
    timeToInteractive: 0
  });
  const [isVisible, setIsVisible] = useState(showUI);
  const [isExpanded, setIsExpanded] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [alerts, setAlerts] = useState<string[]>([]);

  const getPerformanceMetrics = useCallback(async (): Promise<PerformanceMetrics> => {
    return new Promise((resolve) => {
      if (typeof window !== 'undefined' && 'performance' in window) {
        // Wait for page to be fully loaded
        if (document.readyState === 'complete') {
          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
          const paintEntries = performance.getEntriesByType('paint');
          
          const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint');
          const lcp = performance.getEntriesByType('largest-contentful-paint')[0];
          
          const metrics: PerformanceMetrics = {
            loadTime: navigation.loadEventEnd - navigation.loadEventStart,
            firstContentfulPaint: fcp ? fcp.startTime : 0,
            largestContentfulPaint: lcp ? lcp.startTime : 0,
            cumulativeLayoutShift: 0, // Would need to be calculated from LayoutShift API
            firstInputDelay: 0, // Would need to be calculated from FirstInput API
            timeToInteractive: navigation.domInteractive - navigation.fetchStart
          };

          // Add memory usage if available
          if ('memory' in performance) {
            const memory = (performance as any).memory;
            metrics.memoryUsage = memory.usedJSHeapSize / 1024 / 1024; // Convert to MB
          }

          resolve(metrics);
        } else {
          // Wait for page to load
          window.addEventListener('load', () => {
            setTimeout(() => getPerformanceMetrics().then(resolve), 100);
          });
        }
      } else {
        resolve({
          loadTime: 0,
          firstContentfulPaint: 0,
          largestContentfulPaint: 0,
          cumulativeLayoutShift: 0,
          firstInputDelay: 0,
          timeToInteractive: 0
        });
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
      }
    });
  }, []);

<<<<<<< HEAD
  // Update metrics
  const updateMetrics = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const newMetrics = await collectMetrics();
      setMetrics(newMetrics);
      
      const score = calculatePerformanceScore(newMetrics);
      setPerformanceScore(score);
      
      setLastUpdate(new Date());

      // Report metrics if enabled
      if (enableReporting && apiEndpoint) {
        try {
          await fetch(apiEndpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              metrics: newMetrics,
              score,
              deviceInfo,
              networkInfo,
              timestamp: new Date().toISOString(),
              url: window.location.href
            })
          });
        } catch {
          // Silently handle reporting errors
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to collect metrics');
    } finally {
      setIsLoading(false);
    }
  }, [collectMetrics, calculatePerformanceScore, enableReporting, apiEndpoint, deviceInfo, networkInfo]);

  // Initialize performance monitoring
  useEffect(() => {
    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {
      // Observe LCP
      try {
        observerRef.current = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
          }
        });
        observerRef.current.observe({ entryTypes: ['largest-contentful-paint'] });
      } catch {
        // Silently handle observer errors
      }
    }

    // Initial metrics collection
    updateMetrics();

    // Set up auto-refresh if enabled
    if (autoRefresh) {
      refreshIntervalRef.current = setInterval(updateMetrics, refreshInterval);
    }

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
      if (refreshIntervalRef.current) {
        clearInterval(refreshIntervalRef.current);
      }
    };
  }, [updateMetrics, autoRefresh, refreshInterval]);

  // Get performance status
  const getPerformanceStatus = (score: number) => {
    if (score >= 90) return { status: 'Excellent', color: 'text-green-400', icon: CheckCircle };
    if (score >= 70) return { status: 'Good', color: 'text-yellow-400', icon: TrendingUp };
    if (score >= 50) return { status: 'Fair', color: 'text-orange-400', icon: AlertTriangle };
    return { status: 'Poor', color: 'text-red-400', icon: TrendingDown };
  };

  // Format time in milliseconds
  const formatTime = (ms: number) => {
=======
  const refreshMetrics = useCallback(async () => {
    setIsLoading(true);
    try {
      const newMetrics = await getPerformanceMetrics();
      setMetrics(newMetrics);
      setLastUpdate(new Date());
      
      // Check for performance issues and add alerts
      const newAlerts: string[] = [];
      if (newMetrics.loadTime > 3000) {
        newAlerts.push('Page load time is slow (>3s)');
      }
      if (newMetrics.firstContentfulPaint > 2000) {
        newAlerts.push('First contentful paint is slow (>2s)');
      }
      if (newMetrics.largestContentfulPaint > 4000) {
        newAlerts.push('Largest contentful paint is slow (>4s)');
      }
      
      setAlerts(newAlerts);
    } catch (error) {
      console.error('Failed to get performance metrics:', error);
    } finally {
      setIsLoading(false);
    }
  }, [getPerformanceMetrics]);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-9800

  // Auto-refresh functionality
  useEffect(() => {
<<<<<<< HEAD
    if (autoRefresh) {
      const interval = setInterval(getPerformanceMetrics, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, refreshInterval, getPerformanceMetrics]);

  // Initial load
  useEffect(() => {
    getPerformanceMetrics();
  }, [getPerformanceMetrics]);

  // Get status color based on score
  const getStatusColor = (score: number): string => {
=======
    if (showUI) {
      refreshMetrics();
    }
  }, [showUI, refreshMetrics]);

  useEffect(() => {
    if (autoRefresh && showUI) {
      const interval = setInterval(refreshMetrics, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, showUI, refreshInterval, refreshMetrics]);

  const getPerformanceScore = (): number => {
    let score = 100;
    
    if (metrics.loadTime > 3000) score -= 20;
    if (metrics.firstContentfulPaint > 2000) score -= 15;
    if (metrics.largestContentfulPaint > 4000) score -= 15;
    if (metrics.timeToInteractive > 5000) score -= 20;
    
    return Math.max(0, score);
  };

  const getScoreColor = (score: number): string => {
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-9800
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

<<<<<<< HEAD
  // Get metric status
  const getMetricStatus = (metric: keyof PerformanceMetrics, value: number): {
    color: string;
    icon: React.ReactNode;
    status: string;
  } => {
    const threshold = thresholds[metric as keyof typeof thresholds];
    if (!threshold) return { color: 'text-gray-400', icon: <BarChart3 className="w-4 h-4" />, status: 'Unknown' };
    
    if (value <= threshold.good) {
      return { color: 'text-green-400', icon: <TrendingUp className="w-4 h-4" />, status: 'Good' };
    } else if (value <= threshold.poor) {
      return { color: 'text-yellow-400', icon: <AlertTriangle className="w-4 h-4" />, status: 'Needs Improvement' };
    } else {
      return { color: 'text-red-400', icon: <TrendingDown className="w-4 h-4" />, status: 'Poor' };
    }
=======
  const getScoreIcon = (score: number) => {
    if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
    if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
    return <AlertTriangle className="w-5 h-5 text-red-400" />;
  };

  const formatTime = (ms: number): string => {
    if (ms < 1000) return `${Math.round(ms)}ms`;
    return `${(ms / 1000).toFixed(2)}s`;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-9800
  };

  // Format time values
  const formatTime = (ms: number): string => {
    if (ms === 0) return 'N/A';
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
    if (ms < 1000) return `${Math.round(ms)}ms`;
    return `${(ms / 1000).toFixed(2)}s`;
  };

  // Get device icon
  const getDeviceIcon = (deviceType: string) => {
    switch (deviceType) {
      case 'mobile': return Smartphone;
      case 'tablet': return Tablet;
      default: return Laptop;
    }
<<<<<<< HEAD
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
  };

  const getOverallScore = () => {
    const validScores = Object.values(scores).filter(score => score.score > 0);
    if (validScores.length === 0) return { score: 0, grade: 'F', color: 'text-gray-500' };
    
    const averageScore = validScores.reduce((sum, score) => sum + score.score, 0) / validScores.length;
    
    let grade: 'A' | 'B' | 'C' | 'D' | 'F';
    let color: string;
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96

    if (averageScore >= 90) {
      grade = 'A';
      color = 'text-green-500';
    } else if (averageScore >= 80) {
      grade = 'B';
      color = 'text-blue-500';
    } else if (averageScore >= 70) {
      grade = 'C';
      color = 'text-yellow-500';
    } else if (averageScore >= 60) {
      grade = 'D';
      color = 'text-orange-500';
    } else {
      grade = 'F';
      color = 'text-red-500';
    }

    return { score: Math.round(averageScore), grade, color };
  };

  const overallScore = getOverallScore();

  useEffect(() => {
    if (typeof window === 'undefined') return;

    // Core Web Vitals monitoring
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'largest-contentful-paint') {
          setMetrics(prev => ({ ...prev, lcp: entry.startTime }));
        }
        if (entry.entryType === 'first-input') {
          const firstInputEntry = entry as FirstInputEntry;
          setMetrics(prev => ({ ...prev, fid: firstInputEntry.processingStart - firstInputEntry.startTime }));
        }
        if (entry.entryType === 'layout-shift') {
          const layoutShiftEntry = entry as LayoutShiftEntry;
          setMetrics(prev => ({ ...prev, cls: layoutShiftEntry.value }));
        }
      }
    });

    observer.observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] });

    // Navigation timing
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigationEntry) {
      setMetrics(prev => ({
        ...prev,
        ttfb: navigationEntry.responseStart - navigationEntry.requestStart,
        fcp: navigationEntry.domContentLoadedEventEnd - navigationEntry.domContentLoadedEventStart,
        fmp: navigationEntry.loadEventEnd - navigationEntry.loadEventStart,
        tti: navigationEntry.domInteractive - navigationEntry.domContentLoadedEventStart
      }));
    }

    // Paint timing
    const paintObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.name === 'first-contentful-paint') {
          setMetrics(prev => ({ ...prev, fcp: entry.startTime }));
        }
      }
    });

    paintObserver.observe({ entryTypes: ['paint'] });

    // Resource timing
    const resourceObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'resource') {
          const resourceEntry = entry as PerformanceResourceTiming;
          if (resourceEntry.initiatorType === 'img' && resourceEntry.duration > 1000) {
            setAlerts(prev => [...prev, `Slow image load: ${resourceEntry.name}`]);
          }
        }
      }
    });

    resourceObserver.observe({ entryTypes: ['resource'] });

    // Long tasks monitoring
    const longTaskObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'longtask' && entry.duration > 50) {
          setAlerts(prev => [...prev, `Long task detected: ${Math.round(entry.duration)}ms`]);
        }
      }
    });

    longTaskObserver.observe({ entryTypes: ['longtask'] });

    return () => {
      observer.disconnect();
      paintObserver.disconnect();
      resourceObserver.disconnect();
      longTaskObserver.disconnect();
    };
  }, []);

  useEffect(() => {
    const score = calculateScore(metrics);
    setOverallScore(score);
    
    // Generate alerts for poor performance
    const newAlerts: string[] = [];
    
    if (metrics.lcp > threshold.lcp) {
      newAlerts.push(`LCP is ${Math.round(metrics.lcp)}ms (should be < ${threshold.lcp}ms)`);
    }
    if (metrics.fid > threshold.fid) {
      newAlerts.push(`FID is ${Math.round(metrics.fid)}ms (should be < ${threshold.fid}ms)`);
    }
    if (metrics.cls > threshold.cls) {
      newAlerts.push(`CLS is ${metrics.cls.toFixed(3)} (should be < ${threshold.cls})`);
    }
    if (metrics.ttfb > threshold.ttfb) {
      newAlerts.push(`TTFB is ${Math.round(metrics.ttfb)}ms (should be < ${threshold.ttfb}ms)`);
    }
    
    setAlerts(newAlerts);
  }, [metrics, threshold, calculateScore]);

  useEffect(() => {
    if (autoHide && showUI) {
      const timer = setTimeout(() => setIsVisible(false), 10000);
      return () => clearTimeout(timer);
    }
  }, [autoHide, showUI]);

  if (!showUI) return null;
=======
  };

  const getPerformanceScore = () => {
    let score = 0;
    let totalMetrics = 0;

    // FCP scoring (0-100)
    if (metrics.fcp !== null) {
      totalMetrics++;
      if (metrics.fcp < 1800) score += 100;
      else if (metrics.fcp < 3000) score += 75;
      else if (metrics.fcp < 4000) score += 50;
      else score += 25;
    }

    // LCP scoring (0-100)
    if (metrics.lcp !== null) {
      totalMetrics++;
      if (metrics.lcp < 2500) score += 100;
      else if (metrics.lcp < 4000) score += 75;
      else if (metrics.lcp < 6000) score += 50;
      else score += 25;
    }

    // FID scoring (0-100)
    if (metrics.fid !== null) {
      totalMetrics++;
      if (metrics.fid < 100) score += 100;
      else if (metrics.fid < 300) score += 75;
      else if (metrics.fid < 500) score += 50;
      else score += 25;
    }

    // CLS scoring (0-100)
    if (metrics.cls !== null) {
      totalMetrics++;
      if (metrics.cls < 0.1) score += 100;
      else if (metrics.cls < 0.25) score += 75;
      else if (metrics.cls < 0.4) score += 50;
      else score += 25;
    }

    return totalMetrics > 0 ? Math.round(score / totalMetrics) : 0;
  };

  // Don't render anything in production
  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  const performanceScore = getPerformanceScore();
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84

  const performanceStatus = metrics ? getPerformanceStatus(performanceScore) : null;
  const StatusIcon = performanceStatus?.icon || Activity;

  return (
<<<<<<< HEAD
<<<<<<< HEAD
=======
    <>
      {/* Floating Performance Button */}
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 z-40 w-14 h-14 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full shadow-lg flex items-center justify-center text-white hover:shadow-xl transition-all duration-200"
        title="Open Performance Dashboard"
        aria-label="Open Performance Dashboard"
      >
        <Activity className="w-6 h-6" />
      </button>

      {/* Performance Dashboard Modal */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={() => setIsOpen(false)}
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="w-full max-w-4xl max-h-[90vh] bg-gray-900 border border-gray-700 rounded-2xl overflow-hidden"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-gray-700">
                <div className="flex items-center space-x-3">
                  <Activity className="w-6 h-6 text-cyan-400" />
                  <h2 className="text-xl font-bold text-white">Performance Dashboard</h2>
                </div>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={getPerformanceMetrics}
                    disabled={isLoading}
                    className="p-2 text-gray-400 hover:text-white transition-colors disabled:opacity-50"
                    title="Refresh metrics"
                    aria-label="Refresh performance metrics"
                  >
                    <RefreshCw className={`w-5 h-5 ${isLoading ? 'animate-spin' : ''}`} />
                  </button>
                  <button
                    onClick={() => setIsOpen(false)}
                    className="p-2 text-gray-400 hover:text-white transition-colors"
                    aria-label="Close performance dashboard"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                {/* Overall Score */}
                <div className="mb-8">
                  <div className="text-center">
                    <div className={`text-6xl font-bold ${getStatusColor(performanceScore)} mb-2`}>
                      {performanceScore}
                    </div>
                    <div className="text-gray-400 mb-4">Performance Score</div>
                    <div className="w-full bg-gray-700 rounded-full h-3">
                      <div
                        className={`h-3 rounded-full transition-all duration-500 ${
                          performanceScore >= 90 ? 'bg-green-500' :
                          performanceScore >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                        }`}
                        style={{ width: `${performanceScore}%` }}
                      />
                    </div>
                  </div>
                </div>

                {/* Core Web Vitals */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-white mb-4">Core Web Vitals</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {[
                      { key: 'fcp', label: 'First Contentful Paint', value: metrics.fcp, unit: 'ms' },
                      { key: 'lcp', label: 'Largest Contentful Paint', value: metrics.lcp, unit: 'ms' },
                      { key: 'fid', label: 'First Input Delay', value: metrics.fid, unit: 'ms' },
                      { key: 'cls', label: 'Cumulative Layout Shift', value: metrics.cls, unit: '' }
                    ].map((metric) => {
                      const status = getMetricStatus(metric.key as keyof PerformanceMetrics, metric.value);
                      return (
                        <div key={metric.key} className="bg-gray-800 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-gray-300 text-sm">{metric.label}</span>
                            <div className={`flex items-center space-x-1 ${status.color}`}>
                              {status.icon}
                              <span className="text-xs">{status.status}</span>
                            </div>
                          </div>
                          <div className="text-2xl font-bold text-white">
                            {metric.key === 'cls' ? metrics.cls.toFixed(3) : formatTime(metric.value)}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Additional Metrics */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-white mb-4">Additional Metrics</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-gray-800 rounded-lg p-4">
                      <div className="text-gray-300 text-sm mb-2">Time to First Byte</div>
                      <div className="text-2xl font-bold text-white">{formatTime(metrics.ttfb)}</div>
                    </div>
                    <div className="bg-gray-800 rounded-lg p-4">
                      <div className="text-gray-300 text-sm mb-2">First Meaningful Paint</div>
                      <div className="text-2xl font-bold text-white">{formatTime(metrics.fmp)}</div>
                    </div>
                  </div>
                </div>

                {/* Last Update */}
                <div className="text-center text-gray-400 text-sm">
                  Last updated: {lastUpdate.toLocaleTimeString()}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
        
        {metrics.lcp !== null && (
          <div className="flex justify-between">
            <span>LCP:</span>
            <span className="font-mono">{Math.round(metrics.lcp)}ms</span>
          </div>
        )}
        
        {metrics.fid !== null && (
          <div className="flex justify-between">
            <span>FID:</span>
            <span className="font-mono">{Math.round(metrics.fid)}ms</span>
          </div>
        )}
        
        {metrics.cls !== null && (
          <div className="flex justify-between">
            <span>CLS:</span>
            <span className="font-mono">{(metrics.cls * 1000 / 1000).toFixed(3)}</span>
          </div>
        )}
        
        {metrics.ttfb !== null && (
          <div className="flex justify-between">
            <span>TTFB:</span>
            <span className="font-mono">{Math.round(metrics.ttfb)}ms</span>
          </div>
        )}
      </div>
      
      <button
        onClick={reportMetrics}
        className="mt-2 w-full px-2 py-1 bg-cyan-600 hover:bg-cyan-700 text-white text-xs rounded transition-colors duration-200"
      >
        Report Metrics
      </button>
    </div>
=======
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: 20, scale: 0.95 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: 20, scale: 0.95 }}
<<<<<<< HEAD
          transition={{ duration: 0.3 }}
          className="fixed bottom-4 right-4 z-50 max-w-sm w-full"
        >
          <div className="bg-black/95 backdrop-blur-xl border border-white/20 rounded-2xl shadow-2xl overflow-hidden">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-white/10">
              <div className="flex items-center space-x-2">
                <Activity className="w-5 h-5 text-cyan-400" />
                <span className="font-semibold text-white">Performance Monitor</span>
              </div>
              <button
                onClick={() => setIsVisible(false)}
                className="p-1 text-gray-400 hover:text-white transition-colors"
=======
    <>
      {/* Floating Performance Button */}
      <motion.button
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={!isReducedMotion ? { scale: 1.1 } : {}}
        whileTap={!isReducedMotion ? { scale: 0.9 } : {}}
        onClick={() => setIsVisible(!isVisible)}
        className="fixed bottom-6 right-6 z-50 p-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-2xl hover:shadow-cyan-500/50 transition-all duration-300"
        aria-label="Toggle performance monitor"
        title="Performance Monitor"
      >
        <Activity className="w-6 h-6" />
      </motion.button>

      {/* Performance Monitor Panel */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            initial={{ opacity: 0, x: 300, scale: 0.9 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: 300, scale: 0.9 }}
            transition={{ duration: isReducedMotion ? 0.1 : 0.3 }}
            className="fixed bottom-6 right-20 z-40 w-96 max-h-[80vh] bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-2xl shadow-2xl overflow-hidden"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
              <div className="flex items-center space-x-3">
                <Gauge className="w-5 h-5 text-cyan-400" />
                <h3 className="text-lg font-semibold text-white">Performance Monitor</h3>
              </div>
              <button
                onClick={() => setIsVisible(false)}
                className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                aria-label="Close performance monitor"
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
              >
                <XCircle className="w-4 h-4" />
              </button>
            </div>

<<<<<<< HEAD
            {/* Overall Score */}
            <div className="p-4 bg-gradient-to-r from-gray-900/50 to-gray-800/50">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-400">Overall Score</span>
                {getScoreIcon(overallScore)}
              </div>
              <div className="flex items-center space-x-3">
                <div className={`text-3xl font-bold ${getScoreColor(overallScore)}`}>
                  {overallScore}
                </div>
                <div className="flex-1">
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full transition-all duration-500 ${
                        overallScore >= 90 ? 'bg-green-500' : overallScore >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{ width: `${overallScore}%` }}
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Metrics Grid */}
            <div className="p-4 space-y-3">
              {Object.entries(metrics).map(([key, value]) => {
                if (key === 'fmp' || key === 'tti') return null; // Skip less important metrics
                
                const status = getMetricStatus(key as keyof PerformanceMetrics, value);
                const color = getMetricColor(status);
                const icon = getMetricIcon(status);
                
                return (
                  <div key={key} className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      {icon}
                      <span className="text-sm text-gray-300 uppercase">{key}</span>
                    </div>
                    <div className={`text-sm font-mono ${color}`}>
                      {key === 'cls' ? value.toFixed(3) : `${Math.round(value)}ms`}
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Alerts */}
            {alerts.length > 0 && (
              <div className="p-4 border-t border-white/10 bg-red-500/10">
                <div className="flex items-center space-x-2 mb-2">
                  <AlertTriangle className="w-4 h-4 text-red-400" />
                  <span className="text-sm font-medium text-red-400">Performance Issues</span>
                </div>
                <div className="space-y-1">
                  {alerts.slice(0, 3).map((alert, index) => (
                    <div key={index} className="text-xs text-red-300">
                      • {alert}
                    </div>
                  ))}
                  {alerts.length > 3 && (
                    <div className="text-xs text-red-400">
                      +{alerts.length - 3} more issues
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Footer */}
            <div className="p-3 bg-gray-900/50 border-t border-white/10">
              <div className="flex items-center justify-between text-xs text-gray-500">
                <span>Real-time monitoring</span>
                <div className="flex items-center space-x-1">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  <span>Live</span>
                </div>
              </div>
=======
            {/* Content */}
            <div className="p-4 space-y-4 max-h-[calc(80vh-80px)] overflow-y-auto">
              {/* Performance Score */}
              {metrics && (
                <div className="text-center p-4 bg-gradient-to-br from-gray-800/50 to-gray-900/50 rounded-xl border border-gray-700/50">
                  <div className="text-3xl font-bold text-white mb-2">{performanceScore}</div>
                  <div className={`flex items-center justify-center space-x-2 ${performanceStatus?.color}`}>
                    <StatusIcon className="w-5 h-5" />
                    <span className="font-medium">{performanceStatus?.status}</span>
                  </div>
                  <div className="text-sm text-gray-400 mt-2">Performance Score</div>
                </div>
              )}

              {/* Core Web Vitals */}
              {metrics && (
                <div className="space-y-3">
                  <h4 className="text-sm font-semibold text-gray-300 uppercase tracking-wide">Core Web Vitals</h4>
                  <div className="grid grid-cols-2 gap-3">
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">LCP</div>
                      <div className="text-lg font-semibold text-white">{formatTime(metrics.lcp)}</div>
                      <div className="text-xs text-gray-500">Largest Contentful Paint</div>
                    </div>
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">FID</div>
                      <div className="text-lg font-semibold text-white">{formatTime(metrics.fid)}</div>
                      <div className="text-xs text-gray-500">First Input Delay</div>
                    </div>
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">CLS</div>
                      <div className="text-lg font-semibold text-white">{metrics.cls.toFixed(3)}</div>
                      <div className="text-xs text-gray-500">Cumulative Layout Shift</div>
                    </div>
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="text-xs text-gray-400 mb-1">FCP</div>
                      <div className="text-lg font-semibold text-white">{formatTime(metrics.fcp)}</div>
                      <div className="text-xs text-gray-500">First Contentful Paint</div>
                    </div>
                  </div>
                </div>
              )}

              {/* Additional Metrics */}
              {metrics && (
                <div className="space-y-3">
                  <h4 className="text-sm font-semibold text-gray-300 uppercase tracking-wide">Additional Metrics</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between items-center p-2 bg-gray-800/20 rounded-lg">
                      <span className="text-sm text-gray-400">TTFB</span>
                      <span className="text-sm font-medium text-white">{formatTime(metrics.ttfb)}</span>
                    </div>
                    <div className="flex justify-between items-center p-2 bg-gray-800/20 rounded-lg">
                      <span className="text-sm text-gray-400">Speed Index</span>
                      <span className="text-sm font-medium text-white">{formatTime(metrics.si)}</span>
                    </div>
                    <div className="flex justify-between items-center p-2 bg-gray-800/20 rounded-lg">
                      <span className="text-sm text-gray-400">TTI</span>
                      <span className="text-sm font-medium text-white">{formatTime(metrics.tti)}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Device & Network Info */}
              {(deviceInfo || networkInfo) && (
                <div className="space-y-3">
                  <h4 className="text-sm font-semibold text-gray-300 uppercase tracking-wide">System Info</h4>
                  
                  {deviceInfo && (
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="flex items-center space-x-2 mb-2">
                        {React.createElement(getDeviceIcon(deviceInfo.deviceType), { className: "w-4 h-4 text-cyan-400" })}
                        <span className="text-sm font-medium text-white capitalize">{deviceInfo.deviceType}</span>
                      </div>
                      <div className="text-xs text-gray-400 space-y-1">
                        <div>Platform: {deviceInfo.platform}</div>
                        <div>CPU Cores: {deviceInfo.hardwareConcurrency || 'Unknown'}</div>
                        <div>Memory: {deviceInfo.deviceMemory ? `${deviceInfo.deviceMemory}GB` : 'Unknown'}</div>
                      </div>
                    </div>
                  )}

                  {networkInfo && (
                    <div className="p-3 bg-gray-800/30 rounded-lg border border-gray-700/50">
                      <div className="flex items-center space-x-2 mb-2">
                        <Wifi className="w-4 h-4 text-green-400" />
                        <span className="text-sm font-medium text-white">{networkInfo.effectiveType || 'Unknown'}</span>
                      </div>
                      <div className="text-xs text-gray-400 space-y-1">
                        <div>Downlink: {networkInfo.downlink ? `${networkInfo.downlink}Mbps` : 'Unknown'}</div>
                        <div>RTT: {networkInfo.rtt ? `${networkInfo.rtt}ms` : 'Unknown'}</div>
                        <div>Save Data: {networkInfo.saveData ? 'Yes' : 'No'}</div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Last Update */}
              {lastUpdate && (
                <div className="text-center text-xs text-gray-500">
                  Last updated: {lastUpdate.toLocaleTimeString()}
                </div>
              )}

              {/* Error Display */}
              {error && (
                <div className="p-3 bg-red-600/20 border border-red-500/50 rounded-lg text-red-400 text-sm">
                  <div className="flex items-center space-x-2">
                    <AlertTriangle className="w-4 h-4" />
                    <span>{error}</span>
                  </div>
                </div>
              )}

              {/* Refresh Button */}
              <button
                onClick={updateMetrics}
                disabled={isLoading}
                className="w-full py-2 px-4 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-medium rounded-lg hover:from-cyan-600 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 flex items-center justify-center space-x-2"
              >
                {isLoading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                    <span>Updating...</span>
                  </>
                ) : (
                  <>
                    <Activity className="w-4 h-4" />
                    <span>Refresh Metrics</span>
                  </>
                )}
              </button>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
            </div>
=======
          className="fixed bottom-4 left-4 z-50"
        >
          {/* Performance Monitor Panel */}
          <div className="bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-xl shadow-2xl shadow-black/50 overflow-hidden">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
              <div className="flex items-center space-x-2">
                <Activity className="w-5 h-5 text-cyan-400" />
                <span className="text-white font-semibold">Performance Monitor</span>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={refreshMetrics}
                  disabled={isLoading}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200 disabled:opacity-50"
                  aria-label="Refresh metrics"
                >
                  <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
                </button>
                <button
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label={isExpanded ? 'Collapse' : 'Expand'}
                >
                  <BarChart3 className="w-4 h-4" />
                </button>
                <button
                  onClick={() => setIsVisible(false)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label="Close"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Performance Score */}
            <div className="p-4 border-b border-gray-700/50">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-400">Performance Score</span>
                {getScoreIcon(getPerformanceScore())}
              </div>
              <div className="flex items-center space-x-3">
                <div className="text-2xl font-bold text-white">
                  {getPerformanceScore()}
                </div>
                <div className="text-sm text-gray-400">/ 100</div>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2 mt-2">
                <div
                  className={`h-2 rounded-full transition-all duration-500 ${
                    getPerformanceScore() >= 90 ? 'bg-green-500' :
                    getPerformanceScore() >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${getPerformanceScore()}%` }}
                />
              </div>
            </div>

            {/* Key Metrics */}
            <div className="p-4 space-y-3">
              <div className="grid grid-cols-2 gap-3">
                <div className="text-center p-2 bg-gray-800/50 rounded-lg">
                  <div className="text-xs text-gray-400 mb-1">Load Time</div>
                  <div className="text-sm font-semibold text-white">
                    {formatTime(metrics.loadTime)}
                  </div>
                </div>
                <div className="text-center p-2 bg-gray-800/50 rounded-lg">
                  <div className="text-xs text-gray-400 mb-1">FCP</div>
                  <div className="text-sm font-semibold text-white">
                    {formatTime(metrics.firstContentfulPaint)}
                  </div>
                </div>
              </div>
              
              <div className="text-xs text-gray-400 text-center">
                Last updated: {lastUpdate.toLocaleTimeString()}
              </div>
            </div>

            {/* Expanded View */}
            <AnimatePresence>
              {isExpanded && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="border-t border-gray-700/50"
                >
                  <div className="p-4 space-y-4">
                    {/* Detailed Metrics */}
                    <div className="space-y-3">
                      <h4 className="text-sm font-semibold text-white">Detailed Metrics</h4>
                      
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Largest Contentful Paint:</span>
                          <span className="text-white">{formatTime(metrics.largestContentfulPaint)}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Time to Interactive:</span>
                          <span className="text-white">{formatTime(metrics.timeToInteractive)}</span>
                        </div>
                        {metrics.memoryUsage && (
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-400">Memory Usage:</span>
                            <span className="text-white">{metrics.memoryUsage.toFixed(1)} MB</span>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Alerts */}
                    {alerts.length > 0 && (
                      <div className="space-y-2">
                        <h4 className="text-sm font-semibold text-white">Performance Alerts</h4>
                        <div className="space-y-1">
                          {alerts.map((alert, index) => (
                            <div key={index} className="flex items-center space-x-2 text-xs text-yellow-400">
                              <AlertTriangle className="w-3 h-3" />
                              <span>{alert}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Recommendations */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold text-white">Recommendations</h4>
                      <div className="text-xs text-gray-400 space-y-1">
                        {getPerformanceScore() < 90 && (
                          <>
                            <div>• Optimize images and assets</div>
                            <div>• Minimize JavaScript bundles</div>
                            <div>• Enable compression and caching</div>
                          </>
                        )}
                        {getPerformanceScore() >= 90 && (
                          <div>• Excellent performance! Keep monitoring for any regressions.</div>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
          </div>
        </motion.div>
      )}
    </AnimatePresence>
<<<<<<< HEAD
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
  );
};

// Missing icon component
const RefreshCw: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
  </svg>
);
=======
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-9800
  );
};

// Helper functions
const getScoreIcon = (score: number) => {
  if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
  if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
  return <AlertTriangle className="w-5 h-5 text-red-400" />;
};

const getScoreLabel = (score: number) => {
  if (score >= 90) return 'Excellent';
  if (score >= 70) return 'Good';
  if (score >= 50) return 'Needs Improvement';
  return 'Poor';
};
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84

export default PerformanceMonitor;