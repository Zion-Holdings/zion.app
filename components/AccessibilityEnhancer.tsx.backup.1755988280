import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
<<<<<<< HEAD
  Settings, X, Eye, EyeOff, Volume2, VolumeX, Type, Contrast, 
  Zap, Sun, Moon, Monitor, Smartphone, Tablet, RotateCcw
=======
  Eye, Keyboard, MousePointer,
  Accessibility, X, Contrast, Type, Ear
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
} from 'lucide-react';

interface AccessibilitySettings {
  highContrast: boolean;
  reducedMotion: boolean;
<<<<<<< HEAD
  fontSize: 'small' | 'medium' | 'large';
  audioMuted: boolean;
  focusIndicator: boolean;
=======
  largeText: boolean;
  screenReader: boolean;
  keyboardNavigation: boolean;
  focusIndicators: boolean;
  colorBlindMode: 'none' | 'protanopia' | 'deuteranopia' | 'tritanopia';
  theme: 'light' | 'dark' | 'auto';
  fontSize: 'normal' | 'large' | 'xlarge';
  lineSpacing: 'normal' | 'relaxed' | 'very-relaxed';
  cursorSize: 'normal' | 'large' | 'xlarge';
  soundEffects: boolean;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
}

const AccessibilityEnhancer: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isVisible, setIsVisible] = useState(false);
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    reducedMotion: false,
<<<<<<< HEAD
    fontSize: 'medium',
    audioMuted: false,
    focusIndicator: false
  });

  // Load settings from localStorage on mount
=======
    largeText: false,
    screenReader: false,
    keyboardNavigation: true,
    focusIndicators: true,
    colorBlindMode: 'none',
    theme: 'auto',
    fontSize: 'normal',
    lineSpacing: 'normal',
    cursorSize: 'normal',
    soundEffects: false
  });
  const [isOpen, setIsOpen] = useState(false);
  const [announcements, setAnnouncements] = useState<string[]>([]);
  const [currentFocus, setCurrentFocus] = useState<HTMLElement | null>(null);

  // Apply accessibility settings to document
  const applySettings = useCallback((newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // High contrast
    root.classList.toggle('high-contrast', newSettings.highContrast);
    
    // Reduced motion
    root.classList.toggle('reduced-motion', newSettings.reducedMotion);
    
    // Large text
    root.classList.remove('large-text', 'xlarge-text');
    if (newSettings.fontSize === 'large') root.classList.add('large-text');
    if (newSettings.fontSize === 'xlarge') root.classList.add('xlarge-text');
    
    // Line spacing
    root.classList.remove('relaxed-spacing', 'very-relaxed-spacing');
    if (newSettings.lineSpacing === 'relaxed') root.classList.add('relaxed-spacing');
    if (newSettings.lineSpacing === 'very-relaxed') root.classList.add('very-relaxed-spacing');
    
    // Cursor size
    root.classList.remove('large-cursor', 'xlarge-cursor');
    if (newSettings.cursorSize === 'large') root.classList.add('large-cursor');
    if (newSettings.cursorSize === 'xlarge') root.classList.add('xlarge-cursor');
    
    // Color blind modes
    root.classList.remove('protanopia', 'deuteranopia', 'tritanopia');
    if (newSettings.colorBlindMode !== 'none') {
      root.classList.add(newSettings.colorBlindMode);
    }
    
    // Theme
    root.classList.remove('light-theme', 'dark-theme');
    if (newSettings.theme !== 'auto') {
      root.classList.add(`${newSettings.theme}-theme`);
    }
    
    // Focus indicators
    root.classList.toggle('focus-indicators', newSettings.focusIndicators);
    
    // Store settings in localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(newSettings));
  }, []);

  // Load saved settings
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
  useEffect(() => {
    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
<<<<<<< HEAD
        console.warn('Failed to parse accessibility settings:', error);
=======
        // Failed to load accessibility settings
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
      }
    }
  }, []);

  // Apply settings to document
  useEffect(() => {
    const root = document.documentElement;
    
    // Apply high contrast
    if (settings.highContrast) {
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
    }
    
    // Apply reduced motion
    if (settings.reducedMotion) {
      root.classList.add('reduced-motion');
    } else {
      root.classList.remove('reduced-motion');
    }
    
    // Apply font size
    root.style.setProperty('--font-size-multiplier', 
      settings.fontSize === 'small' ? '0.875' : 
      settings.fontSize === 'large' ? '1.125' : '1'
    );
    
    // Apply focus indicator
    if (settings.focusIndicator) {
      root.classList.add('enhanced-focus');
    } else {
      root.classList.remove('enhanced-focus');
    }
    
    // Save to localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(settings));
  }, [settings]);

<<<<<<< HEAD
  const updateSetting = useCallback((key: keyof AccessibilitySettings, value: any) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  }, []);

  const resetSettings = useCallback(() => {
    setSettings({
      highContrast: false,
      reducedMotion: false,
      fontSize: 'medium',
      audioMuted: false,
      focusIndicator: false
    });
  }, []);

  // Keyboard shortcuts
=======
  // Enhanced keyboard navigation
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Ctrl/Cmd + Shift + A to toggle accessibility panel
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'A') {
        e.preventDefault();
        setIsOpen(prev => !prev);
      }
      
      // Ctrl/Cmd + Shift + H to toggle high contrast
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'H') {
        e.preventDefault();
        updateSetting('highContrast', !settings.highContrast);
      }
      
      // Ctrl/Cmd + Shift + M to toggle reduced motion
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'M') {
        e.preventDefault();
        updateSetting('reducedMotion', !settings.reducedMotion);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [settings.highContrast, settings.reducedMotion, updateSetting]);

  return (
    <>
      {/* Floating Toggle Button */}
      <motion.button
        className="fixed bottom-6 right-6 z-50 w-14 h-14 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-500/50"
        onClick={() => setIsOpen(!isOpen)}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        aria-label="Open accessibility settings"
        aria-expanded={isOpen}
      >
        <Settings className="w-6 h-6 mx-auto" />
      </motion.button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setIsOpen(false)}
          >
            <motion.div
              className="bg-gray-900 border border-gray-700 rounded-3xl p-8 max-w-md w-full max-h-[90vh] overflow-y-auto"
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-white flex items-center">
                  <Settings className="w-6 h-6 mr-3 text-cyan-400" />
                  Accessibility
                </h2>
                <button
                  onClick={() => setIsOpen(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                  aria-label="Close accessibility settings"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>

              {/* Settings */}
              <div className="space-y-6">
                {/* High Contrast */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Contrast className="w-5 h-5 mr-3 text-cyan-400" />
                    <div>
                      <div className="text-white font-medium">High Contrast</div>
                      <div className="text-gray-400 text-sm">Enhanced color contrast</div>
                    </div>
                  </div>
                  <button
                    onClick={() => updateSetting('highContrast', !settings.highContrast)}
                    className={`relative w-12 h-6 rounded-full transition-colors duration-300 ${
                      settings.highContrast ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    aria-label={`${settings.highContrast ? 'Disable' : 'Enable'} high contrast`}
                  >
                    <motion.div
                      className="w-5 h-5 bg-white rounded-full shadow-md"
                      animate={{ x: settings.highContrast ? 24 : 2 }}
                      transition={{ duration: 0.3 }}
                    />
                  </button>
                </div>

                {/* Reduced Motion */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Zap className="w-5 h-5 mr-3 text-cyan-400" />
                    <div>
                      <div className="text-white font-medium">Reduced Motion</div>
                      <div className="text-gray-400 text-sm">Minimize animations</div>
                    </div>
                  </div>
                  <button
                    onClick={() => updateSetting('reducedMotion', !settings.reducedMotion)}
                    className={`relative w-12 h-6 rounded-full transition-colors duration-300 ${
                      settings.reducedMotion ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    aria-label={`${settings.reducedMotion ? 'Disable' : 'Enable'} reduced motion`}
                  >
                    <motion.div
                      className="w-5 h-5 bg-white rounded-full shadow-md"
                      animate={{ x: settings.reducedMotion ? 24 : 2 }}
                      transition={{ duration: 0.3 }}
                    />
                  </button>
                </div>

                {/* Font Size */}
                <div>
                  <div className="flex items-center mb-3">
                    <Type className="w-5 h-5 mr-3 text-cyan-400" />
                    <div className="text-white font-medium">Font Size</div>
                  </div>
                  <div className="flex gap-2">
                    {(['small', 'medium', 'large'] as const).map((size) => (
                      <button
                        key={size}
                        onClick={() => updateSetting('fontSize', size)}
                        className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${
                          settings.fontSize === size
                            ? 'bg-cyan-500 text-white'
                            : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                        }`}
                        aria-label={`Set font size to ${size}`}
                      >
                        {size === 'small' && <span className="text-xs">A</span>}
                        {size === 'medium' && <span className="text-base">A</span>}
                        {size === 'large' && <span className="text-lg">A</span>}
                      </button>
                    ))}
                  </div>
                </div>

                {/* Audio Mute */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    {settings.audioMuted ? (
                      <VolumeX className="w-5 h-5 mr-3 text-cyan-400" />
                    ) : (
                      <Volume2 className="w-5 h-5 mr-3 text-cyan-400" />
                    )}
                    <div>
                      <div className="text-white font-medium">Audio</div>
                      <div className="text-gray-400 text-sm">
                        {settings.audioMuted ? 'Muted' : 'Enabled'}
                      </div>
                    </div>
                  </div>
                  <button
                    onClick={() => updateSetting('audioMuted', !settings.audioMuted)}
                    className={`relative w-12 h-6 rounded-full transition-colors duration-300 ${
                      settings.audioMuted ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    aria-label={`${settings.audioMuted ? 'Enable' : 'Mute'} audio`}
                  >
                    <motion.div
                      className="w-5 h-5 bg-white rounded-full shadow-md"
                      animate={{ x: settings.audioMuted ? 24 : 2 }}
                      transition={{ duration: 0.3 }}
                    />
                  </button>
                </div>

                {/* Enhanced Focus */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Eye className="w-5 h-5 mr-3 text-cyan-400" />
                    <div>
                      <div className="text-white font-medium">Enhanced Focus</div>
                      <div className="text-gray-400 text-sm">Better focus indicators</div>
                    </div>
                  </div>
                  <button
                    onClick={() => updateSetting('focusIndicator', !settings.focusIndicator)}
                    className={`relative w-12 h-6 rounded-full transition-colors duration-300 ${
                      settings.focusIndicator ? 'bg-cyan-500' : 'bg-gray-600'
                    }`}
                    aria-label={`${settings.focusIndicator ? 'Disable' : 'Enable'} enhanced focus`}
                  >
                    <motion.div
                      className="w-5 h-5 bg-white rounded-full shadow-md"
                      animate={{ x: settings.focusIndicator ? 24 : 2 }}
                      transition={{ duration: 0.3 }}
                    />
                  </button>
                </div>
              </div>

              {/* Reset Button */}
              <div className="mt-8 pt-6 border-t border-gray-700">
                <button
                  onClick={resetSettings}
                  className="w-full px-4 py-3 bg-gray-800 hover:bg-gray-700 text-white font-medium rounded-xl transition-colors duration-300 flex items-center justify-center"
                  aria-label="Reset all accessibility settings to default"
                >
                  <RotateCcw className="w-4 h-4 mr-2" />
                  Reset to Default
                </button>
              </div>

              {/* Keyboard Shortcuts Help */}
              <div className="mt-6 p-4 bg-gray-800/50 rounded-xl">
                <h3 className="text-white font-medium mb-3">Keyboard Shortcuts</h3>
                <div className="space-y-2 text-sm text-gray-400">
                  <div><kbd className="px-2 py-1 bg-gray-700 rounded text-xs">Ctrl/Cmd + Shift + A</kbd> Toggle panel</div>
                  <div><kbd className="px-2 py-1 bg-gray-700 rounded text-xs">Ctrl/Cmd + Shift + H</kbd> High contrast</div>
                  <div><kbd className="px-2 py-1 bg-gray-700 rounded text-xs">Ctrl/Cmd + Shift + M</kbd> Reduced motion</div>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

import React, { useEffect, useState, useCallback } from 'react';

interface AccessibilityEnhancerProps {
  enabled?: boolean;
  showControls?: boolean;
  autoHide?: boolean;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({
  enabled = true,
  showControls = false,
  autoHide = true,
}) => {
  const [isVisible, setIsVisible] = useState(showControls);
  const [fontSize, setFontSize] = useState(16);
  const [highContrast, setHighContrast] = useState(false);
  const [reducedMotion, setReducedMotion] = useState(false);
  const [focusVisible, setFocusVisible] = useState(false);
  const [isKeyboardUser, setIsKeyboardUser] = useState(false);

  // Detect keyboard user
  useEffect(() => {
    const handleKeyDown = () => setIsKeyboardUser(true);
    const handleMouseDown = () => setIsKeyboardUser(false);
    
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('mousedown', handleMouseDown);
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('mousedown', handleMouseDown);
    };
  }, []);

  // Apply accessibility features
  useEffect(() => {
    if (!enabled) return;

    // Apply font size
    document.documentElement.style.fontSize = `${fontSize}px`;
    
    // Apply high contrast
    if (highContrast) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
    }
    
    // Apply reduced motion
    if (reducedMotion) {
      document.documentElement.classList.add('reduced-motion');
    } else {
      document.documentElement.classList.remove('reduced-motion');
    }
    
    // Apply focus visible
    if (focusVisible) {
      document.documentElement.classList.add('focus-visible');
    } else {
      document.documentElement.classList.remove('focus-visible');
    }
  }, [enabled, fontSize, highContrast, reducedMotion, focusVisible]);

  // Enhanced keyboard navigation
  useEffect(() => {
    if (!enabled) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      // Skip if user is typing in input fields
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }

<<<<<<< HEAD
      // Navigation shortcuts
      if (e.altKey) {
        switch (e.key) {
          case 'h':
            e.preventDefault();
            document.querySelector('main')?.focus();
            break;
          case 'n':
            e.preventDefault();
            document.querySelector('nav')?.focus();
            break;
          case 'f':
            e.preventDefault();
            document.querySelector('footer')?.focus();
            break;
          case 's':
            e.preventDefault();
            const searchInput = document.querySelector('input[type="search"], .search-input') as HTMLElement;
            if (searchInput) searchInput.focus();
            break;
        }
      }

      // Skip to content
      if (e.key === 'Tab' && e.shiftKey && document.activeElement === document.body) {
        e.preventDefault();
        const skipLink = document.querySelector('.skip-link') as HTMLElement;
        if (skipLink) {
          skipLink.focus();
=======
      // Enhanced keyboard shortcuts
      switch (e.key) {
        case 'Tab':
          // Enhanced tab navigation with visual feedback
          if (e.shiftKey) {
            // Shift+Tab - previous element
            announceToScreenReader('Navigating to previous element');
          } else {
            // Tab - next element
            announceToScreenReader('Navigating to next element');
          }
          break;
        
        case 'Enter':
        case ' ':
          // Enter or Space - activate element
          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {
            announceToScreenReader(`Activating ${target.textContent || 'element'}`);
          }
          break;
        
        case 'Escape':
          // Escape - close modals, dropdowns
          announceToScreenReader('Closing current element');
          break;
        
        case 'h':
        case 'H': {
          // H - go to next heading
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            navigateToNextHeading();
          }
          break;
        }
        
        case 'l':
        case 'L': {
          // L - go to next link
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            navigateToNextLink();
          }
          break;
        }
        
        case 'm':
        case 'M': {
          // M - go to main content
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            navigateToMainContent();
          }
          break;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [enabled]);

  // Enhanced focus management
  useEffect(() => {
<<<<<<< HEAD
    if (!enabled) return;

    // Add focus indicators
    const addFocusIndicators = () => {
      const style = document.createElement('style');
      style.textContent = `
        .focus-visible *:focus {
          outline: 3px solid #3b82f6 !important;
          outline-offset: 2px !important;
          border-radius: 4px !important;
        }
        
        .high-contrast {
          filter: contrast(1.5) brightness(1.2) !important;
        }
        
        .high-contrast * {
          border-color: #ffffff !important;
        }
=======
      {/* Global CSS for accessibility features */}
      <style jsx global>{`
        :root {
          --font-size-multiplier: 1;
        }
        
        .high-contrast {
          --text-primary: #ffffff;
          --text-secondary: #e5e7eb;
          --bg-primary: #000000;
          --bg-secondary: #1f2937;
          --accent: #06b6d4;
        }
        
        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
        
        .enhanced-focus *:focus {
          outline: 3px solid #06b6d4 !important;
          outline-offset: 2px !important;
        }
        
        body {
          font-size: calc(1rem * var(--font-size-multiplier));
        }
      });

      // Add labels to links without text
      document.querySelectorAll('a:not([aria-label]):not([aria-labelledby])').forEach(link => {
        if (!link.textContent?.trim()) {
          const icon = link.querySelector('svg, img');
          if (icon) {
            const iconText = icon.getAttribute('aria-label') || icon.getAttribute('alt') || 'Link';
            link.setAttribute('aria-label', iconText);
          }
        }
      });

      // Add role to navigation
      document.querySelectorAll('nav').forEach(nav => {
        if (!nav.getAttribute('role')) {
          nav.setAttribute('role', 'navigation');
        }
      });

      // Add role to main content
      document.querySelectorAll('main').forEach(main => {
        if (!main.getAttribute('role')) {
          main.setAttribute('role', 'main');
        }
      });

      // Add role to footer
      document.querySelectorAll('footer').forEach(footer => {
        if (!footer.getAttribute('role')) {
          footer.setAttribute('role', 'contentinfo');
        }
      });
    };

    enhanceARIA();

    // Re-run ARIA enhancement when DOM changes
    const observer = new MutationObserver(enhanceARIA);
    observer.observe(document.body, { childList: true, subtree: true });

    return () => observer.disconnect();
  }, [enabled]);

  // Announce page changes to screen readers
  useEffect(() => {
    if (!enabled) return;

    const announcePageChange = () => {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = `Page loaded: ${document.title}`;
      
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    };

    // Announce on route change
    const handleRouteChange = () => {
      setTimeout(announcePageChange, 100);
    };

    window.addEventListener('popstate', handleRouteChange);
    
    // Listen for Next.js route changes
    if (typeof window !== 'undefined' && (window as any).__NEXT_DATA__) {
      const originalPushState = history.pushState;
      history.pushState = function(...args) {
        originalPushState.apply(history, args);
        handleRouteChange();
      };
    }

    return () => {
      window.removeEventListener('popstate', handleRouteChange);
    };
  }, [enabled]);

  // Auto-hide controls
  useEffect(() => {
    if (autoHide && showControls) {
      const timer = setTimeout(() => setIsVisible(false), 5000);
      return () => clearTimeout(timer);
    }
  }, [autoHide, showControls]);

  // Don't render controls in production unless explicitly enabled
  if (!enabled || (!showControls && process.env.NODE_ENV === 'production')) {
    return null;
  }

  return (
    <div className="fixed top-4 right-4 bg-black/90 text-white p-4 rounded-lg backdrop-blur-sm border border-gray-700 max-w-sm z-50">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-sm font-semibold">Accessibility</h3>
        <button
          onClick={() => setIsVisible(!isVisible)}
          className="text-gray-400 hover:text-white transition-colors"
          aria-label="Toggle accessibility controls"
        >
          {isVisible ? '−' : '+'}
        </button>
      </div>
      
      {isVisible && (
        <div className="space-y-4">
          {/* Font Size Control */}
          <div>
            <label htmlFor="font-size" className="block text-xs mb-2">
              Font Size: {fontSize}px
            </label>
            <input
              id="font-size"
              type="range"
              min="12"
              max="24"
              value={fontSize}
              onChange={(e) => setFontSize(Number(e.target.value))}
              className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
            />
          </div>
          
          {/* High Contrast Toggle */}
          <div className="flex items-center justify-between">
            <label htmlFor="high-contrast" className="text-xs">
              High Contrast
            </label>
            <input
              id="high-contrast"
              type="checkbox"
              checked={highContrast}
              onChange={(e) => setHighContrast(e.target.checked)}
              className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-2"
            />
          </div>
          
          {/* Reduced Motion Toggle */}
          <div className="flex items-center justify-between">
            <label htmlFor="reduced-motion" className="text-xs">
              Reduced Motion
            </label>
            <input
              id="reduced-motion"
              type="checkbox"
              checked={reducedMotion}
              onChange={(e) => setReducedMotion(e.target.checked)}
              className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-2"
            />
          </div>
          
          {/* Focus Indicators Toggle */}
          <div className="flex items-center justify-between">
            <label htmlFor="focus-visible" className="text-xs">
              Focus Indicators
            </label>
            <input
              id="focus-visible"
              type="checkbox"
              checked={focusVisible}
              onChange={(e) => setFocusVisible(e.target.checked)}
              className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-2"
            />
          </div>
          
          {/* Keyboard Navigation Help */}
          <div className="pt-2 border-t border-gray-600">
            <h4 className="text-xs font-medium mb-2">Keyboard Shortcuts:</h4>
            <div className="text-xs space-y-1 text-gray-300">
              <div>Alt + H: Skip to main content</div>
              <div>Alt + N: Skip to navigation</div>
              <div>Alt + F: Skip to footer</div>
              <div>Alt + S: Focus search</div>
              <div>Tab: Navigate elements</div>
            </div>
          </div>
          
          {/* Status Indicators */}
          <div className="pt-2 border-t border-gray-600">
            <div className="text-xs space-y-1">
              <div className="flex items-center justify-between">
                <span>Keyboard User:</span>
                <span className={isKeyboardUser ? 'text-green-400' : 'text-gray-400'}>
                  {isKeyboardUser ? 'Yes' : 'No'}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span>Screen Reader:</span>
                <span className="text-blue-400">Supported</span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Focus Trap Hook
export const useFocusTrap = (isActive: boolean) => {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isActive) return;

    const container = containerRef.current;
    if (!container) return;

    const focusableElements = container.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );

    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

    const handleTabKey = (event: KeyboardEvent) => {
      if (event.key === 'Tab') {
        if (event.shiftKey) {
          if (document.activeElement === firstElement) {
            event.preventDefault();
            lastElement.focus();
          }
        } else {
          if (document.activeElement === lastElement) {
            event.preventDefault();
            firstElement.focus();
          }
        }
      }
    };

    container.addEventListener('keydown', handleTabKey);
    return () => container.removeEventListener('keydown', handleTabKey);
  }, [isActive]);
=======
    const handleFocusIn = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      setCurrentFocus(target);
      
      // Announce focus changes to screen reader
      if (settings.screenReader) {
        const label = target.getAttribute('aria-label') || 
                     target.getAttribute('title') || 
                     target.textContent || 
                     target.tagName.toLowerCase();
        announceToScreenReader(`Focused on ${label}`);
      }
      
      // Enhanced focus indicators
      if (settings.focusIndicators) {
        target.style.outline = '3px solid #0891b2';
        target.style.outlineOffset = '2px';
      }
    };

    const handleFocusOut = (e: FocusEvent) => {
      const target = e.target as HTMLElement;
      if (settings.focusIndicators) {
        target.style.outline = '';
        target.style.outlineOffset = '';
      }
    };
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2

  return containerRef;
};

<<<<<<< HEAD
// Screen Reader Announcement Hook
export const useScreenReaderAnnouncement = () => {
  const announce = (message: string, priority: 'polite' | 'assertive' = 'polite') => {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', priority);
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
=======
  // Navigation functions
  const navigateToNextHeading = useCallback(() => {
    const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));
    const currentIndex = headings.findIndex(h => h === currentFocus);
    const nextIndex = (currentIndex + 1) % headings.length;
    const nextHeading = headings[nextIndex] as HTMLElement;
    
    if (nextHeading) {
      nextHeading.focus();
      nextHeading.scrollIntoView({ behavior: 'smooth', block: 'center' });
      announceToScreenReader(`Navigated to ${nextHeading.textContent}`);
    }
  }, [currentFocus]);

  const navigateToNextLink = useCallback(() => {
    const links = Array.from(document.querySelectorAll('a[href]'));
    const currentIndex = links.findIndex(l => l === currentFocus);
    const nextIndex = (currentIndex + 1) % links.length;
    const nextLink = links[nextIndex] as HTMLElement;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
    
    if (nextLink) {
      nextLink.focus();
      nextLink.scrollIntoView({ behavior: 'smooth', block: 'center' });
      announceToScreenReader(`Navigated to link: ${nextLink.textContent}`);
    }
  }, [currentFocus]);

  const navigateToMainContent = useCallback(() => {
    const main = document.querySelector('main') || document.querySelector('[role="main"]');
    if (main) {
      (main as HTMLElement).focus();
      main.scrollIntoView({ behavior: 'smooth', block: 'start' });
      announceToScreenReader('Navigated to main content');
    }
  }, []);

  // Screen reader announcements
  const announceToScreenReader = useCallback((message: string) => {
    if (!settings.screenReader) return;
    
<<<<<<< HEAD
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  return announce;
=======
    // Create live region for announcements
    let liveRegion = document.getElementById('accessibility-live-region');
    if (!liveRegion) {
      liveRegion = document.createElement('div');
      liveRegion.id = 'accessibility-live-region';
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.style.position = 'absolute';
      liveRegion.style.left = '-10000px';
      liveRegion.style.width = '1px';
      liveRegion.style.height = '1px';
      liveRegion.style.overflow = 'hidden';
      document.body.appendChild(liveRegion);
    }
    
    liveRegion.textContent = message;
    
    // Add to announcements list
    setAnnouncements(prev => [...prev.slice(-4), message]);
  }, [settings.screenReader]);

  // Sound effects
  const playSoundEffect = useCallback((type: 'focus' | 'error' | 'success') => {
    if (!settings.soundEffects) return;
    
    // Simple sound effects using Web Audio API
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      switch (type) {
        case 'focus':
          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
          break;
        case 'error':
          oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
          break;
        case 'success':
          oscillator.frequency.setValueAtTime(1200, audioContext.currentTime);
          break;
      }
      
      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.1);
    } catch (error) {
      // Could not play sound effect
    }
  }, [settings.soundEffects]);

  // Update setting
  const updateSetting = useCallback((key: keyof AccessibilitySettings, value: AccessibilitySettings[keyof AccessibilitySettings]) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    
    // Play sound effect for certain changes
    if (key === 'highContrast' || key === 'largeText' || key === 'reducedMotion') {
      playSoundEffect('success');
    }
  }, [settings, playSoundEffect]);

  // Quick accessibility shortcuts
  const quickActions = [
    { label: 'Toggle High Contrast', action: () => updateSetting('highContrast', !settings.highContrast) },
    { label: 'Toggle Large Text', action: () => updateSetting('fontSize', settings.fontSize === 'normal' ? 'large' : 'normal') },
    { label: 'Toggle Reduced Motion', action: () => updateSetting('reducedMotion', !settings.reducedMotion) },
    { label: 'Toggle Focus Indicators', action: () => updateSetting('focusIndicators', !settings.focusIndicators) },
  ];

  return (
    <>
      {/* Accessibility Toggle Button */}
      <motion.button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-20 right-4 z-50 bg-gradient-to-r from-purple-500 to-pink-600 text-white p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        title="Accessibility Settings"
        aria-label="Open accessibility settings"
      >
        <Accessibility className="w-6 h-6" />
      </motion.button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 100, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 100, scale: 0.8 }}
            className="fixed bottom-32 right-4 z-50 bg-gray-900/95 backdrop-blur-sm border border-purple-400/30 rounded-2xl shadow-2xl w-96 max-h-[80vh] overflow-hidden"
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-purple-500 to-pink-600 p-4 text-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Accessibility className="w-5 h-5" />
                  <h3 className="font-semibold">Accessibility</h3>
                </div>
                <button
                  onClick={() => setIsOpen(false)}
                  className="hover:bg-white/20 p-1 rounded transition-colors"
                  aria-label="Close accessibility settings"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-4 space-y-4 max-h-[60vh] overflow-y-auto">
              {/* Quick Actions */}
              <div className="space-y-2">
                <h4 className="font-semibold text-purple-400">Quick Actions</h4>
                <div className="grid grid-cols-2 gap-2">
                  {quickActions.map((action, index) => (
                    <button
                      key={index}
                      onClick={action.action}
                      className="bg-gray-800/50 hover:bg-gray-700/50 p-2 rounded text-sm text-white transition-colors"
                    >
                      {action.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Visual Settings */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Eye className="w-4 h-4" />
                  <span>Visual Settings</span>
                </h4>
                
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.highContrast}
                      onChange={(e) => updateSetting('highContrast', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">High Contrast</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.largeText}
                      onChange={(e) => updateSetting('largeText', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Large Text</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.focusIndicators}
                      onChange={(e) => updateSetting('focusIndicators', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Focus Indicators</span>
                  </label>
                </div>
              </div>

              {/* Motion Settings */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <MousePointer className="w-4 h-4" />
                  <span>Motion & Interaction</span>
                </h4>
                
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.reducedMotion}
                      onChange={(e) => updateSetting('reducedMotion', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Reduced Motion</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.keyboardNavigation}
                      onChange={(e) => updateSetting('keyboardNavigation', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Enhanced Keyboard Navigation</span>
                  </label>
                </div>
              </div>

              {/* Screen Reader */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Ear className="w-4 h-4" />
                  <span>Screen Reader</span>
                </h4>
                
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.screenReader}
                      onChange={(e) => updateSetting('screenReader', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Enhanced Screen Reader Support</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={settings.soundEffects}
                      onChange={(e) => updateSetting('soundEffects', e.target.checked)}
                      className="rounded border-gray-600 bg-gray-700 text-purple-500 focus:ring-purple-500"
                    />
                    <span className="text-sm text-white">Sound Effects</span>
                  </label>
                </div>
              </div>

              {/* Font Size */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Type className="w-4 h-4" />
                  <span>Text Size</span>
                </h4>
                
                <div className="grid grid-cols-3 gap-2">
                  {(['normal', 'large', 'xlarge'] as const).map((size) => (
                    <button
                      key={size}
                      onClick={() => updateSetting('fontSize', size)}
                      className={`p-2 rounded text-sm transition-colors ${
                        settings.fontSize === size
                          ? 'bg-purple-600 text-white'
                          : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                      }`}
                    >
                      {size === 'normal' ? 'Normal' : size === 'large' ? 'Large' : 'X-Large'}
                    </button>
                  ))}
                </div>
              </div>

              {/* Color Blind Mode */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Contrast className="w-4 h-4" />
                  <span>Color Vision</span>
                </h4>
                
                <div className="grid grid-cols-2 gap-2">
                  {(['none', 'protanopia', 'deuteranopia', 'tritanopia'] as const).map((mode) => (
                    <button
                      key={mode}
                      onClick={() => updateSetting('colorBlindMode', mode)}
                      className={`p-2 rounded text-sm transition-colors ${
                        settings.colorBlindMode === mode
                          ? 'bg-purple-600 text-white'
                          : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                      }`}
                    >
                      {mode === 'none' ? 'Normal' : mode.charAt(0).toUpperCase() + mode.slice(1)}
                    </button>
                  ))}
                </div>
              </div>

              {/* Keyboard Shortcuts Help */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-400 flex items-center space-x-2">
                  <Keyboard className="w-4 h-4" />
                  <span>Keyboard Shortcuts</span>
                </h4>
                
                <div className="text-xs text-gray-400 space-y-1">
                  <div>Ctrl/Cmd + H: Next heading</div>
                  <div>Ctrl/Cmd + L: Next link</div>
                  <div>Ctrl/Cmd + M: Main content</div>
                  <div>Tab: Navigate elements</div>
                  <div>Escape: Close/back</div>
                </div>
              </div>

              {/* Recent Announcements */}
              {announcements.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-semibold text-purple-400">Recent Announcements</h4>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {announcements.map((announcement, index) => (
                      <div key={index} className="bg-gray-800/20 border border-purple-500/30 p-2 rounded text-sm text-purple-300">
                        {announcement}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Render children with accessibility enhancements */}
      {children}
    </>
  );
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
};

// Skip Link Component
export const SkipLink: React.FC<{ href: string; children: React.ReactNode }> = ({ href, children }) => (
  <a
    href={href}
    className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 z-50 px-4 py-2 bg-cyan-500 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-offset-2"
  >
    {children}
  </a>
);

// Screen Reader Only Text
export const SrOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <span className="sr-only">{children}</span>
);

// Export the main provider component as default
export default AccessibilityProvider;