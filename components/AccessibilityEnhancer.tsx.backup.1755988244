import React, { useEffect, useState, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
<<<<<<< HEAD
import { 
interface AccessibilityFeature {
  id: string;
  name: string;
  description: string;
  enabled: boolean;
  category: 'visual' | 'auditory' | 'motor' | 'cognitive';
  wcagLevel: 'A' | 'AA' | 'AAA';
}

interface AccessibilityReport {
  score: number;
  issues: string[];
  warnings: string[];
  suggestions: string[];
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ 
  showPanel = false, 
  autoOptimize = true 
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [activeFeatures, setActiveFeatures] = useState<AccessibilityFeature[]>([]);
  const [report, setReport] = useState<AccessibilityReport | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [fontSize, setFontSize] = useState(16);
  const [contrastMode, setContrastMode] = useState(false);
  const [reducedMotion, setReducedMotion] = useState(false);
  const [highContrast, setHighContrast] = useState(false);
  const [focusIndicator, setFocusIndicator] = useState(true);
  const [skipLinks, setSkipLinks] = useState(true);
  const [announcements, setAnnouncements] = useState<string[]>([]);
  
  const focusableElementsRef = useRef<HTMLElement[]>([]);
  const liveRegionRef = useRef<HTMLDivElement>(null);

  // Initialize accessibility features
  const initializeFeatures = useCallback(() => {
    const features: AccessibilityFeature[] = [
      {
        id: 'high-contrast',
        name: 'High Contrast',
        description: 'Increase color contrast for better visibility',
        enabled: false,
        category: 'visual',
        wcagLevel: 'AA'
      },
      {
        id: 'font-size',
        name: 'Font Size Control',
        description: 'Adjustable font sizes for better readability',
        enabled: true,
        category: 'visual',
        wcagLevel: 'AA'
      },
      {
        id: 'reduced-motion',
        name: 'Reduced Motion',
        description: 'Reduce animations for users with vestibular disorders',
        enabled: false,
        category: 'cognitive',
        wcagLevel: 'A'
      },
      {
        id: 'focus-indicator',
        name: 'Focus Indicators',
        description: 'Clear focus indicators for keyboard navigation',
        enabled: true,
        category: 'motor',
        wcagLevel: 'A'
      },
      {
        id: 'skip-links',
        name: 'Skip Links',
        description: 'Skip to main content for keyboard users',
        enabled: true,
        category: 'motor',
        wcagLevel: 'A'
      },
      {
        id: 'screen-reader',
        name: 'Screen Reader Support',
        description: 'Enhanced ARIA labels and semantic markup',
        enabled: true,
        category: 'auditory',
        wcagLevel: 'AA'
      },
      {
        id: 'keyboard-navigation',
        name: 'Keyboard Navigation',
        description: 'Full keyboard accessibility',
        enabled: true,
        category: 'motor',
        wcagLevel: 'A'
      },
      {
        id: 'color-blindness',
        name: 'Color Blindness Support',
        description: 'Color-independent information design',
        enabled: false,
        category: 'visual',
        wcagLevel: 'AA'
      }
    ];
    
    setActiveFeatures(features);
  }, []);

  // Enhanced accessibility analysis
  const analyzeAccessibility = useCallback(async () => {
    setIsAnalyzing(true);
    
    try {
      const issues: string[] = [];
      const warnings: string[] = [];
      const suggestions: string[] = [];
      let score = 100;

      // Check for missing alt text
      const images = document.querySelectorAll('img');
      const imagesWithoutAlt = Array.from(images).filter(img => !img.alt);
      if (imagesWithoutAlt.length > 0) {
        issues.push(`${imagesWithoutAlt.length} images missing alt text`);
        score -= 10;
      }

      // Check for proper heading structure
      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
      const headingLevels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));
      let previousLevel = 0;
      for (const level of headingLevels) {
        if (level - previousLevel > 1) {
          warnings.push('Heading levels should not be skipped');
          score -= 5;
          break;
        }
        previousLevel = level;
      }

      // Check for form labels
      const formInputs = document.querySelectorAll('input, select, textarea');
      const inputsWithoutLabels = Array.from(formInputs).filter(input => {
        const id = input.getAttribute('id');
        const label = document.querySelector(`label[for="${id}"]`);
        const ariaLabel = input.getAttribute('aria-label');
        return !label && !ariaLabel;
      });
      if (inputsWithoutLabels.length > 0) {
        issues.push(`${inputsWithoutLabels.length} form inputs missing labels`);
        score -= 15;
      }

      // Check for sufficient color contrast
      if (!contrastMode) {
        suggestions.push('Enable high contrast mode for better visibility');
      }

      // Check for keyboard navigation
      const focusableElements = document.querySelectorAll(
        'a, button, input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      focusableElementsRef.current = Array.from(focusableElements) as HTMLElement[];
      
      if (focusableElements.length === 0) {
        warnings.push('No focusable elements found');
        score -= 10;
      }

      // Check for ARIA landmarks
      const landmarks = document.querySelectorAll('main, nav, aside, header, footer, [role="main"], [role="navigation"], [role="complementary"], [role="banner"], [role="contentinfo"]');
      if (landmarks.length < 3) {
        suggestions.push('Add more ARIA landmarks for better navigation');
        score -= 5;
      }

      // Check for language declaration
      const html = document.documentElement;
      if (!html.lang) {
        issues.push('HTML language attribute not set');
        score -= 5;
      }

      // Check for skip links
      if (!skipLinks) {
        suggestions.push('Add skip links for keyboard users');
        score -= 5;
      }

      // Check for focus management
      if (!focusIndicator) {
        warnings.push('Focus indicators are disabled');
        score -= 10;
      }

      score = Math.max(0, score);

      const newReport: AccessibilityReport = {
        score,
        issues,
        warnings,
        suggestions
      };

      setReport(newReport);

      // Auto-optimize if enabled
      if (autoOptimize) {
        applyAccessibilityOptimizations(newReport);
      }
    } catch (error) {
      console.warn('Accessibility analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  }, [contrastMode, skipLinks, focusIndicator, autoOptimize]);

  // Apply accessibility optimizations
  const applyAccessibilityOptimizations = useCallback((currentReport: AccessibilityReport) => {
    // Apply high contrast if needed
    if (currentReport.score < 80 && !contrastMode) {
      setContrastMode(true);
      announceChange('High contrast mode enabled for better visibility');
    }

    // Add missing alt text placeholders
    const images = document.querySelectorAll('img:not([alt])');
    images.forEach(img => {
      const imgElement = img as HTMLImageElement;
      if (!imgElement.alt) {
        imgElement.alt = 'Image description needed';
        imgElement.setAttribute('data-accessibility-fix', 'true');
      }
    });

    // Add missing form labels
    const formInputs = document.querySelectorAll('input:not([aria-label]):not([id])');
    formInputs.forEach((input, index) => {
      const id = `input-${index}`;
      input.setAttribute('id', id);
      input.setAttribute('aria-label', 'Form input');
    });

    // Ensure focus indicators
    if (!focusIndicator) {
      setFocusIndicator(true);
      announceChange('Focus indicators enabled');
    }
  }, [contrastMode, focusIndicator]);

  // Announce changes to screen readers
  const announceChange = useCallback((message: string) => {
    setAnnouncements(prev => [...prev, message]);
    
    if (liveRegionRef.current) {
      liveRegionRef.current.textContent = message;
    }

    // Clear announcement after 3 seconds
    setTimeout(() => {
      setAnnouncements(prev => prev.filter(announcement => announcement !== message));
    }, 3000);
  }, []);

  // Enhanced keyboard navigation
  const setupKeyboardNavigation = useCallback(() => {
    if (typeof window === 'undefined') return;

    const handleKeyDown = (e: KeyboardEvent) => {
      // Skip to main content
      if (e.key === 'Tab' && e.altKey) {
        e.preventDefault();
        const main = document.querySelector('main') || document.querySelector('[role="main"]');
        if (main) {
          (main as HTMLElement).focus();
          announceChange('Skipped to main content');
        }
      }

      // Toggle high contrast
      if (e.key === 'c' && e.ctrlKey && e.altKey) {
        e.preventDefault();
        setContrastMode(prev => !prev);
        announceChange(contrastMode ? 'High contrast disabled' : 'High contrast enabled');
      }

      // Toggle reduced motion
      if (e.key === 'm' && e.ctrlKey && e.altKey) {
        e.preventDefault();
        setReducedMotion(prev => !prev);
        announceChange(reducedMotion ? 'Motion restored' : 'Motion reduced');
      }

      // Font size controls
      if (e.key === '=' && e.ctrlKey) {
        e.preventDefault();
        setFontSize(prev => Math.min(prev + 2, 32));
        announceChange(`Font size increased to ${fontSize + 2}px`);
      }

      if (e.key === '-' && e.ctrlKey) {
        e.preventDefault();
        setFontSize(prev => Math.max(prev - 2, 12));
        announceChange(`Font size decreased to ${fontSize - 2}px`);
      }

      // Reset font size
      if (e.key === '0' && e.ctrlKey) {
        e.preventDefault();
        setFontSize(16);
        announceChange('Font size reset to default');
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [contrastMode, reducedMotion, fontSize, announceChange]);

  // Apply visual accessibility features
  useEffect(() => {
    const root = document.documentElement;
    
    // Apply font size
    root.style.fontSize = `${fontSize}px`;
    
    // Apply contrast mode
    if (contrastMode) {
      root.classList.add('high-contrast');
      root.style.setProperty('--contrast-ratio', '4.5');
    } else {
      root.classList.remove('high-contrast');
      root.style.removeProperty('--contrast-ratio');
    }
    
    // Apply reduced motion
    if (reducedMotion) {
      root.classList.add('reduced-motion');
      root.style.setProperty('--animation-duration', '0.01ms');
      root.style.setProperty('--transition-duration', '0.01ms');
    } else {
      root.classList.remove('reduced-motion');
      root.style.removeProperty('--animation-duration');
      root.style.removeProperty('--transition-duration');
    }
    
    // Apply high contrast
    if (highContrast) {
      root.classList.add('ultra-high-contrast');
      root.style.setProperty('--contrast-ratio', '7');
    } else {
      root.classList.remove('ultra-high-contrast');
      root.style.removeProperty('--contrast-ratio');
    }
    
    // Apply focus indicators
    if (focusIndicator) {
      root.classList.add('focus-visible');
    } else {
      root.classList.remove('focus-visible');
    }
  }, [fontSize, contrastMode, reducedMotion, highContrast, focusIndicator]);

  // Setup skip links
  useEffect(() => {
    if (!skipLinks) return;

    // Add skip link if it doesn't exist
    if (!document.getElementById('skip-link')) {
      const skipLink = document.createElement('a');
      skipLink.id = 'skip-link';
      skipLink.href = '#main-content';
      skipLink.textContent = 'Skip to main content';
      skipLink.className = 'sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded z-50';
      
      document.body.insertBefore(skipLink, document.body.firstChild);
    }

    // Add main content id if it doesn't exist
    const main = document.querySelector('main') || document.querySelector('[role="main"]');
    if (main && !main.id) {
      main.id = 'main-content';
    }
  }, [skipLinks]);

  // Initialize component
  useEffect(() => {
    if (showPanel) {
      setIsVisible(true);
      initializeFeatures();
      setupKeyboardNavigation();
      
      if (autoOptimize) {
        analyzeAccessibility();
      }
    }
  }, [showPanel, initializeFeatures, setupKeyboardNavigation, autoOptimize, analyzeAccessibility]);

  // Continuous monitoring
  useEffect(() => {
    if (!showPanel || !autoOptimize) return;

    const interval = setInterval(() => {
      analyzeAccessibility();
    }, 30000); // Every 30 seconds

    return () => clearInterval(interval);
  }, [showPanel, autoOptimize, analyzeAccessibility]);

  if (!showPanel || !isVisible) return null;

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreIcon = (score: number) => {
    if (score >= 90) return <CheckCircle className="w-4 h-4" />;
    if (score >= 70) return <AlertTriangle className="w-4 h-4" />;
    return <AlertTriangle className="w-4 h-4" />;
  };

  const toggleFeature = (featureId: string) => {
    setActiveFeatures(prev => 
      prev.map(feature => 
        feature.id === featureId 
          ? { ...feature, enabled: !feature.enabled }
          : feature
      )
    );
=======
  Eye, 
  EyeOff, 
  Volume2, 
  VolumeX, 
  Type, 
  Contrast, 
  ZoomIn, 
  ZoomOut,
  Accessibility,
  Keyboard,
  MousePointer
} from 'lucide-react';

interface AccessibilityEnhancerProps {
  onAccessibilityChange?: (settings: AccessibilitySettings) => void;
}

interface AccessibilitySettings {
  highContrast: boolean;
  largeText: boolean;
  reducedMotion: boolean;
  screenReader: boolean;
  zoomLevel: number;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({
  onAccessibilityChange
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    largeText: false,
    reducedMotion: false,
    screenReader: false,
    zoomLevel: 100
  });

  useEffect(() => {
    // Load saved accessibility settings from localStorage
    const savedSettings = localStorage.getItem('accessibility-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(parsed);
        applyAccessibilitySettings(parsed);
      } catch (error) {
        console.error('Failed to parse saved accessibility settings:', error);
      }
    }

    // Check for system preferences
    checkSystemPreferences();
  }, []);

  const checkSystemPreferences = () => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    // Check for high contrast preference
    const prefersHighContrast = window.matchMedia('(prefers-contrast: high)').matches;
    
    setSettings(prev => ({
      ...prev,
      reducedMotion: prefersReducedMotion,
      highContrast: prefersHighContrast
    }));
  };

  const applyAccessibilitySettings = (newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // Apply high contrast
    if (newSettings.highContrast) {
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
    }
    
    // Apply large text
    if (newSettings.largeText) {
      root.style.fontSize = '120%';
    } else {
      root.style.fontSize = '100%';
    }
    
    // Apply reduced motion
    if (newSettings.reducedMotion) {
      root.classList.add('reduced-motion');
    } else {
      root.classList.remove('reduced-motion');
    }
    
    // Apply zoom level
    root.style.zoom = `${newSettings.zoomLevel}%`;
    
    // Notify parent component
    onAccessibilityChange?.(newSettings);
  };

  const updateSetting = (key: keyof AccessibilitySettings, value: any) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    applyAccessibilitySettings(newSettings);
    
    // Save to localStorage
    localStorage.setItem('accessibility-settings', JSON.stringify(newSettings));
  };

  const togglePanel = () => {
    setIsOpen(!isOpen);
  };

  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === 'Escape') {
      setIsOpen(false);
    }
  };

  const resetSettings = () => {
    const defaultSettings: AccessibilitySettings = {
      highContrast: false,
      largeText: false,
      reducedMotion: false,
      screenReader: false,
      zoomLevel: 100
    };
    setSettings(defaultSettings);
    applyAccessibilitySettings(defaultSettings);
    localStorage.removeItem('accessibility-settings');
=======
import { Volume2, VolumeX, Eye, Keyboard, MousePointer } from 'lucide-react';

interface AccessibilityEnhancerProps {
  children?: React.ReactNode;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ children }) => {
  const [isMuted, setIsMuted] = useState(false);
  const [isHighContrast, setIsHighContrast] = useState(false);
  const [isLargeText, setIsLargeText] = useState(false);
  const [isReducedMotion, setIsReducedMotion] = useState(false);
  const [showAccessibilityPanel, setShowAccessibilityPanel] = useState(false);

  // Apply accessibility settings to the document
  const applyAccessibilitySettings = () => {
    const root = document.documentElement;
    
    if (isReducedMotion) {
      root.style.setProperty('--animation-duration', '0.1s');
      root.style.setProperty('--transition-duration', '0.1s');
    } else {
      root.style.setProperty('--animation-duration', '0.3s');
      root.style.setProperty('--transition-duration', '0.3s');
    }

    if (isHighContrast) {
      root.classList.add('high-contrast');
    } else {
      root.classList.remove('high-contrast');
    }

    if (isLargeText) {
      root.classList.add('large-text');
    } else {
      root.classList.remove('large-text');
    }
  };

  // Check for user preferences
  useEffect(() => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    setIsReducedMotion(prefersReducedMotion);

    // Check for high contrast preference
    const prefersHighContrast = window.matchMedia('(prefers-contrast: high)').matches;
    setIsHighContrast(prefersHighContrast);

    // Check for large text preference
    const prefersLargeText = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    setIsLargeText(prefersLargeText);

    // Apply accessibility settings
    applyAccessibilitySettings();
  }, []);

  // Apply settings when they change
  useEffect(() => {
    applyAccessibilitySettings();
  }, [isReducedMotion, isHighContrast, isLargeText]);

  // Keyboard navigation enhancement
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // Skip to main content
      if (event.key === 'Tab' && event.altKey) {
        event.preventDefault();
        const mainContent = document.querySelector('main');
        if (mainContent) {
          (mainContent as HTMLElement).focus();
        }
      }

      // Toggle accessibility panel
      if (event.key === 'F1') {
        event.preventDefault();
        setShowAccessibilityPanel(!showAccessibilityPanel);
      }

      // Escape key to close panels
      if (event.key === 'Escape') {
        setShowAccessibilityPanel(false);
      }
    };

    // Focus management
    const handleFocusIn = (event: Event) => {
      const target = event.target as HTMLElement;
      
      // Add focus indicator
      target.classList.add('accessibility-focus');
    };

    const handleFocusOut = (event: Event) => {
      const target = event.target as HTMLElement;
      target.classList.remove('accessibility-focus');
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('focusin', handleFocusIn);
    document.addEventListener('focusout', handleFocusOut);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('focusin', handleFocusIn);
      document.removeEventListener('focusout', handleFocusOut);
    };
  }, [showAccessibilityPanel]);

  // Screen reader announcements
  const announceToScreenReader = (message: string) => {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    
    document.body.appendChild(announcement);
    
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  // Toggle mute state
  const toggleMute = () => {
    setIsMuted(!isMuted);
    announceToScreenReader(`Audio ${!isMuted ? 'muted' : 'unmuted'}`);
  };

  // Toggle high contrast
  const toggleHighContrast = () => {
    setIsHighContrast(!isHighContrast);
    announceToScreenReader(`High contrast ${!isHighContrast ? 'enabled' : 'disabled'}`);
  };

  // Toggle large text
  const toggleLargeText = () => {
    setIsLargeText(!isLargeText);
    announceToScreenReader(`Large text ${!isLargeText ? 'enabled' : 'disabled'}`);
  };

  // Toggle reduced motion
  const toggleReducedMotion = () => {
    setIsReducedMotion(!isReducedMotion);
    announceToScreenReader(`Reduced motion ${!isReducedMotion ? 'enabled' : 'disabled'}`);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
  };

  return (
    <>
      {children}

      {/* Accessibility Panel Toggle Button */}
      <motion.button
<<<<<<< HEAD
        className="fixed bottom-6 right-6 z-50 w-14 h-14 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-500 focus:ring-opacity-50"
        onClick={togglePanel}
        onKeyDown={handleKeyDown}
        aria-label="Accessibility settings"
        aria-expanded={isOpen}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Accessibility className="w-7 h-7 mx-auto" />
=======
        initial={{ opacity: 0, x: 100 }}
        animate={{ opacity: 1, x: 0 }}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={() => setShowAccessibilityPanel(!showAccessibilityPanel)}
        className="fixed top-32 right-6 w-14 h-14 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 z-50"
        title="Accessibility Settings (F1)"
        aria-label="Open accessibility settings panel"
      >
        <Eye className="w-6 h-6" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
      </motion.button>

      {/* Accessibility Panel */}
      <AnimatePresence>
<<<<<<< HEAD
        {isOpen && (
          <motion.div
            className="fixed bottom-24 right-6 z-40 w-80 bg-gray-900 border border-gray-700 rounded-lg shadow-2xl"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.2 }}
            onKeyDown={handleKeyDown}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <h3 className="text-lg font-semibold text-white flex items-center">
                <Accessibility className="w-5 h-5 mr-2" />
                Accessibility
              </h3>
              <button
                onClick={togglePanel}
=======
        {showAccessibilityPanel && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8, x: 100 }}
            animate={{ opacity: 1, scale: 1, x: 0 }}
            exit={{ opacity: 0, scale: 0.8, x: 100 }}
            className="fixed top-48 right-6 bg-black/95 backdrop-blur-sm border border-purple-500/30 rounded-lg p-4 shadow-xl min-w-[280px] z-50"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">Accessibility</h3>
              <button
                onClick={() => setShowAccessibilityPanel(false)}
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
                className="text-gray-400 hover:text-white transition-colors"
              >
                <EyeOff className="w-5 h-5" />
              </button>
            </div>

<<<<<<< HEAD
            {/* Settings */}
            <div className="p-4 space-y-4">
              {/* High Contrast */}
              <div className="flex items-center justify-between">
                <label className="flex items-center text-white cursor-pointer">
                  <Contrast className="w-5 h-5 mr-3" />
                  High Contrast
                </label>
                <button
                  onClick={() => updateSetting('highContrast', !settings.highContrast)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50 ${
                    settings.highContrast ? 'bg-cyan-500' : 'bg-gray-600'
=======
            <div className="space-y-4">
              {/* Audio Control */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  {isMuted ? <VolumeX className="w-5 h-5 text-gray-400" /> : <Volume2 className="w-5 h-5 text-green-400" />}
                  <span className="text-white text-sm">Audio</span>
                </div>
                <button
                  onClick={toggleMute}
                  className={`px-3 py-1 rounded text-xs font-medium transition-colors ${
                    isMuted 
                      ? 'bg-red-500/20 text-red-400 border border-red-500/30' 
                      : 'bg-green-500/20 text-green-400 border border-green-500/30'
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
                  }`}
                  aria-label={`${isMuted ? 'Unmute' : 'Mute'} audio`}
                >
<<<<<<< HEAD
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Large Text */}
              <div className="flex items-center justify-between">
                <label className="flex items-center text-white cursor-pointer">
                  <Type className="w-5 h-5 mr-3" />
                  Large Text
                </label>
                <button
                  onClick={() => updateSetting('largeText', !settings.largeText)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50 ${
                    settings.largeText ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.largeText ? 'Disable' : 'Enable'} large text`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.largeText ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
=======
                  {isMuted ? 'Muted' : 'On'}
                </button>
              </div>

              {/* High Contrast */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Eye className="w-5 h-5 text-blue-400" />
                  <span className="text-white text-sm">High Contrast</span>
                </div>
                <button
                  onClick={toggleHighContrast}
                  className={`px-3 py-1 rounded text-xs font-medium transition-colors ${
                    isHighContrast 
                      ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30' 
                      : 'bg-gray-500/20 text-gray-400 border border-gray-500/30'
                  }`}
                  aria-label={`${isHighContrast ? 'Disable' : 'Enable'} high contrast`}
                >
                  {isHighContrast ? 'On' : 'Off'}
                </button>
              </div>

              {/* Large Text */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Eye className="w-5 h-5 text-yellow-400" />
                  <span className="text-white text-sm">Large Text</span>
                </div>
                <button
                  onClick={toggleLargeText}
                  className={`px-3 py-1 rounded text-xs font-medium transition-colors ${
                    isLargeText 
                      ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' 
                      : 'bg-gray-500/20 text-gray-400 border border-gray-500/30'
                  }`}
                  aria-label={`${isLargeText ? 'Disable' : 'Enable'} large text`}
                >
                  {isLargeText ? 'On' : 'Off'}
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
                </button>
              </div>

              {/* Reduced Motion */}
              <div className="flex items-center justify-between">
<<<<<<< HEAD
                <label className="flex items-center text-white cursor-pointer">
                  <MousePointer className="w-5 h-5 mr-3" />
                  Reduced Motion
                </label>
                <button
                  onClick={() => updateSetting('reducedMotion', !settings.reducedMotion)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50 ${
                    settings.reducedMotion ? 'bg-cyan-500' : 'bg-gray-600'
=======
                <div className="flex items-center space-x-3">
                  <MousePointer className="w-5 h-5 text-purple-400" />
                  <span className="text-white text-sm">Reduced Motion</span>
                </div>
                <button
                  onClick={toggleReducedMotion}
                  className={`px-3 py-1 rounded text-xs font-medium transition-colors ${
                    isReducedMotion 
                      ? 'bg-purple-500/20 text-purple-400 border border-purple-500/30' 
                      : 'bg-gray-500/20 text-gray-400 border border-gray-500/30'
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
                  }`}
                  aria-label={`${isReducedMotion ? 'Disable' : 'Enable'} reduced motion`}
                >
<<<<<<< HEAD
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.reducedMotion ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Zoom Level */}
              <div className="space-y-2">
                <label className="flex items-center text-white">
                  <ZoomIn className="w-5 h-5 mr-3" />
                  Zoom Level: {settings.zoomLevel}%
                </label>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => updateSetting('zoomLevel', Math.max(50, settings.zoomLevel - 10))}
                    className="p-2 bg-gray-800 text-white rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    aria-label="Decrease zoom"
                  >
                    <ZoomOut className="w-4 h-4" />
                  </button>
                  <div className="flex-1 bg-gray-700 rounded-full h-2">
                    <div
                      className="bg-cyan-500 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${((settings.zoomLevel - 50) / 150) * 100}%` }}
                    />
                  </div>
                  <button
                    onClick={() => updateSetting('zoomLevel', Math.min(200, settings.zoomLevel + 10))}
                    className="p-2 bg-gray-800 text-white rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    aria-label="Increase zoom"
                  >
                    <ZoomIn className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Keyboard Navigation Info */}
              <div className="bg-gray-800 rounded-lg p-3">
                <h4 className="text-sm font-medium text-white mb-2 flex items-center">
                  <Keyboard className="w-4 h-4 mr-2" />
                  Keyboard Shortcuts
                </h4>
                <div className="text-xs text-gray-300 space-y-1">
                  <div>• Tab: Navigate between elements</div>
                  <div>• Enter/Space: Activate buttons</div>
                  <div>• Escape: Close panels</div>
                  <div>• Arrow keys: Navigate menus</div>
                </div>
              </div>

              {/* Reset Button */}
              <button
                onClick={resetSettings}
                className="w-full px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500"
              >
                Reset to Default
              </button>
=======
                  {isReducedMotion ? 'On' : 'Off'}
                </button>
              </div>

              {/* Keyboard Navigation Info */}
              <div className="pt-4 border-t border-gray-700">
                <div className="flex items-center space-x-2 mb-2">
                  <Keyboard className="w-4 h-4 text-gray-400" />
                  <span className="text-gray-400 text-xs">Keyboard Shortcuts</span>
                </div>
                <div className="text-xs text-gray-500 space-y-1">
                  <div>F1 - Open accessibility panel</div>
                  <div>Alt + Tab - Skip to main content</div>
                  <div>Escape - Close panels</div>
                </div>
              </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
            </div>

            {/* Action Buttons */}
            <div className="flex gap-2">
              <button
                onClick={analyzeAccessibility}
                disabled={isAnalyzing}
                className="flex-1 bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors disabled:cursor-not-allowed"
              >
                {isAnalyzing ? 'Analyzing...' : 'Analyze'}
              </button>
              <button
                onClick={() => {
                  setFontSize(16);
                  setContrastMode(false);
                  setReducedMotion(false);
                  setHighContrast(false);
                  announceChange('All accessibility settings reset to default');
                }}
                className="bg-gray-700 hover:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors"
              >
                Reset
              </button>
            </div>

            {/* Keyboard Shortcuts Info */}
            <div className="mt-4 p-3 bg-gray-800/30 rounded-lg">
              <h5 className="text-xs font-medium text-gray-300 mb-2">Keyboard Shortcuts</h5>
              <div className="text-xs text-gray-400 space-y-1">
                <div>Ctrl + Alt + C: Toggle contrast</div>
                <div>Ctrl + Alt + M: Toggle motion</div>
                <div>Ctrl + =: Increase font</div>
                <div>Ctrl + -: Decrease font</div>
                <div>Ctrl + 0: Reset font</div>
                <div>Alt + Tab: Skip to content</div>
              </div>
            </div>
          </div>
        </motion.div>
      </AnimatePresence>

<<<<<<< HEAD
      {/* Global Accessibility Styles */}
      <style jsx global>{`
        .high-contrast {
          --tw-bg-opacity: 1;
          --tw-text-opacity: 1;
        }
        
        .high-contrast * {
          background-color: white !important;
          color: black !important;
          border-color: black !important;
        }
        
        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
        
        /* Focus indicators for keyboard navigation */
        *:focus {
          outline: 2px solid #0891b2 !important;
          outline-offset: 2px !important;
        }
        
        /* Skip link for screen readers */
        .skip-link {
          position: absolute;
          top: -40px;
          left: 6px;
          background: #0891b2;
          color: white;
          padding: 8px;
          text-decoration: none;
          border-radius: 4px;
          z-index: 1000;
        }
        
        .skip-link:focus {
          top: 6px;
        }

        .high-contrast {
          --text-color: #000000;
          --bg-color: #ffffff;
          --accent-color: #0000ff;
          --border-color: #000000;
        }

        .ultra-high-contrast {
          --text-color: #000000;
          --bg-color: #ffffff;
          --accent-color: #0000ff;
          --border-color: #000000;
          filter: contrast(200%);
        }

        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }

        .focus-visible :focus {
          outline: 3px solid #3b82f6 !important;
          outline-offset: 2px !important;
        }

        .high-contrast .focus-visible :focus {
          outline: 3px solid #000000 !important;
        }

        .ultra-high-contrast .focus-visible :focus {
          outline: 5px solid #000000 !important;
        }

        @media (prefers-reduced-motion: reduce) {
          .reduced-motion * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
          }
=======
      {/* Skip to Content Link */}
      <a
        href="#main"
        className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-black text-white px-4 py-2 rounded z-50"
      >
        Skip to main content
      </a>

      {/* Focus Indicator Styles */}
      <style jsx global>{`
        .accessibility-focus {
          outline: 3px solid #00d4ff !important;
          outline-offset: 2px !important;
        }

        .high-contrast {
          --text-color: #ffffff;
          --bg-color: #000000;
          --border-color: #ffffff;
        }

        .large-text {
          font-size: 1.2em;
        }

        .sr-only {
          position: absolute;
          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0, 0, 0, 0);
          white-space: nowrap;
          border: 0;
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-e69d
        }

        /* High contrast mode styles */
        .high-contrast * {
          color: var(--text-color) !important;
          background-color: var(--bg-color) !important;
          border-color: var(--border-color) !important;
        }

        /* Large text mode styles */
        .large-text h1 { font-size: 3.5rem !important; }
        .large-text h2 { font-size: 3rem !important; }
        .large-text h3 { font-size: 2.5rem !important; }
        .large-text p { font-size: 1.3rem !important; }
        .large-text button { font-size: 1.2rem !important; padding: 1rem 2rem !important; }
      `}</style>
    </>
  );
};

// Keyboard Navigation Hook
export const useKeyboardNavigation = (items: string[], onSelect: (item: string) => void) => {
  const [selectedIndex, setSelectedIndex] = useState(0);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          setSelectedIndex(prev => (prev + 1) % items.length);
          break;
        case 'ArrowUp':
          event.preventDefault();
          setSelectedIndex(prev => (prev - 1 + items.length) % items.length);
          break;
        case 'Enter':
        case ' ':
          event.preventDefault();
          onSelect(items[selectedIndex]);
          break;
        case 'Home':
          event.preventDefault();
          setSelectedIndex(0);
          break;
        case 'End':
          event.preventDefault();
          setSelectedIndex(items.length - 1);
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [items, selectedIndex, onSelect]);

  return { selectedIndex, setSelectedIndex };
};

// Focus Trap Hook
export const useFocusTrap = (isActive: boolean) => {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isActive) return;

    const container = containerRef.current;
    if (!container) return;

    const focusableElements = container.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );

    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

    const handleTabKey = (event: KeyboardEvent) => {
      if (event.key === 'Tab') {
        if (event.shiftKey) {
          if (document.activeElement === firstElement) {
            event.preventDefault();
            lastElement.focus();
          }
        } else {
          if (document.activeElement === lastElement) {
            event.preventDefault();
            firstElement.focus();
          }
        }
      }
    };

    container.addEventListener('keydown', handleTabKey);
    return () => container.removeEventListener('keydown', handleTabKey);
  }, [isActive]);

  return containerRef;
};

// Screen Reader Announcement Hook
export const useScreenReaderAnnouncement = () => {
  const announce = (message: string, priority: 'polite' | 'assertive' = 'polite') => {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', priority);
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    
    document.body.appendChild(announcement);
    
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  return announce;
};

// Skip Link Component
export const SkipLink: React.FC<{ href: string; children: React.ReactNode }> = ({ href, children }) => (
  <a
    href={href}
    className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 z-50 px-4 py-2 bg-cyan-500 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-offset-2"
  >
    {children}
  </a>
);

// Screen Reader Only Text
export const SrOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <span className="sr-only">{children}</span>
);

// Export the main provider component as default
export default AccessibilityProvider;