<<<<<<< HEAD
import React, { useEffect, useState, useCallback } from 'react';
=======
import React, { useState, useEffect, useCallback, useRef } from 'react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Smartphone, Tablet, Monitor, Wifi, Battery, 
  Hand, RotateCw, ZoomIn, ZoomOut, CheckCircle, AlertTriangle
} from 'lucide-react';

interface MobileOptimizerProps {
<<<<<<< HEAD
  showPanel?: boolean;
  autoOptimize?: boolean;
}

interface DeviceInfo {
  type: 'mobile' | 'tablet' | 'desktop';
  orientation: 'portrait' | 'landscape';
  screenSize: { width: number; height: number };
  pixelRatio: number;
  touchSupport: boolean;
  userAgent: string;
}

interface OptimizationResult {
  type: string;
  status: 'success' | 'warning' | 'error';
  message: string;
  applied: boolean;
}

const MobileOptimizer: React.FC<MobileOptimizerProps> = ({ 
  showPanel = false, 
  autoOptimize = true 
}) => {
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);
  const [isVisible, setIsVisible] = useState(false);
  const [optimizations, setOptimizations] = useState<OptimizationResult[]>([]);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [currentOrientation, setCurrentOrientation] = useState<'portrait' | 'landscape'>('portrait');

  // Enhanced device detection
  const detectDevice = useCallback((): DeviceInfo => {
    if (typeof window === 'undefined') {
      return {
        type: 'desktop',
        orientation: 'portrait',
        screenSize: { width: 1920, height: 1080 },
        pixelRatio: 1,
        touchSupport: false,
        userAgent: ''
      };
    }

    const { innerWidth, innerHeight, devicePixelRatio } = window;
    const userAgent = navigator.userAgent.toLowerCase();
    
    // Enhanced device type detection
    let type: 'mobile' | 'tablet' | 'desktop' = 'desktop';
    if (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent)) {
      if (innerWidth <= 768) {
        type = 'mobile';
      } else if (innerWidth <= 1024) {
        type = 'tablet';
      }
    } else if (innerWidth <= 768) {
      type = 'mobile';
    } else if (innerWidth <= 1024) {
      type = 'tablet';
    }

    // Enhanced orientation detection
    const orientation: 'portrait' | 'landscape' = innerWidth > innerHeight ? 'landscape' : 'portrait';
    
    // Enhanced touch support detection
    const touchSupport = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    return {
      type,
      orientation,
      screenSize: { width: innerWidth, height: innerHeight },
      pixelRatio: devicePixelRatio || 1,
      touchSupport,
      userAgent
    };
  }, []);

  // Enhanced optimization analysis
  const analyzeAndOptimize = useCallback((device: DeviceInfo) => {
    const newOptimizations: OptimizationResult[] = [];
    
    // Touch optimization
    if (device.touchSupport) {
      newOptimizations.push({
        type: 'touch',
        status: 'success',
        message: 'Touch gestures enabled and optimized',
        applied: true
      });
    } else {
      newOptimizations.push({
        type: 'touch',
        status: 'warning',
        message: 'Touch support not detected - consider adding touch gestures',
        applied: false
      });
    };

    // Run after images are loaded
    if (document.readyState === 'complete') {
      optimizeImagesForDevice();
    } else {
      window.addEventListener('load', optimizeImagesForDevice);
    }

    // Screen size optimization
    if (device.type === 'mobile' && device.screenSize.width < 375) {
      newOptimizations.push({
        type: 'screen-size',
        status: 'warning',
        message: 'Small screen detected - optimizing layout for better mobile experience',
        applied: true
      });
    }
=======
  children: React.ReactNode;
  showDebugInfo?: boolean;
  enableTouchGestures?: boolean;
  enableMobileLayout?: boolean;
  enablePerformanceMode?: boolean;
}

interface TouchGesture {
  type: 'swipe' | 'pinch' | 'rotate' | 'longPress';
  direction?: 'up' | 'down' | 'left' | 'right';
  distance?: number;
  duration?: number;
}

const MobileOptimizer: React.FC<MobileOptimizerProps> = ({
  children,
  showDebugInfo = false,
  enableTouchGestures = true,
  enableMobileLayout = true,
  enablePerformanceMode = true
}) => {
  const [isMobile, setIsMobile] = useState(false);
  const [isTablet, setIsTablet] = useState(false);
  const [orientation, setOrientation] = useState<'portrait' | 'landscape'>('portrait');
  const [touchGestures, setTouchGestures] = useState<TouchGesture[]>([]);
  const [performanceMetrics, setPerformanceMetrics] = useState({
    fps: 0,
    memoryUsage: 0,
    batteryLevel: 0,
    networkSpeed: 'unknown'
  });
  const [showMobilePanel, setShowMobilePanel] = useState(false);
  
  const touchStartRef = useRef<{ x: number; y: number; time: number } | null>(null);
  const touchMoveRef = useRef<{ x: number; y: number; time: number } | null>(null);
  const fpsRef = useRef<number>(0);
  const frameCountRef = useRef<number>(0);
  const lastTimeRef = useRef<number>(0);

  // Detect mobile device
  useEffect(() => {
    const checkDevice = () => {
      const userAgent = navigator.userAgent.toLowerCase();
      const isMobileDevice = /mobile|android|iphone|ipad|ipod|blackberry|windows phone/g.test(userAgent);
      const isTabletDevice = /ipad|android(?!.*mobile)|tablet/g.test(userAgent);
      
      setIsMobile(isMobileDevice);
      setIsTablet(isTabletDevice);
      
      // Apply mobile-specific optimizations
      if (isMobileDevice && enableMobileLayout) {
        applyMobileLayout();
      }
      
      if (isMobileDevice && enablePerformanceMode) {
        enableMobilePerformanceMode();
      }
    };

    checkDevice();
    window.addEventListener('resize', checkDevice);
    return () => window.removeEventListener('resize', checkDevice);
  }, [enableMobileLayout, enablePerformanceMode]);

  // Detect orientation changes
  useEffect(() => {
    const checkOrientation = () => {
      const newOrientation = window.innerHeight > window.innerWidth ? 'portrait' : 'landscape';
      setOrientation(newOrientation);
      
      // Apply orientation-specific optimizations
      if (newOrientation === 'landscape') {
        applyLandscapeOptimizations();
      } else {
        applyPortraitOptimizations();
      }
    };

    checkOrientation();
    window.addEventListener('orientationchange', checkOrientation);
    window.addEventListener('resize', checkOrientation);
    
    return () => {
      window.removeEventListener('orientationchange', checkOrientation);
      window.removeEventListener('resize', checkOrientation);
    };
  }, []);

  // Touch gesture handling
  useEffect(() => {
    if (!enableTouchGestures || !isMobile) return;

    const handleTouchStart = (e: TouchEvent) => {
      if (e.touches.length === 1) {
        touchStartRef.current = {
          x: e.touches[0].clientX,
          y: e.touches[0].clientY,
          time: Date.now()
        };
      }
    };

    const handleTouchMove = (e: TouchEvent) => {
      if (e.touches.length === 1 && touchStartRef.current) {
        touchMoveRef.current = {
          x: e.touches[0].clientX,
          y: e.touches[0].clientY,
          time: Date.now()
        };
      }
    };

    const handleTouchEnd = (e: TouchEvent) => {
      if (touchStartRef.current && touchMoveRef.current) {
        const gesture = detectTouchGesture(touchStartRef.current, touchMoveRef.current);
        if (gesture) {
          setTouchGestures(prev => [...prev.slice(-4), gesture]);
          handleGestureAction(gesture);
        }
        
        touchStartRef.current = null;
        touchMoveRef.current = null;
      }
    };

    const handleLongPress = (e: TouchEvent) => {
      const longPressTimer = setTimeout(() => {
        const gesture: TouchGesture = {
          type: 'longPress',
          duration: 1000
        };
        setTouchGestures(prev => [...prev.slice(-4), gesture]);
        handleGestureAction(gesture);
      }, 1000);

      const clearLongPress = () => clearTimeout(longPressTimer);
      
      e.target?.addEventListener('touchend', clearLongPress, { once: true });
      e.target?.addEventListener('touchmove', clearLongPress, { once: true });
    };

    document.addEventListener('touchstart', handleTouchStart, { passive: true });
    document.addEventListener('touchmove', handleTouchMove, { passive: true });
    document.addEventListener('touchend', handleTouchEnd, { passive: true });
    document.addEventListener('touchstart', handleLongPress, { passive: true });

    return () => {
      document.removeEventListener('touchstart', handleTouchStart);
      document.removeEventListener('touchmove', handleTouchMove);
      document.removeEventListener('touchend', handleTouchEnd);
      document.removeEventListener('touchstart', handleLongPress);
    };
  }, [enableTouchGestures, isMobile]);

  // Performance monitoring
  useEffect(() => {
    if (!enablePerformanceMode) return;

    let animationFrameId: number;
    
    const measurePerformance = (currentTime: number) => {
      frameCountRef.current++;
      
      if (currentTime - lastTimeRef.current >= 1000) {
        fpsRef.current = frameCountRef.current;
        frameCountRef.current = 0;
        lastTimeRef.current = currentTime;
        
        // Update performance metrics
        setPerformanceMetrics(prev => ({
          ...prev,
          fps: fpsRef.current
        }));
      }
      
      animationFrameId = requestAnimationFrame(measurePerformance);
    };

    animationFrameId = requestAnimationFrame(measurePerformance);

    // Monitor memory usage
    const memoryInterval = setInterval(() => {
      if ('memory' in performance) {
        const memory = (performance as any).memory;
        setPerformanceMetrics(prev => ({
          ...prev,
          memoryUsage: Math.round(memory.usedJSHeapSize / 1024 / 1024) // MB
        }));
      }
    }, 2000);

    // Monitor battery level
    if ('getBattery' in navigator) {
      (navigator as any).getBattery().then((battery: any) => {
        const updateBatteryLevel = () => {
          setPerformanceMetrics(prev => ({
            ...prev,
            batteryLevel: Math.round(battery.level * 100)
          }));
        };
        
        updateBatteryLevel();
        battery.addEventListener('levelchange', updateBatteryLevel);
        
        return () => battery.removeEventListener('levelchange', updateBatteryLevel);
      });
    }

    // Monitor network speed
    if ('connection' in navigator) {
      const connection = (navigator as any).connection;
      const updateNetworkSpeed = () => {
        let speed = 'unknown';
        if (connection.effectiveType) {
          speed = connection.effectiveType;
        } else if (connection.downlink) {
          speed = `${connection.downlink} Mbps`;
        }
        
        setPerformanceMetrics(prev => ({
          ...prev,
          networkSpeed: speed
        }));
      };
      
      updateNetworkSpeed();
      connection.addEventListener('change', updateNetworkSpeed);
      
      return () => connection.removeEventListener('change', updateNetworkSpeed);
    }

    return () => {
      cancelAnimationFrame(animationFrameId);
      clearInterval(memoryInterval);
    };
  }, [enablePerformanceMode]);

  const detectTouchGesture = (start: { x: number; y: number; time: number }, end: { x: number; y: number; time: number }): TouchGesture | null => {
    const deltaX = end.x - start.x;
    const deltaY = end.y - start.y;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const duration = end.time - start.time;
    
    // Minimum distance and duration thresholds
    if (distance < 50 || duration < 100) return null;
    
    // Determine direction
    if (Math.abs(deltaX) > Math.abs(deltaY)) {
      return {
        type: 'swipe',
        direction: deltaX > 0 ? 'right' : 'left',
        distance: Math.abs(deltaX),
        duration
      };
    } else {
      return {
        type: 'swipe',
        direction: deltaY > 0 ? 'down' : 'up',
        distance: Math.abs(deltaY),
        duration
      };
    }
  };

  const handleGestureAction = (gesture: TouchGesture) => {
    switch (gesture.type) {
      case 'swipe':
        if (gesture.direction === 'left') {
          // Navigate forward
          if (window.history.length > 1) {
            window.history.forward();
          }
        } else if (gesture.direction === 'right') {
          // Navigate back
          if (window.history.length > 1) {
            window.history.back();
          }
        } else if (gesture.direction === 'up') {
          // Scroll to top
          window.scrollTo({ top: 0, behavior: 'smooth' });
        } else if (gesture.direction === 'down') {
          // Scroll to bottom
          window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
        }
        break;
      case 'longPress':
        // Show context menu or additional options
        console.log('Long press detected');
        break;
    }
  };

  const applyMobileLayout = () => {
    // Add mobile-specific CSS classes
    document.documentElement.classList.add('mobile-optimized');
    
    // Optimize viewport
    const viewport = document.querySelector('meta[name="viewport"]');
    if (viewport) {
      viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
    }
    
    // Add touch-action CSS
    const style = document.createElement('style');
    style.textContent = `
      .mobile-optimized * {
        touch-action: manipulation;
        -webkit-tap-highlight-color: transparent;
      }
      
      .mobile-optimized button,
      .mobile-optimized a {
        min-height: 44px;
        min-width: 44px;
      }
      
      .mobile-optimized input,
      .mobile-optimized select,
      .mobile-optimized textarea {
        font-size: 16px; /* Prevents zoom on iOS */
      }
    `;
    document.head.appendChild(style);
  };

  const enableMobilePerformanceMode = () => {
    // Reduce animations on mobile
    document.documentElement.classList.add('mobile-performance-mode');
    
    // Optimize images
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      img.loading = 'lazy';
      img.decoding = 'async';
    });
    
    // Reduce motion for better performance
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      document.documentElement.classList.add('reduced-motion');
    }
  };

  const applyLandscapeOptimizations = () => {
    // Landscape-specific optimizations
    document.documentElement.classList.add('landscape-mode');
    
    // Adjust layout for landscape
    const style = document.createElement('style');
    style.textContent = `
      .landscape-mode .mobile-panel {
        width: 300px;
        height: 100vh;
      }
    `;
    document.head.appendChild(style);
  };

  const applyPortraitOptimizations = () => {
    // Portrait-specific optimizations
    document.documentElement.classList.remove('landscape-mode');
  };

  const optimizeForMobile = useCallback(() => {
    if (!isMobile) return;

    // Optimize images
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      if (!img.loading) img.loading = 'lazy';
      if (!img.decoding) img.decoding = 'async';
    });

    // Optimize fonts
    const fonts = document.querySelectorAll('link[rel="preload"][as="font"]');
    fonts.forEach(font => {
      font.setAttribute('crossorigin', 'anonymous');
    });

    // Add mobile-specific event listeners
    document.addEventListener('touchstart', () => {}, { passive: true });
    document.addEventListener('touchmove', () => {}, { passive: true });
  }, [isMobile]);

  useEffect(() => {
    optimizeForMobile();
  }, [optimizeForMobile]);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a

    // Pixel ratio optimization
    if (device.pixelRatio > 2) {
      newOptimizations.push({
        type: 'pixel-ratio',
        status: 'success',
        message: 'High DPI display detected - using optimized assets',
        applied: true
      });
    }

    // Orientation optimization
    if (device.orientation === 'landscape' && device.type === 'mobile') {
      newOptimizations.push({
        type: 'orientation',
        status: 'warning',
        message: 'Mobile landscape mode - adjusting layout for better usability',
        applied: true
      });
    }

    // Performance optimization for mobile
    if (device.type === 'mobile') {
      newOptimizations.push({
        type: 'performance',
        status: 'success',
        message: 'Mobile performance optimizations applied',
        applied: true
      });
    }

    setOptimizations(newOptimizations);
    
    // Apply optimizations automatically
    if (autoOptimize) {
      applyOptimizations(newOptimizations);
    }
  }, [autoOptimize]);

  // Enhanced optimization application
  const applyOptimizations = useCallback((optimizationList: OptimizationResult[]) => {
    setIsOptimizing(true);
    
    optimizationList.forEach(optimization => {
      if (optimization.applied) {
        switch (optimization.type) {
          case 'touch':
            optimizeTouchGestures();
            break;
          case 'screen-size':
            optimizeLayout();
            break;
          case 'pixel-ratio':
            optimizeAssets();
            break;
          case 'orientation':
            optimizeOrientation();
            break;
          case 'performance':
            optimizePerformance();
            break;
        }
      }
    });
    
    setTimeout(() => setIsOptimizing(false), 2000);
  }, []);

  // Touch gesture optimization
  const optimizeTouchGestures = useCallback(() => {
    if (typeof window === 'undefined') return;

    // Add touch gesture support
    const touchElements = document.querySelectorAll('[data-touch]');
    touchElements.forEach(element => {
      let startY = 0;
      let startX = 0;
      
      element.addEventListener('touchstart', (e) => {
        const touch = e.touches[0];
        startY = touch.clientY;
        startX = touch.clientX;
      });
      
      element.addEventListener('touchend', (e) => {
        const touch = e.changedTouches[0];
        const deltaY = startY - touch.clientY;
        const deltaX = startX - touch.clientX;
        
        // Swipe detection
        if (Math.abs(deltaY) > 50) {
          if (deltaY > 0) {
            // Swipe up
            element.dispatchEvent(new CustomEvent('swipeup'));
          } else {
            // Swipe down
            element.dispatchEvent(new CustomEvent('swipedown'));
          }
        }
        
        if (Math.abs(deltaX) > 50) {
          if (deltaX > 0) {
            // Swipe left
            element.dispatchEvent(new CustomEvent('swipeleft'));
          } else {
            // Swipe right
            element.dispatchEvent(new CustomEvent('swiperight'));
          }
        }
      });
    });
  }, []);

  // Layout optimization
  const optimizeLayout = useCallback(() => {
    if (typeof window === 'undefined') return;

    // Adjust font sizes for small screens
    const root = document.documentElement;
    const fontSize = Math.max(14, Math.min(16, window.innerWidth / 25));
    root.style.fontSize = `${fontSize}px`;
    
    // Optimize spacing
    const spacing = Math.max(8, Math.min(16, window.innerWidth / 50));
    root.style.setProperty('--mobile-spacing', `${spacing}px`);
    
    // Add mobile-specific CSS classes
    document.body.classList.add('mobile-optimized');
  }, []);

  // Asset optimization
  const optimizeAssets = useCallback(() => {
    if (typeof window === 'undefined') return;

    // Optimize images for high DPI displays
    const images = document.querySelectorAll('img[data-srcset]');
    images.forEach(img => {
      const imgElement = img as HTMLImageElement;
      const srcset = imgElement.getAttribute('data-srcset');
      if (srcset) {
        imgElement.srcset = srcset;
        imgElement.sizes = '(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw';
      }
    });
    
    // Optimize fonts for high DPI
    const fonts = document.querySelectorAll('link[rel="preload"][as="font"]');
    fonts.forEach(font => {
      font.setAttribute('crossorigin', 'anonymous');
    });
  }, []);

  // Orientation optimization
  const optimizeOrientation = useCallback(() => {
    if (typeof window === 'undefined') return;

    // Adjust layout for landscape orientation
    if (window.innerWidth > window.innerHeight) {
      document.body.classList.add('landscape-mode');
      document.body.classList.remove('portrait-mode');
    } else {
      document.body.classList.add('portrait-mode');
      document.body.classList.remove('landscape-mode');
    }
  }, []);

  // Performance optimization
  const optimizePerformance = useCallback(() => {
    if (typeof window === 'undefined') return;

    // Reduce animations on mobile for better performance
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (prefersReducedMotion || deviceInfo?.type === 'mobile') {
      document.documentElement.style.setProperty('--animation-duration', '0.1s');
      document.documentElement.style.setProperty('--transition-duration', '0.1s');
    }
    
    // Optimize scroll performance
    const scrollElements = document.querySelectorAll('.scroll-container');
    scrollElements.forEach(element => {
      const scrollElement = element as HTMLElement;
      (scrollElement.style as any).webkitOverflowScrolling = 'touch';
      scrollElement.style.overscrollBehavior = 'contain';
    });
  }, [deviceInfo]);

  // Manual optimization trigger
  const triggerOptimization = useCallback(() => {
    if (deviceInfo) {
      analyzeAndOptimize(deviceInfo);
    }
  }, [deviceInfo, analyzeAndOptimize]);

  // Handle orientation change
  const handleOrientationChange = useCallback(() => {
    const newDeviceInfo = detectDevice();
    setDeviceInfo(newDeviceInfo);
    setCurrentOrientation(newDeviceInfo.orientation);
    
    if (autoOptimize) {
      analyzeAndOptimize(newDeviceInfo);
    }
  }, [detectDevice, autoOptimize, analyzeAndOptimize]);

  // Handle resize
  const handleResize = useCallback(() => {
    const newDeviceInfo = detectDevice();
    setDeviceInfo(newDeviceInfo);
    
    if (autoOptimize) {
      analyzeAndOptimize(newDeviceInfo);
    }
  }, [detectDevice, autoOptimize, analyzeAndOptimize]);

  useEffect(() => {
    if (showPanel) {
      setIsVisible(true);
      const device = detectDevice();
      setDeviceInfo(device);
      setCurrentOrientation(device.orientation);
      
      if (autoOptimize) {
        analyzeAndOptimize(device);
      }
    }
  }, [showPanel, detectDevice, autoOptimize, analyzeAndOptimize]);

  useEffect(() => {
    if (typeof window === 'undefined') return;

    // Set up event listeners
    window.addEventListener('orientationchange', handleOrientationChange);
    window.addEventListener('resize', handleResize);
    
    // Set up orientation change detection
    const mediaQuery = window.matchMedia('(orientation: portrait)');
    const handleMediaQueryChange = (e: MediaQueryListEvent) => {
      setCurrentOrientation(e.matches ? 'portrait' : 'landscape');
    };
    
    mediaQuery.addEventListener('change', handleMediaQueryChange);
    
    return () => {
      window.removeEventListener('orientationchange', handleOrientationChange);
      window.removeEventListener('resize', handleResize);
      mediaQuery.removeEventListener('change', handleMediaQueryChange);
    };
  }, [handleOrientationChange, handleResize]);

  if (!showPanel || !isVisible) return null;

  const getDeviceIcon = (type: string) => {
    switch (type) {
      case 'mobile': return <Smartphone className="w-5 h-5" />;
      case 'tablet': return <Tablet className="w-5 h-5" />;
      default: return <Monitor className="w-5 h-5" />;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'warning': return <AlertTriangle className="w-4 h-4 text-yellow-400" />;
      case 'error': return <AlertTriangle className="w-4 h-4 text-red-400" />;
      default: return <CheckCircle className="w-4 h-4 text-gray-400" />;
    }
  };

  return (
<<<<<<< HEAD
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        className="fixed bottom-4 left-4 z-50"
      >
        <div className="bg-gray-900/95 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-2xl max-w-sm">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
              <Smartphone className="w-5 h-5 text-cyan-400" />
              Mobile Optimizer
            </h3>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-white transition-colors"
            >
              ×
            </button>
          </div>

          {deviceInfo && (
            <div className="space-y-4">
              {/* Device Info */}
              <div className="bg-gray-800/50 rounded-xl p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    {getDeviceIcon(deviceInfo.type)}
                    <span className="text-white font-medium capitalize">
                      {deviceInfo.type}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <RotateCw className="w-4 h-4 text-gray-400" />
                    <span className="text-gray-400 text-sm capitalize">
                      {currentOrientation}
                    </span>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div>
                    <span className="text-gray-400">Screen:</span>
                    <div className="text-white">
                      {deviceInfo.screenSize.width} × {deviceInfo.screenSize.height}
                    </div>
                  </div>
                  <div>
                    <span className="text-gray-400">DPI:</span>
                    <div className="text-white">
                      {deviceInfo.pixelRatio}x
                    </div>
                  </div>
                  <div>
                    <span className="text-gray-400">Touch:</span>
                    <div className="text-white">
                      {deviceInfo.touchSupport ? 'Yes' : 'No'}
                    </div>
                  </div>
                  <div>
                    <span className="text-gray-400">Agent:</span>
                    <div className="text-white text-xs truncate">
                      {deviceInfo.userAgent.substring(0, 20)}...
                    </div>
                  </div>
                </div>
              </div>

              {/* Optimizations */}
              {optimizations.length > 0 && (
                <div className="space-y-2">
                  <h4 className="text-sm font-semibold text-white">Optimizations</h4>
                  {optimizations.map((optimization, index) => (
                    <div key={index} className="flex items-start gap-2 p-2 bg-gray-800/30 rounded-lg">
                      {getStatusIcon(optimization.status)}
                      <div className="flex-1">
                        <div className="text-sm text-white">{optimization.message}</div>
                        <div className="text-xs text-gray-400 capitalize">
                          {optimization.type} • {optimization.applied ? 'Applied' : 'Pending'}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex gap-2">
                <button
                  onClick={triggerOptimization}
                  disabled={isOptimizing}
                  className="flex-1 bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors disabled:cursor-not-allowed"
                >
                  {isOptimizing ? 'Optimizing...' : 'Optimize Now'}
                </button>
                <button
                  onClick={() => {
                    const device = detectDevice();
                    setDeviceInfo(device);
                    setCurrentOrientation(device.orientation);
                  }}
                  className="bg-gray-700 hover:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors"
                >
                  Refresh
                </button>
              </div>
              <button
                onClick={() => setIsDebugOpen(false)}
                className="text-gray-400 hover:text-white transition-colors"
                aria-label="Close debug panel"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          )}

          {!deviceInfo && (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400 mx-auto mb-3"></div>
              <p className="text-gray-400 text-sm">Detecting device...</p>
            </div>
          )}
        </div>
      </motion.div>
    </AnimatePresence>
=======
    <>
      {children}
      
      {/* Mobile Optimization Panel */}
      <AnimatePresence>
        {showMobilePanel && (
          <motion.div
            initial={{ opacity: 0, x: 300 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 300 }}
            className="fixed top-0 right-0 h-full w-80 bg-black/95 backdrop-blur-md border-l border-cyan-500/30 z-40 overflow-y-auto"
          >
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-white">Mobile Optimizer</h2>
                <button
                  onClick={() => setShowMobilePanel(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  ×
                </button>
              </div>

              {/* Device Information */}
              <div className="mb-6 p-4 bg-cyan-500/20 border border-cyan-500/30 rounded-lg">
                <h3 className="text-sm font-medium text-cyan-400 mb-2">Device Info</h3>
                <div className="space-y-1 text-xs text-gray-300">
                  <div>Type: {isMobile ? (isTablet ? 'Tablet' : 'Mobile') : 'Desktop'}</div>
                  <div>Orientation: {orientation}</div>
                  <div>User Agent: {navigator.userAgent.substring(0, 50)}...</div>
                </div>
              </div>

              {/* Performance Metrics */}
              <div className="mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-lg">
                <h3 className="text-sm font-medium text-green-400 mb-2">Performance</h3>
                <div className="space-y-1 text-xs text-gray-300">
                  <div>FPS: {performanceMetrics.fps}</div>
                  <div>Memory: {performanceMetrics.memoryUsage}MB</div>
                  <div>Battery: {performanceMetrics.batteryLevel}%</div>
                  <div>Network: {performanceMetrics.networkSpeed}</div>
                </div>
              </div>

              {/* Touch Gestures */}
              <div className="mb-6 p-4 bg-purple-500/20 border border-purple-500/30 rounded-lg">
                <h3 className="text-sm font-medium text-purple-400 mb-2">Recent Gestures</h3>
                <div className="space-y-1">
                  {touchGestures.map((gesture, index) => (
                    <div key={index} className="text-xs text-gray-300">
                      {gesture.type} {gesture.direction && `(${gesture.direction})`}
                    </div>
                  ))}
                </div>
              </div>

              {/* Optimization Controls */}
              <div className="space-y-4">
                <h3 className="text-sm font-medium text-white">Optimizations</h3>
                
                <div className="flex items-center justify-between">
                  <label className="text-sm text-gray-300">Touch Gestures</label>
                  <div className={`w-3 h-3 rounded-full ${enableTouchGestures ? 'bg-green-400' : 'bg-gray-400'}`}></div>
                </div>
                
                <div className="flex items-center justify-between">
                  <label className="text-sm text-gray-300">Mobile Layout</label>
                  <div className={`w-3 h-3 rounded-full ${enableMobileLayout ? 'bg-green-400' : 'bg-gray-400'}`}></div>
                </div>
                
                <div className="flex items-center justify-between">
                  <label className="text-sm text-gray-300">Performance Mode</label>
                  <div className={`w-3 h-3 rounded-full ${enablePerformanceMode ? 'bg-green-400' : 'bg-gray-400'}`}></div>
                </div>
              </div>

              {/* Quick Actions */}
              <div className="mt-8 pt-6 border-t border-gray-700">
                <h3 className="text-sm font-medium text-white mb-3">Quick Actions</h3>
                <div className="space-y-2">
                  <button
                    onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
                    className="w-full px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white text-sm rounded transition-colors"
                  >
                    Scroll to Top
                  </button>
                  <button
                    onClick={() => window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' })}
                    className="w-full px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm rounded transition-colors"
                  >
                    Scroll to Bottom
                  </button>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Mobile Toggle Button */}
      <button
        onClick={() => setShowMobilePanel(!showMobilePanel)}
        className="fixed top-4 right-4 z-50 p-3 bg-purple-600 hover:bg-purple-700 text-white rounded-full shadow-lg transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-purple-500/50"
        aria-label="Mobile optimization panel"
      >
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
        </svg>
      </button>

      {/* Global Mobile Styles */}
      <style jsx global>{`
        .mobile-optimized * {
          touch-action: manipulation;
          -webkit-tap-highlight-color: transparent;
        }

        .mobile-performance-mode * {
          animation-duration: 0.3s !important;
          transition-duration: 0.3s !important;
        }

        .reduced-motion * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }

        .landscape-mode .mobile-panel {
          width: 300px;
        }

        @media (max-width: 768px) {
          .mobile-optimized button,
          .mobile-optimized a {
            min-height: 44px;
            min-width: 44px;
          }
          
          .mobile-optimized input,
          .mobile-optimized select,
          .mobile-optimized textarea {
            font-size: 16px;
          }
        }
      `}</style>
    </>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-fe8a
  );
};

export default MobileOptimizer;