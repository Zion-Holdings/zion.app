<<<<<<< HEAD
import React, { useEffect, useRef, useCallback } from 'react';
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
import { motion } from 'framer-motion';
=======
import React, { useEffect, useRef } from 'react';
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84

const UltraFuturisticBackground2036: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let animationFrameId: number;
    let particles: Particle[] = [];
    let connections: Connection[] = [];

    class Particle {
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      color: string;

      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.vx = (Math.random() - 0.5) * 0.5;
        this.vy = (Math.random() - 0.5) * 0.5;
        this.size = Math.random() * 2 + 1;
        this.opacity = Math.random() * 0.5 + 0.3;
        this.color = `hsl(${Math.random() * 60 + 180}, 70%, 60%)`;
      }

      update() {
        this.x += this.vx;
        this.y += this.vy;

        if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
        if (this.y < 0 || this.y > canvas.height) this.vy *= -1;

<<<<<<< HEAD
      switch (particle.type) {
        case 'quantum':
          // Quantum particles with geometric shapes
          ctx.fillStyle = particle.color;
          ctx.beginPath();
          if (Math.random() < 0.5) {
            // Diamond shape
            ctx.moveTo(0, -particle.size);
            ctx.lineTo(particle.size, 0);
            ctx.lineTo(0, particle.size);
            ctx.lineTo(-particle.size, 0);
          } else {
            // Triangle
            ctx.moveTo(0, -particle.size);
            ctx.lineTo(particle.size, particle.size);
            ctx.lineTo(-particle.size, particle.size);
          }
          ctx.closePath();
          ctx.fill();
          break;

        case 'wave':
          // Wave particles with sine wave effect
          ctx.strokeStyle = particle.color;
          ctx.lineWidth = 2;
          ctx.beginPath();
          for (let i = 0; i < 10; i++) {
            const x = (i - 5) * particle.size * 0.5;
            const y = Math.sin(time * 2 + i * 0.5) * particle.size * 0.3;
            if (i === 0) {
              ctx.moveTo(x, y);
            } else {
              ctx.lineTo(x, y);
            }
          }
          ctx.stroke();
          break;

        case 'neon':
          // Neon particles with glow effect
          ctx.shadowColor = particle.color;
          ctx.shadowBlur = particle.size * 2;
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
          ctx.fillStyle = particle.color;
          ctx.beginPath();
          ctx.arc(0, 0, particle.size, 0, Math.PI * 2);
          ctx.fill();
          break;

        default:
          // Regular particles
          ctx.fillStyle = particle.color;
          ctx.beginPath();
          ctx.arc(0, 0, particle.size, 0, Math.PI * 2);
          ctx.fill();
=======
        this.opacity += (Math.random() - 0.5) * 0.02;
        this.opacity = Math.max(0.1, Math.min(0.8, this.opacity));
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
      }

      draw() {
        ctx!.save();
        ctx!.globalAlpha = this.opacity;
        ctx!.fillStyle = this.color;
        ctx!.beginPath();
        ctx!.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx!.fill();
        ctx!.restore();
      }
    }

<<<<<<< HEAD
    // Draw connecting lines between nearby particles
    ctx.strokeStyle = 'rgba(6, 182, 212, 0.1)';
    ctx.lineWidth = 1;
    
    for (let i = 0; i < particlesRef.current.length; i++) {
      for (let j = i + 1; j < particlesRef.current.length; j++) {
        const p1 = particlesRef.current[i];
        const p2 = particlesRef.current[j];
        const distance = Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);
        
        if (distance < 100) {
          const opacity = (100 - distance) / 100 * 0.1;
          ctx.strokeStyle = `rgba(6, 182, 212, ${opacity})`;
          ctx.beginPath();
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
          ctx.moveTo(p1.x, p1.y);
          ctx.lineTo(p2.x, p2.y);
          ctx.stroke();
=======
    class Connection {
      particle1: Particle;
      particle2: Particle;
      opacity: number;

      constructor(p1: Particle, p2: Particle) {
        this.particle1 = p1;
        this.particle2 = p2;
        this.opacity = Math.random() * 0.3 + 0.1;
      }

      draw() {
        const distance = Math.sqrt(
          Math.pow(this.particle1.x - this.particle2.x, 2) +
          Math.pow(this.particle1.y - this.particle2.y, 2)
        );

        if (distance < 150) {
          ctx!.save();
          ctx!.globalAlpha = this.opacity * (1 - distance / 150);
          ctx!.strokeStyle = 'rgba(0, 255, 255, 0.3)';
          ctx!.lineWidth = 1;
          ctx!.beginPath();
          ctx!.moveTo(this.particle1.x, this.particle1.y);
          ctx!.lineTo(this.particle2.x, this.particle2.y);
          ctx!.stroke();
          ctx!.restore();
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
        }
      }
    }

<<<<<<< HEAD
    // Continue animation
    animationFrameRef.current = requestAnimationFrame(() => animate(canvas, ctx));
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
  }, [getThemeColors]);

  // Enhanced initialization and cleanup
  useEffect(() => {
    initParticles();
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
=======
    // Initialize particles and connections
    for (let i = 0; i < 100; i++) {
      particles.push(new Particle());
    }

    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        if (Math.random() < 0.1) {
          connections.push(new Connection(particles[i], particles[j]));
        }
      }
    }

    const animate = () => {
      ctx!.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx!.fillRect(0, 0, canvas.width, canvas.height);

      particles.forEach(particle => {
        particle.update();
        particle.draw();
      });

      connections.forEach(connection => {
        connection.draw();
      });

      animationFrameId = requestAnimationFrame(animate);
    };

>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
    animate();

    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);

  return (
<<<<<<< HEAD
    <div ref={containerRef} className="fixed inset-0 pointer-events-none z-0">
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
=======
    <>
      {/* Enhanced Canvas Background */}
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none"
        style={{ zIndex: -1 }}
      />

      {/* Animated Grid Overlay */}
      <div className="fixed inset-0 pointer-events-none" style={{ zIndex: -1 }}>
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-cyan-500/5 to-transparent" />
        
        {/* Animated Grid Lines */}
        <svg className="absolute inset-0 w-full h-full opacity-20">
          <defs>
            <pattern id="grid" width="100" height="100" patternUnits="userSpaceOnUse">
              <path d="M 100 0 L 0 0 0 100" fill="none" stroke="rgba(0, 255, 255, 0.3)" strokeWidth="0.5"/>
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill="url(#grid)" />
        </svg>

        {/* Floating Geometric Shapes */}
        <motion.div
          className="absolute top-20 left-20 w-32 h-32 border border-cyan-400/30 rounded-full"
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.3, 0.6, 0.3],
            rotate: [0, 180, 360]
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "linear"
          }}
        />
        
        <motion.div
          className="absolute top-40 right-32 w-24 h-24 border border-blue-400/30 transform rotate-45"
          animate={{
            scale: [1, 1.3, 1],
            opacity: [0.2, 0.5, 0.2],
            rotate: [0, 90, 180, 270, 360]
          }}
          transition={{
            duration: 12,
            repeat: Infinity,
            ease: "linear"
          }}
        />

        <motion.div
          className="absolute bottom-32 left-1/3 w-20 h-20 border border-purple-400/30 transform rotate-12"
          animate={{
            scale: [1, 1.4, 1],
            opacity: [0.4, 0.7, 0.4],
            rotate: [0, -180, -360]
          }}
          transition={{
            duration: 10,
            repeat: Infinity,
            ease: "linear"
          }}
        />

        {/* Neon Glow Effects */}
        <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-gradient-radial from-cyan-500/10 via-transparent to-transparent rounded-full blur-3xl" />
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-gradient-radial from-blue-500/10 via-transparent to-transparent rounded-full blur-3xl" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-radial from-purple-500/10 via-transparent to-transparent rounded-full blur-3xl" />
      </div>

      {/* Animated Particles */}
      <div className="fixed inset-0 pointer-events-none" style={{ zIndex: -1 }}>
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-cyan-400 rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`
            }}
            animate={{
              y: [0, -100, 0],
              opacity: [0, 1, 0],
              scale: [0, 1, 0]
            }}
            transition={{
              duration: Math.random() * 3 + 2,
              repeat: Infinity,
              delay: Math.random() * 2,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>

      {/* Scanning Line Effect */}
      <motion.div
        className="fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-cyan-400 to-transparent pointer-events-none"
        style={{ zIndex: -1 }}
        animate={{
          y: [0, 1000]
        }}
        transition={{
          duration: 8,
          repeat: Infinity,
          ease: "linear"
        }}
      />
<<<<<<< HEAD
      
      {/* Additional visual elements */}
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
      <div className="absolute inset-0">
        <svg className="w-full h-full" style={{ opacity: 0.1 }}>
          <defs>
            <linearGradient id="quantumGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#00ffff" stopOpacity="0.5" />
              <stop offset="50%" stopColor="#ff00ff" stopOpacity="0.3" />
              <stop offset="100%" stopColor="#ffff00" stopOpacity="0.5" />
            </linearGradient>
          </defs>
          {Array.from({ length: 20 }).map((_, i) => (
            <line
              key={i}
              x1={Math.random() * 100}
              y1={Math.random() * 100}
              x2={Math.random() * 100}
              y2={Math.random() * 100}
              stroke="url(#quantumGradient)"
              strokeWidth="0.5"
              opacity="0.3"
            />
          ))}
        </svg>
      </div>
      
      {children}
>>>>>>> 916d02471c24718d698d51219f240472f9d52b96
    </div>
=======

      {/* Corner Accents */}
      <div className="fixed top-0 left-0 w-32 h-32 pointer-events-none" style={{ zIndex: -1 }}>
        <div className="absolute top-0 left-0 w-16 h-1 bg-gradient-to-r from-cyan-400 to-transparent" />
        <div className="absolute top-0 left-0 w-1 h-16 bg-gradient-to-b from-cyan-400 to-transparent" />
      </div>
      
      <div className="fixed top-0 right-0 w-32 h-32 pointer-events-none" style={{ zIndex: -1 }}>
        <div className="absolute top-0 right-0 w-16 h-1 bg-gradient-to-l from-blue-400 to-transparent" />
        <div className="absolute top-0 right-0 w-1 h-16 bg-gradient-to-b from-blue-400 to-transparent" />
      </div>
      
      <div className="fixed bottom-0 left-0 w-32 h-32 pointer-events-none" style={{ zIndex: -1 }}>
        <div className="absolute bottom-0 left-0 w-16 h-1 bg-gradient-to-r from-purple-400 to-transparent" />
        <div className="absolute bottom-0 left-0 w-1 h-16 bg-gradient-to-t from-purple-400 to-transparent" />
      </div>
      
      <div className="fixed bottom-0 right-0 w-32 h-32 pointer-events-none" style={{ zIndex: -1 }}>
        <div className="absolute bottom-0 right-0 w-16 h-1 bg-gradient-to-l from-pink-400 to-transparent" />
        <div className="absolute bottom-0 right-0 w-1 h-16 bg-gradient-to-t from-pink-400 to-transparent" />
      </div>

      {/* Floating Data Streams */}
      <div className="fixed inset-0 pointer-events-none" style={{ zIndex: -1 }}>
        {[...Array(5)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute text-cyan-400/30 font-mono text-xs"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`
            }}
            animate={{
              y: [0, -50],
              opacity: [0, 1, 0]
            }}
            transition={{
              duration: Math.random() * 4 + 3,
              repeat: Infinity,
              delay: Math.random() * 3,
              ease: "easeInOut"
            }}
          >
            {Math.random().toString(16).substring(2, 8).toUpperCase()}
          </motion.div>
        ))}
      </div>
    </>
>>>>>>> 83415ede492b23ecd0f96dcc700efe0026b04f84
  );
};

export default UltraFuturisticBackground2036;