import React, { useEffect, useRef } from 'react';
import { motion } from 'framer-motion';

const UltraFuturisticBackground2029: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    // Check if we're in the browser
    if (typeof window === 'undefined') return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let animationFrameId: number;
    let particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      color: string;
      opacity: number;
      life: number;
    }> = [];

<<<<<<< HEAD
    // Create initial particles
    for (let i = 0; i < 150; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5,
        size: Math.random() * 3 + 1,
        color: ['#00ffff', '#ff00ff', '#ffff00', '#00ff00', '#ff0080'][Math.floor(Math.random() * 5)],
        opacity: Math.random() * 0.8 + 0.2,
        life: Math.random() * 100 + 50
      });
    }
=======
    // Enhanced quantum particles with advanced physics
    const particles = Array.from({ length: intensity === 'high' ? 400 : intensity === 'medium' ? 250 : 150 }, () => ({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      vx: (Math.random() - 0.5) * 1.2,
      vy: (Math.random() - 0.5) * 1.2,
      size: Math.random() * 5 + 1,
      color: [
        '#00ffff', '#8b5cf6', '#ec4899', '#10b981', '#3b82f6',
        '#f59e0b', '#ef4444', '#06b6d4', '#84cc16', '#f97316',
        '#a855f7', '#06b6d4', '#f59e0b', '#ef4444', '#10b981'
      ][Math.floor(Math.random() * 15)],
      opacity: Math.random() * 0.8 + 0.2,
      life: Math.random() * 150 + 100,
      maxLife: Math.random() * 150 + 100,
      type: Math.random() > 0.6 ? 'quantum' : Math.random() > 0.3 ? 'holographic' : 'normal',
      rotation: Math.random() * Math.PI * 2,
      rotationSpeed: (Math.random() - 0.5) * 0.1
    }));

    // Advanced holographic grid with quantum properties
    const gridSize = 80;
    const gridOpacity = 0.2;

    // Enhanced neon wave effect
    let waveOffset = 0;
    let timeOffset = 0;

    // Quantum entanglement lines
    const entanglementLines: Array<{x1: number, y1: number, x2: number, y2: number, opacity: number, life: number}> = [];
>>>>>>> origin/cursor/enhance-app-with-new-services-and-futuristic-design-574a

    const animate = () => {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

<<<<<<< HEAD
=======
      // Update and draw particles with enhanced effects
>>>>>>> origin/cursor/enhance-app-with-new-services-and-futuristic-design-574a
      particles.forEach((particle, index) => {
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life--;
        particle.rotation += particle.rotationSpeed;

<<<<<<< HEAD
        if (particle.life <= 0) {
          particles[index] = {
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            vx: (Math.random() - 0.5) * 0.5,
            vy: (Math.random() - 0.5) * 0.5,
            size: Math.random() * 3 + 1,
            color: ['#00ffff', '#ff00ff', '#ffff00', '#00ff00', '#ff0080'][Math.floor(Math.random() * 5)],
            opacity: Math.random() * 0.8 + 0.2,
            life: Math.random() * 100 + 50
          };
        }

        // Draw particle with glow effect
        ctx.save();
        ctx.globalCompositeOperation = 'screen';
        
        // Outer glow
        ctx.shadowColor = particle.color;
        ctx.shadowBlur = 20;
        ctx.fillStyle = particle.color;
        ctx.globalAlpha = particle.opacity * 0.3;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * 2, 0, Math.PI * 2);
        ctx.fill();

        // Inner particle
        ctx.globalAlpha = particle.opacity;
        ctx.shadowBlur = 10;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();

      quantumWave.update();
      quantumWave.draw();

      particles.forEach(particle => {
        particle.update();
        particle.draw();

        // Reset dead particles
        if (particle.life <= 0) {
          const index = particles.indexOf(particle);
          if (index > -1) {
            particles[index] = new Particle();
          }
        }
      });

      // Draw connecting lines between nearby particles
      ctx.strokeStyle = 'rgba(0, 255, 255, 0.1)';
      ctx.lineWidth = 0.5;
      ctx.globalCompositeOperation = 'screen';

      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 100) {
            ctx.globalAlpha = (100 - distance) / 100 * 0.3;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
=======
        // Enhanced quantum particle behavior
        if (particle.type === 'quantum') {
          particle.vx += (Math.random() - 0.5) * 0.15;
          particle.vy += (Math.random() - 0.5) * 0.15;
          particle.size = Math.sin(Date.now() * 0.001 + index) * 3 + 4;
          
          // Quantum tunneling effect
          if (Math.random() > 0.995) {
            particle.x = Math.random() * canvas.width;
            particle.y = Math.random() * canvas.height;
          }
        }

        // Holographic particle behavior
        if (particle.type === 'holographic') {
          particle.opacity = Math.sin(Date.now() * 0.002 + index) * 0.4 + 0.4;
          particle.size = Math.cos(Date.now() * 0.0015 + index) * 2 + 3;
        }

        // Wrap around edges with quantum tunneling effect
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;

        // Regenerate particles
        if (particle.life <= 0) {
          particle.x = Math.random() * canvas.width;
          particle.y = Math.random() * canvas.height;
          particle.life = particle.maxLife;
          particle.type = Math.random() > 0.6 ? 'quantum' : Math.random() > 0.3 ? 'holographic' : 'normal';
        }

        // Draw particle with enhanced glow effect
        ctx.save();
        ctx.translate(particle.x, particle.y);
        ctx.rotate(particle.rotation);
        
        ctx.beginPath();
        ctx.arc(0, 0, particle.size, 0, Math.PI * 2);
        
        // Enhanced glow effect with multiple layers
        const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, particle.size * 4);
        gradient.addColorStop(0, particle.color);
        gradient.addColorStop(0.3, particle.color + '80');
        gradient.addColorStop(0.6, particle.color + '40');
        gradient.addColorStop(1, 'transparent');
        
        ctx.fillStyle = gradient;
        ctx.fill();
        
        // Add particle trail effect
        if (particle.type === 'quantum') {
          ctx.beginPath();
          ctx.moveTo(0, 0);
          ctx.lineTo(-particle.vx * 3, -particle.vy * 3);
          ctx.strokeStyle = particle.color + '40';
          ctx.lineWidth = 1;
          ctx.stroke();
        }
        
        ctx.restore();
      });

      // Draw enhanced holographic grid
      ctx.strokeStyle = `rgba(0, 255, 255, ${gridOpacity})`;
      ctx.lineWidth = 0.5;
      
      for (let x = 0; x < canvas.width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
      }
      
      for (let y = 0; y < canvas.height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }

      // Enhanced neon wave effect
      ctx.strokeStyle = `rgba(139, 92, 246, ${0.3 + Math.sin(timeOffset * 0.001) * 0.2})`;
      ctx.lineWidth = 2;
      ctx.beginPath();
      
      for (let x = 0; x < canvas.width; x += 2) {
        const y = Math.sin((x + waveOffset) * 0.01) * 50 + canvas.height / 2;
        if (x === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
>>>>>>> origin/cursor/enhance-app-with-new-services-and-futuristic-design-574a
        }
      }

<<<<<<< HEAD
      animationFrameId = requestAnimationFrame(animate);
=======
      // Second wave with different frequency
      ctx.strokeStyle = `rgba(236, 72, 153, ${0.2 + Math.sin(timeOffset * 0.0015) * 0.15})`;
      ctx.lineWidth = 1.5;
      ctx.beginPath();
      
      for (let x = 0; x < canvas.width; x += 2) {
        const y = Math.sin((x + waveOffset * 0.7) * 0.015) * 30 + canvas.height / 2 + 100;
        if (x === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      }
      ctx.stroke();

      // Quantum entanglement visualization
      if (Math.random() > 0.95 && entanglementLines.length < 20) {
        const p1 = particles[Math.floor(Math.random() * particles.length)];
        const p2 = particles[Math.floor(Math.random() * particles.length)];
        if (p1 && p2 && Math.abs(p1.x - p2.x) < 200 && Math.abs(p1.y - p2.y) < 200) {
          entanglementLines.push({
            x1: p1.x, y1: p1.y,
            x2: p2.x, y2: p2.y,
            opacity: 0.8,
            life: 100
          });
        }
      }

      // Draw and update entanglement lines
      entanglementLines.forEach((line, index) => {
        line.life--;
        line.opacity = line.life / 100;
        
        if (line.life > 0) {
          ctx.strokeStyle = `rgba(0, 255, 255, ${line.opacity * 0.6})`;
          ctx.lineWidth = 1;
          ctx.beginPath();
          ctx.moveTo(line.x1, line.y1);
          ctx.lineTo(line.x2, line.y2);
          ctx.stroke();
          
          // Add quantum interference pattern
          const midX = (line.x1 + line.x2) / 2;
          const midY = (line.y1 + line.y2) / 2;
          ctx.beginPath();
          ctx.arc(midX, midY, 2, 0, Math.PI * 2);
          ctx.fillStyle = `rgba(0, 255, 255, ${line.opacity * 0.8})`;
          ctx.fill();
        } else {
          entanglementLines.splice(index, 1);
        }
      });

      // Add floating geometric shapes
      if (Math.random() > 0.98) {
        const shape = {
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          size: Math.random() * 20 + 10,
          rotation: Math.random() * Math.PI * 2,
          type: Math.random() > 0.5 ? 'triangle' : 'diamond',
          opacity: 0.3,
          life: 200
        };
        
        ctx.save();
        ctx.translate(shape.x, shape.y);
        ctx.rotate(shape.rotation);
        ctx.globalAlpha = shape.opacity;
        
        if (shape.type === 'triangle') {
          ctx.beginPath();
          ctx.moveTo(0, -shape.size);
          ctx.lineTo(-shape.size * 0.866, shape.size * 0.5);
          ctx.lineTo(shape.size * 0.866, shape.size * 0.5);
          ctx.closePath();
        } else {
          ctx.beginPath();
          ctx.moveTo(0, -shape.size);
          ctx.lineTo(shape.size, 0);
          ctx.lineTo(0, shape.size);
          ctx.lineTo(-shape.size, 0);
          ctx.closePath();
        }
        
        ctx.strokeStyle = 'rgba(139, 92, 246, 0.8)';
        ctx.lineWidth = 1;
        ctx.stroke();
        ctx.restore();
      }

      // Update animation parameters
      waveOffset += 2;
      timeOffset += 1;

      requestAnimationFrame(animate);
>>>>>>> origin/cursor/enhance-app-with-new-services-and-futuristic-design-574a
    };

    animate();

    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
<<<<<<< HEAD
=======
  }, [intensity]);
>>>>>>> origin/cursor/enhance-app-with-new-services-and-futuristic-design-574a

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);

  return (
<<<<<<< HEAD
    <div className="fixed inset-0 pointer-events-none overflow-hidden z-0">
      {/* Animated gradient background */}
      <div className="absolute inset-0 bg-gradient-to-br from-black via-purple-900/20 via-cyan-900/20 to-black">
        <motion.div
          className="absolute inset-0 opacity-30"
          animate={{
            background: [
              'radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%)',
              'radial-gradient(circle at 80% 20%, rgba(120, 119, 198, 0.3) 0%, transparent 50%)',
              'radial-gradient(circle at 40% 40%, rgba(120, 119, 198, 0.3) 0%, transparent 50%)',
              'radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%)'
            ]
          }}
          transition={{
            duration: 20,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
      </div>

      {/* Floating geometric shapes */}
      <motion.div
        className="absolute top-20 left-20 w-32 h-32 border border-cyan-400/30 rounded-lg"
        animate={{
          rotate: [0, 360],
          scale: [1, 1.1, 1],
          opacity: [0.3, 0.6, 0.3]
        }}
        transition={{
          duration: 15,
          repeat: Infinity,
          ease: "linear"
        }}
      />
      
      <motion.div
        className="absolute top-40 right-32 w-24 h-24 border border-purple-400/30 rounded-full"
        animate={{
          y: [0, -20, 0],
          opacity: [0.2, 0.5, 0.2]
        }}
        transition={{
          duration: 8,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />

      <motion.div
        className="absolute bottom-32 left-1/4 w-20 h-20 border border-pink-400/30 transform rotate-45"
        animate={{
          rotate: [45, 405],
          scale: [1, 1.2, 1]
        }}
        transition={{
          duration: 12,
          repeat: Infinity,
          ease: "linear"
        }}
      />

      {/* Animated grid lines */}
      <div className="absolute inset-0 opacity-20">
        <motion.div
          className="absolute inset-0"
          style={{
            backgroundImage: `
              linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
              linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px)
            `,
            backgroundSize: '50px 50px'
          }}
          animate={{
            backgroundPosition: ['0px 0px', '50px 50px']
          }}
          transition={{
            duration: 20,
            repeat: Infinity,
            ease: "linear"
          }}
        />

        {/* Corner Accents */}
        <div className="absolute top-0 left-0 w-32 h-32 border-l-2 border-t-2 border-purple-500/50">
          <motion.div
            className="absolute top-0 left-0 w-2 h-2 bg-purple-500 rounded-full"
            animate={{
              scale: [1, 2, 1],
              opacity: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
        </div>

        <div className="absolute top-0 right-0 w-32 h-32 border-r-2 border-t-2 border-cyan-500/50">
          <motion.div
            className="absolute top-0 right-0 w-2 h-2 bg-cyan-500 rounded-full"
            animate={{
              scale: [1, 2, 1],
              opacity: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 1
            }}
          />
        </div>

        <div className="absolute bottom-0 left-0 w-32 h-32 border-l-2 border-b-2 border-indigo-500/50">
          <motion.div
            className="absolute bottom-0 left-0 w-2 h-2 bg-indigo-500 rounded-full"
            animate={{
              scale: [1, 2, 1],
              opacity: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 2
            }}
          />
        </div>

        <div className="absolute bottom-0 right-0 w-32 h-32 border-r-2 border-b-2 border-purple-500/50">
          <motion.div
            className="absolute bottom-0 right-0 w-2 h-2 bg-purple-500 rounded-full"
            animate={{
              scale: [1, 2, 1],
              opacity: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 3
            }}
          />
        </div>

        {/* Central Energy Core */}
        <motion.div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64"
          animate={{
            rotate: 360,
          }}
          transition={{
            duration: 60,
            repeat: Infinity,
            ease: "linear"
          }}
        >
          <div className="absolute inset-0 border border-purple-500/20 rounded-full" />
          <div className="absolute inset-8 border border-cyan-500/20 rounded-full" />
          <div className="absolute inset-16 border border-indigo-500/20 rounded-full" />
          
          <motion.div
            className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-full"
            animate={{
              scale: [1, 1.5, 1],
              opacity: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
        </motion.div>
      </div>

      {/* Floating neon orbs */}
      <motion.div
        className="absolute top-1/4 right-1/4 w-4 h-4 bg-cyan-400 rounded-full shadow-lg shadow-cyan-400/50"
        animate={{
          y: [0, -30, 0],
          opacity: [0.5, 1, 0.5],
          scale: [1, 1.5, 1]
        }}
        transition={{
          duration: 6,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />

      <motion.div
        className="absolute bottom-1/3 left-1/3 w-3 h-3 bg-purple-400 rounded-full shadow-lg shadow-purple-400/50"
        animate={{
          y: [0, 25, 0],
          opacity: [0.3, 0.8, 0.3],
          scale: [1, 1.3, 1]
        }}
        transition={{
          duration: 8,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />

      {/* Energy waves */}
      <motion.div
        className="absolute bottom-0 left-0 right-0 h-32"
        style={{
          background: 'linear-gradient(to top, rgba(0, 255, 255, 0.1), transparent)'
        }}
        animate={{
          opacity: [0.1, 0.3, 0.1],
          scaleY: [1, 1.2, 1]
        }}
        transition={{
          duration: 10,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />

      {/* Canvas for particle animation */}
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full"
        style={{ zIndex: 1 }}
      />

      {/* Overlay gradient for depth */}
      <div className="absolute inset-0 bg-gradient-to-t from-black via-transparent to-transparent opacity-60" />
      
      {/* Top overlay for better text readability */}
      <div className="absolute inset-0 bg-gradient-to-b from-black/40 via-transparent to-transparent" />
=======
    <div 
      className={`relative min-h-screen overflow-hidden ${className}`}
      onMouseMove={handleMouseMove}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {/* Enhanced Quantum Background Canvas */}
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{
          background: 'radial-gradient(ellipse at center, rgba(15, 23, 42, 0.8) 0%, rgba(2, 6, 23, 0.95) 100%)'
        }}
      />
      
      {/* Enhanced Holographic Overlay */}
      <div className="fixed inset-0 pointer-events-none z-10">
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/5 via-purple-500/5 to-pink-500/5" />
        <div className="absolute inset-0 bg-gradient-to-tl from-blue-500/3 via-indigo-500/3 to-purple-500/3" />
        
        {/* Enhanced Quantum Grid Lines */}
        <div className="absolute inset-0">
          {Array.from({ length: 20 }).map((_, i) => (
            <motion.div
              key={i}
              className="absolute h-px bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent"
              style={{
                top: `${(i * 5) % 100}%`,
                left: '0',
                right: '0',
                transform: `translateX(${Math.sin(i * 0.5) * 50}px)`
              }}
              animate={{
                opacity: [0.2, 0.6, 0.2],
                scaleX: [0.8, 1.2, 0.8]
              }}
              transition={{
                duration: 3 + i * 0.2,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
          ))}
        </div>
        
        {/* Enhanced Quantum Particles */}
        <div className="absolute inset-0">
          {Array.from({ length: 15 }).map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-1 h-1 bg-cyan-400 rounded-full"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`
              }}
              animate={{
                y: [0, -20, 0],
                opacity: [0.3, 1, 0.3],
                scale: [0.5, 1.5, 0.5]
              }}
              transition={{
                duration: 4 + i * 0.3,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
          ))}
        </div>
      </div>

      {/* Enhanced Content Container */}
      <div className="relative z-20">
        {children}
      </div>

      {/* Enhanced Interactive Elements */}
      {isHovering && (
        <motion.div
          className="fixed pointer-events-none z-30"
          style={{
            left: mousePosition.x,
            top: mousePosition.y
          }}
          initial={{ scale: 0, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0, opacity: 0 }}
        >
          <div className="w-4 h-4 bg-cyan-400/30 rounded-full blur-sm" />
          <div className="w-2 h-2 bg-cyan-400/60 rounded-full absolute inset-0 m-auto" />
        </motion.div>
      )}
>>>>>>> origin/cursor/enhance-app-with-new-services-and-futuristic-design-574a
    </div>
  );
}