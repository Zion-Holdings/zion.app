import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
<<<<<<< HEAD
  Search, 
  X, 
  Clock, 
  TrendingUp, 
  Sparkles, 
  ArrowRight,
  Filter,
  History,
  Zap,
  Globe,
  Brain,
  Shield,
  Rocket,
  Cloud,
  Target,
  Building,
  Users,
  BookOpen,
  FileText,
  Video,
  Code,
  Star,
  Layers,
  Grid,
  BarChart3,
  Settings,
  HelpCircle,
  MessageCircle,
  Calendar,
  Award,
  Lightbulb,
  Play,
  DollarSign,
  GraduationCap,
  Lock,
  Key,
  Network,
  Satellite,
  Server,
  Store,
  Truck
} from 'lucide-react';
import { useRouter } from 'next/router';
=======
  Search, X, Filter, TrendingUp, Clock, 
  Star, Zap, Brain, Shield, Rocket, 
  Globe, Cpu, Database, Cloud
} from 'lucide-react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2

interface SearchResult {
  id: string;
  title: string;
  description: string;
<<<<<<< HEAD
  url: string;
  category: string;
  icon: React.ReactNode;
  relevance: number;
  tags: string[];
}

interface SearchSuggestion {
  id: string;
  text: string;
  category: string;
  icon: React.ReactNode;
  type: 'recent' | 'trending' | 'quick-action';
}

interface SearchCategory {
  id: string;
  name: string;
  icon: React.ReactNode;
  color: string;
  count: number;
}

const EnhancedSearch: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<SearchResult[]>([]);
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isSearching, setIsSearching] = useState(false);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  
  const searchInputRef = useRef<HTMLInputElement>(null);
  const router = useRouter();

  // Search categories with icons and colors
  const searchCategories: SearchCategory[] = [
    { id: 'all', name: 'All', icon: <Sparkles className="w-4 h-4" />, color: 'from-purple-500 to-pink-500', count: 0 },
    { id: 'ai', name: 'AI & ML', icon: <Brain className="w-4 h-4" />, color: 'from-cyan-500 to-blue-500', count: 0 },
    { id: 'security', name: 'Security', icon: <Shield className="w-4 h-4" />, color: 'from-red-500 to-orange-500', count: 0 },
    { id: 'cloud', name: 'Cloud', icon: <Cloud className="w-4 h-4" />, color: 'from-blue-500 to-indigo-500', count: 0 },
    { id: 'business', name: 'Business', icon: <Target className="w-4 h-4" />, color: 'from-emerald-500 to-teal-500', count: 0 },
    { id: 'infrastructure', name: 'Infrastructure', icon: <Server className="w-4 h-4" />, color: 'from-yellow-500 to-orange-500', count: 0 }
  ];

  // Quick action buttons
  const quickActions = [
    { name: 'AI Services', icon: <Brain className="w-4 h-4" />, action: '/services?category=ai' },
    { name: 'Security Solutions', icon: <Shield className="w-4 h-4" />, action: '/services?category=security' },
    { name: 'Cloud Platform', icon: <Cloud className="w-4 h-4" />, action: '/services?category=cloud' },
    { name: 'Contact Us', icon: <MessageCircle className="w-4 h-4" />, action: '/contact' }
  ];

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('recent-searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        console.error('Failed to load recent searches:', error);
      }
    }
  }, []);

  // Save recent searches to localStorage
  const saveRecentSearch = useCallback((searchTerm: string) => {
    if (!searchTerm.trim()) return;
    
    const updated = [searchTerm, ...recentSearches.filter(s => s !== searchTerm)].slice(0, 10);
    setRecentSearches(updated);
    localStorage.setItem('recent-searches', JSON.stringify(updated));
  }, [recentSearches]);

  // Generate trending suggestions
  const generateTrendingSuggestions = useCallback(() => {
    return [
      { id: 'ai-automation', text: 'AI Automation', category: 'ai', icon: <Brain className="w-4 h-4" />, type: 'trending' as const },
      { id: 'quantum-security', text: 'Quantum Security', category: 'security', icon: <Shield className="w-4 h-4" />, type: 'trending' as const },
      { id: 'cloud-migration', text: 'Cloud Migration', category: 'cloud', icon: <Cloud className="w-4 h-4" />, type: 'trending' as const },
      { id: 'business-intelligence', text: 'Business Intelligence', category: 'business', icon: <Target className="w-4 h-4" />, type: 'trending' as const }
    ];
  }, []);

  // Generate recent search suggestions
  const generateRecentSuggestions = useCallback(() => {
    return recentSearches.map(search => ({
      id: `recent-${search}`,
      text: search,
      category: 'recent',
      icon: <Clock className="w-4 h-4" />,
      type: 'recent' as const
    }));
  }, [recentSearches]);

  // Update suggestions when query changes
  useEffect(() => {
    if (query.trim()) {
      const trending = generateTrendingSuggestions();
      const recent = generateRecentSuggestions();
      const filtered = [...trending, ...recent].filter(suggestion =>
        suggestion.text.toLowerCase().includes(query.toLowerCase())
      );
      setSuggestions(filtered);
      setShowSuggestions(true);
    } else {
      setSuggestions([...generateTrendingSuggestions(), ...generateRecentSuggestions()]);
      setShowSuggestions(true);
    }
  }, [query, generateTrendingSuggestions, generateRecentSuggestions]);

  // Handle search submission
  const handleSearch = useCallback(async (searchTerm?: string) => {
    const term = searchTerm || query.trim();
    if (!term) return;

    setIsSearching(true);
    saveRecentSearch(term);
    
    try {
      // Simulate search API call
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Mock search results
      const mockResults: SearchResult[] = [
        {
          id: '1',
          title: 'AI Autonomous Business Orchestrator',
          description: 'Fully autonomous AI system for business operations with quantum computing integration',
          url: '/ai-autonomous-business-orchestrator',
          category: 'ai',
          icon: <Brain className="w-5 h-5" />,
          relevance: 0.95,
          tags: ['AI', 'Automation', 'Business', 'Quantum']
        },
        {
          id: '2',
          title: 'Quantum AI Cybersecurity Sentinel',
          description: 'Quantum-powered AI security with consciousness-level threat detection',
          url: '/quantum-ai-cybersecurity-sentinel',
          category: 'security',
          icon: <Shield className="w-5 h-5" />,
          relevance: 0.92,
          tags: ['Quantum', 'AI', 'Security', 'Cybersecurity']
        },
        {
          id: '3',
          title: 'Cloud Infrastructure Optimization',
          description: 'Advanced cloud infrastructure management with AI-driven optimization',
          url: '/cloud-infrastructure-optimization',
          category: 'cloud',
          icon: <Cloud className="w-5 h-5" />,
          relevance: 0.88,
          tags: ['Cloud', 'Infrastructure', 'AI', 'Optimization']
        }
      ];

      setResults(mockResults);
      setIsOpen(true);
      setShowSuggestions(false);
    } catch (error) {
      console.error('Search failed:', error);
    } finally {
      setIsSearching(false);
    }
  }, [query, saveRecentSearch]);

  // Handle suggestion click
  const handleSuggestionClick = useCallback((suggestion: SearchSuggestion) => {
    if (suggestion.type === 'quick-action') {
      router.push(suggestion.text);
    } else {
      setQuery(suggestion.text);
      handleSearch(suggestion.text);
    }
  }, [router, handleSearch]);

  // Handle quick action click
  const handleQuickAction = useCallback((action: string) => {
    router.push(action);
    setIsOpen(false);
  }, [router]);

  // Handle result click
  const handleResultClick = useCallback((result: SearchResult) => {
    router.push(result.url);
    setIsOpen(false);
    setQuery('');
  }, [router]);

  // Handle keyboard navigation
  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSearch();
    } else if (e.key === 'Escape') {
      setIsOpen(false);
      setShowSuggestions(false);
    }
  }, [handleSearch]);

  // Focus search input when opened
  useEffect(() => {
    if (isOpen && searchInputRef.current) {
      searchInputRef.current.focus();
    }
  }, [isOpen]);

  return (
    <>
      {/* Search Button */}
      <motion.button
        onClick={() => setIsOpen(true)}
        className="relative flex items-center space-x-2 px-4 py-2 bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg text-gray-300 hover:text-white hover:bg-gray-800/70 transition-all duration-300 group"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        <Search className="w-4 h-4" />
        <span className="hidden sm:inline text-sm">Search</span>
        <kbd className="hidden lg:inline-flex items-center px-2 py-1 text-xs font-medium text-gray-400 bg-gray-700 rounded border border-gray-600">
          âŒ˜K
        </kbd>
      </motion.button>

      {/* Search Modal */}
=======
  category: string;
  url: string;
  relevance: number;
  lastUpdated: string;
  tags: string[];
  type: 'service' | 'page' | 'blog' | 'case-study';
}

interface SearchFilters {
  category: string[];
  type: string[];
  dateRange: 'all' | 'week' | 'month' | 'year';
  relevance: 'all' | 'high' | 'medium' | 'low';
}

interface EnhancedSearchProps {
  placeholder?: string;
  showFilters?: boolean;
  onSearch?: (query: string, filters: SearchFilters) => void;
  onResultClick?: (result: SearchResult) => void;
}

const EnhancedSearch: React.FC<EnhancedSearchProps> = ({
  placeholder = "Search for AI, Quantum, Space Tech solutions...",
  showFilters = true,
  onSearch,
  onResultClick
}) => {
  const [query, setQuery] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [results, setResults] = useState<SearchResult[]>([]);
  const [filters, setFilters] = useState<SearchFilters>({
    category: [],
    type: [],
    dateRange: 'all',
    relevance: 'all'
  });
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [popularSearches, setPopularSearches] = useState<string[]>([]);
  
  const searchInputRef = useRef<HTMLInputElement>(null);
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Mock search results - in real app, this would come from API
  const mockSearchResults: SearchResult[] = [
    {
      id: '1',
      title: 'Quantum AI Brain-Computer Interface',
      description: 'Revolutionary neural interface powered by quantum AI for unprecedented human-computer symbiosis',
      category: 'AI & Neuroscience',
      url: '/quantum-ai-brain-computer-interface',
      relevance: 0.95,
      lastUpdated: '2024-08-23',
      tags: ['AI', 'Quantum', 'Neuroscience', 'Brain-Computer Interface'],
      type: 'service'
    },
    {
      id: '2',
      title: 'Holographic Quantum Workspace 2045',
      description: 'Immersive 3D workspace powered by quantum computing for unprecedented productivity',
      category: 'Quantum & Emerging Tech',
      url: '/holographic-quantum-workspace-2045',
      relevance: 0.92,
      lastUpdated: '2024-08-22',
      tags: ['Quantum', 'Holographic', '3D', 'Productivity'],
      type: 'service'
    },
    {
      id: '3',
      title: 'AI Autonomous Business Operations',
      description: 'Fully autonomous business process automation powered by advanced AI',
      category: 'AI & Automation',
      url: '/ai-autonomous-business-operations',
      relevance: 0.89,
      lastUpdated: '2024-08-21',
      tags: ['AI', 'Automation', 'Business', 'Operations'],
      type: 'service'
    },
    {
      id: '4',
      title: 'Space Resource Intelligence Platform',
      description: 'Advanced AI platform for space resource discovery and optimization',
      category: 'Space Technology',
      url: '/space-resource-intelligence-2040',
      relevance: 0.87,
      lastUpdated: '2024-08-20',
      tags: ['Space', 'AI', 'Resources', 'Intelligence'],
      type: 'service'
    },
    {
      id: '5',
      title: 'Quantum Cybersecurity Platform',
      description: 'Next-generation cybersecurity powered by quantum computing',
      category: 'Cybersecurity',
      url: '/quantum-cybersecurity-platform',
      relevance: 0.85,
      lastUpdated: '2024-08-19',
      tags: ['Quantum', 'Cybersecurity', 'Security', 'Platform'],
      type: 'service'
    }
  ];

  // Popular searches
  const popularSearchesData = [
    'AI automation', 'Quantum computing', 'Space technology', 
    'Cybersecurity', 'Machine learning', 'Neural networks',
    'Autonomous systems', 'Digital transformation', 'Cloud solutions'
  ];

  // Categories
  const categories = [
    { id: 'ai', name: 'AI & Machine Learning', icon: <Brain className="w-4 h-4" /> },
    { id: 'quantum', name: 'Quantum Computing', icon: <Zap className="w-4 h-4" /> },
    { id: 'space', name: 'Space Technology', icon: <Rocket className="w-4 h-4" /> },
    { id: 'cybersecurity', name: 'Cybersecurity', icon: <Shield className="w-4 h-4" /> },
    { id: 'cloud', name: 'Cloud Solutions', icon: <Cloud className="w-4 h-4" /> },
    { id: 'automation', name: 'Automation', icon: <Cpu className="w-4 h-4" /> },
    { id: 'data', name: 'Data & Analytics', icon: <Database className="w-4 h-4" /> },
    { id: 'blockchain', name: 'Blockchain', icon: <Globe className="w-4 h-4" /> }
  ];

  // Types
  const types = [
    { id: 'service', name: 'Services', icon: <Star className="w-4 h-4" /> },
    { id: 'page', name: 'Pages', icon: <Globe className="w-4 h-4" /> },
    { id: 'blog', name: 'Blog Posts', icon: <Clock className="w-4 h-4" /> },
    { id: 'case-study', name: 'Case Studies', icon: <TrendingUp className="w-4 h-4" /> }
  ];

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('recent-searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch (error) {
        // Failed to load recent searches
      }
    }
    
    setPopularSearches(popularSearchesData);
  }, []);

  // Handle search input changes
  const handleSearchChange = useCallback((value: string) => {
    setQuery(value);
    
    // Clear previous timeout
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    
    // Debounce search
    if (value.trim()) {
      searchTimeoutRef.current = setTimeout(() => {
        performSearch(value);
      }, 300);
    } else {
      setResults([]);
      setIsOpen(false);
    }
  }, []);

  // Perform search
  const performSearch = useCallback(async (searchQuery: string) => {
    if (!searchQuery.trim()) return;
    
    setIsSearching(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Filter results based on query and filters
      let filteredResults = mockSearchResults.filter(result => {
        const matchesQuery = result.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           result.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           result.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
        
        const matchesCategory = filters.category.length === 0 || 
                               filters.category.some(cat => result.category.toLowerCase().includes(cat));
        
        const matchesType = filters.type.length === 0 || 
                           filters.type.includes(result.type);
        
        return matchesQuery && matchesCategory && matchesType;
      });
      
      // Sort by relevance
      filteredResults.sort((a, b) => b.relevance - a.relevance);
      
      setResults(filteredResults);
      setIsOpen(true);
      
      // Add to recent searches
      if (!recentSearches.includes(searchQuery)) {
        const newRecentSearches = [searchQuery, ...recentSearches.slice(0, 4)];
        setRecentSearches(newRecentSearches);
        localStorage.setItem('recent-searches', JSON.stringify(newRecentSearches));
      }
      
      // Call onSearch callback
      onSearch?.(searchQuery, filters);
      
    } catch (error) {
      // Search failed
      setResults([]);
    } finally {
      setIsSearching(false);
    }
  }, [filters, recentSearches, onSearch]);

  // Handle result click
  const handleResultClick = useCallback((result: SearchResult) => {
    // Add to search history
    // setSearchHistory(prev => [result, ...prev.slice(0, 9)]); // This line was removed
    
    // Call onResultClick callback
    onResultClick?.(result);
    
    // Close search
    setIsOpen(false);
    setQuery('');
  }, [onResultClick]);

  // Handle filter change
  const handleFilterChange = useCallback((filterType: keyof SearchFilters, value: string | boolean | string[]) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value
    }));
    
    // Re-search if we have a query
    if (query.trim()) {
      performSearch(query);
    }
  }, [query, performSearch]);

  // Handle popular search click
  const handlePopularSearchClick = useCallback((popularSearch: string) => {
    setQuery(popularSearch);
    performSearch(popularSearch);
  }, [performSearch]);

  // Handle recent search click
  const handleRecentSearchClick = useCallback((recentSearch: string) => {
    setQuery(recentSearch);
    performSearch(recentSearch);
  }, [performSearch]);

  // Clear search
  const clearSearch = useCallback(() => {
    setQuery('');
    setResults([]);
    setIsOpen(false);
    searchInputRef.current?.focus();
  }, []);

  // Close search on escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        setIsOpen(false);
      }
    };
    
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, []);

  // Close search when clicking outside
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (searchInputRef.current && !searchInputRef.current.contains(e.target as Node)) {
        setIsOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative w-full max-w-2xl mx-auto">
      {/* Search Input */}
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search className="h-5 w-5 text-gray-400" />
        </div>
        
        <input
          ref={searchInputRef}
          type="text"
          value={query}
          onChange={(e) => handleSearchChange(e.target.value)}
          onFocus={() => query.trim() && setIsOpen(true)}
          placeholder={placeholder}
          className="block w-full pl-10 pr-12 py-3 border border-gray-300 rounded-2xl leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-all duration-200"
        />
        
        {query && (
          <button
            onClick={clearSearch}
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
          >
            <X className="h-5 w-5 text-gray-400 hover:text-gray-600 transition-colors" />
          </button>
        )}
      </div>

      {/* Search Results Dropdown */}
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
      <AnimatePresence>
        {showResults && (
          <motion.div
<<<<<<< HEAD
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm"
            onClick={() => setIsOpen(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: -20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: -20 }}
              className="relative max-w-4xl mx-auto mt-20 mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Search Input */}
              <div className="relative">
                <div className="relative flex items-center bg-gray-900 border border-gray-700 rounded-2xl shadow-2xl overflow-hidden">
                  <div className="flex-shrink-0 pl-4">
                    <Search className="w-6 h-6 text-gray-400" />
                  </div>
                  <input
                    ref={searchInputRef}
                    type="text"
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Search for services, solutions, or information..."
                    className="flex-1 px-4 py-4 bg-transparent text-white placeholder-gray-400 focus:outline-none text-lg"
                  />
                  {query && (
                    <button
                      onClick={() => setQuery('')}
                      className="flex-shrink-0 p-2 text-gray-400 hover:text-white transition-colors"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  )}
                  <div className="flex-shrink-0 pr-4">
                    <button
                      onClick={() => handleSearch()}
                      disabled={isSearching || !query.trim()}
                      className="px-6 py-2 bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-lg font-medium hover:from-cyan-600 hover:to-blue-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {isSearching ? 'Searching...' : 'Search'}
                    </button>
                  </div>
                </div>

                {/* Search Suggestions */}
                <AnimatePresence>
                  {showSuggestions && suggestions.length > 0 && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      className="absolute top-full left-0 right-0 mt-2 bg-gray-900 border border-gray-700 rounded-xl shadow-2xl overflow-hidden z-10"
                    >
                      {/* Quick Actions */}
                      <div className="p-4 border-b border-gray-700">
                        <h3 className="text-sm font-medium text-gray-400 mb-3">Quick Actions</h3>
                        <div className="grid grid-cols-2 gap-2">
                          {quickActions.map((action) => (
                            <button
                              key={action.name}
                              onClick={() => handleQuickAction(action.action)}
                              className="flex items-center space-x-2 p-2 text-sm text-gray-300 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
                            >
                              {action.icon}
                              <span>{action.name}</span>
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* Suggestions */}
                      <div className="max-h-64 overflow-y-auto">
                        {suggestions.map((suggestion) => (
                          <button
                            key={suggestion.id}
                            onClick={() => handleSuggestionClick(suggestion)}
                            className="w-full flex items-center space-x-3 p-3 text-left hover:bg-gray-800 transition-colors"
                          >
                            <div className="text-gray-400">
                              {suggestion.icon}
                            </div>
                            <div className="flex-1">
                              <div className="text-white">{suggestion.text}</div>
                              <div className="text-sm text-gray-400 capitalize">
                                {suggestion.type} â€¢ {suggestion.category}
                              </div>
                            </div>
                            <ArrowRight className="w-4 h-4 text-gray-400" />
                          </button>
                        ))}
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              {/* Search Results */}
              <AnimatePresence>
                {results.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 20 }}
                    className="mt-4 bg-gray-900 border border-gray-700 rounded-xl shadow-2xl overflow-hidden"
                  >
                    {/* Results Header */}
                    <div className="p-4 border-b border-gray-700">
                      <div className="flex items-center justify-between">
                        <h3 className="text-lg font-semibold text-white">
                          Search Results ({results.length})
                        </h3>
                        <div className="flex items-center space-x-2">
                          <Filter className="w-4 h-4 text-gray-400" />
                          <select
                            value={selectedCategory}
                            onChange={(e) => setSelectedCategory(e.target.value)}
                            className="bg-gray-800 border border-gray-600 text-white text-sm rounded-lg px-3 py-1 focus:outline-none focus:ring-2 focus:ring-cyan-500"
                          >
                            {searchCategories.map((category) => (
                              <option key={category.id} value={category.id}>
                                {category.name}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>
                    </div>

                    {/* Results List */}
                    <div className="max-h-96 overflow-y-auto">
                      {results
                        .filter(result => selectedCategory === 'all' || result.category === selectedCategory)
                        .map((result) => (
                          <motion.button
                            key={result.id}
                            onClick={() => handleResultClick(result)}
                            className="w-full flex items-start space-x-4 p-4 text-left hover:bg-gray-800 transition-colors border-b border-gray-700 last:border-b-0"
                            whileHover={{ x: 4 }}
                          >
                            <div className="flex-shrink-0 text-cyan-400">
                              {result.icon}
                            </div>
                            <div className="flex-1 min-w-0">
                              <h4 className="text-white font-medium mb-1">{result.title}</h4>
                              <p className="text-gray-400 text-sm mb-2">{result.description}</p>
                              <div className="flex flex-wrap gap-1">
                                {result.tags.map((tag) => (
                                  <span
                                    key={tag}
                                    className="px-2 py-1 text-xs bg-gray-800 text-gray-300 rounded-full"
                                  >
                                    {tag}
                                  </span>
                                ))}
                              </div>
                            </div>
                            <div className="flex-shrink-0">
                              <div className="text-sm text-gray-500">
                                {Math.round(result.relevance * 100)}% match
                              </div>
                            </div>
                          </motion.button>
                        ))}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
=======
            initial={{ opacity: 0, y: -10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -10, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className="absolute z-50 w-full mt-2 bg-white rounded-2xl shadow-2xl border border-gray-200 max-h-96 overflow-hidden"
          >
            {/* Search Results */}
            {results.length > 0 ? (
              <div className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-gray-900">
                    {results.length} result{results.length !== 1 ? 's' : ''} found
                  </h3>
                  {showFilters && (
                    <button className="text-sm text-cyan-600 hover:text-cyan-700 flex items-center space-x-1">
                      <Filter className="w-4 h-4" />
                      <span>Filters</span>
                    </button>
                  )}
                </div>
                
                <div className="space-y-2">
                  {results.map((result) => (
                    <motion.div
                      key={result.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors border border-transparent hover:border-gray-200"
                      onClick={() => handleResultClick(result)}
                    >
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0 mt-1">
                          {result.type === 'service' && <Star className="w-4 h-4 text-cyan-500" />}
                          {result.type === 'page' && <Globe className="w-4 h-4 text-blue-500" />}
                          {result.type === 'blog' && <Clock className="w-4 h-4 text-green-500" />}
                          {result.type === 'case-study' && <TrendingUp className="w-4 h-4 text-purple-500" />}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <h4 className="text-sm font-medium text-gray-900 truncate">
                            {result.title}
                          </h4>
                          <p className="text-sm text-gray-600 mt-1 line-clamp-2">
                            {result.description}
                          </p>
                          <div className="flex items-center space-x-2 mt-2">
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-cyan-100 text-cyan-800">
                              {result.category}
                            </span>
                            <span className="text-xs text-gray-500">
                              {result.lastUpdated}
                            </span>
                          </div>
                        </div>
                        
                        <div className="flex-shrink-0">
                          <div className="text-xs text-gray-500">
                            {Math.round(result.relevance * 100)}%
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            ) : query.trim() && !isSearching ? (
              /* No Results */
              <div className="p-8 text-center">
                <Search className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No results found</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Try adjusting your search terms or filters
                </p>
              </div>
            ) : (
              /* Search Suggestions */
              <div className="p-4">
                {/* Recent Searches */}
                {recentSearches.length > 0 && (
                  <div className="mb-4">
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Recent Searches</h3>
                    <div className="flex flex-wrap gap-2">
                      {recentSearches.map((search, index) => (
                        <button
                          key={index}
                          onClick={() => handleRecentSearchClick(search)}
                          className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
                        >
                          <Clock className="w-3 h-3 mr-1" />
                          {search}
                        </button>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* Popular Searches */}
                <div>
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Popular Searches</h3>
                  <div className="flex flex-wrap gap-2">
                    {popularSearches.map((search, index) => (
                      <button
                        key={index}
                        onClick={() => handlePopularSearchClick(search)}
                        className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-cyan-100 text-cyan-700 hover:bg-cyan-200 transition-colors"
                      >
                        <TrendingUp className="w-3 h-3 mr-1" />
                        {search}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}
            
            {/* Loading State */}
            {isSearching && (
              <div className="p-4 text-center">
                <div className="inline-flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-cyan-500"></div>
                  <span className="text-sm text-gray-500">Searching...</span>
                </div>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Filters Panel */}
      {showFilters && (
        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="absolute z-40 w-full mt-2 bg-white rounded-2xl shadow-lg border border-gray-200 p-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Categories */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Categories</h4>
                  <div className="space-y-2">
                    {categories.map((category) => (
                      <label key={category.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={filters.category.includes(category.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleFilterChange('category', [...filters.category, category.id]);
                            } else {
                              handleFilterChange('category', filters.category.filter(c => c !== category.id));
                            }
                          }}
                          className="rounded border-gray-300 text-cyan-600 focus:ring-cyan-500"
                        />
                        <span className="text-sm text-gray-700 flex items-center space-x-1">
                          {category.icon}
                          <span>{category.name}</span>
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Types */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Types</h4>
                  <div className="space-y-2">
                    {types.map((type) => (
                      <label key={type.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={filters.type.includes(type.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleFilterChange('type', [...filters.type, type.id]);
                            } else {
                              handleFilterChange('type', filters.type.filter(t => t !== type.id));
                            }
                          }}
                          className="rounded border-gray-300 text-cyan-600 focus:ring-cyan-500"
                        />
                        <span className="text-sm text-gray-700 flex items-center space-x-1">
                          {type.icon}
                          <span>{type.name}</span>
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Date Range */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Date Range</h4>
                  <select
                    value={filters.dateRange}
                    onChange={(e) => handleFilterChange('dateRange', e.target.value)}
                    className="w-full rounded-md border-gray-300 text-sm focus:ring-cyan-500 focus:border-cyan-500"
                  >
                    <option value="all">All Time</option>
                    <option value="week">Past Week</option>
                    <option value="month">Past Month</option>
                    <option value="year">Past Year</option>
                  </select>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      )}
    </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-d2b2
  );
};

// Debounce utility function
function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

export default EnhancedSearch;