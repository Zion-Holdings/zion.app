import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
<<<<<<< HEAD
import { Activity, Zap, Clock, HardDrive, TrendingUp, AlertTriangle } from 'lucide-react';

interface PerformanceMetrics {
  loadTime: number;
  memoryUsage: number;
  renderTime: number;
}

interface PerformanceMonitorProps {
  metrics: PerformanceMetrics;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ metrics }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [showDetails, setShowDetails] = useState(false);
  const [performanceScore, setPerformanceScore] = useState(0);
  const [recommendations, setRecommendations] = useState<string[]>([]);

  useEffect(() => {
    // Calculate performance score (0-100)
    const loadScore = Math.max(0, 100 - (metrics.loadTime / 10));
    const memoryScore = Math.max(0, 100 - (metrics.memoryUsage / 2));
    const renderScore = Math.max(0, 100 - (metrics.renderTime / 5));
    
    const avgScore = Math.round((loadScore + memoryScore + renderScore) / 3);
    setPerformanceScore(avgScore);

    // Generate recommendations based on metrics
    const newRecommendations: string[] = [];
    if (metrics.loadTime > 1000) {
      newRecommendations.push('Consider implementing code splitting and lazy loading');
    }
    if (metrics.memoryUsage > 50) {
      newRecommendations.push('Optimize memory usage with better cleanup and caching');
    }
    if (metrics.renderTime > 100) {
      newRecommendations.push('Optimize render performance with React.memo and useMemo');
    }
    setRecommendations(newRecommendations);

    setIsVisible(true);
  }, [metrics]);

  const getPerformanceColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getPerformanceIcon = (score: number) => {
    if (score >= 90) return <TrendingUp className="w-4 h-4" />;
    if (score >= 70) return <Zap className="w-4 h-4" />;
    return <AlertTriangle className="w-4 h-4" />;
=======
import { 
  TrendingUp, AlertTriangle, CheckCircle, Clock, 
  Zap, Database, Network, Cpu, HardDrive, X
} from 'lucide-react';

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  cls: number;
  tti: number;
  fid: number;
  ttfb: number;
  bundleSize: number;
  loadTime: number;
}

interface PerformanceIssue {
  type: 'warning' | 'error' | 'info';
  message: string;
  suggestion: string;
  priority: 'low' | 'medium' | 'high';
}

const PerformanceMonitor: React.FC = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [issues, setIssues] = useState<PerformanceIssue[]>([]);
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    // Show performance monitor after page load
    const timer = setTimeout(() => setIsVisible(true), 5000);
    
    // Measure performance metrics
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          if (entry.entryType === 'largest-contentful-paint') {
            const lcp = entry.startTime;
            setMetrics(prev => prev ? { ...prev, lcp } : null);
          }
        });
      });
      
      observer.observe({ entryTypes: ['largest-contentful-paint'] });
    }

    // Measure First Contentful Paint
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {
            const fcp = entry.startTime;
            setMetrics(prev => prev ? { ...prev, fcp } : null);
          }
        });
      });
      
      observer.observe({ entryTypes: ['paint'] });
    }

    // Measure bundle size and load time
    const measureBundleSize = () => {
      const loadTime = performance.now();
      const bundleSize = performance.memory?.usedJSHeapSize || 0;
      
      setMetrics(prev => ({
        fcp: prev?.fcp || 0,
        lcp: prev?.lcp || 0,
        cls: prev?.cls || 0,
        tti: prev?.tti || 0,
        fid: prev?.fid || 0,
        ttfb: prev?.ttfb || 0,
        bundleSize,
        loadTime
      }));
    };

    // Wait for page to fully load
    if (document.readyState === 'complete') {
      measureBundleSize();
    } else {
      window.addEventListener('load', measureBundleSize);
    }

    return () => {
      clearTimeout(timer);
      window.removeEventListener('load', measureBundleSize);
    };
  }, []);

  // Analyze performance and generate suggestions
  useEffect(() => {
    if (!metrics) return;

    const newIssues: PerformanceIssue[] = [];

    // FCP analysis
    if (metrics.fcp > 1500) {
      newIssues.push({
        type: 'warning',
        message: 'First Contentful Paint is slow',
        suggestion: 'Optimize critical rendering path, reduce server response time',
        priority: 'high'
      });
    }

    // LCP analysis
    if (metrics.lcp > 2500) {
      newIssues.push({
        type: 'error',
        message: 'Largest Contentful Paint exceeds target',
        suggestion: 'Optimize images, implement lazy loading, use CDN',
        priority: 'high'
      });
    }

    // Bundle size analysis
    if (metrics.bundleSize > 5000000) { // 5MB
      newIssues.push({
        type: 'warning',
        message: 'Bundle size is large',
        suggestion: 'Implement code splitting, tree shaking, and bundle analysis',
        priority: 'medium'
      });
    }

    // Load time analysis
    if (metrics.loadTime > 3000) {
      newIssues.push({
        type: 'info',
        message: 'Page load time could be improved',
        suggestion: 'Enable compression, optimize images, use caching',
        priority: 'low'
      });
    }

    setIssues(newIssues);
  }, [metrics]);

  const getPerformanceScore = useCallback(() => {
    if (!metrics) return 0;
    
    let score = 100;
    
    if (metrics.fcp > 1500) score -= 20;
    if (metrics.lcp > 2500) score -= 25;
    if (metrics.cls > 0.1) score -= 15;
    if (metrics.bundleSize > 5000000) score -= 10;
    if (metrics.loadTime > 3000) score -= 10;
    
    return Math.max(0, score);
  }, [metrics]);

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-500';
    if (score >= 70) return 'text-yellow-500';
    return 'text-red-500';
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-eb99
  };

  const getMetricStatus = (metric: keyof PerformanceMetrics, value: number) => {
    const thresholds = {
      lcp: { good: 2500, needsImprovement: 4000 },
      fid: { good: 100, needsImprovement: 300 },
      cls: { good: 0.1, needsImprovement: 0.25 },
      ttfb: { good: 800, needsImprovement: 1800 }
    };
    
    const threshold = thresholds[metric];
    if (!threshold) return 'unknown';
    
    if (value <= threshold.good) return 'good';
    if (value <= threshold.needsImprovement) return 'needs-improvement';
    return 'poor';
  };

  const getMetricColor = (status: string) => {
    switch (status) {
      case 'good': return 'text-green-400';
      case 'needs-improvement': return 'text-yellow-400';
      case 'poor': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getMetricIcon = (status: string) => {
    switch (status) {
      case 'good': return <CheckCircle className="w-4 h-4" />;
      case 'needs-improvement': return <AlertTriangle className="w-4 h-4" />;
      case 'poor': return <XCircle className="w-4 h-4" />;
      default: return <Info className="w-4 h-4" />;
    }
  };

  useEffect(() => {
    if (typeof window === 'undefined') return;

    // Core Web Vitals monitoring
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'largest-contentful-paint') {
          setMetrics(prev => ({ ...prev, lcp: entry.startTime }));
        }
        if (entry.entryType === 'first-input') {
          const firstInputEntry = entry as FirstInputEntry;
          setMetrics(prev => ({ ...prev, fid: firstInputEntry.processingStart - firstInputEntry.startTime }));
        }
        if (entry.entryType === 'layout-shift') {
          const layoutShiftEntry = entry as LayoutShiftEntry;
          setMetrics(prev => ({ ...prev, cls: layoutShiftEntry.value }));
        }
      }
    });

    observer.observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] });

    // Navigation timing
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigationEntry) {
      setMetrics(prev => ({
        ...prev,
        ttfb: navigationEntry.responseStart - navigationEntry.requestStart,
        fcp: navigationEntry.domContentLoadedEventEnd - navigationEntry.domContentLoadedEventStart,
        fmp: navigationEntry.loadEventEnd - navigationEntry.loadEventStart,
        tti: navigationEntry.domInteractive - navigationEntry.domContentLoadedEventStart
      }));
    }

    // Paint timing
    const paintObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.name === 'first-contentful-paint') {
          setMetrics(prev => ({ ...prev, fcp: entry.startTime }));
        }
      }
    });

    paintObserver.observe({ entryTypes: ['paint'] });

    // Resource timing
    const resourceObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'resource') {
          const resourceEntry = entry as PerformanceResourceTiming;
          if (resourceEntry.initiatorType === 'img' && resourceEntry.duration > 1000) {
            setAlerts(prev => [...prev, `Slow image load: ${resourceEntry.name}`]);
          }
        }
      }
    });

    resourceObserver.observe({ entryTypes: ['resource'] });

    // Long tasks monitoring
    const longTaskObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'longtask' && entry.duration > 50) {
          setAlerts(prev => [...prev, `Long task detected: ${Math.round(entry.duration)}ms`]);
        }
      }
    });

    longTaskObserver.observe({ entryTypes: ['longtask'] });

    return () => {
      observer.disconnect();
      paintObserver.disconnect();
      resourceObserver.disconnect();
      longTaskObserver.disconnect();
    };
  }, []);

  useEffect(() => {
    const score = calculateScore(metrics);
    setOverallScore(score);
    
    // Generate alerts for poor performance
    const newAlerts: string[] = [];
    
    if (metrics.lcp > threshold.lcp) {
      newAlerts.push(`LCP is ${Math.round(metrics.lcp)}ms (should be < ${threshold.lcp}ms)`);
    }
    if (metrics.fid > threshold.fid) {
      newAlerts.push(`FID is ${Math.round(metrics.fid)}ms (should be < ${threshold.fid}ms)`);
    }
    if (metrics.cls > threshold.cls) {
      newAlerts.push(`CLS is ${metrics.cls.toFixed(3)} (should be < ${threshold.cls})`);
    }
    if (metrics.ttfb > threshold.ttfb) {
      newAlerts.push(`TTFB is ${Math.round(metrics.ttfb)}ms (should be < ${threshold.ttfb}ms)`);
    }
    
    setAlerts(newAlerts);
  }, [metrics, threshold, calculateScore]);

  useEffect(() => {
    if (autoHide && showUI) {
      const timer = setTimeout(() => setIsVisible(false), 10000);
      return () => clearTimeout(timer);
    }
  }, [autoHide, showUI]);

  if (!showUI) return null;

  return (
<<<<<<< HEAD
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      className="fixed top-4 right-4 z-50"
    >
      <div className="bg-black/80 backdrop-blur-xl border border-cyan-500/20 rounded-2xl p-4 max-w-sm">
        {/* Header */}
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <Activity className="w-5 h-5 text-cyan-400" />
            <span className="text-white font-semibold text-sm">Performance</span>
          </div>
          <button
            onClick={() => setShowDetails(!showDetails)}
            className="text-cyan-400 hover:text-cyan-300 transition-colors"
            aria-label={showDetails ? 'Hide details' : 'Show details'}
          >
            {showDetails ? '−' : '+'}
          </button>
=======
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        className="fixed bottom-4 right-4 z-50"
      >
        <div className="bg-white dark:bg-gray-900 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 max-w-sm">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-2">
              <TrendingUp className="w-5 h-5 text-blue-500" />
              <span className="font-semibold text-gray-900 dark:text-white">
                Performance Monitor
              </span>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
            >
              <X className="w-4 h-4" />
            </button>
          </div>

          {/* Performance Score */}
          {metrics && (
            <div className="p-4">
              <div className="text-center mb-4">
                <div className={`text-3xl font-bold ${getScoreColor(getPerformanceScore())}`}>
                  {getPerformanceScore()}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Performance Score
                </div>
              </div>

              {/* Key Metrics */}
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">FCP</span>
                  <span className={metrics.fcp > 1500 ? 'text-red-500' : 'text-green-500'}>
                    {metrics.fcp.toFixed(0)}ms
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">LCP</span>
                  <span className={metrics.lcp > 2500 ? 'text-red-500' : 'text-green-500'}>
                    {metrics.lcp.toFixed(0)}ms
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">Bundle Size</span>
                  <span className={metrics.bundleSize > 5000000 ? 'text-yellow-500' : 'text-green-500'}>
                    {(metrics.bundleSize / 1000000).toFixed(1)}MB
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Issues */}
          {issues.length > 0 && (
            <div className="border-t border-gray-200 dark:border-gray-700">
              <div className="p-4">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                  Optimization Suggestions
                </h4>
                <div className="space-y-3">
                  {issues.slice(0, 3).map((issue, index) => (
                    <div key={index} className="flex items-start space-x-2">
                      <div className={`mt-1 w-2 h-2 rounded-full ${
                        issue.type === 'error' ? 'bg-red-500' :
                        issue.type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
                      }`} />
                      <div className="flex-1">
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          {issue.message}
                        </div>
                        <div className="text-xs text-gray-600 dark:text-gray-400">
                          {issue.suggestion}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Expand Button */}
          <div className="border-t border-gray-200 dark:border-gray-700 p-2">
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="w-full text-center text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
            >
              {isExpanded ? 'Show Less' : 'Show More'}
            </button>
          </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-eb99
        </div>

        {/* Performance Score */}
        <div className="text-center mb-3">
          <div className={`text-2xl font-bold ${getPerformanceColor(performanceScore)}`}>
            {performanceScore}
          </div>
          <div className="text-xs text-gray-400">Performance Score</div>
          <div className="flex justify-center mt-1">
            {getPerformanceIcon(performanceScore)}
          </div>
        </div>

        {/* Quick Metrics */}
        <div className="grid grid-cols-3 gap-2 mb-3">
          <div className="text-center">
            <div className="text-xs text-gray-400">Load</div>
            <div className="text-sm text-white">{metrics.loadTime}ms</div>
          </div>
          <div className="text-center">
            <div className="text-xs text-gray-400">Memory</div>
            <div className="text-sm text-white">{metrics.memoryUsage}MB</div>
          </div>
          <div className="text-center">
            <div className="text-xs text-gray-400">Render</div>
            <div className="text-sm text-white">{metrics.renderTime}ms</div>
          </div>
        </div>

        {/* Detailed View */}
        <AnimatePresence>
          {showDetails && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="border-t border-cyan-500/20 pt-3"
            >
              {/* Detailed Metrics */}
              <div className="space-y-2 mb-3">
                <div className="flex items-center justify-between text-xs">
                  <span className="text-gray-400">Load Time:</span>
                  <span className={`font-mono ${metrics.loadTime > 1000 ? 'text-red-400' : 'text-green-400'}`}>
                    {metrics.loadTime}ms
                  </span>
                </div>
                <div className="flex items-center justify-between text-xs">
                  <span className="text-gray-400">Memory Usage:</span>
                  <span className={`font-mono ${metrics.memoryUsage > 50 ? 'text-red-400' : 'text-green-400'}`}>
                    {metrics.memoryUsage}MB
                  </span>
                </div>
                <div className="flex items-center justify-between text-xs">
                  <span className="text-gray-400">Render Time:</span>
                  <span className={`font-mono ${metrics.renderTime > 100 ? 'text-red-400' : 'text-green-400'}`}>
                    {metrics.renderTime}ms
                  </span>
                </div>
              </div>

              {/* Recommendations */}
              {recommendations.length > 0 && (
                <div className="mb-3">
                  <div className="text-xs text-gray-400 mb-2">Recommendations:</div>
                  <ul className="space-y-1">
                    {recommendations.map((rec, index) => (
                      <li key={index} className="text-xs text-yellow-400 flex items-start gap-2">
                        <AlertTriangle className="w-3 h-3 mt-0.5 flex-shrink-0" />
                        <span>{rec}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Performance Tips */}
              <div className="text-xs text-gray-400">
                <div className="font-semibold mb-1">Performance Tips:</div>
                <ul className="space-y-1">
                  <li>• Use React.memo for expensive components</li>
                  <li>• Implement lazy loading for routes</li>
                  <li>• Optimize images and assets</li>
                  <li>• Monitor Core Web Vitals</li>
                </ul>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Status Indicator */}
        <div className="flex items-center justify-center">
          <div className={`w-2 h-2 rounded-full ${
            performanceScore >= 90 ? 'bg-green-400' : 
            performanceScore >= 70 ? 'bg-yellow-400' : 'bg-red-400'
          }`} />
          <span className="text-xs text-gray-400 ml-2">
            {performanceScore >= 90 ? 'Excellent' : 
             performanceScore >= 70 ? 'Good' : 'Needs Improvement'}
          </span>
        </div>
      </div>
    </motion.div>
  );
};

// Helper function to get score colors
const getScoreColor = (score: string): string => {
  switch (score) {
    case 'Good':
    case 'Excellent':
      return 'text-green-400';
    case 'Needs Improvement':
      return 'text-yellow-400';
    case 'Poor':
      return 'text-red-400';
    default:
      return 'text-white/60';
  }
};

export default PerformanceMonitor;