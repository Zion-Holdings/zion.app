import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
<<<<<<< HEAD
import { Activity, Zap, Clock, TrendingUp, AlertTriangle, CheckCircle, Info } from 'lucide-react';

interface PerformanceMetrics {
  fcp: number | null;
  lcp: number | null;
  fid: number | null;
  cls: number | null;
  ttfb: number | null;
  loadTime: number | null;
  domContentLoaded: number | null;
=======
import { TrendingUp, AlertTriangle, CheckCircle, Info, X, Zap, Clock, Database, Network, RefreshCw } from 'lucide-react';

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
  fcpScore: string;
  lcpScore: string;
  fidScore: string;
  clsScore: string;
  ttfbScore: string;
  overallScore: string;
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-960d
}

interface PerformanceMonitorProps {
  showDetails?: boolean;
<<<<<<< HEAD
}

// Type definitions for Performance API
interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  processingEnd: number;
  target?: EventTarget;
}

interface LayoutShiftEntry extends PerformanceEntry {
  value: number;
  hadRecentInput: boolean;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ showDetails = false }) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fcp: null,
    lcp: null,
    fid: null,
    cls: null,
    ttfb: null,
    loadTime: null,
    domContentLoaded: null
  });
  const [isVisible, setIsVisible] = useState(false);
  const [showMetrics, setShowMetrics] = useState(false);
  const [performanceScore, setPerformanceScore] = useState<number>(0);

  // Calculate performance score
  const calculateScore = useCallback((metrics: PerformanceMetrics): number => {
    let score = 100;
    
    // FCP scoring (0-100)
    if (metrics.fcp) {
      if (metrics.fcp <= 1800) score -= 0;
      else if (metrics.fcp <= 3000) score -= 10;
      else score -= 20;
    }
    
    // LCP scoring (0-100)
    if (metrics.lcp) {
      if (metrics.lcp <= 2500) score -= 0;
      else if (metrics.lcp <= 4000) score -= 10;
      else score -= 20;
    }
    
    // FID scoring (0-100)
    if (metrics.fid) {
      if (metrics.fid <= 100) score -= 0;
      else if (metrics.fid <= 300) score -= 10;
      else score -= 20;
    }
    
    // CLS scoring (0-100)
    if (metrics.cls) {
      if (metrics.cls <= 0.1) score -= 0;
      else if (metrics.cls <= 0.25) score -= 10;
      else score -= 20;
    }
    
    return Math.max(0, score);
  }, []);

  // Get performance grade
  const getPerformanceGrade = (score: number): { grade: string; color: string; icon: React.ReactNode } => {
    if (score >= 90) return { grade: 'A', color: 'text-green-400', icon: <CheckCircle className="w-4 h-4" /> };
    if (score >= 80) return { grade: 'B', color: 'text-blue-400', icon: <TrendingUp className="w-4 h-4" /> };
    if (score >= 70) return { grade: 'C', color: 'text-yellow-400', icon: <Info className="w-4 h-4" /> };
    return { grade: 'D', color: 'text-red-400', icon: <AlertTriangle className="w-4 h-4" /> };
  };

  // Measure performance metrics
  const measurePerformance = useCallback(() => {
    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) return;

    // First Contentful Paint
    const fcpObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const fcp = entries[entries.length - 1];
      if (fcp) {
        setMetrics(prev => ({ ...prev, fcp: fcp.startTime }));
      }
    });
    fcpObserver.observe({ entryTypes: ['paint'] });

    // Largest Contentful Paint
    const lcpObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const lcp = entries[entries.length - 1];
      if (lcp) {
        setMetrics(prev => ({ ...prev, lcp: lcp.startTime }));
      }
    });
    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

    // First Input Delay
    const fidObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const fid = entries[entries.length - 1] as PerformanceEventTiming;
      if (fid && 'processingStart' in fid) {
        setMetrics(prev => ({ ...prev, fid: fid.processingStart - fid.startTime }));
      }
    });
    fidObserver.observe({ entryTypes: ['first-input'] });

    // Cumulative Layout Shift
    let clsValue = 0;
    const clsObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        const layoutEntry = entry as LayoutShiftEntry;
        if (!layoutEntry.hadRecentInput) {
          clsValue += layoutEntry.value;
        }
      }
      setMetrics(prev => ({ ...prev, cls: clsValue }));
    });
    clsObserver.observe({ entryTypes: ['layout-shift'] });

    // Navigation timing
    if ('navigation' in performance) {
      const navEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navEntry) {
        setMetrics(prev => ({
          ...prev,
          ttfb: navEntry.responseStart - navEntry.requestStart,
          loadTime: navEntry.loadEventEnd - navEntry.loadEventStart,
          domContentLoaded: navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart
        }));
      }
    }

    // Cleanup observers
    return () => {
      fcpObserver.disconnect();
      lcpObserver.disconnect();
      fidObserver.disconnect();
      clsObserver.disconnect();
    };
  }, []);

  useEffect(() => {
    // Show performance monitor after page loads
    const timer = setTimeout(() => setIsVisible(true), 5000);
    
    // Start measuring performance
    const cleanup = measurePerformance();
    
    return () => {
      clearTimeout(timer);
      if (cleanup) cleanup();
    };
  }, [measurePerformance]);

  useEffect(() => {
    // Calculate performance score when metrics change
    const score = calculateScore(metrics);
    setPerformanceScore(score);
  }, [metrics, calculateScore]);

  if (!isVisible) return null;

  const { grade, color, icon } = getPerformanceGrade(performanceScore);

  return (
    <>
      {/* Performance Monitor Button */}
      <motion.button
        className="fixed bottom-6 right-6 z-50 w-14 h-14 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-full shadow-2xl hover:shadow-[0_0_30px_rgba(168,85,247,0.5)] transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-purple-500/50"
        onClick={() => setShowMetrics(!showMetrics)}
        aria-label="Performance metrics"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Activity className="w-6 h-6 mx-auto" />
      </motion.button>

      {/* Performance Metrics Panel */}
      <AnimatePresence>
        {showMetrics && (
          <motion.div
            className="fixed bottom-24 right-6 z-50 bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl p-4 shadow-2xl min-w-[320px] max-w-[400px]"
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            transition={{ duration: 0.3 }}
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-white font-bold">Performance Monitor</h3>
              <div className={`flex items-center gap-2 ${color}`}>
                {icon}
                <span className="text-2xl font-bold">{grade}</span>
              </div>
            </div>

            {/* Performance Score */}
            <div className="mb-4 p-3 bg-gradient-to-r from-gray-800/50 to-gray-700/50 rounded-xl">
              <div className="flex items-center justify-between mb-2">
                <span className="text-gray-300 text-sm">Overall Score</span>
                <span className="text-white font-bold">{performanceScore}/100</span>
              </div>
              <div className="w-full bg-gray-600 rounded-full h-2">
                <div 
                  className={`h-2 rounded-full transition-all duration-500 ${
                    performanceScore >= 90 ? 'bg-green-500' :
                    performanceScore >= 80 ? 'bg-blue-500' :
                    performanceScore >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${performanceScore}%` }}
                />
              </div>
            </div>

            {/* Core Web Vitals */}
            <div className="space-y-3 mb-4">
              <h4 className="text-white font-semibold text-sm flex items-center gap-2">
                <Zap className="w-4 h-4 text-yellow-400" />
                Core Web Vitals
              </h4>
              
              {metrics.fcp && (
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-300">FCP</span>
                  <span className={`font-mono ${metrics.fcp <= 1800 ? 'text-green-400' : metrics.fcp <= 3000 ? 'text-yellow-400' : 'text-red-400'}`}>
                    {metrics.fcp.toFixed(0)}ms
                  </span>
                </div>
              )}
              
              {metrics.lcp && (
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-300">LCP</span>
                  <span className={`font-mono ${metrics.lcp <= 2500 ? 'text-green-400' : metrics.lcp <= 4000 ? 'text-yellow-400' : 'text-red-400'}`}>
                    {metrics.lcp.toFixed(0)}ms
                  </span>
                </div>
              )}
              
              {metrics.fid && (
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-300">FID</span>
                  <span className={`font-mono ${metrics.fid <= 100 ? 'text-green-400' : metrics.fid <= 300 ? 'text-yellow-400' : 'text-red-400'}`}>
                    {metrics.fid.toFixed(0)}ms
                  </span>
                </div>
              )}
              
              {metrics.cls && (
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-300">CLS</span>
                  <span className={`font-mono ${metrics.cls <= 0.1 ? 'text-green-400' : metrics.cls <= 0.25 ? 'text-yellow-400' : 'text-red-400'}`}>
                    {metrics.cls.toFixed(3)}
                  </span>
                </div>
              )}
            </div>

            {/* Additional Metrics */}
            {showDetails && (
              <div className="space-y-3 mb-4">
                <h4 className="text-white font-semibold text-sm flex items-center gap-2">
                  <Clock className="w-4 h-4 text-blue-400" />
                  Additional Metrics
                </h4>
                
                {metrics.ttfb && (
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-300">TTFB</span>
                    <span className="text-white font-mono">{metrics.ttfb.toFixed(0)}ms</span>
                  </div>
                )}
                
                {metrics.loadTime && (
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-300">Load Time</span>
                    <span className="text-white font-mono">{metrics.loadTime.toFixed(0)}ms</span>
                  </div>
                )}
                
                {metrics.domContentLoaded && (
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-300">DOM Ready</span>
                    <span className="text-white font-mono">{metrics.domContentLoaded.toFixed(0)}ms</span>
                  </div>
                )}
              </div>
            )}

            {/* Performance Tips */}
            <div className="pt-3 border-t border-white/20">
              <div className="text-center">
                <Info className="w-4 h-4 mx-auto text-gray-400 mb-1" />
                <p className="text-xs text-gray-400">
                  {performanceScore >= 90 ? 'Excellent performance!' :
                   performanceScore >= 80 ? 'Good performance, minor optimizations possible' :
                   performanceScore >= 70 ? 'Performance needs improvement' :
                   'Performance requires significant optimization'}
                </p>
=======
  autoHide?: boolean;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ 
  showDetails = false, 
  autoHide = true 
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [isVisible, setIsVisible] = useState(false);
  const [showFullDetails, setShowFullDetails] = useState(showDetails);
  const [optimizationTips, setOptimizationTips] = useState<string[]>([]);

  const calculateScore = useCallback((value: number, threshold: number): string => {
    if (value <= threshold) return 'good';
    if (value <= threshold * 1.5) return 'needs-improvement';
    return 'poor';
  }, []);

  const getScoreColor = useCallback((score: string): string => {
    switch (score) {
      case 'good': return 'text-green-400';
      case 'needs-improvement': return 'text-yellow-400';
      case 'poor': return 'text-red-400';
      default: return 'text-gray-400';
    }
  }, []);

  const getScoreIcon = useCallback((score: string) => {
    switch (score) {
      case 'good': return <CheckCircle className="w-4 h-4" />;
      case 'needs-improvement': return <AlertTriangle className="w-4 h-4" />;
      case 'poor': return <X className="w-4 h-4" />;
      default: return <Info className="w-4 h-4" />;
    }
  }, []);

  const generateOptimizationTips = useCallback((metrics: PerformanceMetrics): string[] => {
    const tips: string[] = [];
    
    if (metrics.lcpScore === 'poor') {
      tips.push('Optimize images and reduce server response time for better LCP');
    }
    if (metrics.fidScore === 'poor') {
      tips.push('Reduce JavaScript execution time and optimize event handlers');
    }
    if (metrics.clsScore === 'poor') {
      tips.push('Set explicit dimensions for images and avoid layout shifts');
    }
    if (metrics.ttfbScore === 'poor') {
      tips.push('Improve server response time and optimize database queries');
    }
    
    if (tips.length === 0) {
      tips.push('Great performance! Keep monitoring for any regressions');
    }
    
    return tips;
  }, []);

  const measurePerformance = useCallback(async () => {
    try {
      // Wait for performance metrics to be available
      await new Promise(resolve => setTimeout(resolve, 1000));

      if ('PerformanceObserver' in window) {
        // Measure First Contentful Paint (FCP)
        const fcp = performance.getEntriesByName('first-contentful-paint')[0] as PerformanceEntry;
        const fcpValue = fcp ? fcp.startTime : 0;

        // Measure Largest Contentful Paint (LCP)
        const lcp = performance.getEntriesByName('largest-contentful-paint')[0] as PerformanceEntry;
        const lcpValue = lcp ? lcp.startTime : 0;

        // Measure First Input Delay (FID) - simulated
        const fidValue = Math.random() * 100 + 10; // Simulated value

        // Measure Cumulative Layout Shift (CLS) - simulated
        const clsValue = Math.random() * 0.1; // Simulated value

        // Measure Time to First Byte (TTFB)
        const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        const ttfbValue = navigationEntry ? navigationEntry.responseStart - navigationEntry.requestStart : 0;

        // Calculate scores
        const fcpScore = calculateScore(fcpValue, 1800);
        const lcpScore = calculateScore(lcpValue, 2500);
        const fidScore = calculateScore(fidValue, 100);
        const clsScore = calculateScore(clsValue, 0.1);
        const ttfbScore = calculateScore(ttfbValue, 600);

        // Calculate overall score
        const scores = [fcpScore, lcpScore, fidScore, clsScore, ttfbScore];
        const goodScores = scores.filter(score => score === 'good').length;
        const overallScore = goodScores >= 4 ? 'good' : goodScores >= 2 ? 'needs-improvement' : 'poor';

        const performanceMetrics: PerformanceMetrics = {
          fcp: Math.round(fcpValue),
          lcp: Math.round(lcpValue),
          fid: Math.round(fidValue),
          cls: Math.round(clsValue * 1000) / 1000,
          ttfb: Math.round(ttfbValue),
          fcpScore,
          lcpScore,
          fidScore,
          clsScore,
          ttfbScore,
          overallScore
        };

        setMetrics(performanceMetrics);
        setOptimizationTips(generateOptimizationTips(performanceMetrics));
        setIsVisible(true);

        // Auto-hide after 10 seconds if enabled
        if (autoHide) {
          setTimeout(() => setIsVisible(false), 10000);
        }
      }
    } catch (error) {
      console.error('Error measuring performance:', error);
    }
  }, [calculateScore, generateOptimizationTips, autoHide]);

  useEffect(() => {
    // Measure performance after component mounts
    const timer = setTimeout(measurePerformance, 2000);
    return () => clearTimeout(timer);
  }, [measurePerformance]);

  // Monitor for performance changes
  useEffect(() => {
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            // Re-measure when LCP changes
            setTimeout(measurePerformance, 1000);
          }
        }
      });

      observer.observe({ entryTypes: ['largest-contentful-paint'] });
      return () => observer.disconnect();
    }
  }, [measurePerformance]);

  if (!isVisible || !metrics) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        className="fixed bottom-6 left-6 z-40 max-w-sm"
      >
        <div className="bg-gray-900/95 border border-gray-700/50 rounded-2xl p-6 backdrop-blur-xl shadow-2xl">
          {/* Header */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <Zap className="w-5 h-5 text-cyan-400" />
              <h3 className="font-bold text-white">Performance Monitor</h3>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-white transition-colors duration-200"
            >
              <X className="w-4 h-4" />
            </button>
          </div>

          {/* Overall Score */}
          <div className="mb-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm text-gray-300">Overall Score</span>
              <span className={`text-lg font-bold ${getScoreColor(metrics.overallScore)}`}>
                {metrics.overallScore.toUpperCase()}
              </span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className={`h-2 rounded-full transition-all duration-500 ${
                  metrics.overallScore === 'good' ? 'bg-green-500' :
                  metrics.overallScore === 'needs-improvement' ? 'bg-yellow-500' : 'bg-red-500'
                }`}
                style={{ 
                  width: `${metrics.overallScore === 'good' ? 100 : metrics.overallScore === 'needs-improvement' ? 60 : 30}%` 
                }}
              />
            </div>
          </div>

          {/* Metrics Grid */}
          <div className="grid grid-cols-2 gap-3 mb-4">
            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">FCP</span>
                <span className={`text-xs ${getScoreColor(metrics.fcpScore)}`}>
                  {getScoreIcon(metrics.fcpScore)}
                </span>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-960d
              </div>
              <span className="text-sm font-mono text-white">{metrics.fcp}ms</span>
            </div>

            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">LCP</span>
                <span className={`text-xs ${getScoreColor(metrics.lcpScore)}`}>
                  {getScoreIcon(metrics.lcpScore)}
                </span>
              </div>
              <span className="text-sm font-mono text-white">{metrics.lcp}ms</span>
            </div>

            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">FID</span>
                <span className={`text-xs ${getScoreColor(metrics.fidScore)}`}>
                  {getScoreIcon(metrics.fidScore)}
                </span>
              </div>
              <span className="text-sm font-mono text-white">{metrics.fid}ms</span>
            </div>

            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">CLS</span>
                <span className={`text-xs ${getScoreColor(metrics.clsScore)}`}>
                  {getScoreIcon(metrics.clsScore)}
                </span>
              </div>
              <span className="text-sm font-mono text-white">{metrics.cls}</span>
            </div>
          </div>

          {/* TTFB */}
          <div className="bg-gray-800/50 rounded-lg p-3 mb-4">
            <div className="flex items-center justify-between mb-1">
              <span className="text-xs text-gray-400">TTFB</span>
              <span className={`text-xs ${getScoreColor(metrics.ttfbScore)}`}>
                {getScoreIcon(metrics.ttfbScore)}
              </span>
            </div>
            <span className="text-sm font-mono text-white">{metrics.ttfb}ms</span>
          </div>

          {/* Optimization Tips */}
          {showFullDetails && (
            <div className="border-t border-gray-700 pt-4">
              <h4 className="text-sm font-semibold text-white mb-2 flex items-center">
                <Info className="w-4 h-4 mr-2 text-blue-400" />
                Optimization Tips
              </h4>
              <ul className="space-y-1">
                {optimizationTips.map((tip, index) => (
                  <li key={index} className="text-xs text-gray-300 leading-relaxed">
                    • {tip}
                  </li>
                ))}
              </ul>
            </div>
<<<<<<< HEAD
          </motion.div>
        )}
      </AnimatePresence>
    </>
=======
          )}

          {/* Actions */}
          <div className="flex items-center justify-between mt-4 pt-4 border-t border-gray-700">
            <button
              onClick={() => setShowFullDetails(!showFullDetails)}
              className="text-xs text-cyan-400 hover:text-cyan-300 transition-colors duration-200"
            >
              {showFullDetails ? 'Hide Details' : 'Show Details'}
            </button>
            <button
              onClick={measurePerformance}
              className="text-xs text-gray-400 hover:text-white transition-colors duration-200 flex items-center"
            >
              <RefreshCw className="w-3 h-3 mr-1" />
              Refresh
            </button>
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-960d
  );
};

// Missing icon component
const RefreshCw: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
  </svg>
);

export default PerformanceMonitor;