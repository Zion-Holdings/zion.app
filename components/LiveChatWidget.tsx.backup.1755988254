<<<<<<< HEAD
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, X, Send } from 'lucide-react';
=======
import React, { useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, X, Send, Bot, User, Minimize2, Maximize2 } from 'lucide-react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309

interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
<<<<<<< HEAD
  type: 'text' | 'quick-reply';
=======
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
}

const LiveChatWidget: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
<<<<<<< HEAD
      text: "Hello! Welcome to Zion Tech Group. I'm your AI assistant. How can I help you today?",
      sender: 'bot',
      timestamp: new Date(),
      type: 'text'
=======
      text: 'Hello! I\'m your AI concierge. How can I help you explore our revolutionary 2044 technology today?',
      sender: 'bot',
      timestamp: new Date()
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
<<<<<<< HEAD
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const quickReplies = [
    "Tell me about your services",
    "Get a quote",
    "Schedule a demo",
    "Technical support",
    "Speak to a human"
  ];

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async (text: string) => {
    if (!text.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: text.trim(),
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
=======

  const handleSendMessage = useCallback(async () => {
    if (!inputText.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date()
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

<<<<<<< HEAD
    // Simulate bot response
    setTimeout(() => {
      const botResponse = generateBotResponse(text);
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: 'bot',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 2000);
  };

  const generateBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('service') || input.includes('offer')) {
      return "We offer cutting-edge AI solutions, quantum computing services, cybersecurity, cloud infrastructure, data analytics, and blockchain solutions. Which area interests you most?";
    } else if (input.includes('quote') || input.includes('price') || input.includes('cost')) {
      return "I'd be happy to help you get a quote! We have a service calculator on our homepage, or I can connect you with our sales team for a personalized consultation.";
    } else if (input.includes('demo') || input.includes('demonstration')) {
      return "Great choice! Our demos typically last 30-45 minutes and can be customized to your specific needs. When would be a good time for you?";
    } else if (input.includes('support') || input.includes('help') || input.includes('issue')) {
      return "I'm here to help! For technical issues, I can create a support ticket or connect you with our technical team. What's the nature of your issue?";
    } else if (input.includes('human') || input.includes('person') || input.includes('agent')) {
      return "I understand you'd prefer to speak with a human. Let me connect you with one of our specialists. They'll be with you in just a moment.";
    } else {
      return "That's interesting! I'd love to learn more about your needs. Could you tell me a bit more about what you're looking for?";
    }
  };

  const handleQuickReply = (reply: string) => {
    handleSendMessage(reply);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(inputText);
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };
=======
    // Simulate AI response
    setTimeout(() => {
      const botResponses = [
        'That\'s an excellent question! Our AI consciousness platform can definitely help with that.',
        'I\'d be happy to connect you with our quantum computing specialists for that inquiry.',
        'Our space technology division has exactly what you\'re looking for. Let me schedule a demo.',
        'That\'s a fascinating use case! Our autonomous business intelligence system would be perfect.',
        'I can see you\'re interested in cutting-edge technology. Let me show you our latest innovations.',
        'Great question! Our quantum cybersecurity platform addresses exactly those concerns.'
      ];

      const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)];
      
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        text: randomResponse,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  }, [inputText]);

  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  }, [handleSendMessage]);

  const toggleChat = useCallback(() => {
    setIsOpen(prev => !prev);
    if (isOpen) {
      setIsMinimized(false);
    }
  }, [isOpen]);

  const toggleMinimize = useCallback(() => {
    setIsMinimized(prev => !prev);
  }, []);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309

  return (
    <>
      {/* Chat Toggle Button */}
      <motion.button
<<<<<<< HEAD
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 w-14 h-14 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 z-40"
=======
        className="fixed bottom-6 right-6 z-50 w-16 h-16 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full shadow-[0_0_30px_rgba(6,182,212,0.4)] hover:shadow-[0_0_40px_rgba(6,182,212,0.6)] transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-cyan-500/50"
        onClick={toggleChat}
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        aria-label="Open live chat"
      >
<<<<<<< HEAD
        <MessageCircle className="w-6 h-6 mx-auto" />
=======
        <MessageCircle className="w-8 h-8 text-white mx-auto" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
      </motion.button>

      {/* Chat Widget */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
<<<<<<< HEAD
=======
            className="fixed bottom-24 right-6 z-50 w-96 max-h-[600px] bg-gray-900/95 backdrop-blur-xl border border-cyan-500/30 rounded-2xl shadow-[0_0_50px_rgba(0,0,0,0.8)] overflow-hidden"
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
            initial={{ opacity: 0, scale: 0.8, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.8, y: 20 }}
            transition={{ duration: 0.3 }}
<<<<<<< HEAD
            className="fixed bottom-6 right-6 w-96 h-[500px] bg-gray-900 border border-gray-700 rounded-2xl shadow-2xl z-50 overflow-hidden"
          >
            {/* Chat Header */}
            <div className="bg-gradient-to-r from-cyan-500 to-blue-600 p-4 text-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                  <div>
                    <h3 className="font-semibold">Zion Tech Group Support</h3>
                    <p className="text-sm text-cyan-100">AI Assistant • Online</p>
=======
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-cyan-500/20 to-blue-500/20 border-b border-cyan-500/30 p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full flex items-center justify-center">
                    <Bot className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-white">AI Concierge</h3>
                    <p className="text-xs text-cyan-300">Available 24/7</p>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <button
<<<<<<< HEAD
                    onClick={() => setIsMinimized(!isMinimized)}
                    className="p-1 hover:bg-white/20 rounded transition-colors"
                    aria-label="Minimize chat"
                  >
                    <span className="text-lg">−</span>
                  </button>
                  <button
                    onClick={() => setIsOpen(false)}
                    className="p-1 hover:bg-white/20 rounded transition-colors"
=======
                    onClick={toggleMinimize}
                    className="p-2 text-gray-400 hover:text-white transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 rounded-lg"
                    aria-label={isMinimized ? 'Maximize chat' : 'Minimize chat'}
                  >
                    {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
                  </button>
                  <button
                    onClick={toggleChat}
                    className="p-2 text-gray-400 hover:text-white transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 rounded-lg"
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
                    aria-label="Close chat"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>

<<<<<<< HEAD
            {!isMinimized && (
              <>
                {/* Chat Messages */}
                <div className="flex-1 p-4 overflow-y-auto bg-gray-900 h-80">
                  <div className="space-y-4">
                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                            message.sender === 'user'
                              ? 'bg-cyan-500 text-white'
                              : 'bg-gray-700 text-gray-100'
                          }`}
                        >
                          <p className="text-sm">{message.text}</p>
                          <p className={`text-xs mt-1 ${
                            message.sender === 'user' ? 'text-cyan-100' : 'text-gray-400'
                          }`}>
                            {formatTime(message.timestamp)}
=======
            {/* Chat Content */}
            <AnimatePresence>
              {!isMinimized && (
                <motion.div
                  initial={{ height: 0 }}
                  animate={{ height: 'auto' }}
                  exit={{ height: 0 }}
                  className="flex flex-col h-96"
                >
                  {/* Messages */}
                  <div className="flex-1 overflow-y-auto p-4 space-y-4">
                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                      >
                        <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${
                          message.sender === 'user'
                            ? 'bg-gradient-to-r from-cyan-500 to-blue-600 text-white'
                            : 'bg-gray-800/60 text-gray-200 border border-gray-700/50'
                        }`}>
                          <p className="text-sm">{message.text}</p>
                          <p className="text-xs opacity-70 mt-1">
                            {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
                          </p>
                        </div>
                      </motion.div>
                    ))}
                    
<<<<<<< HEAD
                    {isTyping && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="flex justify-start"
                      >
                        <div className="bg-gray-700 text-gray-100 px-4 py-2 rounded-lg">
                          <div className="flex items-center space-x-1">
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
=======
                    {/* Typing Indicator */}
                    {isTyping && (
                      <motion.div
                        className="flex justify-start"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                      >
                        <div className="bg-gray-800/60 border border-gray-700/50 px-4 py-2 rounded-2xl">
                          <div className="flex items-center space-x-1">
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-cyan-400 rounded-full animate-bounce"></div>
                              <div className="w-2 h-2 bg-cyan-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                              <div className="w-2 h-2 bg-cyan-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            </div>
                            <span className="text-xs text-gray-400 ml-2">AI is typing...</span>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </div>
<<<<<<< HEAD
                  <div ref={messagesEndRef} />
                </div>

                {/* Quick Replies */}
                {messages.length === 1 && (
                  <div className="px-4 py-3 bg-gray-800 border-t border-gray-700">
                    <p className="text-xs text-gray-400 mb-2">Quick replies:</p>
                    <div className="flex flex-wrap gap-2">
                      {quickReplies.map((reply, index) => (
                        <button
                          key={index}
                          onClick={() => handleQuickReply(reply)}
                          className="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-gray-300 text-xs rounded-full transition-colors"
                        >
                          {reply}
                        </button>
                      ))}
                    </div>
                  </div>
                )}

                {/* Chat Input */}
                <div className="p-4 bg-gray-800 border-t border-gray-700">
                  <div className="flex items-center space-x-2">
                    <input
                      ref={inputRef}
                      type="text"
                      value={inputText}
                      onChange={(e) => setInputText(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Type your message..."
                      className="flex-1 bg-gray-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500"
                    />
                    <button
                      onClick={() => handleSendMessage(inputText)}
                      disabled={!inputText.trim()}
                      className="p-2 bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors"
                      aria-label="Send message"
                    >
                      <Send className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </>
            )}
=======

                  {/* Input */}
                  <div className="p-4 border-t border-gray-700/50">
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="Ask about our revolutionary technology..."
                        className="flex-1 px-4 py-2 bg-gray-800/60 border border-gray-700/50 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 focus:border-cyan-500/50"
                        disabled={isTyping}
                      />
                      <button
                        onClick={handleSendMessage}
                        disabled={!inputText.trim() || isTyping}
                        className="px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-xl hover:from-cyan-600 hover:to-blue-700 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 disabled:opacity-50 disabled:cursor-not-allowed"
                        aria-label="Send message"
                      >
                        <Send className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-2309
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default LiveChatWidget;