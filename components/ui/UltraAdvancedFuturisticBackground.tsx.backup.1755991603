import React, { useEffect, useRef } from 'react';
import { motion } from 'framer-motion';

interface UltraAdvancedFuturisticBackgroundProps {
  children: React.ReactNode;
<<<<<<< HEAD
  variant?: 'default' | 'quantum' | 'holographic' | 'cyberpunk' | 'neural' | 'quantum-holographic';
  intensity?: 'low' | 'medium' | 'high';
=======
  variant?: 'quantum' | 'holographic' | 'cyberpunk' | 'neural' | 'space' | 'matrix';
  intensity?: 'low' | 'medium' | 'high';
  className?: string;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
}

const UltraAdvancedFuturisticBackground: React.FC<UltraAdvancedFuturisticBackgroundProps> = ({
  children,
<<<<<<< HEAD
  variant = 'quantum-holographic',
  intensity = 'high'
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const particlesRef = useRef<any[]>([]);
  const animationFrameRef = useRef<number>();
=======
  variant = 'quantum',
  intensity = 'medium',
  className = ''
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number>();
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

<<<<<<< HEAD
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    // Enhanced particle system
=======
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
    const particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
<<<<<<< HEAD
      life: number;
      maxLife: number;
      type: 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
    }> = [];

    // Initialize particles based on variant
    const initParticles = () => {
      particles.length = 0;
      const particleCount = intensity === 'high' ? 200 : intensity === 'medium' ? 120 : 80;

      for (let i = 0; i < particleCount; i++) {
        const type = ['quantum', 'holographic', 'neural', 'cyberpunk'][Math.floor(Math.random() * 4)] as any;
=======
      opacity: number;
      color: string;
      type: 'quantum' | 'holographic' | 'cyberpunk' | 'neural' | 'space' | 'matrix';
    }> = [];

    const colors = {
      quantum: ['#8B5CF6', '#A855F7', '#C084FC', '#E879F9', '#F0ABFC'],
      holographic: ['#06B6D4', '#22D3EE', '#67E8F9', '#A5F3FC', '#CFFAFE'],
      cyberpunk: ['#EF4444', '#F97316', '#F59E0B', '#10B981', '#3B82F6'],
      neural: ['#10B981', '#34D399', '#6EE7B7', '#A7F3D0', '#D1FAE5'],
      space: ['#1E40AF', '#3730A3', '#7C3AED', '#A855F7', '#C084FC'],
      matrix: ['#059669', '#10B981', '#34D399', '#6EE7B7', '#A7F3D0']
    };

    const intensityMultiplier = {
      low: 0.5,
      medium: 1,
      high: 2
    };

    // Initialize particles
    const initParticles = () => {
      const particleCount = Math.floor(100 * intensityMultiplier[intensity]);
      
      for (let i = 0; i < particleCount; i++) {
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 2,
          vy: (Math.random() - 0.5) * 2,
          size: Math.random() * 3 + 1,
<<<<<<< HEAD
          color: getParticleColor(type),
          life: Math.random() * 100,
          maxLife: 100,
          type
=======
          opacity: Math.random() * 0.8 + 0.2,
          color: colors[variant][Math.floor(Math.random() * colors[variant].length)],
          type: variant
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
        });
      }
    };

<<<<<<< HEAD
    const getParticleColor = (type: string) => {
      switch (type) {
        case 'quantum':
          return `hsl(${180 + Math.random() * 60}, 100%, 70%)`;
        case 'holographic':
          return `hsl(${270 + Math.random() * 60}, 100%, 70%)`;
        case 'neural':
          return `hsl(${120 + Math.random() * 60}, 100%, 70%)`;
        case 'cyberpunk':
          return `hsl(${320 + Math.random() * 60}, 100%, 70%)`;
        default:
          return `hsl(${Math.random() * 360}, 100%, 70%)`;
      }
    };

    // Quantum entanglement effect
    const createQuantumEntanglement = () => {
      if (particles.length < 2) return;
      
      const p1 = particles[Math.floor(Math.random() * particles.length)];
      const p2 = particles[Math.floor(Math.random() * particles.length)];
      
      if (p1 && p2 && p1 !== p2) {
        ctx.beginPath();
        ctx.strokeStyle = `rgba(0, 255, 255, ${0.3 + Math.random() * 0.4})`;
        ctx.lineWidth = 1;
        ctx.moveTo(p1.x, p1.y);
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
      }
    };

    // Holographic projection effect
    const createHolographicProjection = () => {
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const radius = 100 + Math.sin(Date.now() * 0.001) * 50;
      
      ctx.beginPath();
      ctx.strokeStyle = `rgba(139, 92, 246, ${0.2 + Math.sin(Date.now() * 0.002) * 0.3})`;
      ctx.lineWidth = 2;
      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
      ctx.stroke();
      
      // Inner holographic rings
      for (let i = 1; i <= 3; i++) {
        const innerRadius = radius * (i / 4);
        ctx.beginPath();
        ctx.strokeStyle = `rgba(139, 92, 246, ${0.1 + Math.sin(Date.now() * 0.002 + i) * 0.2})`;
        ctx.lineWidth = 1;
        ctx.arc(centerX, centerY, innerRadius, 0, Math.PI * 2);
        ctx.stroke();
      }
    };

    // Neural network visualization
    const createNeuralNetwork = () => {
      const nodes = 8;
      const nodeRadius = 3;
      
      for (let i = 0; i < nodes; i++) {
        const x = (canvas.width / (nodes + 1)) * (i + 1);
        const y = canvas.height / 2 + Math.sin(Date.now() * 0.001 + i) * 100;
        
        // Draw node
        ctx.beginPath();
        ctx.fillStyle = `rgba(16, 185, 129, ${0.8 + Math.sin(Date.now() * 0.002 + i) * 0.2})`;
        ctx.arc(x, y, nodeRadius, 0, Math.PI * 2);
        ctx.fill();
        
        // Draw connections
        for (let j = 0; j < nodes; j++) {
          if (i !== j) {
            const targetX = (canvas.width / (nodes + 1)) * (j + 1);
            const targetY = canvas.height / 2 + Math.sin(Date.now() * 0.001 + j) * 100;
            
            ctx.beginPath();
            ctx.strokeStyle = `rgba(16, 185, 129, ${0.1 + Math.sin(Date.now() * 0.001 + i + j) * 0.1})`;
            ctx.lineWidth = 0.5;
            ctx.moveTo(x, y);
            ctx.lineTo(targetX, targetY);
            ctx.stroke();
=======
    // Quantum entanglement effect
    const createQuantumEntanglement = () => {
      if (variant === 'quantum' && intensity === 'high') {
        for (let i = 0; i < particles.length; i += 2) {
          if (i + 1 < particles.length) {
            const dx = particles[i].x - particles[i + 1].x;
            const dy = particles[i].y - particles[i + 1].y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 100) {
              ctx.beginPath();
              ctx.strokeStyle = `rgba(139, 92, 246, ${0.3 * (1 - distance / 100)})`;
              ctx.lineWidth = 1;
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[i + 1].x, particles[i + 1].y);
              ctx.stroke();
            }
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
          }
        }
      }
    };

<<<<<<< HEAD
    // Cyberpunk grid effect
    const createCyberpunkGrid = () => {
      const gridSize = 50;
      const offset = (Date.now() * 0.05) % gridSize;
      
      ctx.strokeStyle = `rgba(236, 73, 153, ${0.1 + Math.sin(Date.now() * 0.001) * 0.1})`;
      ctx.lineWidth = 0.5;
      
      // Vertical lines
      for (let x = offset; x < canvas.width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
      }
      
      // Horizontal lines
      for (let y = offset; y < canvas.height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }
    };

    // Main animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw quantum field background
      const gradient = ctx.createRadialGradient(
        canvas.width / 2, canvas.height / 2, 0,
        canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height) / 2
      );
      gradient.addColorStop(0, 'rgba(0, 255, 255, 0.1)');
      gradient.addColorStop(0.3, 'rgba(139, 92, 246, 0.05)');
      gradient.addColorStop(0.7, 'rgba(236, 73, 153, 0.03)');
      gradient.addColorStop(1, 'rgba(0, 0, 0, 0.8)');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Update and draw particles
      particles.forEach((particle, index) => {
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life--;
=======
    // Holographic interference pattern
    const createHolographicPattern = () => {
      if (variant === 'holographic') {
        const time = Date.now() * 0.001;
        for (let i = 0; i < canvas.width; i += 20) {
          for (let j = 0; j < canvas.height; j += 20) {
            const interference = Math.sin(i * 0.01 + time) * Math.cos(j * 0.01 + time);
            if (Math.abs(interference) > 0.5) {
              ctx.fillStyle = `rgba(6, 182, 212, ${0.1 * Math.abs(interference)})`;
              ctx.fillRect(i, j, 20, 20);
            }
          }
        }
      }
    };

    // Neural network connections
    const createNeuralConnections = () => {
      if (variant === 'neural') {
        for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            const dx = particles[i].x - particles[j].x;
            const dy = particles[i].y - particles[j].y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 80) {
              const strength = 1 - distance / 80;
              ctx.beginPath();
              ctx.strokeStyle = `rgba(16, 185, 129, ${0.2 * strength})`;
              ctx.lineWidth = strength * 2;
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[j].x, particles[j].y);
              ctx.stroke();
            }
          }
        }
      }
    };

    // Matrix digital rain effect
    const createMatrixRain = () => {
      if (variant === 'matrix') {
        const time = Date.now() * 0.001;
        for (let i = 0; i < canvas.width; i += 15) {
          const y = (time * 50 + i * 0.1) % canvas.height;
          ctx.fillStyle = `rgba(5, 150, 105, ${0.8})`;
          ctx.font = '12px monospace';
          ctx.fillText('01', i, y);
        }
      }
    };

    // Space nebula effect
    const createSpaceNebula = () => {
      if (variant === 'space') {
        const time = Date.now() * 0.0005;
        for (let i = 0; i < 5; i++) {
          const x = canvas.width / 2 + Math.cos(time + i) * 200;
          const y = canvas.height / 2 + Math.sin(time + i) * 200;
          
          const gradient = ctx.createRadialGradient(x, y, 0, x, y, 150);
          gradient.addColorStop(0, `rgba(30, 64, 175, 0.3)`);
          gradient.addColorStop(1, 'transparent');
          
          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, canvas.width, canvas.height);
        }
      }
    };

    // Animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Create special effects based on variant
      createQuantumEntanglement();
      createHolographicPattern();
      createNeuralConnections();
      createMatrixRain();
      createSpaceNebula();

      // Update and draw particles
      particles.forEach((particle, index) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00

        // Bounce off edges
        if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;
        if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;

<<<<<<< HEAD
        // Regenerate dead particles
        if (particle.life <= 0) {
          particle.x = Math.random() * canvas.width;
          particle.y = Math.random() * canvas.height;
          particle.life = particle.maxLife;
          particle.type = ['quantum', 'holographic', 'neural', 'cyberpunk'][Math.floor(Math.random() * 4)] as any;
          particle.color = getParticleColor(particle.type);
        }

        // Draw particle with glow effect
        ctx.beginPath();
        ctx.fillStyle = particle.color;
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();

        // Add glow effect
        ctx.shadowColor = particle.color;
        ctx.shadowBlur = particle.size * 2;
        ctx.fill();
        ctx.shadowBlur = 0;
      });

      // Create special effects based on variant
      switch (variant) {
        case 'quantum':
          createQuantumEntanglement();
          break;
        case 'holographic':
          createHolographicProjection();
          break;
        case 'neural':
          createNeuralNetwork();
          break;
        case 'cyberpunk':
          createCyberpunkGrid();
          break;
        case 'quantum-holographic':
          createQuantumEntanglement();
          createHolographicProjection();
          break;
        default:
          createQuantumEntanglement();
          createHolographicProjection();
          createNeuralNetwork();
          createCyberpunkGrid();
      }
=======
        // Wrap around edges for space variant
        if (variant === 'space') {
          if (particle.x < 0) particle.x = canvas.width;
          if (particle.x > canvas.width) particle.x = 0;
          if (particle.y < 0) particle.y = canvas.height;
          if (particle.y > canvas.height) particle.y = 0;
        }

        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.globalAlpha = particle.opacity;
        ctx.fill();

        // Add glow effect
        if (intensity === 'high') {
          ctx.shadowColor = particle.color;
          ctx.shadowBlur = 10;
          ctx.fill();
          ctx.shadowBlur = 0;
        }

        // Add trail effect for cyberpunk
        if (variant === 'cyberpunk') {
          ctx.beginPath();
          ctx.moveTo(particle.x, particle.y);
          ctx.lineTo(particle.x - particle.vx * 5, particle.y - particle.vy * 5);
          ctx.strokeStyle = particle.color;
          ctx.lineWidth = 1;
          ctx.globalAlpha = 0.3;
          ctx.stroke();
        }
      });

      ctx.globalAlpha = 1;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00

      animationRef.current = requestAnimationFrame(animate);
    };

    initParticles();
    animate();

<<<<<<< HEAD
    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      initParticles();
=======
    // Handle resize
    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
    };

    window.addEventListener('resize', handleResize);

    return () => {
<<<<<<< HEAD
      window.removeEventListener('resize', resizeCanvas);
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
=======
      window.removeEventListener('resize', handleResize);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
      }
    };
  }, [variant, intensity]);

  return (
<<<<<<< HEAD
    <div className="relative min-h-screen overflow-hidden">
      {/* Enhanced Canvas Background */}
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{
          background: 'radial-gradient(ellipse at center, rgba(0,0,0,0.8) 0%, rgba(0,0,0,1) 100%)'
        }}
      />
      
      {/* Quantum Field Overlay */}
      <div className="fixed inset-0 pointer-events-none z-10">
        <motion.div
          className="absolute inset-0"
          animate={{
            background: [
              'radial-gradient(circle at 20% 80%, rgba(0, 255, 255, 0.05) 0%, transparent 50%)',
              'radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.05) 0%, transparent 50%)',
              'radial-gradient(circle at 40% 40%, rgba(236, 73, 153, 0.05) 0%, transparent 50%)',
              'radial-gradient(circle at 20% 80%, rgba(0, 255, 255, 0.05) 0%, transparent 50%)'
            ]
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
      </div>

      {/* Holographic Data Streams */}
      <div className="fixed inset-0 pointer-events-none z-20">
        {[...Array(5)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent opacity-30"
            style={{
              top: `${20 + i * 15}%`,
              left: '-100%',
              width: '200%'
            }}
            animate={{
              x: ['0%', '100%']
            }}
            transition={{
              duration: 3 + i * 0.5,
              repeat: Infinity,
              ease: "linear",
              delay: i * 0.2
            }}
          />
        ))}
      </div>

      {/* Neural Network Connections */}
      <div className="fixed inset-0 pointer-events-none z-30">
        {[...Array(8)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-px bg-gradient-to-b from-transparent via-green-400 to-transparent opacity-20"
            style={{
              left: `${12.5 + i * 12.5}%`,
              top: '-100%',
              height: '200%'
            }}
            animate={{
              y: ['0%', '100%']
            }}
            transition={{
              duration: 4 + i * 0.3,
              repeat: Infinity,
              ease: "linear",
              delay: i * 0.1
            }}
          />
        ))}
      </div>

      {/* Content Layer */}
      <div className="relative z-40">
        {children}
      </div>

      {/* Quantum Particle Field */}
      <div className="fixed inset-0 pointer-events-none z-50">
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-cyan-400 rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`
            }}
            animate={{
              scale: [0, 1, 0],
              opacity: [0, 1, 0],
              x: [0, (Math.random() - 0.5) * 100],
              y: [0, (Math.random() - 0.5) * 100]
            }}
            transition={{
              duration: 2 + Math.random() * 3,
              repeat: Infinity,
              ease: "easeInOut",
              delay: Math.random() * 2
            }}
          />
        ))}
      </div>
=======
    <div className={`relative min-h-screen overflow-hidden ${className}`}>
      {/* Animated background canvas */}
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{ background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 50%, #0F172A 100%)' }}
      />
      
      {/* Additional layered effects */}
      <div className="absolute inset-0 z-10">
        {/* Quantum field lines */}
        {variant === 'quantum' && (
          <motion.div
            className="absolute inset-0"
            animate={{
              background: [
                'radial-gradient(circle at 20% 80%, rgba(139, 92, 246, 0.1) 0%, transparent 50%)',
                'radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.1) 0%, transparent 50%)',
                'radial-gradient(circle at 20% 80%, rgba(139, 92, 246, 0.1) 0%, transparent 50%)'
              ]
            }}
            transition={{ duration: 8, repeat: Infinity, ease: "easeInOut" }}
          />
        )}

        {/* Holographic grid */}
        {variant === 'holographic' && (
          <div className="absolute inset-0 opacity-20">
            <div className="absolute inset-0" style={{
              backgroundImage: `
                linear-gradient(rgba(6, 182, 212, 0.3) 1px, transparent 1px),
                linear-gradient(90deg, rgba(6, 182, 212, 0.3) 1px, transparent 1px)
              `,
              backgroundSize: '50px 50px'
            }} />
          </div>
        )}

        {/* Cyberpunk energy field */}
        {variant === 'cyberpunk' && (
          <motion.div
            className="absolute inset-0"
            animate={{
              boxShadow: [
                'inset 0 0 100px rgba(239, 68, 68, 0.3)',
                'inset 0 0 100px rgba(16, 185, 129, 0.3)',
                'inset 0 0 100px rgba(239, 68, 68, 0.3)'
              ]
            }}
            transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
          />
        )}

        {/* Neural network overlay */}
        {variant === 'neural' && (
          <div className="absolute inset-0">
            {[...Array(20)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute w-1 h-1 bg-green-400 rounded-full"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`
                }}
                animate={{
                  scale: [1, 1.5, 1],
                  opacity: [0.3, 1, 0.3]
                }}
                transition={{
                  duration: 3 + Math.random() * 2,
                  repeat: Infinity,
                  delay: Math.random() * 2
                }}
              />
            ))}
          </div>
        )}

        {/* Space stars */}
        {variant === 'space' && (
          <div className="absolute inset-0">
            {[...Array(100)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute w-1 h-1 bg-white rounded-full"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`
                }}
                animate={{
                  opacity: [0, 1, 0],
                  scale: [0, 1, 0]
                }}
                transition={{
                  duration: 2 + Math.random() * 3,
                  repeat: Infinity,
                  delay: Math.random() * 5
                }}
              />
            ))}
          </div>
        )}

        {/* Matrix code rain overlay */}
        {variant === 'matrix' && (
          <div className="absolute inset-0 opacity-30">
            {[...Array(50)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute text-green-400 font-mono text-sm"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`
                }}
                animate={{
                  y: [0, window.innerHeight]
                }}
                transition={{
                  duration: 10 + Math.random() * 10,
                  repeat: Infinity,
                  delay: Math.random() * 5
                }}
              >
                {Math.random() > 0.5 ? '01' : '10'}
              </motion.div>
            ))}
          </div>
        )}
      </div>

      {/* Content */}
      <div className="relative z-20">
        {children}
      </div>
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-3d00
    </div>
  );
};

export default UltraAdvancedFuturisticBackground;