import React, { useEffect, useRef } from 'react';

interface UltraFuturisticBackgroundProps {
  children: React.ReactNode;
<<<<<<< HEAD
  className?: string;
}

const UltraFuturisticBackground: React.FC<UltraFuturisticBackgroundProps> = ({ 
  children, 
  className = '' 
=======
  variant?: 'quantum' | 'holographic' | 'cyberpunk' | 'neural' | 'space';
  intensity?: 'low' | 'medium' | 'high';
  className?: string;
}

const UltraFuturisticBackground: React.FC<UltraFuturisticBackgroundProps> = ({
  children,
  variant = 'quantum',
  intensity = 'medium',
  className = ''
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-221f
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

<<<<<<< HEAD
    // Set canvas size
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
=======
    let animationFrameId: number;
    let particles: Particle[] = [];
    let holographicGrid: GridPoint[] = [];
    let neuralConnections: Connection[] = [];
    let time = 0;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-221f

    // Enhanced particle system
    class Particle {
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      life: number;
      maxLife: number;
      color: string;
<<<<<<< HEAD
      type: 'quantum' | 'neural' | 'cyber';
    }> = [];

    // Initialize particles
    const initParticles = () => {
      particles.length = 0;
      for (let i = 0; i < 150; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 2,
          vy: (Math.random() - 0.5) * 2,
          size: Math.random() * 3 + 1,
          opacity: Math.random() * 0.8 + 0.2,
          color: ['#00ffff', '#ff00ff', '#ffff00', '#00ff00', '#ff0080', '#8000ff'][Math.floor(Math.random() * 6)],
          type: ['quantum', 'neural', 'cyber'][Math.floor(Math.random() * 3)] as 'quantum' | 'neural' | 'cyber'
        });
=======
      type: 'quantum' | 'holographic' | 'neural' | 'energy';

      constructor(x: number, y: number, type: 'quantum' | 'holographic' | 'neural' | 'energy') {
        this.x = x;
        this.y = y;
        this.vx = (Math.random() - 0.5) * 2;
        this.vy = (Math.random() - 0.5) * 2;
        this.size = Math.random() * 3 + 1;
        this.life = 1;
        this.maxLife = Math.random() * 100 + 50;
        this.type = type;
        
        switch (type) {
          case 'quantum':
            this.color = `hsl(${200 + Math.random() * 60}, 70%, 60%)`;
            break;
          case 'holographic':
            this.color = `hsl(${280 + Math.random() * 80}, 80%, 70%)`;
            break;
          case 'neural':
            this.color = `hsl(${120 + Math.random() * 60}, 80%, 60%)`;
            break;
          case 'energy':
            this.color = `hsl(${30 + Math.random() * 60}, 90%, 70%)`;
            break;
        }
      }

      update() {
        this.x += this.vx;
        this.y += this.vy;
        this.life -= 1;
        
        // Quantum tunneling effect
        if (this.type === 'quantum' && Math.random() < 0.01) {
          this.x = Math.random() * canvas.width;
          this.y = Math.random() * canvas.height;
        }
        
        // Neural network connections
        if (this.type === 'neural') {
          this.vx += (Math.random() - 0.5) * 0.1;
          this.vy += (Math.random() - 0.5) * 0.1;
        }
      }

      draw(ctx: CanvasRenderingContext2D) {
        const alpha = this.life / this.maxLife;
        ctx.save();
        ctx.globalAlpha = alpha;
        
        if (this.type === 'quantum') {
          // Quantum particle with glow effect
          const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size * 3);
          gradient.addColorStop(0, this.color);
          gradient.addColorStop(1, 'transparent');
          
          ctx.fillStyle = gradient;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size * 3, 0, Math.PI * 2);
          ctx.fill();
        } else if (this.type === 'holographic') {
          // Holographic particle with interference pattern
          ctx.strokeStyle = this.color;
          ctx.lineWidth = this.size;
          ctx.beginPath();
          ctx.moveTo(this.x - this.size, this.y);
          ctx.lineTo(this.x + this.size, this.y);
          ctx.moveTo(this.x, this.y - this.size);
          ctx.lineTo(this.x, this.y + this.size);
          ctx.stroke();
        } else {
          // Standard particle
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fill();
        }
        
        ctx.restore();
      }
    }

    // Holographic grid system
    class GridPoint {
      x: number;
      y: number;
      phase: number;
      frequency: number;

      constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
        this.phase = Math.random() * Math.PI * 2;
        this.frequency = Math.random() * 0.02 + 0.01;
      }

      update() {
        this.phase += this.frequency;
      }

      draw(ctx: CanvasRenderingContext2D) {
        const intensity = (Math.sin(this.phase) + 1) / 2;
        const alpha = 0.1 + intensity * 0.2;
        
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.strokeStyle = `hsl(${280 + intensity * 60}, 80%, 70%)`;
        ctx.lineWidth = 1;
        
        // Draw grid lines
        if (this.x % 50 === 0) {
          ctx.beginPath();
          ctx.moveTo(this.x, 0);
          ctx.lineTo(this.x, canvas.height);
          ctx.stroke();
        }
        
        if (this.y % 50 === 0) {
          ctx.beginPath();
          ctx.moveTo(0, this.y);
          ctx.lineTo(canvas.width, this.y);
          ctx.stroke();
        }
        
        ctx.restore();
      }
    }

    // Neural network connections
    class Connection {
      from: { x: number; y: number };
      to: { x: number; y: number };
      strength: number;
      phase: number;

      constructor(from: { x: number; y: number }, to: { x: number; y: number }) {
        this.from = from;
        this.to = to;
        this.strength = Math.random();
        this.phase = Math.random() * Math.PI * 2;
      }

      update() {
        this.phase += 0.02;
      }

      draw(ctx: CanvasRenderingContext2D) {
        const intensity = (Math.sin(this.phase) + 1) / 2;
        const alpha = 0.1 + intensity * 0.3;
        
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.strokeStyle = `hsl(${120 + intensity * 60}, 80%, 60%)`;
        ctx.lineWidth = this.strength * 2;
        
        ctx.beginPath();
        ctx.moveTo(this.from.x, this.from.y);
        ctx.lineTo(this.to.x, this.to.y);
        ctx.stroke();
        
        ctx.restore();
      }
    }

    // Initialize systems based on variant
    const initSystems = () => {
      particles = [];
      holographicGrid = [];
      neuralConnections = [];

      const particleCount = intensity === 'high' ? 200 : intensity === 'medium' ? 100 : 50;

      // Create particles
      for (let i = 0; i < particleCount; i++) {
        const x = Math.random() * canvas.width;
        const y = Math.random() * canvas.height;
        const types: ('quantum' | 'holographic' | 'neural' | 'energy')[] = ['quantum', 'holographic', 'neural', 'energy'];
        const type = types[Math.floor(Math.random() * types.length)];
        particles.push(new Particle(x, y, type));
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-221f
      }

<<<<<<< HEAD
    // Neural network connections
    const connections: Array<{ from: number; to: number; opacity: number }> = [];
    const initConnections = () => {
      connections.length = 0;
      for (let i = 0; i < 50; i++) {
        connections.push({
          from: Math.floor(Math.random() * particles.length),
          to: Math.floor(Math.random() * particles.length),
          opacity: Math.random() * 0.3 + 0.1
        });
=======
      // Create holographic grid
      for (let x = 0; x < canvas.width; x += 50) {
        for (let y = 0; y < canvas.height; y += 50) {
          holographicGrid.push(new GridPoint(x, y));
        }
      }

      // Create neural connections
      for (let i = 0; i < 20; i++) {
        const from = {
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height
        };
        const to = {
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height
        };
        neuralConnections.push(new Connection(from, to));
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-221f
      }
    };

    // Quantum wave function
    let waveOffset = 0;
    const drawQuantumWaves = () => {
      ctx.save();
      ctx.strokeStyle = 'rgba(0, 255, 255, 0.1)';
      ctx.lineWidth = 2;
      
      for (let i = 0; i < 3; i++) {
        ctx.beginPath();
        for (let x = 0; x < canvas.width; x += 2) {
          const y = canvas.height / 2 + 
            Math.sin((x + waveOffset + i * 100) * 0.01) * 100 +
            Math.sin((x + waveOffset + i * 50) * 0.02) * 50;
          if (x === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
        }
        ctx.stroke();
      }
      ctx.restore();
      waveOffset += 0.5;
    };

    // Holographic grid
    const drawHolographicGrid = () => {
      ctx.save();
      ctx.strokeStyle = 'rgba(0, 255, 255, 0.05)';
      ctx.lineWidth = 1;
      
      const gridSize = 50;
      const offset = Date.now() * 0.001;
      
      // Vertical lines
      for (let x = 0; x < canvas.width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x + Math.sin(offset + x * 0.01) * 5, 0);
        ctx.lineTo(x + Math.sin(offset + x * 0.01) * 5, canvas.height);
        ctx.stroke();
      }
      
      // Horizontal lines
      for (let y = 0; y < canvas.height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y + Math.cos(offset + y * 0.01) * 5);
        ctx.lineTo(canvas.width, y + Math.cos(offset + y * 0.01) * 5);
        ctx.stroke();
      }
      ctx.restore();
    };

    // Energy fields
    const drawEnergyFields = () => {
      const time = Date.now() * 0.001;
      const centers = [
        { x: canvas.width * 0.2, y: canvas.height * 0.3 },
        { x: canvas.width * 0.8, y: canvas.height * 0.7 },
        { x: canvas.width * 0.5, y: canvas.height * 0.8 }
      ];

      centers.forEach((center, index) => {
        const radius = 100 + Math.sin(time + index) * 30;
        const gradient = ctx.createRadialGradient(center.x, center.y, 0, center.x, center.y, radius);
        gradient.addColorStop(0, `rgba(0, 255, 255, ${0.1 + Math.sin(time + index) * 0.05})`);
        gradient.addColorStop(1, 'rgba(0, 255, 255, 0)');
        
        ctx.save();
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(center.x, center.y, radius, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
      });
    };

    // Main animation loop
    const animate = () => {
      time += 0.016;
      
<<<<<<< HEAD
      // Draw background layers
      drawHolographicGrid();
      drawQuantumWaves();
      drawEnergyFields();
      
      // Update and draw particles
      particles.forEach((particle, index) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Bounce off edges
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;
        
        // Wrap around
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;
        
        // Draw particle
        ctx.save();
        ctx.globalAlpha = particle.opacity;
        
        if (particle.type === 'quantum') {
          // Quantum particles with wave function
          const wave = Math.sin(Date.now() * 0.01 + index) * 2;
          ctx.fillStyle = particle.color;
          ctx.beginPath();
          ctx.arc(particle.x + wave, particle.y + wave, particle.size, 0, Math.PI * 2);
          ctx.fill();
        } else if (particle.type === 'neural') {
          // Neural network nodes
          ctx.fillStyle = particle.color;
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          ctx.fill();
          
          // Neural connections
          ctx.strokeStyle = particle.color;
          ctx.lineWidth = 1;
          ctx.globalAlpha = particle.opacity * 0.5;
          ctx.beginPath();
          ctx.moveTo(particle.x, particle.y);
          ctx.lineTo(particle.x + particle.vx * 10, particle.y + particle.vy * 10);
          ctx.stroke();
        } else {
          // Cyber particles
          ctx.fillStyle = particle.color;
          ctx.fillRect(particle.x - particle.size/2, particle.y - particle.size/2, particle.size, particle.size);
        }
        
        ctx.restore();
      });
      
      // Draw connections
      connections.forEach(connection => {
        const from = particles[connection.from];
        const to = particles[connection.to];
        if (from && to) {
          const distance = Math.sqrt((from.x - to.x) ** 2 + (from.y - to.y) ** 2);
          if (distance < 150) {
            ctx.save();
            ctx.strokeStyle = `rgba(0, 255, 255, ${connection.opacity * (1 - distance / 150)})`;
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(from.x, from.y);
            ctx.lineTo(to.x, to.y);
            ctx.stroke();
            ctx.restore();
          }
        }
      });
      
      // Data streams
      const drawDataStreams = () => {
        ctx.save();
        ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';
        ctx.lineWidth = 2;
        
        for (let i = 0; i < 5; i++) {
          const y = (canvas.height / 6) * (i + 1);
          ctx.beginPath();
          for (let x = 0; x < canvas.width; x += 5) {
            const offset = Math.sin((x + Date.now() * 0.01 + i * 100) * 0.01) * 20;
            if (x === 0) {
              ctx.moveTo(x, y + offset);
            } else {
              ctx.lineTo(x, y + offset);
            }
          }
          ctx.stroke();
        }
        ctx.restore();
      };
      
      drawDataStreams();
      
      animationRef.current = requestAnimationFrame(animate);
    };

    initParticles();
    initConnections();
    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
=======
      // Clear canvas with fade effect
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Update and draw systems
      holographicGrid.forEach(point => {
        point.update();
        point.draw(ctx);
      });

      neuralConnections.forEach(connection => {
        connection.update();
        connection.draw(ctx);
      });

      particles.forEach((particle, index) => {
        particle.update();
        particle.draw(ctx);
        
        // Remove dead particles and add new ones
        if (particle.life <= 0) {
          particles.splice(index, 1);
          const x = Math.random() * canvas.width;
          const y = Math.random() * canvas.height;
          const types: ('quantum' | 'holographic' | 'neural' | 'energy')[] = ['quantum', 'holographic', 'neural', 'energy'];
          const type = types[Math.floor(Math.random() * types.length)];
          particles.push(new Particle(x, y, type));
        }
      });

      // Add special effects based on variant
      if (variant === 'quantum') {
        // Quantum entanglement effect
        ctx.strokeStyle = `hsla(${200 + Math.sin(time) * 30}, 70%, 60%, 0.3)`;
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(0, canvas.height / 2 + Math.sin(time) * 100);
        ctx.lineTo(canvas.width, canvas.height / 2 + Math.sin(time * 1.5) * 100);
        ctx.stroke();
      } else if (variant === 'holographic') {
        // Holographic interference patterns
        for (let i = 0; i < 5; i++) {
          const x = Math.sin(time * (i + 1) * 0.5) * canvas.width / 2 + canvas.width / 2;
          const y = Math.cos(time * (i + 1) * 0.3) * canvas.height / 2 + canvas.height / 2;
          ctx.strokeStyle = `hsla(${280 + i * 20}, 80%, 70%, 0.2)`;
          ctx.lineWidth = 3;
          ctx.beginPath();
          ctx.arc(x, y, 50 + Math.sin(time) * 20, 0, Math.PI * 2);
          ctx.stroke();
        }
      }

      animationFrameId = requestAnimationFrame(animate);
    };

    // Handle resize
    const handleResize = () => {
      if (containerRef.current) {
        canvas.width = containerRef.current.offsetWidth;
        canvas.height = containerRef.current.offsetHeight;
        initSystems();
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-221f
      }
      window.removeEventListener('resize', resizeCanvas);
    };
<<<<<<< HEAD
  }, []);

  return (
    <div className={`relative min-h-screen overflow-hidden ${className}`}>
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{
          background: getBackgroundGradient(variant),
        }}
      />
      
      {/* Floating geometric shapes */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-20 left-20 w-32 h-32 border border-cyan-400/20 rotate-45 animate-pulse"></div>
        <div className="absolute top-40 right-32 w-24 h-24 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-full animate-bounce"></div>
        <div className="absolute bottom-32 left-1/4 w-16 h-16 border-t-2 border-r-2 border-blue-400/30 transform rotate-45 animate-spin"></div>
        <div className="absolute bottom-20 right-20 w-20 h-20 bg-gradient-to-br from-green-400/10 to-blue-400/10 transform rotate-12 animate-pulse"></div>
      </div>
      
      {/* Content overlay */}
=======

    // Initialize
    handleResize();
    animate();

    // Event listeners
    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => {
      window.removeEventListener('resize', handleResize);
      cancelAnimationFrame(animationFrameId);
    };
  }, [variant, intensity]);

  return (
    <div 
      ref={containerRef}
      className={`relative overflow-hidden ${className}`}
      style={{ minHeight: '100vh' }}
    >
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full pointer-events-none"
        style={{ zIndex: 0 }}
      />
      
      {/* Additional CSS-based effects */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-blue-900/10 to-purple-900/10" />
        <div className="absolute inset-0 bg-gradient-to-tl from-transparent via-cyan-900/10 to-emerald-900/10" />
        
        {/* Floating geometric shapes */}
        <div className="absolute top-20 left-20 w-32 h-32 border border-cyan-400/20 rotate-45 animate-pulse" />
        <div className="absolute top-40 right-32 w-24 h-24 border border-purple-400/20 rounded-full animate-bounce" />
        <div className="absolute bottom-32 left-32 w-20 h-20 border border-emerald-400/20 transform rotate-12 animate-ping" />
        
        {/* Energy waves */}
        <div className="absolute top-1/2 left-0 w-full h-1 bg-gradient-to-r from-transparent via-cyan-400/30 to-transparent transform -translate-y-1/2 animate-pulse" />
        <div className="absolute top-1/3 right-0 w-1 h-32 bg-gradient-to-b from-transparent via-purple-400/30 to-transparent animate-pulse" />
      </div>
      
      {/* Content */}
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-221f
      <div className="relative z-10">
        {children}
      </div>
      
      {/* Ambient lighting effects */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-0 left-0 w-full h-32 bg-gradient-to-b from-cyan-500/5 to-transparent"></div>
        <div className="absolute bottom-0 left-0 w-full h-32 bg-gradient-to-t from-purple-500/5 to-transparent"></div>
        <div className="absolute top-0 left-0 w-32 h-full bg-gradient-to-r from-blue-500/5 to-transparent"></div>
        <div className="absolute top-0 right-0 w-32 h-full bg-gradient-to-l from-pink-500/5 to-transparent"></div>
      </div>
    </div>
  );
};

const getBackgroundGradient = (variant: string) => {
  switch (variant) {
    case 'quantum':
      return 'linear-gradient(135deg, #0f0f23 0%, #1a1a3a 25%, #2d1b69 50%, #1a1a3a 75%, #0f0f23 100%)';
    case 'holographic':
      return 'linear-gradient(135deg, #1a0033 0%, #330066 25%, #6600cc 50%, #330066 75%, #1a0033 100%)';
    case 'neural':
      return 'linear-gradient(135deg, #0a1a0a 0%, #1a3a1a 25%, #2d692d 50%, #1a3a1a 75%, #0a1a0a 100%)';
    case 'cyberpunk':
      return 'linear-gradient(135deg, #1a0a0a 0%, #3a1a1a 25%, #692d2d 50%, #3a1a1a 75%, #1a0a0a 100%)';
    case 'space':
      return 'linear-gradient(135deg, #0a0a1a 0%, #1a1a3a 25%, #2d2d69 50%, #1a1a3a 75%, #0a0a1a 100%)';
    default:
      return 'linear-gradient(135deg, #0f0f23 0%, #1a1a3a 25%, #2d1b69 50%, #1a1a3a 75%, #0f0f23 100%)';
  }
};

const getOverlayGradient = (variant: string) => {
  switch (variant) {
    case 'quantum':
      return 'radial-gradient(circle at 50% 50%, rgba(0, 255, 255, 0.1) 0%, transparent 70%)';
    case 'holographic':
      return 'radial-gradient(circle at 50% 50%, rgba(138, 43, 226, 0.1) 0%, transparent 70%)';
    case 'neural':
      return 'radial-gradient(circle at 50% 50%, rgba(0, 255, 127, 0.1) 0%, transparent 70%)';
    case 'cyberpunk':
      return 'radial-gradient(circle at 50% 50%, rgba(255, 0, 0, 0.1) 0%, transparent 70%)';
    case 'space':
      return 'radial-gradient(circle at 50% 50%, rgba(138, 43, 226, 0.1) 0%, transparent 70%)';
    default:
      return 'radial-gradient(circle at 50% 50%, rgba(0, 255, 255, 0.1) 0%, transparent 70%)';
  }
};

export default UltraFuturisticBackground;