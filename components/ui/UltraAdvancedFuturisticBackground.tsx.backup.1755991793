import React, { useEffect, useRef } from 'react';

interface UltraAdvancedFuturisticBackgroundProps {
  intensity?: 'low' | 'medium' | 'high';
  children: React.ReactNode;
<<<<<<< HEAD
  variant?: 'default' | 'quantum' | 'holographic' | 'neural' | 'cyberpunk' | 'space';
  intensity?: 'low' | 'medium' | 'high';
}

export default function UltraAdvancedFuturisticBackground({ 
  children, 
  variant = 'default',
  intensity = 'medium'
}: UltraAdvancedFuturisticBackgroundProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const particlesRef = useRef<any[]>([]);
  const animationRef = useRef<number | undefined>(undefined);
=======
}

const UltraAdvancedFuturisticBackground: React.FC<UltraAdvancedFuturisticBackgroundProps> = ({
  intensity = 'medium',
  children
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-afd8

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

<<<<<<< HEAD
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    const particles: Array<{
=======
    let animationFrameId: number;
    let particles: Particle[] = [];
    let holographicGrid: GridPoint[] = [];
    let quantumFields: QuantumField[] = [];
    let neuralConnections: NeuralConnection[] = [];

    // Set canvas size
    const resizeCanvas = () => {
      if (containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
      }
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Particle class
    class Particle {
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-afd8
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      opacity: number;
      color: string;
<<<<<<< HEAD
      type: 'quantum' | 'holographic' | 'neural' | 'cyberpunk' | 'space';
    }> = [];

    const colors = {
      quantum: ['#00ffff', '#0080ff', '#8000ff', '#ff0080'],
      holographic: ['#ff00ff', '#00ffff', '#ffff00', '#ff8000'],
      neural: ['#00ff80', '#80ff00', '#0080ff', '#8000ff'],
      cyberpunk: ['#ff0040', '#40ff00', '#0040ff', '#ff8000'],
      space: ['#ffffff', '#00ffff', '#0080ff', '#8000ff']
    };

    const variantColors = colors[variant as keyof typeof colors] || colors.quantum;

    // Create particles
    for (let i = 0; i < (intensity === 'high' ? 200 : intensity === 'medium' ? 100 : 50); i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 2,
        vy: (Math.random() - 0.5) * 2,
        size: Math.random() * 3 + 1,
        opacity: Math.random() * 0.5 + 0.3,
        color: variantColors[Math.floor(Math.random() * variantColors.length)],
        type: variant as any
      });
    }

      update() {
        this.x += this.vx;
        this.y += this.vy;
        this.life--;

        // Quantum entanglement effect
        if (Math.random() < 0.01) {
          this.vx *= -1;
          this.vy *= -1;
        }

        // Boundary wrapping with quantum tunneling
        if (this.x < 0) this.x = canvas.width;
        if (this.x > canvas.width) this.x = 0;
        if (this.y < 0) this.y = canvas.height;
        if (this.y > canvas.height) this.y = 0;
      }

      draw(ctx: CanvasRenderingContext2D) {
        const alpha = this.life / this.maxLife;
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.fillStyle = this.color;
        ctx.shadowColor = this.color;
        ctx.shadowBlur = this.size * 2;
        
        // Draw particle based on type
        switch (this.type) {
          case 'quantum':
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
            break;
          case 'holographic':
            ctx.beginPath();
            ctx.rect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);
            ctx.fill();
            break;
          case 'cyberpunk':
            ctx.beginPath();
            ctx.moveTo(this.x, this.y - this.size);
            ctx.lineTo(this.x - this.size, this.y + this.size);
            ctx.lineTo(this.x + this.size, this.y + this.size);
            ctx.closePath();
            ctx.fill();
            break;
          case 'neural':
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size * 0.5, 0, Math.PI * 2);
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.fill();
            break;
        }
        ctx.restore();
      }
    }

    // Initialize particles
    const particleCount = intensity === 'high' ? 200 : intensity === 'medium' ? 150 : 100;
    for (let i = 0; i < particleCount; i++) {
      particlesRef.current.push(new QuantumParticle());
    }

    // Animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update and draw particles
      particles.forEach((particle, index) => {
        particle.x += particle.vx;
        particle.y += particle.vy;

        // Wrap around edges
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;

        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = particle.color + Math.floor(particle.opacity * 255).toString(16).padStart(2, '0');
        ctx.fill();

        // Draw connections
        particles.forEach((otherParticle, otherIndex) => {
          if (index !== otherIndex) {
            const distance = Math.sqrt(
              Math.pow(particle.x - otherParticle.x, 2) + 
              Math.pow(particle.y - otherParticle.y, 2)
            );
            
            if (distance < 150) {
              ctx.beginPath();
              ctx.moveTo(particle.x, particle.y);
              ctx.lineTo(otherParticle.x, otherParticle.y);
              ctx.strokeStyle = particle.color + Math.floor((0.1 * (1 - distance / 150)) * 255).toString(16).padStart(2, '0');
              ctx.lineWidth = 0.5;
              ctx.stroke();
            }
          }
        });
      });

      // Draw quantum field effects
      if (variant === 'quantum') {
        ctx.save();
        ctx.globalCompositeOperation = 'screen';
        
        for (let i = 0; i < 5; i++) {
          const time = Date.now() * 0.001;
          const x = Math.sin(time + i) * canvas.width * 0.3 + canvas.width * 0.5;
          const y = Math.cos(time + i * 0.5) * canvas.height * 0.3 + canvas.height * 0.5;
          
          const gradient = ctx.createRadialGradient(x, y, 0, x, y, 200);
          gradient.addColorStop(0, 'rgba(0, 255, 255, 0.1)');
          gradient.addColorStop(1, 'transparent');
          
          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, canvas.width, canvas.height);
        }
        ctx.restore();
      }

      // Draw holographic grid
      if (variant === 'holographic') {
        ctx.save();
        ctx.strokeStyle = '#ff00ff';
        ctx.lineWidth = 0.5;
        ctx.globalAlpha = 0.3;
        
        const gridSize = 50;
        for (let x = 0; x < canvas.width; x += gridSize) {
          ctx.beginPath();
          ctx.moveTo(x, 0);
          ctx.lineTo(x, canvas.height);
          ctx.stroke();
        }
        for (let y = 0; y < canvas.height; y += gridSize) {
          ctx.beginPath();
          ctx.moveTo(0, y);
          ctx.lineTo(canvas.width, y);
          ctx.stroke();
        }
        ctx.restore();
      }

      // Draw neural network
      if (variant === 'neural') {
        ctx.save();
        ctx.strokeStyle = '#00ff80';
        ctx.lineWidth = 1;
        ctx.globalAlpha = 0.2;
        
        const nodes = 8;
        for (let i = 0; i < nodes; i++) {
          const x1 = Math.sin(i * Math.PI * 2 / nodes) * 200 + canvas.width * 0.5;
          const y1 = Math.cos(i * Math.PI * 2 / nodes) * 200 + canvas.height * 0.5;
          
          for (let j = i + 1; j < nodes; j++) {
            const x2 = Math.sin(j * Math.PI * 2 / nodes) * 200 + canvas.width * 0.5;
            const y2 = Math.cos(j * Math.PI * 2 / nodes) * 200 + canvas.height * 0.5;
            
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
=======
      life: number;
      maxLife: number;
      type: 'quantum' | 'holographic' | 'neural' | 'cyberpunk';

      constructor(x: number, y: number, type: 'quantum' | 'holographic' | 'neural' | 'cyberpunk') {
        this.x = x;
        this.y = y;
        this.vx = (Math.random() - 0.5) * 2;
        this.vy = (Math.random() - 0.5) * 2;
        this.size = Math.random() * 3 + 1;
        this.type = type;
        this.maxLife = Math.random() * 100 + 50;
        this.life = this.maxLife;

        switch (type) {
          case 'quantum':
            this.color = `hsl(${180 + Math.random() * 60}, 100%, 70%)`;
            break;
          case 'holographic':
            this.color = `hsl(${270 + Math.random() * 60}, 100%, 70%)`;
            break;
          case 'neural':
            this.color = `hsl(${120 + Math.random() * 60}, 100%, 70%)`;
            break;
          case 'cyberpunk':
            this.color = `hsl(${320 + Math.random() * 40}, 100%, 70%)`;
            break;
        }
      }

      update() {
        this.x += this.vx;
        this.y += this.vy;
        this.life--;

        // Bounce off edges
        if (this.x <= 0 || this.x >= canvas.width) this.vx *= -1;
        if (this.y <= 0 || this.y >= canvas.height) this.vy *= -1;

        // Add quantum field influence
        quantumFields.forEach(field => {
          const dx = field.x - this.x;
          const dy = field.y - this.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < field.radius) {
            const force = (field.radius - distance) / field.radius;
            this.vx += (dx / distance) * force * 0.01;
            this.vy += (dy / distance) * force * 0.01;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-afd8
          }
        });
      }

      draw() {
        if (ctx) {
          ctx.save();
          ctx.globalAlpha = this.life / this.maxLife;
          
          // Create glow effect
          ctx.shadowColor = this.color;
          ctx.shadowBlur = this.size * 2;
          
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fillStyle = this.color;
          ctx.fill();
          
          ctx.restore();
        }
      }
    }

    // Grid point class
    class GridPoint {
      x: number;
      y: number;
      size: number;
      pulse: number;
      connections: GridPoint[];

      constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
        this.size = Math.random() * 2 + 1;
        this.pulse = Math.random() * Math.PI * 2;
        this.connections = [];
      }

      update() {
        this.pulse += 0.02;
      }

      draw() {
        if (ctx) {
          const alpha = 0.5 + 0.5 * Math.sin(this.pulse);
          ctx.save();
          ctx.globalAlpha = alpha;
          
          // Draw grid point
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fillStyle = 'rgba(0, 255, 255, 0.8)';
          ctx.fill();
          
          // Draw connections
          this.connections.forEach(connection => {
            ctx.beginPath();
            ctx.moveTo(this.x, this.y);
            ctx.lineTo(connection.x, connection.y);
            ctx.strokeStyle = `rgba(0, 255, 255, ${alpha * 0.3})`;
            ctx.lineWidth = 1;
            ctx.stroke();
          });
          
          ctx.restore();
        }
      }
    }

    // Quantum field class
    class QuantumField {
      x: number;
      y: number;
      radius: number;
      strength: number;
      pulse: number;

      constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
        this.radius = Math.random() * 100 + 50;
        this.strength = Math.random() * 0.5 + 0.5;
        this.pulse = Math.random() * Math.PI * 2;
      }

      update() {
        this.pulse += 0.01;
      }

      draw() {
        if (ctx) {
          const alpha = 0.1 + 0.05 * Math.sin(this.pulse);
          ctx.save();
          ctx.globalAlpha = alpha;
          
          // Create radial gradient
          const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.radius);
          gradient.addColorStop(0, 'rgba(0, 255, 255, 0.3)');
          gradient.addColorStop(1, 'rgba(0, 255, 255, 0)');
          
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
          ctx.fillStyle = gradient;
          ctx.fill();
          
          ctx.restore();
        }
      }
    }

    // Neural connection class
    class NeuralConnection {
      x1: number;
      y1: number;
      x2: number;
      y2: number;
      strength: number;
      pulse: number;

      constructor(x1: number, y1: number, x2: number, y2: number) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.strength = Math.random() * 0.5 + 0.5;
        this.pulse = Math.random() * Math.PI * 2;
      }

      update() {
        this.pulse += 0.03;
      }

      draw() {
        if (ctx) {
          const alpha = 0.3 + 0.2 * Math.sin(this.pulse);
          ctx.save();
          ctx.globalAlpha = alpha;
          
          // Create gradient line
          const gradient = ctx.createLinearGradient(this.x1, this.y1, this.x2, this.y2);
          gradient.addColorStop(0, 'rgba(16, 185, 129, 0.8)');
          gradient.addColorStop(1, 'rgba(0, 255, 255, 0.8)');
          
          ctx.beginPath();
          ctx.moveTo(this.x1, this.y1);
          ctx.lineTo(this.x2, this.y2);
          ctx.strokeStyle = gradient;
          ctx.lineWidth = 2;
          ctx.stroke();
          
          ctx.restore();
        }
      }
    }

    // Initialize particles and effects
    const initEffects = () => {
      particles = [];
      holographicGrid = [];
      quantumFields = [];
      neuralConnections = [];

      // Create particles
      const particleCount = intensity === 'high' ? 200 : intensity === 'medium' ? 120 : 80;
      for (let i = 0; i < particleCount; i++) {
        const type = ['quantum', 'holographic', 'neural', 'cyberpunk'][Math.floor(Math.random() * 4)] as any;
        particles.push(new Particle(
          Math.random() * canvas.width,
          Math.random() * canvas.height,
          type
        ));
      }

      // Create holographic grid
      const gridSpacing = 80;
      for (let x = 0; x < canvas.width; x += gridSpacing) {
        for (let y = 0; y < canvas.height; y += gridSpacing) {
          holographicGrid.push(new GridPoint(x, y));
        }
        ctx.restore();
      }

      // Draw cyberpunk elements
      if (variant === 'cyberpunk') {
        ctx.save();
        ctx.strokeStyle = '#ff0040';
        ctx.lineWidth = 2;
        ctx.globalAlpha = 0.4;
        
        // Draw angular lines
        for (let i = 0; i < 10; i++) {
          const x = (i / 10) * canvas.width;
          const y = Math.sin(Date.now() * 0.001 + i) * 100 + canvas.height * 0.5;
          
          ctx.beginPath();
          ctx.moveTo(x, 0);
          ctx.lineTo(x + 50, y);
          ctx.lineTo(x + 100, canvas.height);
          ctx.stroke();
        }
        ctx.restore();
      }

      // Draw space elements
      if (variant === 'space') {
        ctx.save();
        ctx.fillStyle = '#ffffff';
        ctx.globalAlpha = 0.8;
        
        // Draw stars
        for (let i = 0; i < 100; i++) {
          const x = (i * 37) % canvas.width;
          const y = (i * 73) % canvas.height;
          const size = Math.sin(Date.now() * 0.001 + i) * 2 + 1;
          
          ctx.beginPath();
          ctx.arc(x, y, size, 0, Math.PI * 2);
          ctx.fill();
        }
        ctx.restore();
      }

      // Create quantum fields
      const fieldCount = intensity === 'high' ? 8 : intensity === 'medium' ? 5 : 3;
      for (let i = 0; i < fieldCount; i++) {
        quantumFields.push(new QuantumField(
          Math.random() * canvas.width,
          Math.random() * canvas.height
        ));
      }

      // Create neural connections
      const connectionCount = intensity === 'high' ? 15 : intensity === 'medium' ? 10 : 6;
      for (let i = 0; i < connectionCount; i++) {
        const point1 = holographicGrid[Math.floor(Math.random() * holographicGrid.length)];
        const point2 = holographicGrid[Math.floor(Math.random() * holographicGrid.length)];
        if (point1 !== point2) {
          neuralConnections.push(new NeuralConnection(point1.x, point1.y, point2.x, point2.y));
        }
      }

      // Connect grid points
      holographicGrid.forEach(point => {
        holographicGrid.forEach(otherPoint => {
          if (point !== otherPoint) {
            const distance = Math.sqrt(
              Math.pow(point.x - otherPoint.x, 2) + Math.pow(point.y - otherPoint.y, 2)
            );
            if (distance < gridSpacing * 1.5 && Math.random() < 0.3) {
              point.connections.push(otherPoint);
            }
          }
        });
      });
    };

<<<<<<< HEAD
=======
    // Animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update and draw quantum fields
      quantumFields.forEach(field => {
        field.update();
        field.draw();
      });

      // Update and draw neural connections
      neuralConnections.forEach(connection => {
        connection.update();
        connection.draw();
      });

      // Update and draw holographic grid
      holographicGrid.forEach(point => {
        point.update();
        point.draw();
      });

      // Update and draw particles
      particles.forEach((particle, index) => {
        particle.update();
        particle.draw();

        // Remove dead particles and create new ones
        if (particle.life <= 0) {
          const type = ['quantum', 'holographic', 'neural', 'cyberpunk'][Math.floor(Math.random() * 4)] as any;
          particles[index] = new Particle(
            Math.random() * canvas.width,
            Math.random() * canvas.height,
            type
          );
        }
      });

      // Add matrix rain effect for high intensity
      if (intensity === 'high') {
        ctx.save();
        ctx.fillStyle = 'rgba(0, 255, 0, 0.1)';
        ctx.font = '12px monospace';
        
        for (let i = 0; i < 20; i++) {
          const x = (Date.now() * 0.001 + i * 50) % canvas.width;
          const y = (Date.now() * 0.002 + i * 30) % canvas.height;
          const char = String.fromCharCode(0x30A0 + Math.random() * 96);
          ctx.fillText(char, x, y);
        }
        ctx.restore();
      }

      animationFrameId = requestAnimationFrame(animate);
    };

    initEffects();
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-afd8
    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
<<<<<<< HEAD
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [variant, intensity]);

  return (
    <div className="relative min-h-screen overflow-hidden">
      {/* Canvas background */}
=======
      cancelAnimationFrame(animationFrameId);
    };
  }, [intensity]);

  return (
    <div ref={containerRef} className="relative w-full h-full overflow-hidden">
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-afd8
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full pointer-events-none"
        style={{ zIndex: 0 }}
      />
      
<<<<<<< HEAD
      {/* Gradient overlays */}
      <div className="absolute inset-0 z-10">
        {/* Primary gradient */}
        <div className={`absolute inset-0 ${
          variant === 'quantum' ? 'bg-gradient-to-br from-cyan-500/5 via-blue-500/5 to-purple-500/5' :
          variant === 'holographic' ? 'bg-gradient-to-br from-pink-500/5 via-purple-500/5 to-cyan-500/5' :
          variant === 'neural' ? 'bg-gradient-to-br from-green-500/5 via-teal-500/5 to-blue-500/5' :
          variant === 'cyberpunk' ? 'bg-gradient-to-br from-red-500/5 via-pink-500/5 to-orange-500/5' :
          variant === 'space' ? 'bg-gradient-to-br from-blue-500/5 via-indigo-500/5 to-purple-500/5' :
          'bg-gradient-to-br from-cyan-500/5 via-purple-500/5 to-pink-500/5'
        }`} />
        
        {/* Radial gradient */}
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_30%_20%,rgba(0,255,255,0.1),transparent_50%)]" />
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_70%_80%,rgba(139,92,246,0.1),transparent_50%)]" />
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(236,73,153,0.05),transparent_50%)]" />
      </div>

      {/* Animated geometric shapes */}
      <div className="absolute inset-0 z-20 pointer-events-none">
        {/* Floating orbs */}
        <motion.div
          className={`absolute w-32 h-32 rounded-full ${
            variant === 'quantum' ? 'bg-cyan-500/10' :
            variant === 'holographic' ? 'bg-pink-500/10' :
            variant === 'neural' ? 'bg-green-500/10' :
            variant === 'cyberpunk' ? 'bg-red-500/10' :
            variant === 'space' ? 'bg-blue-500/10' :
            'bg-cyan-500/10'
          } blur-3xl`}
          animate={{
            x: [0, 100, 0],
            y: [0, -50, 0],
            scale: [1, 1.2, 1],
          }}
          transition={{
            duration: 20,
            repeat: Infinity,
            ease: "easeInOut"
          }}
          style={{ top: '20%', left: '10%' }}
        />
        
        <motion.div
          className={`absolute w-24 h-24 rounded-full ${
            variant === 'quantum' ? 'bg-purple-500/10' :
            variant === 'holographic' ? 'bg-cyan-500/10' :
            variant === 'neural' ? 'bg-blue-500/10' :
            variant === 'cyberpunk' ? 'bg-orange-500/10' :
            variant === 'space' ? 'bg-indigo-500/10' :
            'bg-purple-500/10'
          } blur-3xl`}
          animate={{
            x: [0, -80, 0],
            y: [0, 60, 0],
            scale: [1, 0.8, 1],
          }}
          transition={{
            duration: 25,
            repeat: Infinity,
            ease: "easeInOut"
          }}
          style={{ top: '60%', right: '20%' }}
        />

        {/* Grid lines */}
        <div className="absolute inset-0 opacity-20">
          <div className="absolute inset-0 bg-[linear-gradient(90deg,transparent_98%,rgba(0,255,255,0.3)_100%)] bg-[length:50px_50px]" />
          <div className="absolute inset-0 bg-[linear-gradient(0deg,transparent_98%,rgba(139,92,246,0.3)_100%)] bg-[length:50px_50px]" />
=======
      {/* Additional visual layers */}
      <div className="absolute inset-0 pointer-events-none">
        {/* Holographic overlay */}
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/5 via-purple-500/5 to-pink-500/5" />
        
        {/* Quantum field indicators */}
        <div className="absolute top-1/4 left-1/4 w-32 h-32 border border-cyan-400/20 rounded-full animate-pulse" />
        <div className="absolute top-3/4 right-1/4 w-24 h-24 border border-purple-400/20 rounded-full animate-pulse" style={{ animationDelay: '1s' }} />
        <div className="absolute bottom-1/4 left-1/3 w-40 h-40 border border-pink-400/20 rounded-full animate-pulse" style={{ animationDelay: '2s' }} />
        
        {/* Neural network lines */}
        <div className="absolute inset-0">
          <svg className="w-full h-full" style={{ zIndex: 1 }}>
            <defs>
              <linearGradient id="neuralGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="rgba(16, 185, 129, 0.3)" />
                <stop offset="100%" stopColor="rgba(0, 255, 255, 0.3)" />
              </linearGradient>
            </defs>
            <line x1="10%" y1="20%" x2="30%" y2="40%" stroke="url(#neuralGradient)" strokeWidth="1" opacity="0.6" />
            <line x1="70%" y1="60%" x2="90%" y2="80%" stroke="url(#neuralGradient)" strokeWidth="1" opacity="0.6" />
            <line x1="20%" y1="80%" x2="80%" y2="20%" stroke="url(#neuralGradient)" strokeWidth="1" opacity="0.6" />
          </svg>
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-afd8
        </div>
      </div>

      {/* Content */}
<<<<<<< HEAD
      <div className="relative z-30">
=======
      <div className="relative z-10 w-full h-full">
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-afd8
        {children}
      </div>

      {/* Quantum Particle Trails */}
      <div className="fixed inset-0 z-0 pointer-events-none">
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-cyan-400 rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`
            }}
            animate={{
              y: [0, -100, -200],
              opacity: [0, 1, 0],
              scale: [0, 1, 0]
            }}
            transition={{
              duration: Math.random() * 3 + 2,
              repeat: Infinity,
              delay: Math.random() * 2,
              ease: "easeOut"
            }}
          />
        ))}
      </div>

      {/* Holographic Data Streams */}
      <div className="fixed inset-0 z-0 pointer-events-none">
        {[...Array(5)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-20 bg-gradient-to-b from-purple-400 to-transparent rounded-full"
            style={{
              left: `${20 + i * 15}%`,
              top: '-20px'
            }}
            animate={{
              y: [0, (typeof window !== 'undefined' ? window.innerHeight : 800) + 20],
              opacity: [0, 0.8, 0]
            }}
            transition={{
              duration: 8 + i * 2,
              repeat: Infinity,
              delay: i * 1.5,
              ease: "linear"
            }}
          />
        ))}
      </div>
    </div>
  );
}