import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowRight, ExternalLink, Star } from 'lucide-react';

interface UltraFuturisticCardProps {
  children: React.ReactNode;
  variant?: 'quantum' | 'holographic' | 'cyberpunk' | 'neural' | 'space' | 'energy';
  className?: string;
<<<<<<< HEAD
  glowIntensity?: 'low' | 'medium' | 'high';
  interactive?: boolean;
  onClick?: () => void;
  delay?: number;
=======
  variant?: 'default' | 'quantum' | 'cyberpunk' | 'holographic' | 'neural' | 'quantum-holographic';
  interactive?: boolean;
  glowIntensity?: 'low' | 'medium' | 'high';
  animationSpeed?: 'slow' | 'normal' | 'fast';
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2d5f
}

const UltraFuturisticCard: React.FC<UltraFuturisticCardProps> = ({
  children,
<<<<<<< HEAD
  variant = 'quantum',
  className = '',
  glowIntensity = 'medium',
  interactive = true,
  onClick,
  delay = 0
=======
  className = '',
  variant = 'quantum-holographic',
  interactive = true,
  glowIntensity = 'medium',
  animationSpeed = 'normal'
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2d5f
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const cardRef = useRef<HTMLDivElement>(null);
<<<<<<< HEAD
  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number; vx: number; vy: number; life: number }>>([]);

  // Generate variant-specific styles
  const getVariantStyles = () => {
    switch (variant) {
      case 'quantum':
        return {
          border: 'border-cyan-400/30 border-purple-400/30',
          glow: 'shadow-cyan-400/20 shadow-purple-400/20',
          bg: 'bg-gradient-to-br from-slate-900/80 via-cyan-900/20 to-purple-900/20',
          accent: 'from-cyan-400 to-purple-400',
          particleColor: 'bg-cyan-400'
        };
      case 'holographic':
        return {
          border: 'border-fuchsia-400/30 border-pink-400/30',
          glow: 'shadow-fuchsia-400/20 shadow-pink-400/20',
          bg: 'bg-gradient-to-br from-slate-900/80 via-fuchsia-900/20 to-pink-900/20',
          accent: 'from-fuchsia-400 to-pink-400',
          particleColor: 'bg-fuchsia-400'
        };
      case 'cyberpunk':
        return {
          border: 'border-red-400/30 border-orange-400/30',
          glow: 'shadow-red-400/20 shadow-orange-400/20',
          bg: 'bg-gradient-to-br from-slate-900/80 via-red-900/20 to-orange-900/20',
          accent: 'from-red-400 to-orange-400',
          particleColor: 'bg-red-400'
        };
      case 'neural':
        return {
          border: 'border-emerald-400/30 border-green-400/30',
          glow: 'shadow-emerald-400/20 shadow-green-400/20',
          bg: 'bg-gradient-to-br from-slate-900/80 via-emerald-900/20 to-green-900/20',
          accent: 'from-emerald-400 to-green-400',
          particleColor: 'bg-emerald-400'
        };
      case 'space':
        return {
          border: 'border-blue-400/30 border-indigo-400/30',
          glow: 'shadow-blue-400/20 shadow-indigo-400/20',
          bg: 'bg-gradient-to-br from-slate-900/80 via-blue-900/20 to-indigo-900/20',
          accent: 'from-blue-400 to-indigo-400',
          particleColor: 'bg-blue-400'
        };
      case 'energy':
        return {
          border: 'border-yellow-400/30 border-amber-400/30',
          glow: 'shadow-yellow-400/20 shadow-amber-400/20',
          bg: 'bg-gradient-to-br from-slate-900/80 via-yellow-900/20 to-amber-900/20',
          accent: 'from-yellow-400 to-amber-400',
          particleColor: 'bg-yellow-400'
        };
      default:
        return {
          border: 'border-cyan-400/30 border-purple-400/30',
          glow: 'shadow-cyan-400/20 shadow-purple-400/20',
          bg: 'bg-gradient-to-br from-slate-900/80 via-cyan-900/20 to-purple-900/20',
          accent: 'from-cyan-400 to-purple-400',
          particleColor: 'bg-cyan-400'
        };
=======
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | undefined>(undefined);

  // Animation speed multipliers
  const speedMultipliers = {
    slow: 0.5,
    normal: 1,
    fast: 2
  };

  const speed = speedMultipliers[animationSpeed];

  // Glow intensity values
  const glowValues = {
    low: { blur: 10, opacity: 0.3, spread: 5 },
    medium: { blur: 20, opacity: 0.5, spread: 10 },
    high: { blur: 30, opacity: 0.7, spread: 15 }
  };

  const glow = glowValues[glowIntensity];

  // Variant-specific configurations
  const variantConfigs = {
    default: {
      primaryColor: '#3b82f6',
      secondaryColor: '#8b5cf6',
      accentColor: '#06b6d4',
      borderStyle: 'solid',
      background: 'rgba(17, 24, 39, 0.8)',
      backdrop: 'blur(20px)'
    },
    quantum: {
      primaryColor: '#00ffff',
      secondaryColor: '#0080ff',
      accentColor: '#8000ff',
      borderStyle: 'solid',
      background: 'rgba(0, 0, 0, 0.9)',
      backdrop: 'blur(25px)'
    },
    cyberpunk: {
      primaryColor: '#ff0080',
      secondaryColor: '#ff8000',
      accentColor: '#ffff00',
      borderStyle: 'solid',
      background: 'rgba(20, 0, 10, 0.9)',
      backdrop: 'blur(20px)'
    },
    holographic: {
      primaryColor: '#00ffff',
      secondaryColor: '#ff00ff',
      accentColor: '#ffff00',
      borderStyle: 'dashed',
      background: 'rgba(0, 20, 40, 0.8)',
      backdrop: 'blur(30px)'
    },
    neural: {
      primaryColor: '#00ff80',
      secondaryColor: '#8000ff',
      accentColor: '#ff0080',
      borderStyle: 'solid',
      background: 'rgba(0, 40, 20, 0.9)',
      backdrop: 'blur(25px)'
    },
    'quantum-holographic': {
      primaryColor: '#00ffff',
      secondaryColor: '#ff00ff',
      accentColor: '#ffff00',
      borderStyle: 'double',
      background: 'rgba(0, 0, 0, 0.95)',
      backdrop: 'blur(35px)'
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2d5f
    }
  };

  const config = variantConfigs[variant];

<<<<<<< HEAD
  // Particle system for enhanced effects
  useEffect(() => {
    if (!interactive || !isHovered) return;

    const interval = setInterval(() => {
      setParticles(prev => {
        const newParticles = prev
          .map(p => ({ ...p, life: p.life - 1 }))
          .filter(p => p.life > 0);

        if (newParticles.length < 8) {
          newParticles.push({
            id: Date.now() + Math.random(),
            x: Math.random() * 100,
            y: Math.random() * 100,
            vx: (Math.random() - 0.5) * 2,
            vy: (Math.random() - 0.5) * 2,
            life: 30
          });
        }

        return newParticles;
      });
    }, 50);

    return () => clearInterval(interval);
  }, [interactive, isHovered]);

  // Glow intensity mapping
  const getGlowIntensity = () => {
    switch (glowIntensity) {
      case 'low':
        return 'shadow-lg';
      case 'medium':
        return 'shadow-xl shadow-2xl';
      case 'high':
        return 'shadow-2xl shadow-3xl';
      default:
        return 'shadow-xl';
=======
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    canvas.width = 400;
    canvas.height = 300;

    // Particle system for card background
    const particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      color: string;
      life: number;
      maxLife: number;
    }> = [];

    // Create particles based on variant
    const createParticles = () => {
      const particleCount = variant === 'quantum-holographic' ? 50 : 30;
      
      for (let i = 0; i < particleCount; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 0.5 * speed,
          vy: (Math.random() - 0.5) * 0.5 * speed,
          size: Math.random() * 2 + 0.5,
          color: [config.primaryColor, config.secondaryColor, config.accentColor][
            Math.floor(Math.random() * 3)
          ],
          life: Math.random() * 100 + 50,
          maxLife: 150
        });
      }
    };

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update and draw particles
      particles.forEach((particle, index) => {
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life--;

        // Wrap around edges
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;

        // Remove dead particles
        if (particle.life <= 0) {
          particles.splice(index, 1);
          return;
        }

        // Draw particle
        const alpha = particle.life / particle.maxLife;
        ctx.globalAlpha = alpha * 0.6;
        ctx.fillStyle = particle.color;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();

        // Draw particle glow
        ctx.shadowColor = particle.color;
        ctx.shadowBlur = 5;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * 1.5, 0, Math.PI * 2);
        ctx.stroke();
        ctx.shadowBlur = 0;
      });

      // Add new particles if needed
      if (particles.length < (variant === 'quantum-holographic' ? 50 : 30)) {
        createParticles();
      }

      // Draw variant-specific effects
      if (variant === 'quantum-holographic') {
        drawQuantumHolographicEffects(ctx);
      } else if (variant === 'neural') {
        drawNeuralConnections(ctx, particles);
      } else if (variant === 'cyberpunk') {
        drawCyberpunkEffects(ctx);
      }

      animationRef.current = requestAnimationFrame(animate);
    };

    const drawQuantumHolographicEffects = (ctx: CanvasRenderingContext2D) => {
      // Quantum field lines
      ctx.strokeStyle = `${config.primaryColor}40`;
      ctx.lineWidth = 1;
      
      for (let i = 0; i < 5; i++) {
        const x = (i / 4) * canvas.width;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x + 50, canvas.height);
        ctx.stroke();
      }

      // Holographic grid
      ctx.strokeStyle = `${config.secondaryColor}30`;
      ctx.lineWidth = 0.5;
      
      const gridSize = 25;
      for (let x = 0; x < canvas.width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
      }
      for (let y = 0; y < canvas.height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }
    };

    const drawNeuralConnections = (ctx: CanvasRenderingContext2D, particles: any[]) => {
      ctx.strokeStyle = `${config.primaryColor}30`;
      ctx.lineWidth = 1;
      
      particles.forEach((particle, i) => {
        particles.slice(i + 1).forEach(otherParticle => {
          const distance = Math.sqrt(
            Math.pow(particle.x - otherParticle.x, 2) + 
            Math.pow(particle.y - otherParticle.y, 2)
          );
          if (distance < 80) {
            ctx.globalAlpha = (80 - distance) / 80 * 0.3;
            ctx.beginPath();
            ctx.moveTo(particle.x, particle.y);
            ctx.lineTo(otherParticle.x, otherParticle.y);
            ctx.stroke();
          }
        });
      });
    };

    const drawCyberpunkEffects = (ctx: CanvasRenderingContext2D) => {
      // Energy waves
      ctx.strokeStyle = `${config.primaryColor}40`;
      ctx.lineWidth = 2;
      
      for (let i = 0; i < 3; i++) {
        const y = canvas.height / 2 + Math.sin(Date.now() * 0.001 * speed + i) * 20;
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }
    };

    createParticles();
    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [variant, speed, config]);

  const cardVariants = {
    initial: {
      scale: 1,
      rotateX: 0,
      rotateY: 0,
      z: 0
    },
    hover: {
      scale: 1.02,
      rotateX: 2,
      rotateY: 2,
      z: 20,
      transition: {
        duration: 0.3,
        ease: "easeOut" as const
      }
    },
    focus: {
      scale: 1.01,
      rotateX: 1,
      rotateY: 1,
      z: 10,
      transition: {
        duration: 0.2,
        ease: "easeOut" as const
      }
    }
  };

  const borderVariants = {
    initial: {
      opacity: 0.5,
      scale: 1
    },
    hover: {
      opacity: 1,
      scale: 1.05,
      transition: {
        duration: 0.3,
        ease: "easeOut" as const
      }
    },
    focus: {
      opacity: 0.8,
      scale: 1.02,
      transition: {
        duration: 0.2,
        ease: "easeOut" as const
      }
    }
  };

  const glowVariants = {
    initial: {
      opacity: 0.3,
      scale: 1
    },
    hover: {
      opacity: 0.8,
      scale: 1.1,
      transition: {
        duration: 0.3,
        ease: "easeOut" as const
      }
    },
    focus: {
      opacity: 0.6,
      scale: 1.05,
      transition: {
        duration: 0.2,
        ease: "easeOut" as const
      }
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2d5f
    }
  };

  return (
    <motion.div
      ref={cardRef}
<<<<<<< HEAD
      className={`relative group overflow-hidden rounded-2xl backdrop-blur-xl transition-all duration-500 ease-out ${
        styles.bg
      } ${styles.border} ${getGlowIntensity()} ${styles.glow} ${className}`}
      initial={{ opacity: 0, y: 50, scale: 0.95 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      transition={{ duration: 0.6, delay, ease: "easeOut" }}
      whileHover={interactive ? { 
        scale: 1.02, 
        y: -5,
        transition: { duration: 0.3 }
      } : {}}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      onFocus={() => setIsFocused(true)}
      onBlur={() => setIsFocused(false)}
      onClick={onClick}
      style={{
        background: `linear-gradient(135deg, rgba(15, 23, 42, 0.8) 0%, ${styles.bg.includes('cyan') ? 'rgba(8, 145, 178, 0.1)' : styles.bg.includes('fuchsia') ? 'rgba(168, 85, 247, 0.1)' : 'rgba(34, 197, 94, 0.1)'} 50%, rgba(15, 23, 42, 0.8) 100%)`
      }}
    >
      {/* Animated border */}
      <div className="absolute inset-0 rounded-2xl">
        <motion.div
          className={`absolute inset-0 rounded-2xl bg-gradient-to-r ${styles.accent} opacity-0`}
          animate={{
            opacity: isHovered ? [0, 0.3, 0] : 0
          }}
          transition={{
            duration: 2,
            repeat: isHovered ? Infinity : 0,
            ease: "easeInOut"
          }}
        />
      </div>

      {/* Quantum particle effects */}
      <AnimatePresence>
        {isHovered && (
          <div className="absolute inset-0 pointer-events-none overflow-hidden">
            {particles.map((particle) => (
              <motion.div
                key={particle.id}
                className={`absolute w-1 h-1 ${styles.particleColor} rounded-full`}
                style={{
                  left: `${particle.x}%`,
                  top: `${particle.y}%`
                }}
                initial={{ opacity: 0, scale: 0 }}
                animate={{ 
                  opacity: [0, 1, 0], 
                  scale: [0, 1, 0],
                  x: particle.vx * 20,
                  y: particle.vy * 20
                }}
                exit={{ opacity: 0, scale: 0 }}
                transition={{ duration: 0.5 }}
              />
            ))}
          </div>
        )}
      </AnimatePresence>

      {/* Holographic grid overlay */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute inset-0 opacity-20">
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent transform -skew-x-12" />
          <div className="absolute inset-0 bg-gradient-to-b from-transparent via-white/5 to-transparent transform -skew-y-12" />
        </div>
      </div>

      {/* Corner accents */}
      <div className="absolute top-0 left-0 w-8 h-8 border-l-2 border-t-2 border-cyan-400/50 rounded-tl-2xl" />
      <div className="absolute top-0 right-0 w-8 h-8 border-r-2 border-t-2 border-purple-400/50 rounded-tr-2xl" />
      <div className="absolute bottom-0 left-0 w-8 h-8 border-l-2 border-b-2 border-emerald-400/50 rounded-bl-2xl" />
      <div className="absolute bottom-0 right-0 w-8 h-8 border-r-2 border-b-2 border-fuchsia-400/50 rounded-br-2xl" />

      {/* Floating energy orbs */}
      <motion.div
        className="absolute -top-2 -right-2 w-4 h-4 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-full opacity-60"
        animate={{
          scale: [1, 1.2, 1],
          opacity: [0.6, 1, 0.6]
        }}
        transition={{
          duration: 3,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />
      <motion.div
        className="absolute -bottom-2 -left-2 w-3 h-3 bg-gradient-to-r from-emerald-400 to-cyan-400 rounded-full opacity-60"
        animate={{
          scale: [1, 1.3, 1],
          opacity: [0.6, 1, 0.6]
        }}
        transition={{
          duration: 4,
          repeat: Infinity,
          ease: "easeInOut",
          delay: 1
        }}
      />

      {/* Content wrapper with enhanced backdrop */}
      <div className="relative z-10 p-6">
        <div className="relative">
          {/* Content background with subtle pattern */}
          <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent rounded-xl opacity-30" />
          
          {/* Main content */}
          <div className="relative z-10">
            {children}
          </div>
        </div>
      </div>

      {/* Interactive glow effect */}
      {interactive && (
        <motion.div
          className="absolute inset-0 rounded-2xl bg-gradient-to-r from-cyan-400/0 via-cyan-400/10 to-purple-400/0 opacity-0"
          animate={{
            opacity: isHovered ? 1 : 0
          }}
          transition={{ duration: 0.3 }}
        />
      )}

      {/* Focus ring for accessibility */}
      {isFocused && (
        <div className="absolute inset-0 rounded-2xl ring-2 ring-cyan-400/50 ring-offset-2 ring-offset-slate-900" />
      )}
=======
      className={`relative group ${className}`}
      variants={cardVariants}
      initial="initial"
      animate={isHovered ? "hover" : isFocused ? "focus" : "initial"}
      onHoverStart={() => interactive && setIsHovered(true)}
      onHoverEnd={() => interactive && setIsHovered(false)}
      onFocus={() => interactive && setIsFocused(true)}
      onBlur={() => interactive && setIsFocused(false)}
      style={{
        perspective: '1000px',
        transformStyle: 'preserve-3d'
      }}
    >
      {/* Animated Canvas Background */}
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full rounded-xl pointer-events-none opacity-60"
        style={{ zIndex: 0 }}
      />

      {/* Glow Effect */}
      <motion.div
        className="absolute inset-0 rounded-xl pointer-events-none"
        variants={glowVariants}
        style={{
          background: `radial-gradient(circle at center, ${config.primaryColor}20, transparent 70%)`,
          filter: `blur(${glow.blur}px)`,
          zIndex: 1
        }}
      />

      {/* Border Effects */}
      <motion.div
        className="absolute inset-0 rounded-xl pointer-events-none"
        variants={borderVariants}
        style={{
          border: `${config.borderStyle === 'double' ? '3px double' : '2px ' + config.borderStyle}`,
          borderColor: config.primaryColor,
          zIndex: 2
        }}
      />

      {/* Corner Accents */}
      <div className="absolute inset-0 rounded-xl pointer-events-none" style={{ zIndex: 3 }}>
        {/* Top-left corner */}
        <div 
          className="absolute top-0 left-0 w-4 h-4 border-l-2 border-t-2 rounded-tl-xl"
          style={{ borderColor: config.accentColor }}
        />
        
        {/* Top-right corner */}
        <div 
          className="absolute top-0 right-0 w-4 h-4 border-r-2 border-t-2 rounded-tr-xl"
          style={{ borderColor: config.secondaryColor }}
        />
        
        {/* Bottom-left corner */}
        <div 
          className="absolute bottom-0 left-0 w-4 h-4 border-l-2 border-b-2 rounded-bl-xl"
          style={{ borderColor: config.secondaryColor }}
        />
        
        {/* Bottom-right corner */}
        <div 
          className="absolute bottom-0 right-0 w-4 h-4 border-r-2 border-b-2 rounded-br-xl"
          style={{ borderColor: config.accentColor }}
        />
      </div>

      {/* Animated Border Lines */}
      <div className="absolute inset-0 rounded-xl pointer-events-none overflow-hidden" style={{ zIndex: 4 }}>
        <motion.div
          className="absolute top-0 left-0 w-full h-px"
          style={{
            background: `linear-gradient(90deg, transparent, ${config.primaryColor}, transparent)`
          }}
          animate={{
            x: ['-100%', '100%']
          }}
          transition={{
            duration: 3 * speed,
            repeat: Infinity,
            ease: "linear"
          }}
        />
        
        <motion.div
          className="absolute bottom-0 right-0 w-full h-px"
          style={{
            background: `linear-gradient(90deg, transparent, ${config.secondaryColor}, transparent)`
          }}
          animate={{
            x: ['100%', '-100%']
          }}
          transition={{
            duration: 4 * speed,
            repeat: Infinity,
            ease: "linear"
          }}
        />
        
        <motion.div
          className="absolute top-0 left-0 w-px h-full"
          style={{
            background: `linear-gradient(180deg, transparent, ${config.accentColor}, transparent)`
          }}
          animate={{
            y: ['-100%', '100%']
          }}
          transition={{
            duration: 5 * speed,
            repeat: Infinity,
            ease: "linear"
          }}
        />
        
        <motion.div
          className="absolute bottom-0 right-0 w-px h-full"
          style={{
            background: `linear-gradient(180deg, transparent, ${config.secondaryColor}, transparent)`
          }}
          animate={{
            y: ['100%', '-100%']
          }}
          transition={{
            duration: 3.5 * speed,
            repeat: Infinity,
            ease: "linear"
          }}
        />
      </div>

      {/* Main Content */}
      <div
        className="relative p-6 rounded-xl"
        style={{
          background: config.background,
          backdropFilter: config.backdrop,
          zIndex: 5
        }}
      >
        {/* Floating Particles */}
        <AnimatePresence>
          {isHovered && (
            <>
              {[...Array(5)].map((_, i) => (
                <motion.div
                  key={i}
                  className="absolute w-1 h-1 rounded-full pointer-events-none"
                  style={{
                    background: [config.primaryColor, config.secondaryColor, config.accentColor][i % 3],
                    left: `${20 + (i * 15)}%`,
                    top: `${10 + (i * 20)}%`
                  }}
                  initial={{ opacity: 0, scale: 0, y: 0 }}
                  animate={{ 
                    opacity: [0, 1, 0], 
                    scale: [0, 1, 0], 
                    y: [0, -20, -40] 
                  }}
                  transition={{
                    duration: 2 * speed,
                    repeat: Infinity,
                    ease: "easeOut",
                    delay: i * 0.2
                  }}
                />
              ))}
            </>
          )}
        </AnimatePresence>

        {children}
      </div>
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-2d5f
    </motion.div>
  );
};

export default UltraFuturisticCard;