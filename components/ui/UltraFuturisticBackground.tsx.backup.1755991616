import React, { useEffect, useRef } from 'react';
<<<<<<< HEAD
import { motion } from 'framer-motion';

interface UltraFuturisticBackgroundProps {
  children: React.ReactNode;
  variant?: 'default' | 'quantum' | 'holographic' | 'neural' | 'cyberpunk' | 'space';
  intensity?: number;
}

const UltraFuturisticBackground: React.FC<UltraFuturisticBackgroundProps> = ({
  children,
  variant = 'default',
  intensity = 1
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | undefined>(undefined);
=======

interface UltraFuturisticBackgroundProps {
  variant?: 'neural' | 'quantum' | 'holographic' | 'cyberpunk';
  intensity?: 'low' | 'medium' | 'high' | 'extreme';
  children: React.ReactNode;
  className?: string;
}

const UltraFuturisticBackground: React.FC<UltraFuturisticBackgroundProps> = ({
  variant = 'neural',
  intensity = 'medium',
  children,
  className = ''
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | null>(null);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

<<<<<<< HEAD
    // Quantum particle system
=======
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
    const particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      color: string;
      life: number;
      maxLife: number;
<<<<<<< HEAD
      type: 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
    }> = [];

    // Initialize particles based on variant
    const initParticles = () => {
      particles.length = 0;
      const particleCount = Math.floor(intensity * 100);
      
      for (let i = 0; i < particleCount; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 2,
          vy: (Math.random() - 0.5) * 2,
          size: Math.random() * 3 + 1,
          color: getParticleColor(),
          life: Math.random() * 100,
          maxLife: 100,
          type: getParticleType()
        });
      }
    };

    const getParticleColor = () => {
      const colors = [
        '#00ffff', // Cyan
        '#ff00ff', // Magenta
        '#ffff00', // Yellow
        '#00ff00', // Green
        '#ff0080', // Pink
        '#8000ff', // Purple
        '#0080ff', // Blue
        '#ff8000', // Orange
        '#80ff00', // Lime
        '#ff0080'  // Rose
      ];
      return colors[Math.floor(Math.random() * colors.length)];
    };

    // Quantum entanglement effect
    const createQuantumEntanglement = () => {
      if (variant === 'quantum' && intensity > 0.5) {
        for (let i = 0; i < particles.length; i += 2) {
          if (i + 1 < particles.length) {
            const p1 = particles[i];
            const p2 = particles[i + 1];
            
            // Create connection lines
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.strokeStyle = `rgba(0, 255, 255, ${0.1 + Math.sin(Date.now() * 0.001) * 0.1})`;
            ctx.lineWidth = 1;
            ctx.stroke();
=======
    }> = [];

    const connections: Array<{
      x1: number;
      y1: number;
      x2: number;
      y2: number;
      strength: number;
    }> = [];

    const intensityMultiplier = {
      low: 0.5,
      medium: 1,
      high: 1.5,
      extreme: 2
    }[intensity];

    const variantConfig = {
      neural: {
        particleCount: 100 * intensityMultiplier,
        connectionDistance: 150,
        colors: ['#3b82f6', '#8b5cf6', '#06b6d4', '#10b981'],
        particleSpeed: 0.5 * intensityMultiplier,
        connectionOpacity: 0.3
      },
      quantum: {
        particleCount: 150 * intensityMultiplier,
        connectionDistance: 200,
        colors: ['#06b6d4', '#3b82f6', '#8b5cf6', '#ec4899'],
        particleSpeed: 0.8 * intensityMultiplier,
        connectionOpacity: 0.4
      },
      holographic: {
        particleCount: 200 * intensityMultiplier,
        connectionDistance: 120,
        colors: ['#10b981', '#f59e0b', '#ef4444', '#8b5cf6'],
        particleSpeed: 1.2 * intensityMultiplier,
        connectionOpacity: 0.5
      },
      cyberpunk: {
        particleCount: 250 * intensityMultiplier,
        connectionDistance: 100,
        colors: ['#ef4444', '#f59e0b', '#10b981', '#3b82f6'],
        particleSpeed: 1.5 * intensityMultiplier,
        connectionOpacity: 0.6
      }
    }[variant];

    // Initialize particles
    for (let i = 0; i < variantConfig.particleCount; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * variantConfig.particleSpeed,
        vy: (Math.random() - 0.5) * variantConfig.particleSpeed,
        size: Math.random() * 3 + 1,
        color: variantConfig.colors[Math.floor(Math.random() * variantConfig.colors.length)],
        life: Math.random() * 100,
        maxLife: 100
      });
    }

    // Create neural network connections
    const createConnections = () => {
      connections.length = 0;
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < variantConfig.connectionDistance) {
            connections.push({
              x1: particles[i].x,
              y1: particles[i].y,
              x2: particles[j].x,
              y2: particles[j].y,
              strength: 1 - (distance / variantConfig.connectionDistance)
            });
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
          }
        }
      }
    };

<<<<<<< HEAD
    // Holographic grid effect
    const createHolographicGrid = () => {
      if (variant === 'holographic') {
        const gridSize = 50;
        const time = Date.now() * 0.001;
        
        ctx.strokeStyle = `rgba(138, 43, 226, ${0.1 + Math.sin(time) * 0.1})`;
        ctx.lineWidth = 0.5;
=======
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update particles
      particles.forEach(particle => {
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life -= 0.5;

        // Bounce off edges
        if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;
        if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;

        // Reset particle when it dies
        if (particle.life <= 0) {
          particle.x = Math.random() * canvas.width;
          particle.y = Math.random() * canvas.height;
          particle.life = particle.maxLife;
          particle.color = variantConfig.colors[Math.floor(Math.random() * variantConfig.colors.length)];
        }

        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.globalAlpha = particle.life / particle.maxLife;
        ctx.fill();
      });

      // Create and draw connections
      createConnections();
      connections.forEach(connection => {
        ctx.beginPath();
        ctx.moveTo(connection.x1, connection.y1);
        ctx.lineTo(connection.x2, connection.y2);
        ctx.strokeStyle = `rgba(59, 130, 246, ${connection.strength * variantConfig.connectionOpacity})`;
        ctx.lineWidth = connection.strength * 2;
        ctx.stroke();
      });

      // Add floating geometric shapes
      if (variant === 'holographic' || variant === 'cyberpunk') {
        const time = Date.now() * 0.001;
        for (let i = 0; i < 5; i++) {
          const x = canvas.width * 0.5 + Math.cos(time + i) * 200;
          const y = canvas.height * 0.5 + Math.sin(time + i * 0.7) * 200;
          
          ctx.beginPath();
          ctx.moveTo(x, y - 20);
          ctx.lineTo(x + 20, y + 20);
          ctx.lineTo(x - 20, y + 20);
          ctx.closePath();
          ctx.strokeStyle = `rgba(16, 185, 129, ${0.3 + 0.2 * Math.sin(time + i)})`;
          ctx.lineWidth = 2;
          ctx.stroke();
        }
      }

      // Add quantum wave effects
      if (variant === 'quantum') {
        const time = Date.now() * 0.002;
        for (let i = 0; i < 3; i++) {
          const waveX = canvas.width * 0.5;
          const waveY = canvas.height * 0.5 + i * 100;
          
          ctx.beginPath();
          for (let x = 0; x < canvas.width; x += 5) {
            const y = waveY + Math.sin((x + time * 100) * 0.01) * 30;
            if (x === 0) {
              ctx.moveTo(x, y);
            } else {
              ctx.lineTo(x, y);
            }
          }
          ctx.strokeStyle = `rgba(6, 182, 212, ${0.4 + 0.2 * Math.sin(time + i)})`;
          ctx.lineWidth = 3;
          ctx.stroke();
        }
      }

      // Add cyberpunk grid
      if (variant === 'cyberpunk') {
        const gridSize = 50;
        const time = Date.now() * 0.001;
        
        ctx.strokeStyle = `rgba(239, 68, 68, ${0.2 + 0.1 * Math.sin(time)})`;
        ctx.lineWidth = 1;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
        
        for (let x = 0; x < canvas.width; x += gridSize) {
          ctx.beginPath();
          ctx.moveTo(x, 0);
          ctx.lineTo(x, canvas.height);
          ctx.stroke();
        }
        
        for (let y = 0; y < canvas.height; y += gridSize) {
          ctx.beginPath();
          ctx.moveTo(0, y);
          ctx.lineTo(canvas.width, y);
          ctx.stroke();
        }
      }
<<<<<<< HEAD
    };

    // Neural network effect
    const createNeuralNetwork = () => {
      if (variant === 'neural') {
        const time = Date.now() * 0.001;
        
        for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            const distance = Math.sqrt(
              Math.pow(particles[i].x - particles[j].x, 2) +
              Math.pow(particles[i].y - particles[j].y, 2)
            );
            
            if (distance < 100) {
              const opacity = (100 - distance) / 100 * 0.3;
              ctx.beginPath();
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[j].x, particles[j].y);
              ctx.strokeStyle = `rgba(0, 255, 127, ${opacity})`;
              ctx.lineWidth = 1;
              ctx.stroke();
            }
          }
        }
      }
    };

    // Cyberpunk matrix effect
    const createCyberpunkMatrix = () => {
      if (variant === 'cyberpunk') {
        const time = Date.now() * 0.001;
        ctx.fillStyle = 'rgba(0, 255, 0, 0.1)';
        ctx.font = '12px monospace';
        
        for (let i = 0; i < 20; i++) {
          const x = (i * 100 + time * 50) % canvas.width;
          const y = (i * 50 + time * 30) % canvas.height;
          ctx.fillText('01', x, y);
        }
      }
    };

    // Space nebula effect
    const createSpaceNebula = () => {
      if (variant === 'space') {
        const time = Date.now() * 0.001;
        
        // Create nebula clouds
        for (let i = 0; i < 5; i++) {
          const x = (i * 200 + time * 20) % canvas.width;
          const y = (i * 150 + time * 15) % canvas.height;
          
          const gradient = ctx.createRadialGradient(x, y, 0, x, y, 100);
          gradient.addColorStop(0, `rgba(138, 43, 226, ${0.1})`);
          gradient.addColorStop(1, 'rgba(138, 43, 226, 0)');
          
          ctx.fillStyle = gradient;
          ctx.beginPath();
          ctx.arc(x, y, 100, 0, Math.PI * 2);
          ctx.fill();
        }
      }
    };

    // Animation loop
    const animate = () => {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Update and draw particles
      particles.forEach((particle, index) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life--;

        // Bounce off edges
        if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;
        if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;

        // Remove dead particles
        if (particle.life <= 0) {
          particles.splice(index, 1);
          return;
        }
        
        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.globalAlpha = particle.opacity;
        ctx.fill();
        
        // Add glow effect
        if (intensity > 0.5) {
          ctx.shadowColor = particle.color;
          ctx.shadowBlur = particle.size * 2;
          ctx.fill();
          ctx.shadowBlur = 0;
        }
      });
      
      ctx.globalAlpha = 1;
      
      // Create special effects based on variant
      createQuantumEntanglement();
      createHolographicGrid();
      createNeuralNetwork();
      createCyberpunkMatrix();
      createSpaceNebula();
      
      // Add floating geometric shapes
              if (intensity > 0.5) {
        const time = Date.now() * 0.001;
        
        // Floating triangles
        for (let i = 0; i < 3; i++) {
          const x = (i * 300 + time * 30) % canvas.width;
          const y = (i * 200 + time * 20) % canvas.height;
          
          ctx.beginPath();
          ctx.moveTo(x, y - 20);
          ctx.lineTo(x - 15, y + 10);
          ctx.lineTo(x + 15, y + 10);
          ctx.closePath();
          ctx.strokeStyle = `rgba(0, 255, 255, ${0.3 + Math.sin(time + i) * 0.2})`;
          ctx.lineWidth = 2;
          ctx.stroke();
        }
        
        // Floating circles
        for (let i = 0; i < 2; i++) {
          const x = (i * 400 + time * 25) % canvas.width;
          const y = (i * 300 + time * 15) % canvas.height;
          
          ctx.beginPath();
          ctx.arc(x, y, 15, 0, Math.PI * 2);
          ctx.strokeStyle = `rgba(255, 0, 255, ${0.3 + Math.sin(time + i) * 0.2})`;
          ctx.lineWidth = 2;
          ctx.stroke();
        }
      }

      // Draw quantum entanglement lines
      drawQuantumEntanglement(ctx, particles);

      // Draw neural network connections
      drawNeuralConnections(ctx, particles);

      // Draw holographic grid
      drawHolographicGrid(ctx);
=======
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4

      animationRef.current = requestAnimationFrame(animate);
    };

<<<<<<< HEAD
    const drawQuantumParticle = (ctx: CanvasRenderingContext2D, particle: any) => {
      ctx.fillStyle = particle.color;
      ctx.beginPath();
      ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
      ctx.fill();

      // Quantum glow effect
      ctx.shadowColor = particle.color;
      ctx.shadowBlur = 20;
      ctx.beginPath();
      ctx.arc(particle.x, particle.y, particle.size * 2, 0, Math.PI * 2);
      ctx.stroke();
      ctx.shadowBlur = 0;
    };

    const drawHolographicParticle = (ctx: CanvasRenderingContext2D, particle: any) => {
      const alpha = particle.life / particle.maxLife;
      ctx.strokeStyle = particle.color;
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(particle.x - particle.size, particle.y);
      ctx.lineTo(particle.x + particle.size, particle.y);
      ctx.moveTo(particle.x, particle.y - particle.size);
      ctx.lineTo(particle.x, particle.y + particle.size);
      ctx.stroke();

      // Holographic rings
      for (let i = 1; i <= 3; i++) {
        ctx.strokeStyle = `${particle.color}${Math.floor(alpha * 255).toString(16).padStart(2, '0')}`;
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * i, 0, Math.PI * 2);
        ctx.stroke();
      }
    };

    const drawNeuralParticle = (ctx: CanvasRenderingContext2D, particle: any) => {
      const alpha = particle.life / particle.maxLife;
      ctx.fillStyle = particle.color;
      ctx.beginPath();
      ctx.rect(particle.x - particle.size/2, particle.y - particle.size/2, particle.size, particle.size);
      ctx.fill();

      // Neural connections
      ctx.strokeStyle = particle.color;
      ctx.lineWidth = 1;
      particles.forEach(otherParticle => {
        if (otherParticle !== particle && otherParticle.type === 'neural') {
          const distance = Math.sqrt(
            Math.pow(particle.x - otherParticle.x, 2) + 
            Math.pow(particle.y - otherParticle.y, 2)
          );
          if (distance < 100) {
            ctx.globalAlpha = (100 - distance) / 100 * alpha;
            ctx.beginPath();
            ctx.moveTo(particle.x, particle.y);
            ctx.lineTo(otherParticle.x, otherParticle.y);
            ctx.stroke();
          }
        }
      });
    };

    const drawCyberpunkParticle = (ctx: CanvasRenderingContext2D, particle: any) => {
      ctx.strokeStyle = particle.color;
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.moveTo(particle.x - particle.size, particle.y - particle.size);
      ctx.lineTo(particle.x + particle.size, particle.y + particle.size);
      ctx.moveTo(particle.x + particle.size, particle.y - particle.size);
      ctx.lineTo(particle.x - particle.size, particle.y + particle.size);
      ctx.stroke();

      // Cyberpunk energy field
      ctx.strokeStyle = particle.color;
      ctx.lineWidth = 1;
      for (let i = 0; i < 8; i++) {
        const angle = (i / 8) * Math.PI * 2;
        const x = particle.x + Math.cos(angle) * particle.size * 2;
        const y = particle.y + Math.sin(angle) * particle.size * 2;
        ctx.beginPath();
        ctx.moveTo(particle.x, particle.y);
        ctx.lineTo(x, y);
        ctx.stroke();
      }
    };

    const drawQuantumEntanglement = (ctx: CanvasRenderingContext2D, particles: any[]) => {
      ctx.strokeStyle = 'rgba(0, 255, 255, 0.3)';
      ctx.lineWidth = 1;
      
      particles.forEach((particle, i) => {
        if (particle.type === 'quantum') {
          particles.slice(i + 1).forEach(otherParticle => {
            if (otherParticle.type === 'quantum') {
              const distance = Math.sqrt(
                Math.pow(particle.x - otherParticle.x, 2) + 
                Math.pow(particle.y - otherParticle.y, 2)
              );
              if (distance < 150) {
                ctx.globalAlpha = (150 - distance) / 150 * 0.3;
                ctx.beginPath();
                ctx.moveTo(particle.x, particle.y);
                ctx.lineTo(otherParticle.x, otherParticle.y);
                ctx.stroke();
              }
            }
          });
        }
      });
    };

    const drawNeuralConnections = (ctx: CanvasRenderingContext2D, particles: any[]) => {
      ctx.strokeStyle = 'rgba(255, 0, 255, 0.2)';
      ctx.lineWidth = 1;
      
      particles.forEach((particle, i) => {
        if (particle.type === 'neural') {
          particles.slice(i + 1).forEach(otherParticle => {
            if (otherParticle.type === 'neural') {
              const distance = Math.sqrt(
                Math.pow(particle.x - otherParticle.x, 2) + 
                Math.pow(particle.y - otherParticle.y, 2)
              );
              if (distance < 120) {
                ctx.globalAlpha = (120 - distance) / 120 * 0.2;
                ctx.beginPath();
                ctx.moveTo(particle.x, particle.y);
                ctx.lineTo(otherParticle.x, otherParticle.y);
                ctx.stroke();
              }
            }
          });
        }
      });
    };

    const drawHolographicGrid = (ctx: CanvasRenderingContext2D) => {
      ctx.strokeStyle = 'rgba(0, 255, 255, 0.1)';
      ctx.lineWidth = 0.5;
      
      const gridSize = 50;
      for (let x = 0; x < canvas.width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
      }
      for (let y = 0; y < canvas.height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }
    };

    // Handle resize
=======
    animate();

>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    window.addEventListener('resize', handleResize);
<<<<<<< HEAD
    createParticles();
    animate();

    return () => {
      window.removeEventListener('resize', handleResize);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
=======

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      window.removeEventListener('resize', handleResize);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
    };
  }, [variant, intensity]);

  return (
<<<<<<< HEAD
    <div className="relative min-h-screen bg-black overflow-hidden">
      {/* Animated Canvas Background */}
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{ zIndex: 0 }}
=======
    <div className={`relative min-h-screen overflow-hidden ${className}`}>
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{
          background: variant === 'cyberpunk' 
            ? 'linear-gradient(135deg, #000000 0%, #1a1a2e 50%, #16213e 100%)'
            : variant === 'quantum'
            ? 'linear-gradient(135deg, #000000 0%, #0f172a 50%, #1e293b 100%)'
            : variant === 'holographic'
            ? 'linear-gradient(135deg, #000000 0%, #1a1a2e 50%, #0f3460 100%)'
            : 'linear-gradient(135deg, #000000 0%, #1a1a2e 50%, #16213e 100%)'
        }}
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
      />
      
      {/* Additional overlay effects */}
      <div className="absolute inset-0 pointer-events-none z-10">
<<<<<<< HEAD
        {/* Gradient overlays */}
        <div 
          className="absolute inset-0 opacity-20"
          style={{
            background: getOverlayGradient(variant),
          }}
        />
        
        {/* Animated light rays */}
        {intensity > 0.5 && (
          <div className="absolute inset-0">
            {[...Array(5)].map((_, i) => (
              <div
                key={i}
                className="absolute w-px h-full bg-gradient-to-b from-transparent via-white to-transparent opacity-10"
                style={{
                  left: `${(i * 20) % 100}%`,
                  animation: `lightRay ${3 + i}s linear infinite`,
                  animationDelay: `${i * 0.5}s`,
                }}
              />
            ))}
          </div>
        )}
      </div>
      
      {/* Quantum Field Lines */}
      <div className="absolute inset-0 z-20">
        <div className="absolute top-0 left-0 w-full h-full">
          {[...Array(20)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-px h-full bg-gradient-to-b from-transparent via-cyan-400 to-transparent opacity-20"
              style={{
                left: `${(i / 20) * 100}%`,
                transform: 'translateX(-50%)'
              }}
              animate={{
                opacity: [0.1, 0.3, 0.1],
                scaleY: [0.8, 1.2, 0.8]
              }}
              transition={{
                duration: 3 + i * 0.2,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
          ))}
        </div>
        
        <div className="absolute top-0 left-0 w-full h-full">
          {[...Array(15)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-full h-px bg-gradient-to-r from-transparent via-purple-400 to-transparent opacity-20"
              style={{
                top: `${(i / 15) * 100}%`,
                transform: 'translateY(-50%)'
              }}
              animate={{
                opacity: [0.1, 0.3, 0.1],
                scaleX: [0.8, 1.2, 0.8]
              }}
              transition={{
                duration: 4 + i * 0.3,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
          ))}
        </div>
      </div>

      {/* Floating Geometric Shapes */}
      <div className="absolute inset-0 z-30 pointer-events-none">
        {[...Array(8)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-cyan-400 rounded-full"
            style={{
              left: `${20 + (i * 10)}%`,
              top: `${15 + (i * 8)}%`
            }}
            animate={{
              y: [0, -20, 0],
              opacity: [0.3, 1, 0.3],
              scale: [0.5, 1.5, 0.5]
            }}
            transition={{
              duration: 4 + i * 0.5,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
        ))}
        
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-3 h-3 border border-purple-400 rotate-45"
            style={{
              right: `${25 + (i * 12)}%`,
              top: `${20 + (i * 10)}%`
            }}
            animate={{
              rotate: [0, 360],
              opacity: [0.2, 0.8, 0.2],
              scale: [0.8, 1.2, 0.8]
            }}
            transition={{
              duration: 6 + i * 0.8,
              repeat: Infinity,
              ease: "linear"
            }}
          />
        ))}
      </div>

      {/* Content */}
      <div className="relative z-40">
        {children}
      </div>
      
      {/* Ambient lighting effects */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-0 left-0 w-full h-32 bg-gradient-to-b from-cyan-500/5 to-transparent"></div>
        <div className="absolute bottom-0 left-0 w-full h-32 bg-gradient-to-t from-purple-500/5 to-transparent"></div>
        <div className="absolute top-0 left-0 w-32 h-full bg-gradient-to-r from-blue-500/5 to-transparent"></div>
        <div className="absolute top-0 right-0 w-32 h-full bg-gradient-to-l from-pink-500/5 to-transparent"></div>
      </div>
=======
        {/* Glowing orbs */}
        {variant === 'holographic' && (
          <>
            <div className="absolute top-20 left-20 w-32 h-32 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full opacity-20 blur-xl animate-pulse" />
            <div className="absolute bottom-20 right-20 w-24 h-24 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full opacity-20 blur-xl animate-pulse delay-1000" />
            <div className="absolute top-1/2 left-1/3 w-20 h-20 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full opacity-20 blur-xl animate-pulse delay-2000" />
          </>
        )}
        
        {/* Neural network overlay */}
        {variant === 'neural' && (
          <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 via-purple-500/5 to-cyan-500/5" />
        )}
        
        {/* Quantum field overlay */}
        {variant === 'quantum' && (
          <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/5 via-blue-500/5 to-indigo-500/5" />
        )}
        
        {/* Cyberpunk scan lines */}
        {variant === 'cyberpunk' && (
          <div className="absolute inset-0 bg-gradient-to-b from-transparent via-red-500/5 to-transparent animate-pulse" />
        )}
      </div>
      
      {/* Content */}
      <div className="relative z-20">
        {children}
      </div>
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
    </div>
  );
};

<<<<<<< HEAD
const getBackgroundGradient = (variant: string) => {
  switch (variant) {
    case 'quantum':
      return 'linear-gradient(135deg, #0f0f23 0%, #1a1a3a 25%, #2d1b69 50%, #1a1a3a 75%, #0f0f23 100%)';
    case 'holographic':
      return 'linear-gradient(135deg, #1a0033 0%, #330066 25%, #6600cc 50%, #330066 75%, #1a0033 100%)';
    case 'neural':
      return 'linear-gradient(135deg, #0a1a0a 0%, #1a3a1a 25%, #2d692d 50%, #1a3a1a 75%, #0a1a0a 100%)';
    case 'cyberpunk':
      return 'linear-gradient(135deg, #1a0a0a 0%, #3a1a1a 25%, #692d2d 50%, #3a1a1a 75%, #1a0a0a 100%)';
    case 'space':
      return 'linear-gradient(135deg, #0a0a1a 0%, #1a1a3a 25%, #2d2d69 50%, #1a1a3a 75%, #0a0a1a 100%)';
    default:
      return 'linear-gradient(135deg, #0f0f23 0%, #1a1a3a 25%, #2d1b69 50%, #1a1a3a 75%, #0f0f23 100%)';
  }
};

const getOverlayGradient = (variant: string) => {
  switch (variant) {
    case 'quantum':
      return 'radial-gradient(circle at 50% 50%, rgba(0, 255, 255, 0.1) 0%, transparent 70%)';
    case 'holographic':
      return 'radial-gradient(circle at 50% 50%, rgba(138, 43, 226, 0.1) 0%, transparent 70%)';
    case 'neural':
      return 'radial-gradient(circle at 50% 50%, rgba(0, 255, 127, 0.1) 0%, transparent 70%)';
    case 'cyberpunk':
      return 'radial-gradient(circle at 50% 50%, rgba(255, 0, 0, 0.1) 0%, transparent 70%)';
    case 'space':
      return 'radial-gradient(circle at 50% 50%, rgba(138, 43, 226, 0.1) 0%, transparent 70%)';
    default:
      return 'radial-gradient(circle at 50% 50%, rgba(0, 255, 255, 0.1) 0%, transparent 70%)';
  }
};

=======
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-49d4
export default UltraFuturisticBackground;