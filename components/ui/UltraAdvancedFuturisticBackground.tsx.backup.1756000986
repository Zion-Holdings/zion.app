import React, { useEffect, useRef } from 'react';
import { motion } from 'framer-motion';

interface UltraAdvancedFuturisticBackgroundProps {
<<<<<<< HEAD
  children: React.ReactNode;
  variant?: 'quantum' | 'holographic' | 'neural' | 'cyberpunk' | 'space' | 'ai' | 'fusion';
  intensity?: number;
  className?: string;
}

const UltraAdvancedFuturisticBackground: React.FC<UltraAdvancedFuturisticBackgroundProps> = ({
  children,
  variant = 'quantum',
  intensity = 1,
  className = ''
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
=======
  intensity?: 'low' | 'medium' | 'high';
  children: React.ReactNode;
  variant?: 'quantum-holographic' | 'neural-cyberpunk' | 'quantum-space' | 'holographic-matrix' | 'neural-quantum-cyberpunk';
  intensity?: 'low' | 'medium' | 'high';
}

export default function UltraAdvancedFuturisticBackground({ 
  children, 
  variant = 'quantum-holographic',
  intensity = 'medium'
}: UltraAdvancedFuturisticBackgroundProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const particlesRef = useRef<any[]>([]);
>>>>>>> origin/cursor/expand-services-and-deploy-updates-0ea6
  const animationRef = useRef<number | undefined>(undefined);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

<<<<<<< HEAD
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles: Array<{
=======
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Particle system
    class Particle {
>>>>>>> origin/cursor/expand-services-and-deploy-updates-0ea6
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
<<<<<<< HEAD
      opacity: number;
      color: string;
      type: string;
    }> = [];

    const colors = {
      quantum: ['#00ffff', '#ff00ff', '#ffff00', '#00ff00', '#ff0080', '#8000ff'],
      holographic: ['#ff1493', '#00bfff', '#32cd32', '#ffd700', '#ff4500', '#9370db'],
      neural: ['#ff69b4', '#00ced1', '#98fb98', '#f0e68c', '#ff6347', '#dda0dd'],
      cyberpunk: ['#ff0080', '#00ff80', '#8000ff', '#ff8000', '#00ffff', '#ff0080'],
      space: ['#1e90ff', '#ff1493', '#00ff7f', '#ffd700', '#ff4500', '#9370db'],
      ai: ['#00bfff', '#ff69b4', '#32cd32', '#ffd700', '#ff6347', '#dda0dd'],
      fusion: ['#ff1493', '#00ffff', '#ffd700', '#ff4500', '#9370db', '#32cd32']
    };

    const selectedColors = colors[variant] || colors.quantum;

    // Create particles
    for (let i = 0; i < 150 * intensity; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 2 * intensity,
        vy: (Math.random() - 0.5) * 2 * intensity,
        size: Math.random() * 3 * intensity + 1,
        opacity: Math.random() * 0.8 + 0.2,
        color: selectedColors[Math.floor(Math.random() * selectedColors.length)],
        type: Math.random() > 0.5 ? 'particle' : 'wave'
      });
    }

    // Create quantum entanglement effects
    const createEntanglement = () => {
      for (let i = 0; i < particles.length; i += 2) {
        if (i + 1 < particles.length) {
          const p1 = particles[i];
          const p2 = particles[i + 1];
          
          // Create quantum connection
          ctx.beginPath();
          ctx.strokeStyle = `rgba(0, 255, 255, ${0.1 * intensity})`;
          ctx.lineWidth = 1;
          ctx.moveTo(p1.x, p1.y);
          ctx.lineTo(p2.x, p2.y);
          ctx.stroke();
        }
      }
    };

    // Create neural network effects
    const createNeuralConnections = () => {
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const p1 = particles[i];
          const p2 = particles[j];
          const distance = Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);
          
          if (distance < 100 * intensity) {
            const opacity = (100 - distance) / 100 * 0.3 * intensity;
            ctx.beginPath();
            ctx.strokeStyle = `rgba(255, 105, 180, ${opacity})`;
            ctx.lineWidth = 0.5;
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
          }
        }
      }
    };

    // Create holographic effects
    const createHolographicRings = () => {
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      
      for (let i = 0; i < 5; i++) {
        const radius = (i + 1) * 100 * intensity;
        const opacity = (5 - i) / 5 * 0.2 * intensity;
        
        ctx.beginPath();
        ctx.strokeStyle = `rgba(255, 20, 147, ${opacity})`;
        ctx.lineWidth = 2;
        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
        ctx.stroke();
      }
    };

    // Create space-time distortion
    const createSpaceTimeDistortion = () => {
      const time = Date.now() * 0.001;
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      
      for (let i = 0; i < 20; i++) {
        const angle = (i / 20) * Math.PI * 2 + time;
        const radius = 150 * intensity;
        const x = centerX + Math.cos(angle) * radius;
        const y = centerY + Math.sin(angle) * radius;
        
        ctx.beginPath();
        ctx.fillStyle = `rgba(30, 144, 255, ${0.6 * intensity})`;
        ctx.arc(x, y, 3, 0, Math.PI * 2);
        ctx.fill();
      }
    };
=======
      life: number;
      maxLife: number;
      color: string;
      type: string;

      constructor(x: number, y: number, type: string = 'quantum') {
        this.x = x;
        this.y = y;
        this.vx = (Math.random() - 0.5) * 2;
        this.vy = (Math.random() - 0.5) * 2;
        this.size = Math.random() * 3 + 1;
        this.life = 1;
        this.maxLife = Math.random() * 100 + 50;
        this.type = type;
        
        switch (type) {
          case 'quantum':
            this.color = `hsl(${180 + Math.random() * 60}, 100%, 70%)`;
            break;
          case 'holographic':
            this.color = `hsl(${270 + Math.random() * 60}, 100%, 70%)`;
            break;
          case 'neural':
            this.color = `hsl(${120 + Math.random() * 60}, 100%, 70%)`;
            break;
          case 'cyberpunk':
            this.color = `hsl(${0 + Math.random() * 60}, 100%, 70%)`;
            break;
          default:
            this.color = `hsl(${180 + Math.random() * 60}, 100%, 70%)`;
        }
      }

      update() {
        this.x += this.vx;
        this.y += this.vy;
        this.life += 1;
        
        // Bounce off edges
        if (this.x <= 0 || this.x >= canvas.width) this.vx *= -1;
        if (this.y <= 0 || this.y >= canvas.height) this.vy *= -1;
        
        // Add some quantum randomness
        if (Math.random() < 0.01) {
          this.vx += (Math.random() - 0.5) * 0.5;
          this.vy += (Math.random() - 0.5) * 0.5;
        }
      }

      draw(ctx: CanvasRenderingContext2D) {
        const alpha = 1 - (this.life / this.maxLife);
        ctx.save();
        ctx.globalAlpha = alpha;
        
        if (this.type === 'quantum') {
          // Quantum particle effect
          ctx.shadowColor = this.color;
          ctx.shadowBlur = 20;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fillStyle = this.color;
          ctx.fill();
          
          // Quantum entanglement lines
          if (Math.random() < 0.1) {
            ctx.beginPath();
            ctx.moveTo(this.x, this.y);
            ctx.lineTo(this.x + this.vx * 10, this.y + this.vy * 10);
            ctx.strokeStyle = this.color;
            ctx.lineWidth = 1;
            ctx.stroke();
          }
        } else if (this.type === 'holographic') {
          // Holographic effect
          ctx.shadowColor = this.color;
          ctx.shadowBlur = 15;
          ctx.strokeStyle = this.color;
          ctx.lineWidth = 2;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.stroke();
        } else if (this.type === 'neural') {
          // Neural network effect
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.rect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);
          ctx.fill();
        } else if (this.type === 'cyberpunk') {
          // Cyberpunk effect
          ctx.strokeStyle = this.color;
          ctx.lineWidth = 1;
          ctx.beginPath();
          ctx.moveTo(this.x - this.size, this.y);
          ctx.lineTo(this.x + this.size, this.y);
          ctx.moveTo(this.x, this.y - this.size);
          ctx.lineTo(this.x, this.y + this.size);
          ctx.stroke();
        }
        
        ctx.restore();
      }
    }

    // Initialize particles based on variant
    const initParticles = () => {
      particlesRef.current = [];
      const particleCount = intensity === 'high' ? 200 : intensity === 'medium' ? 150 : 100;
      
      for (let i = 0; i < particleCount; i++) {
        let type = 'quantum';
        switch (variant) {
          case 'quantum-holographic':
            type = Math.random() < 0.5 ? 'quantum' : 'holographic';
            break;
          case 'neural-cyberpunk':
            type = Math.random() < 0.5 ? 'neural' : 'cyberpunk';
            break;
          case 'quantum-space':
            type = Math.random() < 0.7 ? 'quantum' : 'holographic';
            break;
          case 'holographic-matrix':
            type = Math.random() < 0.6 ? 'holographic' : 'neural';
            break;
                      case 'neural-quantum-cyberpunk': {
              const rand = Math.random();
              if (rand < 0.33) type = 'neural';
              else if (rand < 0.66) type = 'quantum';
              else type = 'cyberpunk';
              break;
            }
          default:
            type = 'quantum';
        }
        
        particlesRef.current.push(new Particle(
          Math.random() * canvas.width,
          Math.random() * canvas.height,
          type
        ));
      }
    };

    initParticles();
>>>>>>> origin/cursor/expand-services-and-deploy-updates-0ea6

    // Animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
<<<<<<< HEAD

      // Update and draw particles
      particles.forEach((particle, index) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;

        // Bounce off edges
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;

        // Wrap around edges
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;

        // Draw particle
        ctx.beginPath();
        ctx.fillStyle = `${particle.color}${Math.floor(particle.opacity * 255).toString(16).padStart(2, '0')}`;
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();

        // Create particle trails
        if (particle.type === 'wave') {
          ctx.beginPath();
          ctx.strokeStyle = `${particle.color}${Math.floor(particle.opacity * 0.3 * 255).toString(16).padStart(2, '0')}`;
          ctx.lineWidth = particle.size * 0.5;
          ctx.moveTo(particle.x, particle.y);
          ctx.lineTo(particle.x - particle.vx * 5, particle.y - particle.vy * 5);
          ctx.stroke();
        }
      });

      // Create special effects based on variant
      switch (variant) {
        case 'quantum':
          createEntanglement();
          break;
        case 'neural':
          createNeuralConnections();
          break;
        case 'holographic':
          createHolographicRings();
          break;
        case 'space':
          createSpaceTimeDistortion();
          break;
        case 'ai':
          createNeuralConnections();
          createEntanglement();
          break;
        case 'fusion':
          createEntanglement();
          createNeuralConnections();
          createHolographicRings();
          createSpaceTimeDistortion();
          break;
        default:
          createEntanglement();
=======
      
      // Draw background gradients
      const gradient = ctx.createRadialGradient(
        canvas.width / 2, canvas.height / 2, 0,
        canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height) / 2
      );
      
      switch (variant) {
        case 'quantum-holographic':
          gradient.addColorStop(0, 'rgba(0, 255, 255, 0.1)');
          gradient.addColorStop(0.5, 'rgba(139, 92, 246, 0.05)');
          gradient.addColorStop(1, 'rgba(0, 0, 0, 0.8)');
          break;
        case 'neural-cyberpunk':
          gradient.addColorStop(0, 'rgba(16, 185, 129, 0.1)');
          gradient.addColorStop(0.5, 'rgba(236, 73, 153, 0.05)');
          gradient.addColorStop(1, 'rgba(0, 0, 0, 0.8)');
          break;
        case 'quantum-space':
          gradient.addColorStop(0, 'rgba(0, 255, 255, 0.15)');
          gradient.addColorStop(0.3, 'rgba(59, 130, 246, 0.1)');
          gradient.addColorStop(0.7, 'rgba(139, 92, 246, 0.05)');
          gradient.addColorStop(1, 'rgba(0, 0, 0, 0.9)');
          break;
        case 'holographic-matrix':
          gradient.addColorStop(0, 'rgba(139, 92, 246, 0.1)');
          gradient.addColorStop(0.4, 'rgba(16, 185, 129, 0.05)');
          gradient.addColorStop(0.8, 'rgba(236, 73, 153, 0.05)');
          gradient.addColorStop(1, 'rgba(0, 0, 0, 0.85)');
          break;
        case 'neural-quantum-cyberpunk':
          gradient.addColorStop(0, 'rgba(16, 185, 129, 0.1)');
          gradient.addColorStop(0.33, 'rgba(0, 255, 255, 0.05)');
          gradient.addColorStop(0.66, 'rgba(236, 73, 153, 0.05)');
          gradient.addColorStop(1, 'rgba(0, 0, 0, 0.9)');
          break;
        default:
          gradient.addColorStop(0, 'rgba(0, 255, 255, 0.1)');
          gradient.addColorStop(1, 'rgba(0, 0, 0, 0.8)');
      }
      
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Update and draw particles
      particlesRef.current.forEach((particle, index) => {
        particle.update();
        particle.draw(ctx);
        
        // Remove dead particles and add new ones
        if (particle.life >= particle.maxLife) {
          particlesRef.current.splice(index, 1);
          let type = 'quantum';
          switch (variant) {
            case 'quantum-holographic':
              type = Math.random() < 0.5 ? 'quantum' : 'holographic';
              break;
            case 'neural-cyberpunk':
              type = Math.random() < 0.5 ? 'neural' : 'cyberpunk';
              break;
            case 'quantum-space':
              type = Math.random() < 0.7 ? 'quantum' : 'holographic';
              break;
            case 'holographic-matrix':
              type = Math.random() < 0.6 ? 'holographic' : 'neural';
              break;
            case 'neural-quantum-cyberpunk': {
              const rand = Math.random();
              if (rand < 0.33) type = 'neural';
              else if (rand < 0.66) type = 'quantum';
              else type = 'cyberpunk';
              break;
            }
            default:
              type = 'quantum';
          }
          particlesRef.current.push(new Particle(
            Math.random() * canvas.width,
            Math.random() * canvas.height,
            type
          ));
        }
      });

      // Draw quantum field lines
      if (variant.includes('quantum') && intensity !== 'low') {
        ctx.strokeStyle = 'rgba(0, 255, 255, 0.1)';
        ctx.lineWidth = 1;
        for (let i = 0; i < 5; i++) {
          ctx.beginPath();
          ctx.moveTo(Math.random() * canvas.width, 0);
          ctx.lineTo(Math.random() * canvas.width, canvas.height);
          ctx.stroke();
        }
      }

      // Draw holographic grid
      if (variant.includes('holographic') && intensity !== 'low') {
        ctx.strokeStyle = 'rgba(139, 92, 246, 0.1)';
        ctx.lineWidth = 1;
        const gridSize = 100;
        for (let x = 0; x < canvas.width; x += gridSize) {
          ctx.beginPath();
          ctx.moveTo(x, 0);
          ctx.lineTo(x, canvas.height);
          ctx.stroke();
        }
        for (let y = 0; y < canvas.height; y += gridSize) {
          ctx.beginPath();
          ctx.moveTo(0, y);
          ctx.lineTo(canvas.width, y);
          ctx.stroke();
        }
>>>>>>> origin/cursor/expand-services-and-deploy-updates-0ea6
      }

      animationRef.current = requestAnimationFrame(animate);
    };

    animate();

<<<<<<< HEAD
    // Handle resize
    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    window.addEventListener('resize', handleResize);

    return () => {
=======
    return () => {
      window.removeEventListener('resize', resizeCanvas);
>>>>>>> origin/cursor/expand-services-and-deploy-updates-0ea6
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      window.removeEventListener('resize', handleResize);
    };
  }, [variant, intensity]);

  return (
<<<<<<< HEAD
    <div className={`relative min-h-screen overflow-hidden ${className}`}>
      {/* Animated Background Canvas */}
=======
    <div className="relative min-h-screen overflow-hidden">
      {/* Canvas Background */}
>>>>>>> origin/cursor/expand-services-and-deploy-updates-0ea6
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{ filter: 'blur(0.5px)' }}
      />
      
<<<<<<< HEAD
      {/* Gradient Overlays */}
      <div className="absolute inset-0 z-0">
        <div className="absolute inset-0 bg-gradient-to-br from-black/80 via-purple-900/20 to-blue-900/20" />
        <div className="absolute inset-0 bg-gradient-to-tl from-black/60 via-cyan-900/10 to-pink-900/10" />
      </div>

      {/* Floating Geometric Shapes */}
      <div className="absolute inset-0 z-0 overflow-hidden">
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              x: [0, Math.random() * 100 - 50, 0],
              y: [0, Math.random() * 100 - 50, 0],
              rotate: [0, 360],
              scale: [0.5, 1.5, 0.5],
            }}
            transition={{
              duration: 10 + Math.random() * 20,
              repeat: Infinity,
              ease: "linear",
            }}
          >
            <div
              className={`w-2 h-2 ${
                i % 4 === 0 ? 'bg-cyan-400' :
                i % 4 === 1 ? 'bg-purple-400' :
                i % 4 === 2 ? 'bg-pink-400' :
                'bg-blue-400'
              } rounded-full opacity-30`}
            />
          </motion.div>
        ))}
      </div>

=======
      {/* Overlay Effects */}
      <div className="absolute inset-0 pointer-events-none z-0">
        {/* Quantum Ripple Effect */}
        {variant.includes('quantum') && (
          <motion.div
            className="absolute inset-0"
            animate={{
              background: [
                'radial-gradient(circle at 20% 80%, rgba(0, 255, 255, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 80% 20%, rgba(0, 255, 255, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 20% 80%, rgba(0, 255, 255, 0.05) 0%, transparent 50%)'
              ]
            }}
            transition={{ duration: 8, repeat: Infinity, ease: "easeInOut" }}
          />
        )}
        
        {/* Holographic Matrix Effect */}
        {variant.includes('holographic') && (
          <motion.div
            className="absolute inset-0"
            animate={{
              background: [
                'radial-gradient(circle at 40% 40%, rgba(139, 92, 246, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 60% 60%, rgba(139, 92, 246, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 40% 40%, rgba(139, 92, 246, 0.05) 0%, transparent 50%)'
              ]
            }}
            transition={{ duration: 10, repeat: Infinity, ease: "easeInOut" }}
          />
        )}
        
        {/* Neural Network Effect */}
        {variant.includes('neural') && (
          <motion.div
            className="absolute inset-0"
            animate={{
              background: [
                'radial-gradient(circle at 30% 70%, rgba(16, 185, 129, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 70% 30%, rgba(16, 185, 129, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 30% 70%, rgba(16, 185, 129, 0.05) 0%, transparent 50%)'
              ]
            }}
            transition={{ duration: 12, repeat: Infinity, ease: "easeInOut" }}
          />
        )}
        
        {/* Cyberpunk Effect */}
        {variant.includes('cyberpunk') && (
          <motion.div
            className="absolute inset-0"
            animate={{
              background: [
                'radial-gradient(circle at 10% 90%, rgba(236, 73, 153, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 90% 10%, rgba(236, 73, 153, 0.05) 0%, transparent 50%)',
                'radial-gradient(circle at 10% 90%, rgba(236, 73, 153, 0.05) 0%, transparent 50%)'
              ]
            }}
            transition={{ duration: 6, repeat: Infinity, ease: "easeInOut" }}
          />
        )}
      </div>
      
>>>>>>> origin/cursor/expand-services-and-deploy-updates-0ea6
      {/* Content */}
      <div className="relative z-10">
        {children}
      </div>
    </div>
  );
}