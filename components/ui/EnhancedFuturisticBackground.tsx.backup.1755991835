import React, { useEffect, useRef } from 'react';
import { cn } from '../../utils/cn';

interface EnhancedFuturisticBackgroundProps {
  children: React.ReactNode;
<<<<<<< HEAD
  variant?: 'quantum-holographic-advanced' | 'neural-network' | 'cyberpunk-matrix' | 'quantum-advanced' | 'holographic-advanced' | 'neural-advanced' | 'cyberpunk-advanced';
=======
  variant?: 'neural' | 'quantum' | 'holographic' | 'cyberpunk' | 'space' | 'biotech' | 'energy';
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850
  intensity?: 'low' | 'medium' | 'high';
  className?: string;
}

const EnhancedFuturisticBackground: React.FC<EnhancedFuturisticBackgroundProps> = ({
  children,
  variant = 'quantum-holographic-advanced',
  intensity = 'medium',
  className
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | null>(null);

  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

<<<<<<< HEAD
    // Enhanced particle system
=======
    // Enhanced animation variables
    let time = 0;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850
    const particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      opacity: number;
      color: string;
<<<<<<< HEAD
      type: 'quantum' | 'holographic' | 'neural' | 'cyberpunk';
    }> = [];

    const colors = {
      quantum: ['#3b82f6', '#06b6d4', '#0891b2'],
      holographic: ['#8b5cf6', '#a855f7', '#c084fc'],
      neural: ['#10b981', '#059669', '#047857'],
      cyberpunk: ['#ef4444', '#dc2626', '#b91c1c']
    };

    const getParticleColor = (type: string) => {
      const colorSet = colors[type as keyof typeof colors] || colors.quantum;
      return colorSet[Math.floor(Math.random() * colorSet.length)];
    };

    // Initialize particles
    const initParticles = () => {
      particles.length = 0;
      const particleCount = intensity === 'high' ? 200 : intensity === 'medium' ? 120 : 80;
=======
      type: string;
      rotation: number;
      rotationSpeed: number;
      pulse: number;
      connections: number[];
    }> = [];

    // Create enhanced particles based on variant
    const createParticles = () => {
      const particleCount = intensity === 'high' ? 300 : intensity === 'medium' ? 180 : 90;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850
      
      for (let i = 0; i < particleCount; i++) {
        const type = ['quantum', 'holographic', 'neural', 'cyberpunk'][Math.floor(Math.random() * 4)] as any;
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
<<<<<<< HEAD
          vx: (Math.random() - 0.5) * (intensity === 'high' ? 2 : intensity === 'medium' ? 1.5 : 1),
          vy: (Math.random() - 0.5) * (intensity === 'high' ? 2 : intensity === 'medium' ? 1.5 : 1),
          size: Math.random() * (intensity === 'high' ? 4 : intensity === 'medium' ? 3 : 2) + 1,
          opacity: Math.random() * 0.8 + 0.2,
          color: getParticleColor(type),
          type
=======
          vx: (Math.random() - 0.5) * 3,
          vy: (Math.random() - 0.5) * 3,
          size: Math.random() * 4 + 1,
          life: Math.random() * 100,
          maxLife: 100,
          color: getParticleColor(variant),
          type: variant,
          rotation: Math.random() * Math.PI * 2,
          rotationSpeed: (Math.random() - 0.5) * 0.1,
          pulse: Math.random() * Math.PI * 2,
          connections: []
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850
        });
      }
    };

<<<<<<< HEAD
    // Enhanced animation loop
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
=======
    const getParticleColor = (variant: string): string => {
      switch (variant) {
        case 'neural':
          return `hsl(${200 + Math.sin(time * 0.01) * 60}, 70%, 60%)`;
        case 'quantum':
          return `hsl(${280 + Math.sin(time * 0.02) * 80}, 80%, 70%)`;
        case 'holographic':
          return `hsl(${160 + Math.sin(time * 0.015) * 100}, 90%, 65%)`;
        case 'cyberpunk':
          return `hsl(${0 + Math.sin(time * 0.03) * 60}, 100%, 60%)`;
        case 'space':
          return `hsl(${220 + Math.sin(time * 0.025) * 40}, 85%, 70%)`;
        case 'biotech':
          return `hsl(${120 + Math.sin(time * 0.018) * 80}, 75%, 65%)`;
        case 'energy':
          return `hsl(${45 + Math.sin(time * 0.022) * 60}, 90%, 60%)`;
        default:
          return `hsl(${200 + Math.sin(time * 0.01) * 60}, 70%, 60%)`;
      }
    };

    // Enhanced drawing functions
    const drawNeuralNetwork = () => {
      ctx.strokeStyle = `rgba(100, 200, 255, ${0.1 + Math.sin(time * 0.005) * 0.1})`;
      ctx.lineWidth = 1;

      for (let i = 0; i < particles.length; i += 3) {
        for (let j = i + 3; j < particles.length; j += 3) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 150) {
            const opacity = Math.max(0, 1 - distance / 150);
            ctx.strokeStyle = `rgba(100, 200, 255, ${opacity * 0.2})`;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
        }
      }
    };

    const drawQuantumField = () => {
      ctx.strokeStyle = `rgba(200, 100, 255, ${0.15 + Math.sin(time * 0.008) * 0.1})`;
      ctx.lineWidth = 2;

      for (let i = 0; i < particles.length; i++) {
        const particle = particles[i];
        const waveRadius = (time * 0.5 + particle.life) % 200;
        
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, waveRadius, 0, Math.PI * 2);
        ctx.stroke();
      }
    };

    const drawHolographicGrid = () => {
      const gridSize = 50;
      const offset = time * 0.5;
      
      ctx.strokeStyle = `rgba(100, 255, 200, ${0.1 + Math.sin(time * 0.003) * 0.05})`;
      ctx.lineWidth = 1;

      for (let x = -offset; x < canvas.width + gridSize; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
      }

      for (let y = -offset; y < canvas.height + gridSize; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }
    };

    const drawSpaceField = () => {
      // Draw stars
      for (let i = 0; i < particles.length; i++) {
        const particle = particles[i];
        const twinkle = Math.sin(time * 0.01 + particle.life * 0.1) * 0.5 + 0.5;
        
        ctx.fillStyle = `rgba(255, 255, 255, ${twinkle * 0.8})`;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * twinkle, 0, Math.PI * 2);
        ctx.fill();
      }

      // Draw nebula effects
      const gradient = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, 300);
      gradient.addColorStop(0, `rgba(100, 50, 150, ${0.1 + Math.sin(time * 0.002) * 0.05})`);
      gradient.addColorStop(1, 'rgba(100, 50, 150, 0)');
      
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    };

    const drawBiotechField = () => {
      // Draw organic connections
      ctx.strokeStyle = `rgba(100, 255, 100, ${0.2 + Math.sin(time * 0.004) * 0.1})`;
      ctx.lineWidth = 2;

      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 120) {
            const opacity = Math.max(0, 1 - distance / 120);
            ctx.strokeStyle = `rgba(100, 255, 100, ${opacity * 0.3})`;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
        }
      }
    };

    const drawEnergyField = () => {
      // Draw energy waves
      for (let i = 0; i < 5; i++) {
        const waveRadius = (time * 2 + i * 100) % 400;
        const opacity = Math.max(0, 1 - waveRadius / 400);
        
        ctx.strokeStyle = `rgba(255, 200, 100, ${opacity * 0.3})`;
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(canvas.width / 2, canvas.height / 2, waveRadius, 0, Math.PI * 2);
        ctx.stroke();
      }
    };

    // Main animation loop
    const animate = () => {
      time += 1;
      
      // Clear canvas with fade effect
      ctx.fillStyle = `rgba(0, 0, 0, 0.05)`;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850

      // Update particles
      particles.forEach(particle => {
        particle.x += particle.vx;
        particle.y += particle.vy;
<<<<<<< HEAD
=======
        particle.rotation += particle.rotationSpeed;
        particle.pulse += 0.1;
        particle.life -= 0.5;
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850

        // Wrap around edges
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;

        // Draw particle
        ctx.save();
        ctx.globalAlpha = particle.opacity;
        ctx.fillStyle = particle.color;
        
        // Enhanced particle rendering based on type
        if (particle.type === 'quantum') {
          // Quantum particles with glow effect
          ctx.shadowColor = particle.color;
          ctx.shadowBlur = 10;
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          ctx.fill();
        } else if (particle.type === 'holographic') {
          // Holographic particles with rainbow effect
          const gradient = ctx.createRadialGradient(
            particle.x, particle.y, 0,
            particle.x, particle.y, particle.size * 2
          );
          gradient.addColorStop(0, particle.color);
          gradient.addColorStop(1, 'transparent');
          ctx.fillStyle = gradient;
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size * 2, 0, Math.PI * 2);
          ctx.fill();
        } else if (particle.type === 'neural') {
          // Neural particles with connection lines
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          ctx.fill();
          
          // Draw connections to nearby particles
          particles.forEach((otherParticle, otherIndex) => {
            if (index !== otherIndex && otherParticle.type === 'neural') {
              const distance = Math.sqrt(
                Math.pow(particle.x - otherParticle.x, 2) + 
                Math.pow(particle.y - otherParticle.y, 2)
              );
              if (distance < 100) {
                ctx.globalAlpha = (100 - distance) / 100 * 0.3;
                ctx.strokeStyle = particle.color;
                ctx.lineWidth = 1;
                ctx.beginPath();
                ctx.moveTo(particle.x, particle.y);
                ctx.lineTo(otherParticle.x, otherParticle.y);
                ctx.stroke();
              }
            }
          });
        } else if (particle.type === 'cyberpunk') {
          // Cyberpunk particles with flicker effect
          if (Math.random() > 0.1) {
            ctx.shadowColor = particle.color;
            ctx.shadowBlur = 15;
            ctx.fillStyle = particle.color;
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            ctx.fill();
          }
        }
        
        ctx.restore();
      });

      // Draw additional effects based on variant
      if (variant === 'quantum-holographic-advanced') {
        drawQuantumHolographicEffect(ctx, canvas);
      } else if (variant === 'neural-network') {
        drawNeuralNetworkEffect(ctx, canvas);
      } else if (variant === 'cyberpunk-matrix') {
        drawCyberpunkMatrixEffect(ctx, canvas);
      }
      
      // Update and draw particles
      particles.forEach((particle, index) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Bounce off edges
<<<<<<< HEAD
        if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;
        if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;
        
        // Keep particles in bounds
        particle.x = Math.max(0, Math.min(canvas.width, particle.x));
        particle.y = Math.max(0, Math.min(canvas.height, particle.y));
        
        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = `${particle.color}${Math.floor(particle.opacity * 255).toString(16).padStart(2, '0')}`;
        ctx.fill();
        
        // Add glow effect
        ctx.shadowColor = particle.color;
        ctx.shadowBlur = 15;
        ctx.fill();
        ctx.shadowBlur = 0;
        
        // Add trail effect
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * 0.5, 0, Math.PI * 2);
        ctx.fillStyle = `${particle.color}20`;
        ctx.fill();
      });
      
      animationRef.current = requestAnimationFrame(animate);
    };

    // Quantum holographic effect
    const drawQuantumHolographicEffect = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {
      const time = Date.now() * 0.001;
      
      // Draw quantum field lines
      for (let i = 0; i < 5; i++) {
        ctx.strokeStyle = `hsla(${200 + i * 30}, 70%, 60%, 0.3)`;
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(0, canvas.height * (0.2 + i * 0.15));
        ctx.quadraticCurveTo(
          canvas.width * 0.5,
          canvas.height * (0.1 + i * 0.2) + Math.sin(time + i) * 50,
          canvas.width,
          canvas.height * (0.3 + i * 0.1)
        );
        ctx.stroke();
      }
    };

    // Neural network effect
    const drawNeuralNetworkEffect = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {
      const time = Date.now() * 0.001;
      
      // Draw neural connections
      ctx.strokeStyle = 'rgba(16, 185, 129, 0.2)';
      ctx.lineWidth = 1;
      
      for (let i = 0; i < 8; i++) {
        const x1 = Math.sin(time + i) * canvas.width * 0.3 + canvas.width * 0.5;
        const y1 = Math.cos(time + i * 0.5) * canvas.height * 0.3 + canvas.height * 0.5;
        const x2 = Math.sin(time + i + 1) * canvas.width * 0.3 + canvas.width * 0.5;
        const y2 = Math.cos(time + i * 0.5 + 1) * canvas.height * 0.3 + canvas.height * 0.5;
        
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
      }
    };

    // Cyberpunk matrix effect
    const drawCyberpunkMatrixEffect = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {
      const time = Date.now() * 0.001;
      
      // Draw matrix rain effect
      ctx.fillStyle = 'rgba(239, 68, 68, 0.8)';
      ctx.font = '12px monospace';
      
      for (let i = 0; i < 20; i++) {
        const x = (i * 50 + time * 100) % canvas.width;
        const y = (time * 200 + i * 30) % canvas.height;
        ctx.fillText('01', x, y);
      }
    };

    initParticles();
=======
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;

        // Reset particle if it dies
        if (particle.life <= 0) {
          particle.x = Math.random() * canvas.width;
          particle.y = Math.random() * canvas.height;
          particle.life = particle.maxLife;
          particle.color = getParticleColor(variant);
        }

        // Draw particle
        const pulseSize = particle.size + Math.sin(particle.pulse) * 2;
        ctx.fillStyle = particle.color;
        ctx.save();
        ctx.translate(particle.x, particle.y);
        ctx.rotate(particle.rotation);
        
        if (variant === 'quantum') {
          // Quantum particles as squares
          ctx.fillRect(-pulseSize/2, -pulseSize/2, pulseSize, pulseSize);
        } else if (variant === 'cyberpunk') {
          // Cyberpunk particles as triangles
          ctx.beginPath();
          ctx.moveTo(0, -pulseSize);
          ctx.lineTo(-pulseSize, pulseSize);
          ctx.lineTo(pulseSize, pulseSize);
          ctx.closePath();
          ctx.fill();
        } else {
          // Default circular particles
          ctx.beginPath();
          ctx.arc(0, 0, pulseSize, 0, Math.PI * 2);
          ctx.fill();
        }
        
        ctx.restore();
      });

      // Draw variant-specific effects
      switch (variant) {
        case 'neural':
          drawNeuralNetwork();
          break;
        case 'quantum':
          drawQuantumField();
          break;
        case 'holographic':
          drawHolographicGrid();
          break;
        case 'space':
          drawSpaceField();
          break;
        case 'biotech':
          drawBiotechField();
          break;
        case 'energy':
          drawEnergyField();
          break;
        default:
          drawNeuralNetwork();
      }

      animationRef.current = requestAnimationFrame(animate);
    };

    createParticles();
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850
    animate();

    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    window.addEventListener('resize', handleResize);

    return () => {
<<<<<<< HEAD
      window.removeEventListener('resize', handleResize);
=======
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      window.removeEventListener('resize', resizeCanvas);
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  const getBackgroundClasses = () => {
    const baseClasses = 'relative min-h-screen overflow-hidden';
    
    switch (variant) {
      case 'quantum-holographic-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-blue-900 to-purple-900', className);
      case 'neural-network':
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-emerald-900 to-teal-900', className);
      case 'cyberpunk-matrix':
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-red-900 to-pink-900', className);
      case 'quantum-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-cyan-900 to-blue-900', className);
      case 'holographic-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-purple-900 to-violet-900', className);
      case 'neural-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-green-900 to-emerald-900', className);
      case 'cyberpunk-advanced':
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-orange-900 to-red-900', className);
      default:
        return cn(baseClasses, 'bg-gradient-to-br from-slate-900 via-blue-900 to-purple-900', className);
    }
  };

  return (
<<<<<<< HEAD
    <div className={getBackgroundClasses()}>
      {/* Enhanced Canvas Background */}
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none"
        style={{ zIndex: 0 }}
      />
      
      {/* Additional Background Effects */}
      <div className="absolute inset-0 pointer-events-none">
        {/* Quantum field lines */}
        <div className="absolute inset-0 opacity-20">
          <div className="absolute top-1/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-blue-400 to-transparent transform -rotate-12"></div>
          <div className="absolute top-1/2 left-0 w-full h-px bg-gradient-to-r from-transparent via-purple-400 to-transparent transform rotate-12"></div>
          <div className="absolute top-3/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent transform -rotate-6"></div>
        </div>
        
        {/* Holographic grid */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute inset-0" style={{
            backgroundImage: `
              linear-gradient(rgba(59, 130, 246, 0.1) 1px, transparent 1px),
              linear-gradient(90deg, rgba(59, 130, 246, 0.1) 1px, transparent 1px)
            `,
            backgroundSize: '50px 50px'
          }}></div>
        </div>
        
        {/* Neural network nodes */}
        <div className="absolute inset-0 opacity-15">
          {[...Array(12)].map((_, i) => (
            <div
              key={i}
              className="absolute w-2 h-2 bg-green-400 rounded-full animate-pulse"
              style={{
                left: `${20 + (i * 7) % 80}%`,
                top: `${30 + (i * 8) % 60}%`,
                animationDelay: `${i * 0.2}s`
              }}
            ></div>
          ))}
        </div>
      </div>
      
      {/* Content */}
      <div className="relative z-10">
        {children}
      </div>
      
      {/* Floating Elements */}
      <div className="fixed inset-0 pointer-events-none z-10">
        {/* Quantum Particles */}
        <div className="absolute top-20 left-20 w-2 h-2 bg-cyan-400 rounded-full animate-pulse opacity-60" />
        <div className="absolute top-40 right-32 w-1 h-1 bg-purple-400 rounded-full animate-ping opacity-80" />
        <div className="absolute bottom-32 left-1/4 w-3 h-3 bg-blue-400 rounded-full animate-bounce opacity-40" />
        <div className="absolute bottom-20 right-20 w-2 h-2 bg-pink-400 rounded-full animate-pulse opacity-70" />
        
        {/* Neural Connections */}
        <div className="absolute top-1/3 left-1/3 w-32 h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent opacity-30" />
        <div className="absolute top-2/3 right-1/3 w-24 h-px bg-gradient-to-r from-transparent via-purple-400 to-transparent opacity-30" />
        <div className="absolute bottom-1/3 left-1/2 w-20 h-px bg-gradient-to-r from-transparent via-blue-400 to-transparent opacity-30" />
      </div>
=======
    <div className={`relative ${className}`}>
      <canvas
        ref={canvasRef}
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        style={{ background: 'radial-gradient(ellipse at center, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0.8) 100%)' }}
      />
      <div className="relative z-10">
        {children}
      </div>
>>>>>>> origin/cursor/enhance-app-services-and-website-with-futuristic-design-d850
    </div>
  );
};

export default EnhancedFuturisticBackground;
