<<<<<<< HEAD
import React, { useEffect, useState } from 'react';

interface AccessibilityEnhancerProps {
  // Add any props if needed
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = () => {
  const [isHighContrast, setIsHighContrast] = useState(false);
  const [isReducedMotion, setIsReducedMotion] = useState(false);
  const [fontSize, setFontSize] = useState(16);

  useEffect(() => {
    // Check for user's motion preferences
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
    setIsReducedMotion(prefersReducedMotion.matches);

    // Check for user's color scheme preferences
    const prefersHighContrast = window.matchMedia('(prefers-contrast: high)');
    setIsHighContrast(prefersHighContrast.matches);

    // Listen for changes in user preferences
    const handleMotionChange = (e: MediaQueryListEvent) => setIsReducedMotion(e.matches);
    const handleContrastChange = (e: MediaQueryListEvent) => setIsHighContrast(e.matches);

    prefersReducedMotion.addEventListener('change', handleMotionChange);
    prefersHighContrast.addEventListener('change', handleContrastChange);

    // Apply initial accessibility settings
    applyAccessibilitySettings();

    return () => {
      prefersReducedMotion.removeEventListener('change', handleMotionChange);
      prefersHighContrast.removeEventListener('change', handleContrastChange);
    };
  }, []);

  useEffect(() => {
    // Apply accessibility settings when they change
    applyAccessibilitySettings();
  }, [isHighContrast, isReducedMotion, fontSize]);

  const applyAccessibilitySettings = () => {
    const root = document.documentElement;
    
    // Apply high contrast mode
    if (isHighContrast) {
      root.style.setProperty('--text-primary', '#ffffff');
      root.style.setProperty('--text-secondary', '#e5e7eb');
      root.style.setProperty('--bg-primary', '#000000');
      root.style.setProperty('--bg-secondary', '#111111');
    } else {
      root.style.removeProperty('--text-primary');
      root.style.removeProperty('--text-secondary');
      root.style.removeProperty('--bg-primary');
      root.style.removeProperty('--bg-secondary');
    }

    // Apply reduced motion
    if (isReducedMotion) {
      root.style.setProperty('--transition-duration', '0.1s');
      root.style.setProperty('--animation-duration', '0.1s');
    } else {
      root.style.removeProperty('--transition-duration');
      root.style.removeProperty('--animation-duration');
    }

  // Load saved settings
  useEffect(() => {
    const saved = localStorage.getItem('accessibility-settings');
=======
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Eye, Type, Palette, Volume2,
  MousePointer, Monitor, X
} from 'lucide-react';

interface AccessibilitySettings {
  highContrast: boolean;
  largeText: boolean;
  reducedMotion: boolean;
  highSaturation: boolean;
  focusIndicator: boolean;
  screenReader: boolean;
}

interface AccessibilityEnhancerProps {
  onSettingsChange?: (settings: AccessibilitySettings) => void;
}

const AccessibilityEnhancer: React.FC<AccessibilityEnhancerProps> = ({ onSettingsChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [settings, setSettings] = useState<AccessibilitySettings>({
    highContrast: false,
    largeText: false,
    reducedMotion: false,
    highSaturation: false,
    focusIndicator: true,
    screenReader: false
  });

  // Load settings from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('zion-accessibility-settings');
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setSettings(parsed);
        applySettings(parsed);
<<<<<<< HEAD
      } catch (e) {
        // console.log('Failed to parse saved accessibility settings');
=======
      } catch {
        // Silently handle parsing errors
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
      }
    }
  }, [applySettings]);

  // Focus management
  const handleFocusChange = useCallback((e: Event) => {
    const target = e.target as HTMLElement;
    if (target) {
      setCurrentFocus(target);
      announceToScreenReader(`Focused on ${target.textContent || target.tagName.toLowerCase()}`);
    }
  }, []);

<<<<<<< HEAD
  // Keyboard navigation enhancements
  const handleKeyDown = useCallback((e: Event) => {
    // Tab navigation detected
  }, []);

  // Announce to screen reader
  const announceToScreenReader = useCallback((message: string) => {
    // setAnnouncements(prev => [...prev, message]); // This line was removed
    
    // Create live region for screen readers
    if (!announcementRef.current) {
      const liveRegion = document.createElement('div');
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.className = 'sr-only';
      document.body.appendChild(liveRegion);
      announcementRef.current = liveRegion;
    }
    
    if (announcementRef.current) {
      announcementRef.current.textContent = message;
    }
    
    // Remove announcement after a delay
    setTimeout(() => {
      // setAnnouncements(prev => prev.filter(a => a !== message)); // This line was removed
    }, 5000);
  }, []);

  // Auto-optimize accessibility
  useEffect(() => {
    if (!autoOptimize) return;
    
    const checkAccessibility = () => {
      const issues: string[] = [];
      
      // Check for missing alt text
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.alt) {
          issues.push(`Image missing alt text: ${img.src}`);
        }
      });

      // Check heading structure
      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
      let previousLevel = 0;
      headings.forEach(heading => {
        const level = parseInt(heading.tagName.charAt(1));
        if (level > previousLevel + 1) {
          issues.push(`Heading structure issue: ${heading.tagName} follows ${previousLevel > 0 ? `h${previousLevel}` : 'no heading'}`);
        }
        previousLevel = level;
      });

      // Check form labels
      const inputs = document.querySelectorAll('input, textarea, select');
      inputs.forEach(input => {
        const id = input.getAttribute('id');
        if (id && !document.querySelector(`label[for="${id}"]`)) {
          issues.push(`Input missing label: ${id}`);
        }
      });

      if (issues.length > 0) {
        announceToScreenReader(`Found ${issues.length} accessibility issues`);
      } else {
        announceToScreenReader('No accessibility issues found');
      }
    };
    
    // Run check after page load
    const timer = setTimeout(checkAccessibility, 2000);
    return () => clearTimeout(timer);
  }, [autoOptimize, announceToScreenReader]);

  // Set up event listeners
  useEffect(() => {
    document.addEventListener('focusin', handleFocusChange);
    document.addEventListener('keydown', handleKeyDown);
    
    return () => {
      document.removeEventListener('focusin', handleFocusChange);
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleFocusChange, handleKeyDown]);

  // Quick accessibility shortcuts
  const toggleHighContrast = () => {
    applySettings({ ...settings, highContrast: !settings.highContrast });
  };

  const increaseFontSize = () => {
    setFontSize(prev => Math.min(prev + 2, 24));
  };

  const decreaseFontSize = () => {
    setFontSize(prev => Math.max(prev - 2, 12));
  };

  const resetFontSize = () => {
    setFontSize(16);
  };

  const toggleHighContrast = () => {
    setIsHighContrast(!isHighContrast);
  };

  const toggleReducedMotion = () => {
    setIsReducedMotion(!isReducedMotion);
  };

  // Keyboard navigation enhancement
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Skip to main content with 'S' key
      if (e.key === 's' && e.ctrlKey) {
        e.preventDefault();
        const mainContent = document.getElementById('main');
        if (mainContent) {
          mainContent.focus();
          mainContent.scrollIntoView({ behavior: 'smooth' });
        }
      }

      switch (e.key) {
        case 'Tab': {
          // Enhanced tab navigation
          const focusableElements = document.querySelectorAll(
            'a[href], button, input, textarea, select, [tabindex]:not([tabindex="-1"])'
          );
          const currentIndex = Array.from(focusableElements).findIndex(el => el === document.activeElement);
          
          if (e.shiftKey) {
            // Shift + Tab: go backwards
            const prevIndex = currentIndex > 0 ? currentIndex - 1 : focusableElements.length - 1;
            (focusableElements[prevIndex] as HTMLElement)?.focus();
          } else {
            // Tab: go forwards
            const nextIndex = currentIndex < focusableElements.length - 1 ? currentIndex + 1 : 0;
            (focusableElements[nextIndex] as HTMLElement)?.focus();
          }
          e.preventDefault();
          break;
        }
          
        case 'Escape': {
          // Close modals, dropdowns, etc.
          const activeModals = document.querySelectorAll('[data-modal="true"]');
          activeModals.forEach(modal => {
            if (modal instanceof HTMLElement) {
              modal.style.display = 'none';
            }
          });
          break;
        }
          
        case 'h':
        case 'H': {
          // Go to home page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/';
          }
          break;
        }
          
        case 's':
        case 'S': {
          // Go to services page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/services';
          }
          break;
=======
      // Skip to navigation with 'N' key
      if (e.key === 'n' && e.ctrlKey) {
        e.preventDefault();
        const navigation = document.querySelector('nav');
        if (navigation) {
          navigation.focus();
          navigation.scrollIntoView({ behavior: 'smooth' });
        }
      }

      // Skip to footer with 'F' key
      if (e.key === 'f' && e.ctrlKey) {
        e.preventDefault();
        const footer = document.querySelector('footer');
        if (footer) {
          footer.focus();
          footer.scrollIntoView({ behavior: 'smooth' });
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, []);

  // Focus management for modals and dropdowns
  useEffect(() => {
    const handleFocusTrap = (e: KeyboardEvent) => {
      if (e.key === 'Tab') {
        const focusableElements = document.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        if (focusableElements.length > 0) {
          const firstElement = focusableElements[0] as HTMLElement;
          const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
          
          if (e.shiftKey && document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
          } else if (!e.shiftKey && document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        }
          
        case 'c':
        case 'C': {
          // Go to contact page
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            window.location.href = '/contact';
          }
          break;
        }
      }
    };

    // Only apply focus trap when modals or dropdowns are open
    const modals = document.querySelectorAll('[role="dialog"], [aria-modal="true"]');
    if (modals.length > 0) {
      document.addEventListener('keydown', handleFocusTrap);
      return () => document.removeEventListener('keydown', handleFocusTrap);
    }
  }, []);

  return (
    <>
      {/* Accessibility Controls - Hidden by default, shown on focus */}
      <div className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:right-4 focus:z-50 focus:bg-black focus:text-white focus:p-4 focus:rounded focus:shadow-lg">
        <h3 className="text-lg font-bold mb-4">Accessibility Controls</h3>
        
        <div className="space-y-4">
          {/* Font Size Controls */}
          <div>
            <label htmlFor="font-size" className="block text-sm font-medium mb-2">
              Font Size: {fontSize}px
            </label>
            <div className="flex space-x-2">
              <button
                onClick={decreaseFontSize}
                className="px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded text-sm"
                aria-label="Decrease font size"
              >
                A-
              </button>
              <button
                onClick={resetFontSize}
                className="px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded text-sm"
                aria-label="Reset font size"
              >
                Reset
              </button>
              <button
                onClick={increaseFontSize}
                className="px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded text-sm"
                aria-label="Increase font size"
              >
                A+
=======
  // Apply accessibility settings to the document
  const applySettings = (newSettings: AccessibilitySettings) => {
    const root = document.documentElement;
    
    // High contrast
    if (newSettings.highContrast) {
      root.style.setProperty('--bg-primary', '#000000');
      root.style.setProperty('--bg-secondary', '#1a1a1a');
      root.style.setProperty('--text-primary', '#ffffff');
      root.style.setProperty('--text-secondary', '#e5e5e5');
      root.style.setProperty('--accent-color', '#ffff00');
    } else {
      root.style.removeProperty('--bg-primary');
      root.style.removeProperty('--bg-secondary');
      root.style.removeProperty('--text-primary');
      root.style.removeProperty('--text-secondary');
      root.style.removeProperty('--accent-color');
    }

    // Large text
    if (newSettings.largeText) {
      root.style.setProperty('--font-size-base', '18px');
      root.style.setProperty('--font-size-lg', '20px');
      root.style.setProperty('--font-size-xl', '24px');
      root.style.setProperty('--font-size-2xl', '28px');
    } else {
      root.style.removeProperty('--font-size-base');
      root.style.removeProperty('--font-size-lg');
      root.style.removeProperty('--font-size-xl');
      root.style.removeProperty('--font-size-2xl');
    }

    // Reduced motion
    if (newSettings.reducedMotion) {
      root.style.setProperty('--animation-duration', '0.1s');
      root.style.setProperty('--transition-duration', '0.1s');
    } else {
      root.style.removeProperty('--animation-duration');
      root.style.removeProperty('--transition-duration');
    }

    // High saturation
    if (newSettings.highSaturation) {
      root.style.setProperty('--saturation', '1.5');
    } else {
      root.style.removeProperty('--saturation');
    }

    // Focus indicator
    if (newSettings.focusIndicator) {
      root.style.setProperty('--focus-ring', '2px solid #3b82f6');
    } else {
      root.style.removeProperty('--focus-ring');
    }

    // Screen reader announcements
    if (newSettings.screenReader) {
      announceToScreenReader('Accessibility settings applied');
    }
  };

  // Announce to screen readers
  const announceToScreenReader = (message: string) => {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    
    document.body.appendChild(announcement);
    
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  // Handle setting changes
  const handleSettingChange = (key: keyof AccessibilitySettings, value: boolean) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    applySettings(newSettings);
    
    // Save to localStorage
    localStorage.setItem('zion-accessibility-settings', JSON.stringify(newSettings));
    
    // Notify parent component
    if (onSettingsChange) {
      onSettingsChange(newSettings);
    }

    // Announce change to screen reader
    if (newSettings.screenReader) {
      announceToScreenReader(`${key.replace(/([A-Z])/g, ' $1').toLowerCase()} ${value ? 'enabled' : 'disabled'}`);
    }
  };

  // Reset all settings
  const resetSettings = () => {
    const defaultSettings: AccessibilitySettings = {
      highContrast: false,
      largeText: false,
      reducedMotion: false,
      highSaturation: false,
      focusIndicator: true,
      screenReader: false
    };
    
    setSettings(defaultSettings);
    applySettings(defaultSettings);
    localStorage.setItem('zion-accessibility-settings', JSON.stringify(defaultSettings));
    
    if (onSettingsChange) {
      onSettingsChange(defaultSettings);
    }
  };

  return (
    <>
      {/* Accessibility Toggle Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed top-4 right-4 z-50 p-3 bg-gray-900/90 backdrop-blur-sm border border-gray-700 rounded-full text-white hover:bg-gray-800 transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-cyan-500"
        aria-label="Accessibility Settings"
        aria-expanded={isOpen}
      >
        <Eye className="w-5 h-5" />
      </button>

      {/* Accessibility Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 100 }}
            transition={{ duration: 0.3 }}
            className="fixed top-4 right-20 z-50 w-80 bg-gray-900/95 backdrop-blur-sm border border-gray-700 rounded-xl shadow-2xl"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <h2 className="text-lg font-semibold text-white">Accessibility</h2>
              <button
                onClick={() => setIsOpen(false)}
                className="text-gray-400 hover:text-white transition-colors"
                aria-label="Close accessibility panel"
              >
                <X className="w-5 h-5" />
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
              </button>
            </div>
          </div>

<<<<<<< HEAD
          {/* High Contrast Toggle */}
          <div>
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={isHighContrast}
                onChange={toggleHighContrast}
                className="rounded"
              />
              <span className="text-sm">High Contrast</span>
            </label>
          </div>

          {/* Reduced Motion Toggle */}
          <div>
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={isReducedMotion}
                onChange={toggleReducedMotion}
                className="rounded"
              />
              <span className="text-sm">Reduced Motion</span>
            </label>
          </div>

          {/* Keyboard Shortcuts Help */}
          <div className="text-sm">
            <h4 className="font-medium mb-2">Keyboard Shortcuts:</h4>
            <ul className="space-y-1 text-xs">
              <li><kbd className="bg-gray-700 px-1 rounded">Ctrl + S</kbd> Skip to main content</li>
              <li><kbd className="bg-gray-700 px-1 rounded">Ctrl + N</kbd> Skip to navigation</li>
              <li><kbd className="bg-gray-700 px-1 rounded">Ctrl + F</kbd> Skip to footer</li>
              <li><kbd className="bg-gray-700 px-1 rounded">Tab</kbd> Navigate through elements</li>
              <li><kbd className="bg-gray-700 px-1 rounded">Enter/Space</kbd> Activate buttons/links</li>
              <li><kbd className="bg-gray-700 px-1 rounded">Escape</kbd> Close modals/dropdowns</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Live Region for Screen Readers */}
      <div
        aria-live="polite"
        aria-atomic="true"
        className="sr-only"
        id="accessibility-announcements"
      />

      {/* Skip Links */}
      <nav className="sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 focus:z-50 focus:w-full focus:bg-black focus:text-white focus:p-4">
        <ul className="space-y-2">
          <li>
            <a href="#main" className="block hover:text-cyan-400">
              Skip to main content
            </a>
          </li>
          <li>
            <a href="#navigation" className="block hover:text-cyan-400">
              Skip to navigation
            </a>
          </li>
          <li>
            <a href="#footer" className="block hover:text-cyan-400">
              Skip to footer
            </a>
          </li>
        </ul>
      </nav>
=======
            {/* Settings */}
            <div className="p-4 space-y-4 max-h-96 overflow-y-auto">
              {/* High Contrast */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Palette className="w-5 h-5 text-cyan-400" />
                  <div>
                    <div className="text-sm font-medium text-white">High Contrast</div>
                    <div className="text-xs text-gray-400">Enhanced color contrast</div>
                  </div>
                </div>
                <button
                  onClick={() => handleSettingChange('highContrast', !settings.highContrast)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.highContrast ? 'bg-cyan-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.highContrast ? 'Disable' : 'Enable'} high contrast`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.highContrast ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Large Text */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Type className="w-5 h-5 text-purple-400" />
                  <div>
                    <div className="text-sm font-medium text-white">Large Text</div>
                    <div className="text-xs text-gray-400">Increased font sizes</div>
                  </div>
                </div>
                <button
                  onClick={() => handleSettingChange('largeText', !settings.largeText)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.largeText ? 'bg-purple-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.largeText ? 'Disable' : 'Enable'} large text`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.largeText ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Reduced Motion */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Monitor className="w-5 h-5 text-green-400" />
                  <div>
                    <div className="text-sm font-medium text-white">Reduced Motion</div>
                    <div className="text-xs text-gray-400">Minimize animations</div>
                  </div>
                </div>
                <button
                  onClick={() => handleSettingChange('reducedMotion', !settings.reducedMotion)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.reducedMotion ? 'bg-green-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.reducedMotion ? 'Disable' : 'Enable'} reduced motion`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.reducedMotion ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* High Saturation */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Palette className="w-5 h-5 text-yellow-400" />
                  <div>
                    <div className="text-sm font-medium text-white">High Saturation</div>
                    <div className="text-xs text-gray-400">Enhanced color vibrancy</div>
                  </div>
                </div>
                <button
                  onClick={() => handleSettingChange('highSaturation', !settings.highSaturation)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.highSaturation ? 'bg-yellow-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.highSaturation ? 'Disable' : 'Enable'} high saturation`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.highSaturation ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Focus Indicator */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <MousePointer className="w-5 h-5 text-blue-400" />
                  <div>
                    <div className="text-sm font-medium text-white">Focus Indicator</div>
                    <div className="text-xs text-gray-400">Enhanced focus rings</div>
                  </div>
                </div>
                <button
                  onClick={() => handleSettingChange('focusIndicator', !settings.focusIndicator)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.focusIndicator ? 'bg-blue-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.focusIndicator ? 'Disable' : 'Enable'} focus indicator`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.focusIndicator ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Screen Reader */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Volume2 className="w-5 h-5 text-pink-400" />
                  <div>
                    <div className="text-sm font-medium text-white">Screen Reader</div>
                    <div className="text-xs text-gray-400">Audio announcements</div>
                  </div>
                </div>
                <button
                  onClick={() => handleSettingChange('screenReader', !settings.screenReader)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    settings.screenReader ? 'bg-pink-500' : 'bg-gray-600'
                  }`}
                  aria-label={`${settings.screenReader ? 'Disable' : 'Enable'} screen reader`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      settings.screenReader ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>
            </div>

            {/* Footer */}
            <div className="p-4 border-t border-gray-700 bg-gray-800/30 rounded-b-xl">
              <div className="flex gap-2">
                <button
                  onClick={resetSettings}
                  className="flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-sm transition-colors"
                >
                  Reset All
                </button>
                <button
                  onClick={() => setIsOpen(false)}
                  className="flex-1 px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg text-sm transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Screen reader only content */}
      <div className="sr-only" aria-live="polite">
        Accessibility settings panel is available. Use the accessibility button in the top right corner to open it.
      </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
    </>
  );
};

export default AccessibilityEnhancer;