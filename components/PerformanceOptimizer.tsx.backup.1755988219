import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
<<<<<<< HEAD
import { Zap, TrendingUp, AlertTriangle, CheckCircle, X, Settings, RefreshCw } from 'lucide-react';
=======
import { Zap, TrendingUp, Clock, Database, Wifi, Cpu, HardDrive, Gauge } from 'lucide-react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
<<<<<<< HEAD
  score: string;
  grade: 'A' | 'B' | 'C' | 'D' | 'F';
=======
  domLoad: number;
  windowLoad: number;
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
}

interface PerformanceOptimizerProps {
  children: React.ReactNode;
}

<<<<<<< HEAD
const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({ children }) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [showMetrics, setShowMetrics] = useState(false);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationLevel, setOptimizationLevel] = useState<'low' | 'medium' | 'high'>('medium');
  const [showDebugPanel, setShowDebugPanel] = useState(false);
  const [showMetricsState, setShowMetricsState] = useState(showMetrics);
  const [performanceIssues, setPerformanceIssues] = useState<string[]>([]);
  const [optimizations, setOptimizations] = useState<string[]>([]);
  const [serviceWorkerStatus, setServiceWorkerStatus] = useState<'installing' | 'installed' | 'error' | 'not-supported'>('not-supported');

  // Register service worker for PWA capabilities
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker
        .register('/sw.js')
        .then((registration) => {
          setServiceWorkerStatus('installing');
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed') {
                  setServiceWorkerStatus('installed');
                }
              });
            }
          });
        })
        .catch(() => setServiceWorkerStatus('error'));
=======
const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({ 
  showMetrics = false, 
  autoOptimize = true 
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [isVisible, setIsVisible] = useState(false);
  const [optimizations, setOptimizations] = useState<string[]>([]);
  const [isOptimizing, setIsOptimizing] = useState(false);

  // Enhanced performance monitoring
  const measurePerformance = useCallback(async () => {
    if (typeof window === 'undefined') return;

    try {
      // Wait for performance metrics to be available
      await new Promise(resolve => setTimeout(resolve, 1000));

      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      const paint = performance.getEntriesByType('paint');
      
      const fcp = paint.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0;
      const lcp = paint.find(entry => entry.name === 'largest-contentful-paint')?.startTime || 0;
      
      const newMetrics: PerformanceMetrics = {
        fcp: Math.round(fcp),
        lcp: Math.round(lcp),
        fid: 0, // Will be updated when interaction occurs
        cls: 0, // Will be updated when layout shifts occur
        ttfb: Math.round(navigation.responseStart - navigation.requestStart),
        domLoad: Math.round(navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart),
        windowLoad: Math.round(navigation.loadEventEnd - navigation.loadEventStart)
      };

      setMetrics(newMetrics);
      
      // Auto-optimize if enabled
      if (autoOptimize) {
        analyzeAndOptimize(newMetrics);
      }
    } catch (error) {
      console.warn('Performance measurement failed:', error);
    }
  }, [autoOptimize]);

  // Enhanced optimization analysis
  const analyzeAndOptimize = useCallback((currentMetrics: PerformanceMetrics) => {
    const newOptimizations: string[] = [];
    
    if (currentMetrics.fcp > 2000) {
      newOptimizations.push('First Contentful Paint is slow - consider image optimization');
    }
    
    if (currentMetrics.lcp > 4000) {
      newOptimizations.push('Largest Contentful Paint is slow - optimize hero images');
    }
    
    if (currentMetrics.ttfb > 600) {
      newOptimizations.push('Time to First Byte is slow - optimize server response');
    }
    
    if (currentMetrics.domLoad > 100) {
      newOptimizations.push('DOM load time is high - reduce JavaScript execution');
    }

    // Apply automatic optimizations
    if (newOptimizations.length > 0) {
      applyOptimizations(newOptimizations);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
    }
    
    setOptimizations(newOptimizations);
  }, []);

<<<<<<< HEAD
  // Performance monitoring
  const measurePerformance = useCallback(async () => {
    if ('PerformanceObserver' in window) {
      try {
        // Measure First Contentful Paint
        const fcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');
          if (fcpEntry) {
            setMetrics(prev => prev ? { ...prev, fcp: fcpEntry.startTime } : null);
          }
        });
        fcpObserver.observe({ entryTypes: ['paint'] });

        // Measure Largest Contentful Paint
        const lcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
          }
        });
        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

        // Measure First Input Delay
        const fidObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fidEntry = entries.find(entry => entry.entryType === 'first-input');
          if (fidEntry) {
            setMetrics(prev => prev ? { ...prev, fid: fidEntry.processingStart - fidEntry.startTime } : null);
          }
        });
        fidObserver.observe({ entryTypes: ['first-input'] });

        // Measure Cumulative Layout Shift
        const clsObserver = new PerformanceObserver((list) => {
          let clsValue = 0;
          for (const entry of list.getEntries()) {
            if (!entry.hadRecentInput) {
              clsValue += (entry as any).value;
            }
          }
          setMetrics(prev => prev ? { ...prev, cls: clsValue } : null);
        });
        clsObserver.observe({ entryTypes: ['layout-shift'] });

        // Measure Time to First Byte
        const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        if (navigationEntry) {
          const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
          setMetrics(prev => prev ? { ...prev, ttfb } : null);
        }

        // Calculate performance score
        setTimeout(() => {
          calculatePerformanceScore();
        }, 2000);

      } catch (error) {
        console.error('Performance measurement error:', error);
      }
    }
  }, []);

  const calculatePerformanceScore = useCallback(() => {
    if (!metrics) return;

    let score = 0;
    let grade: 'A' | 'B' | 'C' | 'D' | 'F' = 'F';

    // FCP scoring (0-100)
    if (metrics.fcp < 1800) score += 25;
    else if (metrics.fcp < 3000) score += 15;
    else if (metrics.fcp < 4000) score += 5;

    // LCP scoring (0-100)
    if (metrics.lcp < 2500) score += 25;
    else if (metrics.lcp < 4000) score += 15;
    else if (metrics.lcp < 6000) score += 5;

    // FID scoring (0-100)
    if (metrics.fid < 100) score += 25;
    else if (metrics.fid < 300) score += 15;
    else if (metrics.fid < 500) score += 5;

    // CLS scoring (0-100)
    if (metrics.cls < 0.1) score += 25;
    else if (metrics.cls < 0.25) score += 15;
    else if (metrics.cls < 0.4) score += 5;

    // Grade assignment
    if (score >= 90) grade = 'A';
    else if (score >= 80) grade = 'B';
    else if (score >= 70) grade = 'C';
    else if (score >= 60) grade = 'D';

    setMetrics(prev => prev ? { ...prev, score: score.toString(), grade } : null);
  }, [metrics]);

  // Performance optimizations
  const runOptimizations = useCallback(async () => {
    setIsOptimizing(true);
    const newOptimizations: string[] = [];

    try {
      // Preload critical resources
      const criticalResources = [
        '/fonts/inter-var.woff2',
        '/images/hero-bg.jpg',
        '/api/services'
      ];

      criticalResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource;
        link.as = resource.includes('.woff2') ? 'font' : resource.includes('.jpg') ? 'image' : 'fetch';
        document.head.appendChild(link);
        newOptimizations.push(`Preloaded critical resource: ${resource}`);
      });

      // Optimize images
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.loading) {
          img.loading = 'lazy';
          img.decoding = 'async';
          newOptimizations.push('Added lazy loading to images');
        }
      });

      // Add resource hints
      const resourceHints = [
        { rel: 'dns-prefetch', href: '//fonts.googleapis.com' },
        { rel: 'preconnect', href: '//fonts.googleapis.com' },
        { rel: 'preconnect', href: '//api.ziontechgroup.com' }
      ];

      resourceHints.forEach(hint => {
        const link = document.createElement('link');
        link.rel = hint.rel;
        link.href = hint.href;
        document.head.appendChild(link);
        newOptimizations.push(`Added resource hint: ${hint.rel} ${hint.href}`);
      });

      // Optimize CSS delivery
      const criticalCSS = document.querySelector('style[data-critical]');
      if (criticalCSS) {
        newOptimizations.push('Critical CSS inlined');
      }

      setOptimizations(newOptimizations);
    } catch (error) {
      console.error('Optimization error:', error);
    } finally {
      setIsOptimizing(false);
    }
  }, []);

  useEffect(() => {
    measurePerformance();
    
    // Re-measure performance on route changes
    const handleRouteChange = () => {
      setTimeout(measurePerformance, 1000);
    };

    window.addEventListener('popstate', handleRouteChange);
    return () => window.removeEventListener('popstate', handleRouteChange);
  }, [measurePerformance]);

  const getGradeColor = (grade: string) => {
    switch (grade) {
      case 'A': return 'text-green-400';
      case 'B': return 'text-blue-400';
      case 'C': return 'text-yellow-400';
      case 'D': return 'text-orange-400';
      case 'F': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  return (
    <>
      {children}
      
      {/* Performance Metrics Panel */}
      <AnimatePresence>
        {showMetrics && (
          <motion.div
            initial={{ opacity: 0, x: 300 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 300 }}
            className="fixed top-20 right-4 w-80 bg-black/90 backdrop-blur-lg border border-cyan-400/30 rounded-lg p-4 z-50 shadow-2xl"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <Zap className="w-5 h-5 text-cyan-400" />
                Performance Monitor
              </h3>
              <button
                onClick={() => setShowMetrics(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            {metrics && (
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-300">Performance Score:</span>
                  <span className={`text-lg font-bold ${getGradeColor(metrics.grade)}`}>
                    {metrics.score}/100 ({metrics.grade})
                  </span>
                </div>
                
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">FCP</div>
                    <div className="text-white">{metrics.fcp?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">LCP</div>
                    <div className="text-white">{metrics.lcp?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">FID</div>
                    <div className="text-white">{metrics.fid?.toFixed(0)}ms</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">CLS</div>
                    <div className="text-white">{metrics.cls?.toFixed(3)}</div>
                  </div>
                </div>

                <div className="pt-2 border-t border-gray-700">
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-gray-400">Service Worker:</span>
                    <span className={`${
                      serviceWorkerStatus === 'installed' ? 'text-green-400' :
                      serviceWorkerStatus === 'installing' ? 'text-yellow-400' :
                      serviceWorkerStatus === 'error' ? 'text-red-400' :
                      'text-gray-400'
                    }`}>
                      {serviceWorkerStatus}
                    </span>
                  </div>
                </div>
              </div>
            )}

            <div className="mt-4 space-y-2">
              <button
                onClick={runOptimizations}
                disabled={isOptimizing}
                className="w-full px-3 py-2 bg-cyan-600 hover:bg-cyan-700 disabled:bg-gray-600 text-white text-sm rounded transition-colors flex items-center justify-center gap-2"
              >
                {isOptimizing ? (
                  <RefreshCw className="w-4 h-4 animate-spin" />
                ) : (
                  <TrendingUp className="w-4 h-4" />
                )}
                {isOptimizing ? 'Optimizing...' : 'Run Optimizations'}
              </button>

              {optimizations.length > 0 && (
                <div className="max-h-32 overflow-y-auto">
                  {optimizations.map((opt, index) => (
                    <div key={index} className="text-xs text-green-400 bg-green-400/10 p-2 rounded">
                      ✓ {opt}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Performance Toggle Button */}
      <motion.button
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={() => setShowMetrics(!showMetrics)}
        className="fixed bottom-6 right-6 w-12 h-12 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full shadow-lg shadow-cyan-500/25 flex items-center justify-center text-white z-40 hover:from-cyan-600 hover:to-blue-700 transition-all duration-300"
        title="Performance Monitor"
      >
        <Zap className="w-6 h-6" />
      </motion.button>
    </>
=======
  // Enhanced optimization application
  const applyOptimizations = useCallback((optimizationList: string[]) => {
    setIsOptimizing(true);
    
    // Apply image optimization
    if (optimizationList.some(opt => opt.includes('image'))) {
      optimizeImages();
    }
    
    // Apply JavaScript optimization
    if (optimizationList.some(opt => opt.includes('JavaScript'))) {
      optimizeJavaScript();
    }
    
    // Apply resource optimization
    if (optimizationList.some(opt => opt.includes('server'))) {
      optimizeResources();
    }
    
    setTimeout(() => setIsOptimizing(false), 2000);
  }, []);

  // Image optimization
  const optimizeImages = useCallback(() => {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      if (!img.loading) {
        img.loading = 'lazy';
      }
      if (!img.decoding) {
        img.decoding = 'async';
      }
    });
  }, []);

  // JavaScript optimization
  const optimizeJavaScript = useCallback(() => {
    // Defer non-critical scripts
    const scripts = document.querySelectorAll('script[data-defer]');
    scripts.forEach(script => {
      const scriptElement = script as HTMLScriptElement;
      if (!scriptElement.async) {
        scriptElement.async = true;
      }
    });
  }, []);

  // Resource optimization
  const optimizeResources = useCallback(() => {
    // Preload critical resources
    const criticalResources = [
      '/fonts/inter-var.woff2',
      '/css/critical.css'
    ];
    
    criticalResources.forEach(resource => {
      if (!document.querySelector(`link[href="${resource}"]`)) {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource;
        link.as = resource.endsWith('.woff2') ? 'font' : 'style';
        document.head.appendChild(link);
      }
    });
  }, []);

  // Manual optimization trigger
  const triggerOptimization = useCallback(() => {
    if (metrics) {
      analyzeAndOptimize(metrics);
    }
  }, [metrics, analyzeAndOptimize]);

  useEffect(() => {
    if (showMetrics) {
      setIsVisible(true);
      measurePerformance();
      
      // Set up continuous monitoring
      const interval = setInterval(measurePerformance, 30000); // Every 30 seconds
      
      return () => clearInterval(interval);
    }
  }, [showMetrics, measurePerformance]);

  // Enhanced CLS monitoring
  useEffect(() => {
    if (typeof window === 'undefined') return;

    let clsValue = 0;
    let clsEntries: PerformanceEntry[] = [];
    
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        const layoutShiftEntry = entry as any;
        if (!layoutShiftEntry.hadRecentInput) {
          clsValue += layoutShiftEntry.value || 0;
          clsEntries.push(entry);
        }
      }
      
      if (metrics) {
        setMetrics(prev => prev ? { ...prev, cls: Math.round(clsValue * 1000) / 1000 } : null);
      }
    });

    observer.observe({ entryTypes: ['layout-shift'] });

    return () => observer.disconnect();
  }, [metrics]);

  // Enhanced FID monitoring
  useEffect(() => {
    if (typeof window === 'undefined') return;

    let fidValue = 0;
    
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        fidValue = Math.max(fidValue, (entry as any).processingStart - (entry as any).startTime);
      }
      
      if (metrics) {
        setMetrics(prev => prev ? { ...prev, fid: Math.round(fidValue) } : null);
      }
    });

    observer.observe({ entryTypes: ['first-input'] });

    return () => observer.disconnect();
  }, [metrics]);

  if (!showMetrics || !isVisible) return null;

  const getPerformanceScore = (metric: keyof PerformanceMetrics) => {
    if (!metrics) return 0;
    
    const thresholds: Record<keyof PerformanceMetrics, { good: number; needsImprovement: number }> = {
      fcp: { good: 1800, needsImprovement: 3000 },
      lcp: { good: 2500, needsImprovement: 4000 },
      fid: { good: 100, needsImprovement: 300 },
      cls: { good: 0.1, needsImprovement: 0.25 },
      ttfb: { good: 600, needsImprovement: 1800 },
      domLoad: { good: 100, needsImprovement: 300 },
      windowLoad: { good: 200, needsImprovement: 600 }
    };
    
    const value = metrics[metric];
    const threshold = thresholds[metric];
    
    if (value <= threshold.good) return 100;
    if (value <= threshold.needsImprovement) return 50;
    return 25;
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-400';
    if (score >= 50) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreIcon = (score: number) => {
    if (score >= 90) return <TrendingUp className="w-4 h-4" />;
    if (score >= 50) return <Gauge className="w-4 h-4" />;
    return <Clock className="w-4 h-4" />;
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        className="fixed bottom-4 right-4 z-50"
      >
        <div className="bg-gray-900/95 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-2xl max-w-sm">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
              <Zap className="w-5 h-5 text-cyan-400" />
              Performance Monitor
            </h3>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-white transition-colors"
            >
              ×
            </button>
          </div>

          {metrics && (
            <div className="space-y-4">
              {/* Performance Score */}
              <div className="text-center p-4 bg-gray-800/50 rounded-xl">
                <div className="text-3xl font-bold text-cyan-400">
                  {Math.round(
                    Object.keys(metrics).reduce((acc, key) => 
                      acc + getPerformanceScore(key as keyof PerformanceMetrics), 0
                    ) / Object.keys(metrics).length
                  )}
                </div>
                <div className="text-sm text-gray-400">Overall Score</div>
              </div>

              {/* Metrics Grid */}
              <div className="grid grid-cols-2 gap-3">
                {Object.entries(metrics).map(([key, value]) => {
                  const score = getPerformanceScore(key as keyof PerformanceMetrics);
                  const color = getScoreColor(score);
                  const icon = getScoreIcon(score);
                  
                  return (
                    <div key={key} className="bg-gray-800/30 rounded-lg p-3">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-xs text-gray-400 uppercase tracking-wide">
                          {key.toUpperCase()}
                        </span>
                        <span className={color}>{icon}</span>
                      </div>
                      <div className="text-lg font-semibold text-white">
                        {key === 'cls' ? value.toFixed(3) : `${value}ms`}
                      </div>
                      <div className="text-xs text-gray-500">
                        Score: {score}/100
                      </div>
                    </div>
                  );
                })}
              </div>

              {/* Optimizations */}
              {optimizations.length > 0 && (
                <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-3">
                  <h4 className="text-sm font-semibold text-yellow-400 mb-2">Optimizations Applied</h4>
                  <ul className="text-xs text-yellow-300 space-y-1">
                    {optimizations.map((opt, index) => (
                      <li key={index}>• {opt}</li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex gap-2">
                <button
                  onClick={triggerOptimization}
                  disabled={isOptimizing}
                  className="flex-1 bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors disabled:cursor-not-allowed"
                >
                  {isOptimizing ? 'Optimizing...' : 'Optimize Now'}
                </button>
                <button
                  onClick={measurePerformance}
                  className="bg-gray-700 hover:bg-gray-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors"
                >
                  Refresh
                </button>
              </div>
            </div>
          )}

          {!metrics && (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400 mx-auto mb-3"></div>
              <p className="text-gray-400 text-sm">Measuring performance...</p>
            </div>
          )}
        </div>
      </motion.div>
    </AnimatePresence>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-dace
  );
};

export default PerformanceOptimizer;