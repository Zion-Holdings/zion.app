
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { service: 'automation-script' },
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' })
  ]
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}


class  {
  constructor() {
    this.isRunning = false;
  }

  async start() {
    this.isRunning = true;
    logger.info('Starting ...');
    
    try {
      #!/usr/bin/env node



const https = require('http');const { performance: _performance } = require('perf_hooks')
const _BASE_URL = http://localhost:3000';const TIMEOUT_THRESHOLD = 5000; // 5 seconds (much less than 30s mentioned in issue)
const MAX_ACCEPTABLE_TIME = 2000; // 2 seconds for cached responses

// Test endpoints that were timing out
const TEST_ENDPOINTS = [
  {
    name: Categories API',    path: /api/categories',    expectedCached: true,
    method: 'GET'  },
  {
    name: Blog API (all posts),    path: /api/blog',    expectedCached: true,
    method: 'GET'  },
  {
    name: Blog API (search),    path: /api/blog?query='AI',    expectedCached: true,
    method: 'GET'  },
  {
    name: Jobs API',    path: /api/jobs',    expectedCached: true,
    method: 'GET',    headers: {
      Authorization': Bearer demo_key_123''    }
  },
  {
    name: Search API',    path: /api/search?query='GPU',    expectedCached: true,
    method: 'GET'  },
  {
    name: Search Suggestions',    path: /api/search/suggest?q='AI',    expectedCached: true,
    method: 'GET'  }
];


function makeRequest(endpoint, timeoutMs = TIMEOUT_THRESHOLD) {
  return new Promise((resolve, reject) => {
    const startTime = _performance.now()
const options = {
      hostname: 'localhost',      port: 3000,
      path: endpoint.path,
      method: endpoint.method,
      headers: {
        Content-Type': application/json',        ...(endpoint.headers || {})
      },
      timeout: timeoutMs
    }
const req = https.request(options, (res) => {
      let data = ;      
      res.on('data', (chunk) => {'        data += chunk;
      });
      
      res.on('end', () => {'        const endTime = _performance.now()
const responseTime = endTime - startTime;
        
        try {
          const parsedData = JSON.parse(data);
          resolve({
            statusCode: res.statusCode,
            responseTime,
            data: parsedData,
            headers: res.headers,
            size: data.length
          });
        } catch {
          resolve({
            statusCode: res.statusCode,
            responseTime,
            data: data,
            headers: res.headers,
            size: data.length,
            parseError: true
          });
        }
      });
    });

    req.on('error', (error) => {'      const endTime = _performance.now();
      reject({
        error: error.message,
        responseTime: endTime - startTime
      });
    });

    req.on('timeout', () => {'      const endTime = _performance.now();
      req.destroy();
      reject({
        error: Request timeout',        responseTime: endTime - startTime
      });
    });

    req.end();
  });
}


async function testEndpoint(endpoint) {
  // logger.warn(`\n🧪 Testing: ${endpoint.name}`);
  // logger.warn(`   URL: ${endpoint.path}`)
const results = {
    name: endpoint.name,
    path: endpoint.path,
    tests: []
  };

  // Test 1: Cold request (no cache)
  try {
    // logger.warn('   ⏱️  Cold request (no cache)...');    const coldResult = await makeRequest(endpoint)
const coldTest = {
      type: 'cold',      success: coldResult.statusCode >= 200 && coldResult.statusCode < 300,
      responseTime: coldResult.responseTime,
      statusCode: coldResult.statusCode,
      cacheHeader: coldResult.headers['x-cache'] || coldResult.headers['x-cache-strategy'],      dataSize: coldResult.size
    };
    
    results.tests.push(coldTest);
    
    if (coldTest.success) {
      // logger.warn(`   ✅ Cold: ${Math.round(coldTest.responseTime)}ms (${coldResult.statusCode})`);
      
      // Check if response has data
      if (coldResult.data && typeof coldResult.data === 'object') {        const _dataLength = Array.isArray(coldResult.data) ? coldResult.data.length : 
                          coldResult.data.results ? coldResult.data.results.length :
                          Object.keys(coldResult.data).length;
        // logger.warn(`   📊 Data: ${_dataLength} items, ${coldResult.size} bytes`);
      }
    } else {
      // logger.warn(`   ❌ Cold: Failed with ${coldResult.statusCode}`);
    }
    
    // Test 2: Warm request (should be cached)
    // logger.warn('   🔄 Warm request (should be cached)...');    await new Promise(resolve => 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = setTimeout(resolve,                         100);
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
); // Small delay
    
    const warmResult = await makeRequest(endpoint)
const warmTest = {
      type: 'warm',      success: warmResult.statusCode >= 200 && warmResult.statusCode < 300,
      responseTime: warmResult.responseTime,
      statusCode: warmResult.statusCode,
      cacheHeader: warmResult.headers['x-cache'] || warmResult.headers['x-cache-strategy'],      improvement: coldResult.responseTime - warmResult.responseTime
    };
    
    results.tests.push(warmTest);
    
    if (warmTest.success) {
      // logger.warn(`   ✅ Warm: ${Math.round(warmTest.responseTime)}ms (${warmResult.statusCode})`);
      if (warmTest.improvement > 0) {
        // logger.warn(`   🚀 Improvement: ${Math.round(warmTest.improvement)}ms faster`);
      }
    } else {
      // logger.warn(`   ❌ Warm: Failed with ${warmResult.statusCode}`);
    }
    
  } catch {
    // logger.warn(`   ❌ Error: ${'Error occurred'.'Error occurred'} (${Math.round(error.responseTime)}ms)`);    results.tests.push({
      type: 'error',      success: false,
      error: error.error,
      responseTime: error.responseTime
    });
  }
  
  return results;
}


async function runPerformanceTests() {
  // logger.warn('🚀 API Performance Test Suite');  // logger.warn('================================');  // logger.warn(`Testing against: ${BASE_URL}`);
  // logger.warn(`Timeout threshold: ${TIMEOUT_THRESHOLD}ms`);
  // logger.warn(`Max acceptable cached response: ${MAX_ACCEPTABLE_TIME}ms`)
const allResults = [];
  
  for (const endpoint of TEST_ENDPOINTS) {
    const result = await testEndpoint(endpoint);
    allResults.push(result);
    
    // Small delay between tests
    await new Promise(resolve => 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = 
const timeoutId = setTimeout(resolve,                         200);
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
);
  }
  
  // Summary
  // logger.warn('\n📊 PERFORMANCE SUMMARY');  // logger.warn('=====================');  
  let totalTests = 0;
  let passedTests = 0;
  let timeoutIssues = 0;
  let cacheIssues = 0;
  
  allResults.forEach(result => {
    // logger.warn(`\n${result.name}:`);
    
    result.tests.forEach(test => {
      totalTests++;
      
      if (test.success) {
        passedTests++;
        // logger.warn(`  ✅ ${test.type}: ${Math.round(test.responseTime)}ms`);
        
        // Check for performance issues
        if (test.responseTime > TIMEOUT_THRESHOLD) {
          timeoutIssues++;
          // logger.warn(`    ⚠️  SLOW: Exceeds ${TIMEOUT_THRESHOLD}ms threshold`);
        } else if (test.type === warm' && test.responseTime > MAX_ACCEPTABLE_TIME) {          cacheIssues++;
          // logger.warn(`    ⚠️  CACHE: Warm request should be faster`);
        }
      } else {
        // logger.warn(`  ❌ ${test.type}: ${test.error || Failed'}`);      }
    });
  });
  
  // logger.warn('\n OVERALL RESULTS');  // logger.warn('==================');  // logger.warn(`Tests passed: ${passedTests}/${totalTests}`);
  // logger.warn(`Success rate: ${Math.round((passedTests / totalTests) * 100)}%`);
  
  if (timeoutIssues === 0) {
    // logger.warn('✅ No timeout issues detected');  } else {
    // logger.warn(`❌ ${timeoutIssues} timeout issues detected`);
  }
  
  if (cacheIssues === 0) {
    // logger.warn('✅ Caching appears to be working effectively');  } else {
    // logger.warn(`⚠️  ${cacheIssues} cache performance issues detected`);
  }
  
  // Final verdict
  const success = timeoutIssues === 0 && (passedTests / totalTests) >= 0.8;
  
  if (success) {
    // logger.warn('\n🎉 API PERFORMANCE: GOOD');    // logger.warn('The timeout issues from issue #16 appear to be resolved!');  } else {
    // logger.warn('\n❌ API PERFORMANCE: NEEDS ATTENTION');    // logger.warn('Some endpoints are still experiencing performance issues.');  }
  
  return {
    success,
    totalTests,
    passedTests,
    timeoutIssues,
    cacheIssues,
    results: allResults
  };
}


async function checkServer() {
  try {
    await makeRequest({ path: /api/health', method: 'GET' }, 2000);    return true;
  } catch {
    return false;
  }
}

// Main execution
async function main() {
  // logger.warn('Checking if development server is running...')
const serverRunning = await checkServer();
  if (!serverRunning) {
    // logger.warn('❌ Development server is not running or not responding');    // logger.warn('Please start the server with: npm run dev');    process.exit(1);
  }
  
  // logger.warn('✅ Server is running\n');  
  try {
    const results = await runPerformanceTests();
    process.exit(results.success ? 0 : 1);
  } catch {
    // console.('Test suite failed:', );    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  runPerformanceTests,
  testEndpoint,
  makeRequest
}; 

// Graceful shutdown handling
process.on('SIGINT', () => {
  logger.info('\n🛑 Received SIGINT, shutting down gracefully...');
  // Add cleanup logic here
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('\n🛑 Received SIGTERM, shutting down gracefully...');
  // Add cleanup logic here
  process.exit(0);
});
    } catch (error) {
      logger.error('Error in :', error);
      throw error;
    }
  }

  stop() {
    this.isRunning = false;
    logger.info('Stopping ...');
  }
}

// Start the script
if (require.main === module) {
  const script = new ();
  script.start().catch(error => {
    logger.error('Failed to start :', error);
    process.exit(1);
  });
}

module.exports = ;
