
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { service: 'automation-script' },
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' })
  ]
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>ü§ñ Automated Chat Reconnection System</title>
        <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family:
          -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu,
          Cantarell, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        text-align: center;
      }

      .header h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
        font-weight: 700;
      }

      .header p {
        font-size: 1.1rem;
        opacity: 0.9;
      }

      .status-bar {
        background: #f8f9fa;
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 20px;
      }

      .status-item {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #dc3545;
        animation: pulse 2s infinite;
      }

      .status-indicator.online {
        background: #28a745;
      }

      .status-indicator.offline {
        background: #dc3545;
      }

      @keyframes pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
        100% {
          opacity: 1;
        }
      }

      .main-content {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        padding: 30px;
      }

      .panel {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 25px;
        border: 1px solid #e9ecef;
      }

      .panel h2 {
        color: #495057;
        margin-bottom: 20px;
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .computer-grid {
        display: grid;
        gap: 15px;
        max-height: 400px;
        overflow-y: auto;
      }

      .computer-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        border: 1px solid #dee2e6;
        transition: all 0.3s ease;
      }

      .computer-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .computer-card.online {
        border-left: 4px solid #28a745;
      }

      .computer-card.offline {
        border-left: 4px solid #dc3545;
        opacity: 0.7;
      }

      .computer-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
      }

      .computer-name {
        font-weight: 600;
        color: #495057;
      }

      .computer-status {
        font-size: 0.8rem;
        padding: 4px 8px;
        border-radius: 12px;
        font-weight: 500;
      }

      .computer-status.online {
        background: #d4edda;
        color: #155724;
      }

      .computer-status.offline {
        background: #f8d7da;
        color: #721c24;
      }

      .computer-details {
        font-size: 0.9rem;
        color: #6c757d;
        line-height: 1.4;
      }

      .chat-section {
        grid-column: 1 / -1;
      }

      .chat-container {
        background: white;
        border-radius: 10px;
        border: 1px solid #dee2e6;
        height: 400px;
        display: flex;
        flex-direction: column;
      }

      .chat-header {
        background: #f8f9fa;
        padding: 15px 20px;
        border-bottom: 1px solid #dee2e6;
        border-radius: 10px 10px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .chat-messages {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 15px;
      }

      .message {
        padding: 12px 16px;
        border-radius: 15px;
        max-width: 80%;
        word-wrap: break-word;
      }

      .message.system {
        background: #e3f2fd;
        color: #1565c0;
        align-self: center;
        font-style: italic;
      }

      .message.user {
        background: #667eea;
        color: white;
        align-self: flex-end;
      }

      .message.ai {
        background: #f5f5f5;
        color: #333;
        align-self: flex-start;
      }

      .chat-input {
        padding: 20px;
        border-top: 1px solid #dee2e6;
        border-radius: 0 0 10px 10px;
        display: flex;
        gap: 10px;
      }

      .chat-input input {
        flex: 1;
        padding: 12px 16px;
        border: 1px solid #dee2e6;
        border-radius: 25px;
        font-size: 1rem;
        outline: none;
        transition: border-color 0.3s ease;
      }

      .chat-input input:focus {
        border-color: #667eea;
      }

      .chat-input button {
        padding: 12px 24px;
        background: #667eea;
        color: white;
        border: none;
        border-radius: 25px;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s ease;
      }

      .chat-input button:hover {
        background: #5a6fd8;
      }

      .quick-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
        margin-top: 20px;
      }

      .quick-btn {
        padding: 10px 15px;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
      }

      .quick-btn:hover {
        background: #667eea;
        color: white;
        border-color: #667eea;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 15px;
        margin-top: 20px;
      }

      .stat-item {
        text-align: center;
        padding: 15px;
        background: white;
        border-radius: 10px;
        border: 1px solid #dee2e6;
      }

      .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 5px;
      }

      .stat-label {
        font-size: 0.8rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .loading {
        text-align: center;
        padding: 40px;
        color: #6c757d;
      }

      .error {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 8px;
        margin: 20px 0;
      }

      @media (max-width: 768px) {
        .main-content {
          grid-template-columns: 1fr;
          gap: 20px;
          padding: 20px;
        }

        .status-bar {
          flex-direction: column;
          align-items: flex-start;
        }

        .header h1 {
          font-size: 2rem;
        }
      }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ Automated Chat Reconnection System</h1>
                <p>Monitor and control chat connections across all computers with Cursor</p>
            </div>
            <div class="status-bar">
                <div class="status-item">
                    <div class="status-indicator" id="systemStatus"></div>
                    <span id="systemStatusText">Checking system status...</span>
                </div>
                <div class="status-item">
                    <span>üñ•Ô∏è Computers Online: <strong id="onlineCount">-</strong></span>
                </div>
                <div class="status-item">
                    <span>üí¨ Active Chats: <strong id="activeChats">-</strong></span>
                </div>
                <div class="status-item">
                    <span>‚è±Ô∏è Uptime: <strong id="uptime">-</strong></span>
                </div>
            </div>
            <div class="main-content">
                <div class="panel">
                    <h2>üñ•Ô∏è Connected Computers</h2>
                    <div class="computer-grid" id="computerGrid">
                        <div class="loading">Loading computers...</div>
                    </div>
                </div>
                <div class="panel">
                    <h2>üìä System Statistics</h2>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-value" id="totalComputers">-</div>
                            <div class="stat-label">Total Computers</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="onlineComputers">-</div>
                            <div class="stat-label">Online</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="chatMessages">-</div>
                            <div class="stat-label">Chat Messages</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="reconnections">-</div>
                            <div class="stat-label">Reconnections</div>
                        </div>
                    </div>
                    <div class="quick-actions">
                        <button class="quick-btn"
                                onclick="triggerChat('build', 'Please analyze the current build process')">
                            üî® Build Analysis
                        </button>
                        <button class="quick-btn"
                                onclick="triggerChat('lint', 'Check for code quality issues')">üßπ Code Quality</button>
                        <button class="quick-btn"
                                onclick="triggerChat('test', 'Run comprehensive tests')">üß™ Run Tests</button>
                        <button class="quick-btn"
                                onclick="triggerChat('deploy', 'Prepare for deployment')">üöÄ Deploy</button>
                        <button class="quick-btn"
                                onclick="triggerChat('optimize', 'Optimize performance')">‚ö° Optimize</button>
                        <button class="quick-btn" onclick="triggerChat('security', 'Security audit')">üîí Security</button>
                    </div>
                </div>
                <div class="panel chat-section">
                    <h2>üí¨ Live Chat</h2>
                    <div class="chat-container">
                        <div class="chat-header">
                            <span>System Chat</span>
                            <span id="chatStatus">Connected</span>
                        </div>
                        <div class="chat-messages" id="chatMessages">
                            <div class="message system">System initialized. Ready to chat with all connected computers.</div>
                        </div>
                        <div class="chat-input">
                            <input type="text"
                                   id="messageInput"
                                   placeholder="Type your message..."
                                   onkeypress="handleKeyPress(event)" />
                            <button onclick="sendMessage()">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <script>
      // Configuration
      const CONFIG = {
        API_BASE: 'http://localhost:3009',
        UPDATE_INTERVAL: 5000,
        WEBSOCKET_URL: 'ws://localhost:3009',
      };

      // State
      let computers = [];
      let chatHistory = [];
      let websocket = null;
      let updateInterval = null;

      // Initialize
      document.addEventListener('DOMContentLoaded', function () {
        initializeWebSocket();
        startPeriodicUpdates();
        loadInitialData();
      });

      // WebSocket connection
      function initializeWebSocket() {
        try {
          websocket = new WebSocket(CONFIG.WEBSOCKET_URL);

          websocket.onopen = function () {
            logger.info('WebSocket connected');
            updateChatStatus('Connected', 'online');
          };

          websocket.onmessage = function (event) {
            const data = JSON.parse(event.data);
            handleWebSocketMessage(data);
          };

          websocket.onclose = function () {
            logger.info('WebSocket disconnected');
            updateChatStatus('Disconnected', 'offline');
            // Reconnect after 5 seconds
            
const timeoutId = 
const timeoutId = setTimeout(initializeWebSocket,   5000);
// Store timeoutId for cleanup if needed
;
// Store timeoutId for cleanup if needed
;
          };

          websocket.onerror = function (error) {
            logger.error('WebSocket error:', error);
            updateChatStatus('Error', 'offline');
          };
        } catch (error) {
          logger.error('Failed to initialize WebSocket:', error);
          updateChatStatus('Failed to connect', 'offline');
        }
      }

      // Handle WebSocket messages
      function handleWebSocketMessage(data) {
        switch (data.type) {
          case 'chat':
            addChatMessage(data.message, 'ai', data.computerId);
            break;
          case 'system':
            addChatMessage(data.message, 'system');
            break;
          case 'computer_status':
            updateComputerStatus(data);
            break;
          default:
            logger.info('Unknown message type:', data.type);
        }
      }

      // Periodic updates
      function startPeriodicUpdates() {
        updateInterval = setInterval(() => {
          fetchSystemStatus();
          fetchComputers();
        }, CONFIG.UPDATE_INTERVAL);
      }

      // Load initial data
      async function loadInitialData() {
        await Promise.all([fetchSystemStatus(), fetchComputers()]);
      }

      // Fetch system status
      async function fetchSystemStatus() {
        try {
          const response = await fetch(`${CONFIG.API_BASE}/status`);
          const data = await response.json();
          updateSystemStatus(data);
        } catch (error) {
          logger.error('Failed to fetch system status:', error);
          updateSystemStatus({ isConnected: false });
        }
      }

      // Fetch computers
      async function fetchComputers() {
        try {
          const response = await fetch(`${CONFIG.API_BASE}/computers`);
          const data = await response.json();
          computers = data;
          updateComputerGrid();
          updateStatistics();
        } catch (error) {
          logger.error('Failed to fetch computers:', error);
        }
      }

      // Update system status
      function updateSystemStatus(data) {
        const statusIndicator = document.getElementById('systemStatus');
        const statusText = document.getElementById('systemStatusText');
        const onlineCount = document.getElementById('onlineCount');
        const activeChats = document.getElementById('activeChats');
        const uptime = document.getElementById('uptime');

        if (data.isConnected) {
          statusIndicator.className = 'status-indicator online';
          statusText.textContent = 'System Online';
        } else {
          statusIndicator.className = 'status-indicator offline';
          statusText.textContent = 'System Offline';
        }

        onlineCount.textContent = data.discoveredComputers || 0;
        activeChats.textContent = data.activeConnections || 0;
        uptime.textContent = formatUptime(data.uptime || 0);
      }

      // Update computer grid
      function updateComputerGrid() {
        const grid = document.getElementById('computerGrid');

        if (computers.length === 0) {
          grid.innerHTML = '<div class="loading">No computers discovered</div>';
          return;
        }

        grid.innerHTML = computers
          .map(
            (computer) => `
                <div class="computer-card ${computer.isConnected ? 'online' : 'offline'}">
                    <div class="computer-header">
                        <div class="computer-name">${computer.hostname}</div>
                        <div class="computer-status ${computer.isConnected ? 'online' : 'offline'}">
                            ${computer.isConnected ? 'Online' : 'Offline'}
                        </div>
                    </div>
                    <div class="computer-details">
                        <div>ID: ${computer.computerId}</div>
                        <div>Platform: ${computer.platform}</div>
                        <div>Last Seen: ${formatTimestamp(computer.lastSeen)}</div>
                    </div>
                </div>
            `,
          )
          .join('');
      }

      // Update statistics
      function updateStatistics() {
        const totalComputers = document.getElementById('totalComputers');
        const onlineComputers = document.getElementById('onlineComputers');
        const chatMessages = document.getElementById('chatMessages');
        const reconnections = document.getElementById('reconnections');

        const online = computers.filter((c) => c.isConnected).length;

        totalComputers.textContent = computers.length;
        onlineComputers.textContent = online;
        chatMessages.textContent = chatHistory.length;
        reconnections.textContent = '0'; // TODO: Track reconnections
      }

      // Update computer status
      function updateComputerStatus(data) {
        const index = computers.findIndex(
          (c) => c.computerId === data.computerId,
        );
        if (index !== -1) {
          computers[index] = { ...computers[index], ...data };
          updateComputerGrid();
          updateStatistics();
        }
      }

      // Update chat status
      function updateChatStatus(status, type) {
        const chatStatus = document.getElementById('chatStatus');
        chatStatus.textContent = status;
        chatStatus.className = type;
      }

      // Add chat message
      function addChatMessage(message, type, computerId = null) {
        const messagesContainer = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;

        let displayMessage = message;
        if (computerId && type === 'ai') {
          displayMessage = `[${computerId}]: ${message}`;
        }

        messageDiv.textContent = displayMessage;
        messagesContainer.appendChild(messageDiv);

        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // Store in history
        chatHistory.push({
          message,
          type,
          computerId,
          timestamp: Date.now(),
        });

        // Keep only last 100 messages
        if (chatHistory.length > 100) {
          chatHistory = chatHistory.slice(-100);
        }

        updateStatistics();
      }

      // Send message
      function sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();

        if (!message) return;

        // Add user message
        addChatMessage(message, 'user');

        // Send via WebSocket
        if (websocket && websocket.readyState === WebSocket.OPEN) {
          websocket.send(
            JSON.stringify({
              type: 'chat',
              message: message,
              room: 'general',
            }),
          );
        }

        // Clear input
        input.value = '';
      }

      // Handle key press
      function handleKeyPress(event) {
        if (event.key === 'Enter') {
          sendMessage();
        }
      }

      // Trigger chat
      function triggerChat(category, message) {
        addChatMessage(`Triggering ${category} chat: ${message}`, 'system');

        if (websocket && websocket.readyState === WebSocket.OPEN) {
          websocket.send(
            JSON.stringify({
              type: 'chat_trigger',
              category: category,
              message: message,
              priority: 'medium',
              automated: false,
            }),
          );
        }
      }

      // Utility functions
      function formatUptime(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        return `${hours}h ${minutes}m`;
      }

      function formatTimestamp(timestamp) {
        if (!timestamp) return 'Unknown';
        const date = new Date(timestamp);
        return date.toLocaleString();
      }

      // Cleanup on page unload
      window.addEventListener('beforeunload', function () {
        if (updateInterval) {
          clearInterval(updateInterval);
        }
        if (websocket) {
          websocket.close();
        }
      });
        </script>
    </body>
</html>
