const fs = require('fs');
const path = require('path');
const { spawnSync } = require('child_process');

function runNode(relPath, args = []) {
  const abs = path.resolve(__dirname, '..', '..', relPath);
  const res = spawnSync('node', [abs, ...args], { stdio: 'pipe', encoding: 'utf8' });
  return { status: res.status || 0, stdout: res.stdout || '', stderr: res.stderr || '' };
}

function readFileSafe(p) {
  try { return fs.readFileSync(p, 'utf8'); } catch { return ''; }
}

function parseSchedules(tomlContent) {
  const schedules = [];
  const blocks = tomlContent.split('[[scheduled.functions]]');
  for (const block of blocks) {
    const nameMatch = block.match(/\bname\s*=\s*"([^"]+)"/);
    const schedMatch = block.match(/\bschedule\s*=\s*"([^"]+)"/);
    if (nameMatch && schedMatch) {
      schedules.push({ name: nameMatch[1], schedule: schedMatch[1] });
    }
  }
  return schedules;
}

function loadFunctionsManifest() {
  try {
    const manifest = require('./functions-manifest.json');
    if (Array.isArray(manifest.functions)) return manifest.functions;
  } catch {}
  // Fallback: list js files in this folder
  const files = fs.readdirSync(__dirname).filter(f => f.endsWith('.js'));
  return files.map(f => f.replace(/\.js$/, ''));
}

exports.config = {
  schedule: '*/30 * * * *',
};

exports.handler = async () => {
  const logs = [];
  function log(msg) { logs.push(String(msg)); }

  const repoRoot = path.resolve(__dirname, '..', '..');
  const netlifyTomlPath = path.join(repoRoot, 'netlify.toml');
  const roadmapPath = path.join(repoRoot, 'docs', 'ROADMAP.md');

  // Ensure docs directory exists
  fs.mkdirSync(path.dirname(roadmapPath), { recursive: true });

  const tomlContent = readFileSafe(netlifyTomlPath);
  const schedules = parseSchedules(tomlContent).sort((a, b) => a.name.localeCompare(b.name));
  const allFunctions = loadFunctionsManifest().sort();

  const nowIso = new Date().toISOString();

  const md = [
    '# Autonomous Automations Roadmap',
    '',
    `Last updated: ${nowIso}`,
    '',
    '## Active Scheduled Cloud Functions',
    '',
    '| Function | Schedule |',
    '|---|---|',
    ...schedules.map(s => `| ${s.name} | ${s.schedule} |`),
    '',
    '## Discovered Functions (Manifest)',
    '',
    allFunctions.length ? allFunctions.map(n => `- ${n}`).join('\n') : '_No functions found_',
    '',
    '## Notes',
    '',
    '- This file is auto-generated by the `roadmap-curator` Netlify function.',
    '- Edit schedules in `netlify.toml`. Functions are scanned from `netlify/functions`.',
  ].join('\n');

  fs.writeFileSync(roadmapPath, md, 'utf8');
  log(`Wrote ${roadmapPath}`);

  // Attempt to sync changes
  const sync = runNode('automation/advanced-git-sync.cjs');
  if (sync.stdout) log(sync.stdout);
  if (sync.stderr) log(sync.stderr);
  log(`git: exit=${sync.status}`);

  return { statusCode: 200, body: logs.join('\n') };
};