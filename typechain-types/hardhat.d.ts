/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ILayerZeroEndpointV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpointV2__factory>;
    getContractFactory(
      name: "LayerZeroAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LayerZeroAdapter__factory>;
    getContractFactory(
      name: "IGovernanceExecutorLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernanceExecutorLike__factory>;
    getContractFactory(
      name: "ILayerZeroReceiverV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiverV2__factory>;
    getContractFactory(
      name: "VoteBridgeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteBridgeReceiver__factory>;
    getContractFactory(
      name: "GovernanceExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceExecutor__factory>;
    getContractFactory(
      name: "ITimelockControllerLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelockControllerLike__factory>;
    getContractFactory(
      name: "VoteRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteRelay__factory>;
    getContractFactory(
      name: "IBridgeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeAdapter__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ZIONToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZIONToken__factory>;

    getContractAt(
      name: "ILayerZeroEndpointV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    getContractAt(
      name: "LayerZeroAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LayerZeroAdapter>;
    getContractAt(
      name: "IGovernanceExecutorLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernanceExecutorLike>;
    getContractAt(
      name: "ILayerZeroReceiverV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiverV2>;
    getContractAt(
      name: "VoteBridgeReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteBridgeReceiver>;
    getContractAt(
      name: "GovernanceExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceExecutor>;
    getContractAt(
      name: "ITimelockControllerLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimelockControllerLike>;
    getContractAt(
      name: "VoteRelay",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteRelay>;
    getContractAt(
      name: "IBridgeAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeAdapter>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ZIONToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZIONToken>;

    deployContract(
      name: "ILayerZeroEndpointV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    deployContract(
      name: "LayerZeroAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LayerZeroAdapter>;
    deployContract(
      name: "IGovernanceExecutorLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceExecutorLike>;
    deployContract(
      name: "ILayerZeroReceiverV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroReceiverV2>;
    deployContract(
      name: "VoteBridgeReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoteBridgeReceiver>;
    deployContract(
      name: "GovernanceExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceExecutor>;
    deployContract(
      name: "ITimelockControllerLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITimelockControllerLike>;
    deployContract(
      name: "VoteRelay",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoteRelay>;
    deployContract(
      name: "IBridgeAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeAdapter>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ZIONToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZIONToken>;

    deployContract(
      name: "ILayerZeroEndpointV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    deployContract(
      name: "LayerZeroAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LayerZeroAdapter>;
    deployContract(
      name: "IGovernanceExecutorLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceExecutorLike>;
    deployContract(
      name: "ILayerZeroReceiverV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroReceiverV2>;
    deployContract(
      name: "VoteBridgeReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoteBridgeReceiver>;
    deployContract(
      name: "GovernanceExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceExecutor>;
    deployContract(
      name: "ITimelockControllerLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITimelockControllerLike>;
    deployContract(
      name: "VoteRelay",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoteRelay>;
    deployContract(
      name: "IBridgeAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeAdapter>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ZIONToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZIONToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
