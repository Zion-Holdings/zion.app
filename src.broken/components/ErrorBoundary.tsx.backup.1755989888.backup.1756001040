<<<<<<< HEAD
=======
<<<<<<< HEAD
import React from "react";
import type { ReactNode } from "react";

interface ErrorBoundaryProps {
  fallback: ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
}

export class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: unknown) {
    console.error("ErrorBoundary caught an error", error);
=======
>>>>>>> origin/cursor/website-audit-and-enhancement-63e3
import React from 'react';
import type { ReactNode, ErrorInfo } from 'react';
import { toast } from 'react-hot-toast';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends React.Component<Props, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError(): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, _errorInfo: ErrorInfo) {
    toast.error(error.message || 'An unexpected error occurred');
<<<<<<< HEAD
=======
>>>>>>> origin/8arrdw-codex/centralize-fetch-error-handling
>>>>>>> origin/cursor/website-audit-and-enhancement-63e3
  }

  render() {
    if (this.state.hasError) {
<<<<<<< HEAD
=======
<<<<<<< HEAD
      return this.props.fallback;
    }
    return this.props.children;
  }
}

export default ErrorBoundary;
=======
>>>>>>> origin/cursor/website-audit-and-enhancement-63e3
      return null;
    }

    return this.props.children;
  }
}
<<<<<<< HEAD
=======
>>>>>>> origin/8arrdw-codex/centralize-fetch-error-handling
>>>>>>> origin/cursor/website-audit-and-enhancement-63e3
