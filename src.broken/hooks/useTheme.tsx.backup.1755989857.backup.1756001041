
<<<<<<< HEAD
=======
<<<<<<< HEAD
// Provide a thin wrapper around the ThemeProvider's context so that hooks can
// be imported from a single location without losing type information.
import { useContext } from "react";
import { ThemeProviderContext } from "@/components/ThemeProvider";

/**
 * Possible theme values supported by the application.
 */
export type Theme = "dark" | "light" | "system";

/**
 * Shape of the data exposed by the ThemeProvider context.
 */
export interface ThemeProviderState {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  toggleTheme: () => void;
}

/**
 * Access the current theme and the function to update it.
 *
 * The explicit cast ensures TypeScript correctly infers the returned
 * object shape when the context type information is lost.
 */
export const useTheme = (): ThemeProviderState => {
  return useContext(ThemeProviderContext) as ThemeProviderState;
};
=======
>>>>>>> origin/cursor/website-audit-and-enhancement-63e3
// Re-export the theme hook from the shared ThemeProvider so that any component
// importing `@/hooks/useTheme` receives the real implementation.  This allows
// the ModeToggle and support components to correctly toggle between light and
// dark modes.
export { useTheme, ThemeProviderContext } from "@/components/ThemeProvider";
export type { Theme, ThemeProviderState } from "@/components/ThemeProvider";
<<<<<<< HEAD
=======
>>>>>>> origin/4xe4ab-codex/fix--settheme--not-found-in-usetheme
>>>>>>> origin/cursor/website-audit-and-enhancement-63e3
