/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VoteRelayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridge"
      | "executor"
      | "owner"
      | "proposalHashById"
      | "sendProposal"
      | "sendVoteMirror"
      | "setBridge"
      | "setExecutor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeUpdated"
      | "ExecutorUpdated"
      | "OwnerUpdated"
      | "ProposalSent"
      | "VoteMirrorSent"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalHashById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendProposal",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendVoteMirror",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalHashById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendVoteMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
}

export namespace BridgeUpdatedEvent {
  export type InputTuple = [bridge: AddressLike];
  export type OutputTuple = [bridge: string];
  export interface OutputObject {
    bridge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorUpdatedEvent {
  export type InputTuple = [executor: AddressLike];
  export type OutputTuple = [executor: string];
  export interface OutputObject {
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalSentEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposalHash: BytesLike,
    dstChainId: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposalHash: string,
    dstChainId: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposalHash: string;
    dstChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteMirrorSentEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    forVotes: BigNumberish,
    againstVotes: BigNumberish,
    dstChainId: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    dstChainId: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    dstChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoteRelay extends BaseContract {
  connect(runner?: ContractRunner | null): VoteRelay;
  waitForDeployment(): Promise<this>;

  interface: VoteRelayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridge: TypedContractMethod<[], [string], "view">;

  executor: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalHashById: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  sendProposal: TypedContractMethod<
    [
      dstChainId: BigNumberish,
      dstAddress: BytesLike,
      proposalId: BigNumberish,
      proposalHash: BytesLike
    ],
    [void],
    "payable"
  >;

  sendVoteMirror: TypedContractMethod<
    [
      dstChainId: BigNumberish,
      dstAddress: BytesLike,
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish
    ],
    [void],
    "payable"
  >;

  setBridge: TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;

  setExecutor: TypedContractMethod<
    [_executor: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalHashById"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "sendProposal"
  ): TypedContractMethod<
    [
      dstChainId: BigNumberish,
      dstAddress: BytesLike,
      proposalId: BigNumberish,
      proposalHash: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendVoteMirror"
  ): TypedContractMethod<
    [
      dstChainId: BigNumberish,
      dstAddress: BytesLike,
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setBridge"
  ): TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExecutor"
  ): TypedContractMethod<[_executor: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BridgeUpdated"
  ): TypedContractEvent<
    BridgeUpdatedEvent.InputTuple,
    BridgeUpdatedEvent.OutputTuple,
    BridgeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorUpdated"
  ): TypedContractEvent<
    ExecutorUpdatedEvent.InputTuple,
    ExecutorUpdatedEvent.OutputTuple,
    ExecutorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalSent"
  ): TypedContractEvent<
    ProposalSentEvent.InputTuple,
    ProposalSentEvent.OutputTuple,
    ProposalSentEvent.OutputObject
  >;
  getEvent(
    key: "VoteMirrorSent"
  ): TypedContractEvent<
    VoteMirrorSentEvent.InputTuple,
    VoteMirrorSentEvent.OutputTuple,
    VoteMirrorSentEvent.OutputObject
  >;

  filters: {
    "BridgeUpdated(address)": TypedContractEvent<
      BridgeUpdatedEvent.InputTuple,
      BridgeUpdatedEvent.OutputTuple,
      BridgeUpdatedEvent.OutputObject
    >;
    BridgeUpdated: TypedContractEvent<
      BridgeUpdatedEvent.InputTuple,
      BridgeUpdatedEvent.OutputTuple,
      BridgeUpdatedEvent.OutputObject
    >;

    "ExecutorUpdated(address)": TypedContractEvent<
      ExecutorUpdatedEvent.InputTuple,
      ExecutorUpdatedEvent.OutputTuple,
      ExecutorUpdatedEvent.OutputObject
    >;
    ExecutorUpdated: TypedContractEvent<
      ExecutorUpdatedEvent.InputTuple,
      ExecutorUpdatedEvent.OutputTuple,
      ExecutorUpdatedEvent.OutputObject
    >;

    "OwnerUpdated(address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "ProposalSent(uint256,bytes32,uint16)": TypedContractEvent<
      ProposalSentEvent.InputTuple,
      ProposalSentEvent.OutputTuple,
      ProposalSentEvent.OutputObject
    >;
    ProposalSent: TypedContractEvent<
      ProposalSentEvent.InputTuple,
      ProposalSentEvent.OutputTuple,
      ProposalSentEvent.OutputObject
    >;

    "VoteMirrorSent(uint256,uint256,uint256,uint16)": TypedContractEvent<
      VoteMirrorSentEvent.InputTuple,
      VoteMirrorSentEvent.OutputTuple,
      VoteMirrorSentEvent.OutputObject
    >;
    VoteMirrorSent: TypedContractEvent<
      VoteMirrorSentEvent.InputTuple,
      VoteMirrorSentEvent.OutputTuple,
      VoteMirrorSentEvent.OutputObject
    >;
  };
}
