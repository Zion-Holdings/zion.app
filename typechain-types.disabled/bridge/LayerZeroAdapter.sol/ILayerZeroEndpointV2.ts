/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ILayerZeroEndpointV2Interface extends Interface {
  getFunction(nameOrSignature: "quote" | "send"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
}

export interface ILayerZeroEndpointV2 extends BaseContract {
  connect(runner?: ContractRunner | null): ILayerZeroEndpointV2;
  waitForDeployment(): Promise<this>;

  interface: ILayerZeroEndpointV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  quote: TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _path: BytesLike,
      _message: BytesLike,
      _options: BytesLike,
      _payInZRO: boolean
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  send: TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _path: BytesLike,
      _message: BytesLike,
      _options: BytesLike,
      _payInZRO: BytesLike,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _path: BytesLike,
      _message: BytesLike,
      _options: BytesLike,
      _payInZRO: boolean
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _path: BytesLike,
      _message: BytesLike,
      _options: BytesLike,
      _payInZRO: BytesLike,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  filters: {};
}
