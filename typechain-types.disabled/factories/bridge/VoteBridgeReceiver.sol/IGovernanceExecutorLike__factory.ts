/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGovernanceExecutorLike,
  IGovernanceExecutorLikeInterface,
} from "../../../bridge/VoteBridgeReceiver.sol/IGovernanceExecutorLike";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "onProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "againstVotes",
        type: "uint256",
      },
    ],
    name: "onVoteMirror",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IGovernanceExecutorLike__factory {
  static readonly abi = _abi;
  static createInterface(): IGovernanceExecutorLikeInterface {
    return new Interface(_abi) as IGovernanceExecutorLikeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGovernanceExecutorLike {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IGovernanceExecutorLike;
  }
}
