<<<<<<< HEAD

import React from "react";
import { Outlet } from "react-router-dom";
import { Toaster } from "react-hot-toast";
import { AppHeader } from "./AppHeader";
import { Footer } from "@/components/Footer";
import { ErrorBoundary } from "@/components/ErrorBoundary";

interface AppLayoutProps {
  children?: React.ReactNode; // Kept ReactNode for consistency
  hideFooter?: boolean;
}

export function AppLayout({ children, hideFooter = false }: AppLayoutProps) {
  // Example: using an auth context
  // IMPORTANT: The actual useAuth() hook and its returned 'user' object (with 'email' and 'emailVerified' fields)
  // must be implemented in '@/context/auth/AuthContext.tsx' for this to work.
  // This is a placeholder integration as per instructions.
  const { user, isAuthenticated } = useAuth() || {}; // Added fallback to empty object for safety if useAuth is not ready
  // Track how long users spend on each page
  useSessionDuration();
  // Enable basic swipe gestures for navigation
  useNavigationGestures();
  const [isResendingEmail, setIsResendingEmail] = useState(false);
  const [resendStatusMessage, setResendStatusMessage] = useState('');
  const { loading: rawLoading, error, setError } = useGlobalLoader();
  const loading: boolean = Boolean(rawLoading);
  const pathname = useSafePathname();
  const isAuthPage = /^\/auth|\/login|\/register|\/signup|\/forgot-password|\/reset-password|\/update-password/.test(pathname);

  const handleResendVerificationEmail = async () => {
    if (!user || !user.email) {
      setResendStatusMessage('User email not found. Cannot resend verification.');
      return;
    }
    setIsResendingEmail(true);
    setResendStatusMessage(''); // Clear previous message

    try {
      const response = await fetch('/api/auth/resend-verification-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Auth token should be handled by cookies automatically by the browser
        },
      });
      const data = await response.json();

      if (response.ok) {
        setResendStatusMessage(data.message || 'Verification email resent successfully! Please check your inbox.');
      } else {
        setResendStatusMessage(data.message || 'Failed to resend verification email.');
      }
    } catch (error) {
      logErrorToProduction(error instanceof Error ? error.message : String(error), error instanceof Error ? error : undefined, { message: 'Resend email error' });
      setResendStatusMessage('An error occurred while resending the email.');
    } finally {
      setIsResendingEmail(false);
    }
  };

  return (
    <ErrorBoundary>
      <div className="flex flex-col min-h-screen bg-background">
        <AppHeader />
        <main className="flex-grow">
          {children ?? <Outlet />}
        </main>
        {!hideFooter && <Footer />}
      </div>
      <Toaster position="top-right" />
    </ErrorBoundary>
=======
import React from 'react';
export function AppLayout() {
  return (
    <div>
      <h1>Component</h1>
      <p>Component placeholder</p>
    </div>
>>>>>>> origin/automation-error-fixes
  );
}
