<<<<<<< HEAD
import { useEffect, useState } from "react";
import type { QuoteFormData, ListingItem, ServiceType } from "@/types/quotes";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { Search } from 'lucide-react';

import { ListingScoreCard } from "@/components/ListingScoreCard";
import api from '@/lib/api';

interface ServiceTypeStepProps {
  formData: QuoteFormData;
  updateFormData: (data: Partial<QuoteFormData>) => void;
}


export function ServiceTypeStep({ formData, updateFormData }: ServiceTypeStepProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const debouncedQuery = useDebounce(searchQuery, 300);
  const [listings, setListings] = useState<ListingItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const isMounted = useIsMounted();

  // Fetch services when the service type or query changes
  useEffect(() => {
    if (!formData.serviceType) {
      setListings([]);
      return;
    }

    const fetchServices = async () => {
      setLoading(true);
      try {
        const response = await api.get(
          `/api/services?categoryId=${encodeURIComponent(formData.serviceType)}`
        );
        if (response.status < 200 || response.status >= 300) throw new Error('Failed to fetch');
        const data = response.data;
        setListings(data as ListingItem[]);
      } catch (err) {
        // Fallback to sample data on error
        setListings(SAMPLE_LISTINGS.filter(item => item.category.toLowerCase() === formData.serviceType.toLowerCase()));
      } finally {
        setLoading(false);
      }
    };

    fetchServices();
  }, [formData.serviceType, debouncedQuery, isMounted]);
  
  const handleTypeSelect = (type: ServiceType) => {
    updateFormData({ serviceType: type });
  };
  
  const handleItemSelect = (item: ListingItem) => {
    updateFormData({ 
      specificItem: item,
      serviceCategory: item.category,
      serviceType: item.category.toLowerCase() as ServiceType
    });
  };
  
  const sourceListings = listings;

  const filteredListings = sourceListings.filter(item => {
    // Filter by category only when a service type has been selected
    if (formData.serviceType !== "") {
      const categoryMatch = item.category.toLowerCase() === formData.serviceType.toLowerCase();
      if (!categoryMatch) return false;
    }
    
    if (searchQuery.trim() === "") return true;
    return item.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
           item.category.toLowerCase().includes(searchQuery.toLowerCase());
  });

=======
import React from 'react';
export function ServiceTypeStep() {
>>>>>>> origin/automation-error-fixes
  return (
    <div>
      <h1>Component</h1>
      <p>Component placeholder</p>
    </div>
  );
}
