<<<<<<< HEAD

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { Loader2, Globe } from 'lucide-react';


import { useTranslation } from "react-i18next";
import { useTranslationService } from "@/hooks/useTranslationService";
import { useLanguage } from "@/context/LanguageContext";
import type { SupportedLanguage } from "@/context/LanguageContext";
import { toast } from "@/components/ui/use-toast";
import {logErrorToProduction} from '@/utils/productionLogger';


interface TranslatableJobFormProps {
  onSubmit: (formData: any) => void;
  isSubmitting?: boolean;
}

export function TranslatableJobForm({ onSubmit, isSubmitting = false }: TranslatableJobFormProps) {
  const { t } = useTranslation();
  const { translateContent, isTranslating } = useTranslationService();
  const { supportedLanguages, currentLanguage } = useLanguage();
  
  const [activeTab, setActiveTab] = useState<SupportedLanguage>(currentLanguage);
  
  // Form fields with translations
  const [title, setTitle] = useState<Record<SupportedLanguage, string>>({
    en: "",
    es: "",
    fr: "",
    pt: "",
    ar: "",
  });
  
  const [description, setDescription] = useState<Record<SupportedLanguage, string>>({
    en: "",
    es: "",
    fr: "",
    pt: "",
    ar: "",
  });
  
  const [requirements, setRequirements] = useState<Record<SupportedLanguage, string>>({
    en: "",
    es: "",
    fr: "",
    pt: "",
    ar: "",
  });
  
  const [budget, setBudget] = useState("");
  const [deadline, setDeadline] = useState("");
  
  // Handle text changes
  const handleTitleChange = (value: string) => {
    setTitle({ ...title, [activeTab]: value });
  };
  
  const handleDescriptionChange = (value: string) => {
    setDescription({ ...description, [activeTab]: value });
  };
  
  const handleRequirementsChange = (value: string) => {
    setRequirements({ ...requirements, [activeTab]: value });
  };
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Complete any missing translations with auto-translation
    await ensureAllTranslations();
    
    onSubmit({
      title,
      description,
      requirements,
      budget,
      deadline,
    });
  };
  
  // Auto translate content when language tab changes
  const handleTabChange = async (tab: string) => {
    const selectedLanguage = tab as SupportedLanguage;
    if (selectedLanguage !== activeTab) {
      setActiveTab(selectedLanguage);
    }
  };
  
  // Auto translate function
  const autoTranslate = async (field: 'title' | 'description' | 'requirements') => {
    let sourceLanguage: SupportedLanguage = 'en-US';
    let content = '';
    
    // Find first non-empty content to translate
    for (const lang of supportedLanguages.map(l => l.code)) {
      if (field === 'title' && title[lang]) {
        content = title[lang];
        sourceLanguage = lang;
        break;
      } else if (field === 'description' && description[lang]) {
        content = description[lang];
        sourceLanguage = lang;
        break;
      } else if (field === 'requirements' && requirements[lang]) {
        content = requirements[lang];
        sourceLanguage = lang;
        break;
      }
    }
    
    if (!content) {
      toast({
        title: t('translation.no_content'),
        description: t('translation.add_content_first'),
        variant: "destructive",
      });
      return;
    }
    
    try {
      const { translations, error } = await translateContent(content, 'job', sourceLanguage);
      
      if (error) {
        toast({
          title: t('translation.translation_failed'),
          description: error,
          variant: "destructive",
        });
        return;
      }
      
      if (field === 'title') {
        setTitle(translations);
      } else if (field === 'description') {
        setDescription(translations);
      } else if (field === 'requirements') {
        setRequirements(translations);
      }
      
      toast({
        title: t('translation.translation_success'),
        description: t('translation.content_translated'),
      });
    } catch (error) {
      logErrorToProduction('Error translating ${field}:', { data: error });
      toast({
        title: t('translation.translation_failed'),
        description: error instanceof Error ? error.message : t('translation.unknown_error'),
        variant: "destructive",
      });
    }
  };
  
  // Ensure all translations are available
  const ensureAllTranslations = async () => {
    const promises = [];
    
    if (!title.en && !title.es && !title.fr && !title.pt && !title.ar) return;
    if (!description.en && !description.es && !description.fr && !description.pt && !description.ar) return;
    
    // Title translations
    if (Object.values(title).some(val => val) && Object.values(title).some(val => !val)) {
      promises.push(autoTranslate('title'));
    }
    
    // Description translations
    if (Object.values(description).some(val => val) && Object.values(description).some(val => !val)) {
      promises.push(autoTranslate('description'));
    }
    
    // Requirements translations
    if (Object.values(requirements).some(val => val) && Object.values(requirements).some(val => !val)) {
      promises.push(autoTranslate('requirements'));
    }
    
    if (promises.length) {
      await Promise.all(promises);
    }
  };
  
=======
import React from 'react';
export function TranslatableJobForm() {
>>>>>>> origin/automation-error-fixes
  return (
    <div>
      <h1>Component</h1>
      <p>Component placeholder</p>
    </div>
  );
}
