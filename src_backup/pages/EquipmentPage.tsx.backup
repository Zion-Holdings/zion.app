import { DynamicListingPage } from "@/components/DynamicListingPage";
import { ProductListing } from "@/types/listings";
import { useEffect, useState, useMemo, useCallback } from "react";
import { useQuery } from "@tanstack/react-query";
import axios from 'axios';
import { generateRandomEquipment } from "@/utils/generateRandomEquipment";
import { Button } from "@/components/ui/button";
import { Loader2, Sparkles, AlertTriangle, ArrowUp, Filter, SortAsc, Zap, TrendingUp, Star, ShoppingCart, MapPin, Package } from "lucide-react";
import Image from 'next/image';
import { toast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { useRouter } from 'next/router';
import Link from 'next/link';
import useSWRMutation from "swr/mutation";
import Skeleton, { SkeletonCard } from "@/components/ui/skeleton"; // Import SkeletonCard
import { FilterSidebarSkeleton } from "@/components/skeletons/FilterSidebarSkeleton"; // Import FilterSidebarSkeleton
import { useDelayedError } from '@/hooks/useDelayedError';
import { useSkeletonTimeout } from '@/hooks/useSkeletonTimeout';
import ErrorBoundary from "@/components/GlobalErrorBoundary"; // Import ErrorBoundary
import { EmptyState } from "@/components/ui/EmptyState";
import { motion, AnimatePresence } from 'framer-motion';
import { useInfiniteScrollPagination } from '@/hooks/useInfiniteScroll';
import { generateDatacenterEquipment, getEquipmentMarketStats, getRecommendedEquipment } from '@/utils/equipmentAutoFeedAlgorithm';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

// The EQUIPMENT_LISTINGS constant has been removed as it was commented out
// and the page primarily relies on API calls and dynamic data generation.
// This helps simplify the file and eliminate potential parsing issues.

const EQUIPMENT_FILTERS = [
  { label: "Servers", value: "Servers" },
  { label: "Networking", value: "Networking" },
  { label: "Power", value: "Power" },
  { label: "Cooling", value: "Cooling" },
  { label: "Storage", value: "Storage" },
  { label: "Security", value: "Security" },
  { label: "Management", value: "Management" },
  { label: "Infrastructure", value: "Infrastructure" },
  { label: "AI", value: "AI" },
  { label: "Robotics", value: "Robotics" },
];

export async function fetchEquipment(): Promise<ProductListing[]> {
  try {
    const { data } = await axios.get('/api/equipment', { timeout: 10000 });
    const items = Array.isArray(data) ? data : data?.items;
    console.log('Equipment fetch successful:', items?.length || 0, 'items');
    return items;
  } catch (error: any) {
    console.error("Raw error object in fetchEquipment:", error);
    
    let errorMessage = 'Failed to fetch equipment';
    
    if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {
      errorMessage = 'Request timed out - please try again';
    } else if (error.response) {
      console.error("Error response data in fetchEquipment:", error.response.data);
      errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;
    } else if (error.request) {
        errorMessage = 'Network error – please retry';
    }
    
    console.error("Failed to fetch equipment:", errorMessage);
    
    // Create a more informative error object
    const enhancedError = new Error(errorMessage);
    enhancedError.name = 'EquipmentFetchError';
    throw enhancedError;
  }
}

// Sample equipment listings to start with
const INITIAL_EQUIPMENT: ProductListing[] = [
  {
    id: "nvidia-a100-server",
    title: "NVIDIA A100 GPU Training Server",
    description: "High-performance AI training server with 8x A100 GPUs, designed for demanding machine learning workloads and research applications.",
    category: "AI Hardware",
    price: 85000,
    currency: "$",
    brand: "NVIDIA",
    specifications: ["8x A100 GPUs", "2TB HBM2e", "NVLink", "Liquid Cooling"],
    tags: ["AI", "Machine Learning", "GPU", "Enterprise"],
    author: {
      name: "NVIDIA",
      id: "nvidia",
      avatarUrl: "https://images.unsplash.com/photo-1555617981-dac388a08846?auto=format&fit=crop&w=100&h=100"
    },
    images: ["https://images.unsplash.com/photo-1618599515406-3e5fd8cd9a27?auto=format&fit=crop&w=800&h=500"],
    createdAt: "2024-01-15T10:30:00.000Z",
    rating: 4.9,
    reviewCount: 27,
    location: "Santa Clara, CA",
    availability: "In Stock"
  },
  {
    id: "dell-poweredge-r750",
    title: "Dell PowerEdge R750 Server",
    description: "Enterprise-grade 2U rack server with dual Intel Xeon processors, perfect for virtualization and cloud computing workloads.",
    category: "Servers & Compute",
    price: 12500,
    currency: "$",
    brand: "Dell",
    specifications: ["Dual Xeon Gold", "128GB DDR4", "4x NVMe SSD", "Redundant PSU"],
    tags: ["Server", "Enterprise", "Virtualization", "Rack Mount"],
    author: {
      name: "Dell Technologies",
      id: "dell",
      avatarUrl: "https://images.unsplash.com/photo-1556761175-4b46a572b786?auto=format&fit=crop&w=100&h=100"
    },
    images: ["https://images.unsplash.com/photo-1627602500429-eed2ca977c0b?auto=format&fit=crop&w=800&h=500"],
    createdAt: "2024-01-12T14:20:00.000Z",
    rating: 4.7,
    reviewCount: 34,
    location: "Austin, TX",
    availability: "2-3 Weeks"
  },
  {
    id: "cisco-nexus-switch",
    title: "Cisco Nexus 9000 Switch",
    description: "High-performance datacenter switch with 100GbE ports, designed for modern cloud-scale networking infrastructure.",
    category: "Networking",
    price: 18500,
    currency: "$",
    brand: "Cisco",
    specifications: ["48x 100GbE", "QSFP28", "Line Rate", "SDN Ready"],
    tags: ["Networking", "Switch", "100GbE", "Datacenter"],
    author: {
      name: "Cisco Systems",
      id: "cisco",
      avatarUrl: "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?auto=format&fit=crop&w=100&h=100"
    },
    images: ["https://images.unsplash.com/photo-1558618666-fcd25c85cd64?auto=format&fit=crop&w=800&h=500"],
    createdAt: "2024-01-10T09:15:00.000Z",
    rating: 4.8,
    reviewCount: 19,
    location: "Ashburn, VA",
    availability: "In Stock"
  }
];

// Market insights component for equipment
const EquipmentMarketInsights: React.FC<{ stats: any }> = ({ stats }) => (
  <Card className="bg-gradient-to-r from-blue-900/20 to-purple-900/20 border-blue-700/30 mb-6">
    <CardContent className="p-6">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="h-5 w-5 text-blue-400" />
        <h3 className="text-lg font-semibold">Equipment Market Insights</h3>
      </div>
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="text-center">
          <div className="text-2xl font-bold text-blue-400">${Math.round(stats.averagePrice / 1000)}k</div>
          <div className="text-sm text-muted-foreground">Avg Price</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-green-400">{stats.averageRating.toFixed(1)}</div>
          <div className="text-sm text-muted-foreground">Avg Rating</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-purple-400">{stats.totalEquipment}</div>
          <div className="text-sm text-muted-foreground">Total Items</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-orange-400">{stats.inStockCount}</div>
          <div className="text-sm text-muted-foreground">In Stock</div>
        </div>
      </div>
    </CardContent>
  </Card>
);

// Filter and sort controls for equipment
const EquipmentFilterControls: React.FC<{
  sortBy: string;
  setSortBy: (sort: string) => void;
  filterCategory: string;
  setFilterCategory: (cat: string) => void;
  filterAvailability: string;
  setFilterAvailability: (avail: string) => void;
  categories: string[];
  showRecommended: boolean;
  setShowRecommended: (show: boolean) => void;
}> = ({ 
  sortBy, 
  setSortBy, 
  filterCategory, 
  setFilterCategory,
  filterAvailability,
  setFilterAvailability,
  categories, 
  showRecommended, 
  setShowRecommended 
}) => (
  <div className="flex flex-wrap gap-4 mb-6 p-4 bg-muted/30 rounded-lg">
    <div className="flex items-center gap-2">
      <Filter className="h-4 w-4 text-muted-foreground" />
      <select
        value={filterCategory}
        onChange={(e) => setFilterCategory(e.target.value)}
        className="bg-background border border-border px-3 py-2 rounded"
      >
        <option value="">All Categories</option>
        {categories.map(cat => (
          <option key={cat} value={cat}>{cat}</option>
        ))}
      </select>
    </div>

    <div className="flex items-center gap-2">
      <Package className="h-4 w-4 text-muted-foreground" />
      <select
        value={filterAvailability}
        onChange={(e) => setFilterAvailability(e.target.value)}
        className="bg-background border border-border px-3 py-2 rounded"
      >
        <option value="">All Availability</option>
        <option value="In Stock">In Stock</option>
        <option value="2-3 Weeks">2-3 Weeks</option>
        <option value="2-4 Weeks">2-4 Weeks</option>
        <option value="Built to Order">Built to Order</option>
      </select>
    </div>
    
    <div className="flex items-center gap-2">
      <SortAsc className="h-4 w-4 text-muted-foreground" />
      <select
        value={sortBy}
        onChange={(e) => setSortBy(e.target.value)}
        className="bg-background border border-border px-3 py-2 rounded"
      >
        <option value="newest">Newest First</option>
        <option value="price-low">Price: Low to High</option>
        <option value="price-high">Price: High to Low</option>
        <option value="rating">Highest Rated</option>
        <option value="availability">In Stock First</option>
      </select>
    </div>

    <Button
      variant={showRecommended ? "default" : "outline"}
      size="sm"
      onClick={() => setShowRecommended(!showRecommended)}
      className="flex items-center gap-2"
    >
      <Star className="h-4 w-4" />
      {showRecommended ? "All Equipment" : "Recommended"}
    </Button>
  </div>
);

// Equipment card component
const EquipmentCard: React.FC<{ equipment: ProductListing; onViewDetails: () => void }> = ({ equipment, onViewDetails }) => (
  <Card className="h-full hover:shadow-lg transition-shadow">
    <CardHeader className="pb-3">
      <div className="flex items-start justify-between">
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold text-lg truncate">{equipment.title}</h3>
          <p className="text-sm text-muted-foreground">{equipment.category}</p>
          <div className="flex items-center gap-2 mt-2">
            <Badge variant="secondary" className="text-xs">{equipment.brand}</Badge>
            <div className="flex items-center gap-1">
              <MapPin className="h-3 w-3 text-muted-foreground" />
              <span className="text-xs text-muted-foreground">{equipment.location}</span>
            </div>
          </div>
        </div>
        <div className="text-right flex-shrink-0">
          <div className="text-2xl font-bold text-blue-600">${equipment.price?.toLocaleString()}</div>
          <Badge 
            variant={equipment.availability === "In Stock" ? "default" : "outline"} 
            className="text-xs mt-1"
          >
            {equipment.availability}
          </Badge>
        </div>
      </div>
    </CardHeader>
    
    <CardContent className="pt-0">
      <div className="flex items-center gap-4 mb-3">
        <div className="flex items-center gap-1">
          <Star className="h-4 w-4 text-yellow-500 fill-current" />
          <span className="text-sm font-medium">{equipment.rating?.toFixed(1)}</span>
          <span className="text-xs text-muted-foreground">({equipment.reviewCount} reviews)</span>
        </div>
      </div>

      <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
        {equipment.description}
      </p>

      <div className="flex flex-wrap gap-1 mb-4">
        {equipment.specifications?.slice(0, 3).map((spec, index) => (
          <Badge key={index} variant="outline" className="text-xs">
            {spec}
          </Badge>
        ))}
        {equipment.specifications && equipment.specifications.length > 3 && (
          <Badge variant="outline" className="text-xs">
            +{equipment.specifications.length - 3} more
          </Badge>
        )}
      </div>

      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Zap className="h-4 w-4 text-blue-500" />
          <span className="text-sm font-medium">{equipment.category}</span>
        </div>
        <Button size="sm" onClick={onViewDetails}>
          <ShoppingCart className="h-4 w-4 mr-1" />
          View Details
        </Button>
      </div>
    </CardContent>
  </Card>
);

// Loading skeleton for equipment grid
const EquipmentLoadingGrid: React.FC<{ count?: number }> = ({ count = 8 }) => (
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
    {Array.from({ length: count }).map((_, i) => (
      <SkeletonCard key={i} />
    ))}
  </div>
);

// Main enhanced equipment page with infinite scroll
export default function EquipmentPage() {
  const router = useRouter();
  const [sortBy, setSortBy] = useState('newest');
  const [filterCategory, setFilterCategory] = useState('');
  const [filterAvailability, setFilterAvailability] = useState('');
  const [showRecommended, setShowRecommended] = useState(false);
  const [totalGenerated, setTotalGenerated] = useState(0);

  // Fetch function for infinite scroll with equipment generation
  const fetchEquipment = useCallback(async (page: number, limit: number) => {
    // Add realistic loading delay
    await new Promise(resolve => setTimeout(resolve, 400));

    let allEquipment: ProductListing[] = [];
    
    // Start with initial equipment on first page
    if (page === 1) {
      allEquipment = [...INITIAL_EQUIPMENT];
    }
    
    // Generate new datacenter equipment using the auto-feed algorithm
    const startId = INITIAL_EQUIPMENT.length + (page - 1) * limit + totalGenerated;
    const newEquipment = generateDatacenterEquipment(limit, startId);
    setTotalGenerated(prev => prev + newEquipment.length);
    
    allEquipment = [...allEquipment, ...newEquipment];
    
    // Apply filters
    let filteredEquipment = allEquipment;
    
    if (filterCategory) {
      filteredEquipment = filteredEquipment.filter(e => e.category === filterCategory);
    }

    if (filterAvailability) {
      filteredEquipment = filteredEquipment.filter(e => e.availability === filterAvailability);
    }
    
    if (showRecommended) {
      filteredEquipment = getRecommendedEquipment(filteredEquipment);
    }
    
    // Apply sorting
    filteredEquipment.sort((a, b) => {
      switch (sortBy) {
        case 'price-low':
          return (a.price || 0) - (b.price || 0);
        case 'price-high':
          return (b.price || 0) - (a.price || 0);
        case 'rating':
          return (b.rating || 0) - (a.rating || 0);
        case 'availability':
          return (a.availability === "In Stock" ? -1 : 1) - (b.availability === "In Stock" ? -1 : 1);
        case 'newest':
        default:
          return new Date(b.createdAt || '').getTime() - new Date(a.createdAt || '').getTime();
      }
    });
    
    // Paginate results
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const items = filteredEquipment.slice(startIndex, endIndex);
    
    return {
      items,
      hasMore: endIndex < filteredEquipment.length || page < 10, // Allow up to 10 pages
      total: filteredEquipment.length
    };
  }, [sortBy, filterCategory, filterAvailability, showRecommended, totalGenerated]);

  // Use infinite scroll hook
  const {
    items: equipment,
    loading,
    error,
    hasMore,
    total,
    isFetching,
    lastElementRef,
    refresh,
    scrollToTop
  } = useInfiniteScrollPagination(fetchEquipment, 12);

  // Refresh when filters change
  useEffect(() => {
    refresh();
    setTotalGenerated(0);
  }, [sortBy, filterCategory, filterAvailability, showRecommended]);

  // Calculate market stats
  const marketStats = useMemo(() => {
    if (equipment.length === 0) return null;
    return getEquipmentMarketStats(equipment);
  }, [equipment]);

  // Get unique categories
  const categories = useMemo(() => {
    return Array.from(new Set(equipment.map(e => e.category).filter(Boolean)));
  }, [equipment]);

  // Show scroll to top button
  const [showScrollTop, setShowScrollTop] = useState(false);
  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 800);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Loading state
  if (loading && equipment.length === 0) {
    return (
      <div className="container py-8" data-testid="equipment-loading">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Datacenter Equipment
          </h1>
          <p className="text-muted-foreground text-lg">
            Professional hardware for modern IT infrastructure and AI workloads
          </p>
        </motion.div>
        <EquipmentLoadingGrid />
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="container py-8">
        <div className="text-center space-y-4">
          <h2 className="text-2xl font-bold">Unable to load equipment</h2>
          <p className="text-muted-foreground">{error}</p>
          <Button onClick={refresh}>Try Again</Button>
        </div>
      </div>
    );
  }

  // Main render
  return (
    <div className="container py-8">
      {/* Header */}
      <motion.div 
        className="text-center mb-8"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          Datacenter Equipment
        </h1>
        <p className="text-muted-foreground text-lg">
          Professional hardware for modern IT infrastructure, AI workloads, and enterprise computing
        </p>
      </motion.div>

      {/* Market Insights */}
      {marketStats && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <EquipmentMarketInsights stats={marketStats} />
        </motion.div>
      )}

      {/* Filter Controls */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <EquipmentFilterControls
          sortBy={sortBy}
          setSortBy={setSortBy}
          filterCategory={filterCategory}
          setFilterCategory={setFilterCategory}
          filterAvailability={filterAvailability}
          setFilterAvailability={setFilterAvailability}
          categories={categories}
          showRecommended={showRecommended}
          setShowRecommended={setShowRecommended}
        />
      </motion.div>

      {/* Equipment Grid */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.4 }}
      >
        <AnimatePresence mode="popLayout">
          {equipment.map((item, index) => (
            <motion.div
              key={item.id}
              ref={index === equipment.length - 1 ? lastElementRef : null}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ delay: Math.min(index * 0.03, 0.5) }}
              whileHover={{ scale: 1.02 }}
            >
              <EquipmentCard
                equipment={item}
                onViewDetails={() => router.push(`/equipment/${item.id}`)}
              />
            </motion.div>
          ))}
        </AnimatePresence>
      </motion.div>

      {/* Loading More Indicator */}
      {(isFetching || loading) && (
        <motion.div
          className="mt-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          <EquipmentLoadingGrid count={4} />
        </motion.div>
      )}

      {/* End of Results */}
      {!hasMore && equipment.length > 0 && (
        <motion.div
          className="text-center mt-12 py-8 border-t"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          <div className="text-muted-foreground text-lg mb-2">
            🏭 You've explored all available equipment!
          </div>
          <div className="text-sm text-muted-foreground">
            Showing {equipment.length} {total && `of ${total}`} datacenter equipment items
          </div>
        </motion.div>
      )}

      {/* Scroll to Top Button */}
      <AnimatePresence>
        {showScrollTop && (
          <motion.button
            onClick={scrollToTop}
            className="fixed bottom-8 right-8 p-3 bg-primary hover:bg-primary/90 rounded-full shadow-lg z-50"
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0 }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            <ArrowUp className="h-5 w-5 text-primary-foreground" />
          </motion.button>
        )}
      </AnimatePresence>
    </div>
  );
}
