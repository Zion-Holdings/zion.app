<<<<<<< HEAD
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
=======
import { useEffect } from 'react';
import { useRouter } from 'next/router'; // Changed from useNavigate
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useAuth } from '@/hooks/useAuth';
import { toast } from '@/hooks/use-toast';
import { signupUser } from '@/services/signupApi';
import { PasswordStrengthMeter } from '@/components/PasswordStrengthMeter';
import {logErrorToProduction} from '@/utils/productionLogger';


const SignupSchema = Yup.object({
  email: Yup.string().email('Invalid email').required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .matches(/[A-Z]/, 'Password must include an uppercase letter')
    .matches(/[a-z]/, 'Password must include a lowercase letter')
    .matches(/[0-9]/, 'Password must include a number')
    .required('Password is required'),
});

>>>>>>> origin/5smo5s-codex/check-logs-and-fix-errors
export default function SimpleSignup() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

<<<<<<< HEAD
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await fetch('/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
      credentials: 'include',
    });
    navigate('/marketplace');
  };
=======
  const formik = useFormik({
    initialValues: { email: '', password: '' },
    validationSchema: SignupSchema,
    onSubmit: async (values, { setSubmitting, setErrors }) => {
      try {
        const data = await signupUser(values.email, values.password, '');
        
        if (data?.emailVerificationRequired) {
          // Email verification required
          toast.success('Account created! Please check your email to verify your account.');
          router.push('/login?message=verify-email');
        } else if (data?.user) {
          // Account created and ready to use
          toast.success('Welcome to Zion!');
          router.push('/marketplace');
        } else {
          // Unexpected response
          toast.success('Account created successfully!');
          router.push('/login');
        }
      } catch (err: unknown) {
        const message = typeof err === 'object' && err !== null && 'message' in err ? (err as { message?: string }).message : 'Signup failed';
        logErrorToProduction('Signup error:', { data: message });
        setErrors({ email: message || 'Signup failed' });
        toast.error(message || 'Signup failed');
      } finally {
        setSubmitting(false);
      }
    },
  });

  useEffect(() => {
    if (formik.submitCount > 0 && Object.keys(formik.errors).length > 0) {
      const firstError = Object.keys(formik.errors)[0];
      if (firstError) {
        const element = document.getElementsByName(firstError)[0] as HTMLElement | undefined;
        element?.focus();
      }
    }
  }, [formik.errors, formik.submitCount]);
>>>>>>> origin/5smo5s-codex/check-logs-and-fix-errors

  return (
    <form onSubmit={handleSubmit} className="p-4 space-y-2">
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        className="border px-2 py-1 w-full"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
        className="border px-2 py-1 w-full"
      />
      <button type="submit" className="bg-blue-500 text-white px-4 py-2">
        Sign Up
      </button>
    </form>
  );
}
