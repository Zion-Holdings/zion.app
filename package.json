{
  "name": "bolt.new.zion.app",
  "version": "0.1.0",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/Zion-Holdings/zion.app.git"
  },
  "bugs": {
    "url": "https://github.com/Zion-Holdings/zion.app/issues"
  },
  "homepage": "https://github.com/Zion-Holdings/zion.app#readme",
  "engines": {
    "node": ">=20.18.1",
    "npm": ">=10.0.0"
  },
  "scripts": {
    "pm2:start": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && pm2 start ecosystem.config.cjs --update-env",
    "pm2:stop": "pm2 stop ecosystem.config.cjs || true",
    "pm2:restart": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && (pm2 restart ecosystem.config.cjs || pm2 start ecosystem.config.cjs --update-env)",
    "pm2:status": "pm2 status",
    "pm2:logs": "pm2 logs --lines 200",
    "pm2:fastads:start": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && pm2 start ecosystem.fast-ads.local.cjs --update-env",
    "pm2:fastads:restart": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && (pm2 restart ecosystem.fast-ads.local.cjs || pm2 start ecosystem.fast-ads.local.cjs --update-env)",
    "pm2:fastads:stop": "pm2 stop ecosystem.fast-ads.local.cjs || true",
    "pm2:cron:start": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && pm2 start ecosystem.cron.local.cjs --update-env",
    "pm2:cron:restart": "node -e \"const fs=require('fs');fs.mkdirSync('automation/logs',{recursive:true})\" && (pm2 restart ecosystem.cron.local.cjs || pm2 start ecosystem.cron.local.cjs --update-env)",
    "pm2:cron:stop": "pm2 stop ecosystem.cron.local.cjs || true",
    "pm2:bootstrap:logrotate": "pm2 install pm2-logrotate || true && pm2 set pm2-logrotate:max_size 10M && pm2 set pm2-logrotate:retain 30 && pm2 set pm2-logrotate:compress true && pm2 set pm2-logrotate:workerInterval 60 && pm2 set pm2-logrotate:rotateInterval '0 0 * * *'",
    "functions:run": "node scripts/run-netlify-functions-locally.cjs",
    "functions:run:execute": "node scripts/run-netlify-functions-locally.cjs --execute",
    "front:advertise": "node automation/front-index-advertiser.cjs",
    "deps:maintain": "node automation/dependency-update-orchestrator.cjs",
    "deps:cron:start": "bash automation/dependency-maintenance-cron.sh",
    "sitemap": "node scripts/generate-sitemap.js",
    "netlify:manifest": "node scripts/generate-netlify-functions-manifest.cjs",
    "netlify:trigger": "node scripts/trigger-netlify-automations.cjs",
    "readme:generate": "node scripts/generate-readme.js",
    "search:index": "node scripts/generate-search-index.js",
    "content:fix": "node automation/content-quality-fixer.cjs && node automation/content-quality-analyzer.cjs",
    "dev": "NODE_OPTIONS=\"--max-old-space-size=4096 --openssl-legacy-provider\" next dev",
    "build": "NODE_OPTIONS=\"--max-old-space-size=6144 --openssl-legacy-provider\" next build",
    "prebuild": "npm run build:health-check && npm run netlify:manifest",
    "export": "rm -rf .next out tsconfig.tsbuildinfo && mkdir -p .temp && mv pages/reports .temp/ 2>/dev/null || true && NODE_OPTIONS=\"--max-old-space-size=6144 --openssl-legacy-provider\" next build --no-lint && mv .temp/reports pages/ 2>/dev/null || true && rm -rf .temp",
    "start": "next start",
    "postbuild": "node automation/footer-injector.cjs || true",
    "lint": "eslint .",
    "type-check": "tsc --noEmit",
    "prepare": "git config core.hooksPath .husky || true",
    "fix:all": "npm run lint -- --fix || true",
    "build:heal": "npm run build || (npm run fix:all && npm run search:index || true && npm run build)",
    "ci:heal": "npm run fix:all && (npm run type-check || true) && npm run build:heal",
    "build:health-check": "node automation/pre-build-health-check.cjs",
    "build:validate": "node automation/nextjs-page-validator.cjs",
    "build:recovery": "node automation/build-failure-recovery.cjs",
    "build:smart": "npm run build:health-check && npm run build:auto-fix",
    "build:auto-fix": "npm run build || (npm run build:recovery && npm run build)",
    "build:monitor": "node automation/continuous-build-monitor.cjs",
    "build:guardian": "node automation/build-guardian.cjs",
    "build:orchestrator": "node automation/master-build-orchestrator.cjs",
    "build:orchestrator:start": "node automation/master-build-orchestrator.cjs",
    "build:orchestrator:status": "node -e \"const {MasterBuildOrchestrator} = require('./automation/master-build-orchestrator.cjs'); const o = new MasterBuildOrchestrator(); console.log(JSON.stringify(o.getStatus(), null, 2));\"",
    "build:smart:full": "node automation/master-build-orchestrator.cjs runSmartBuild",
    "security:scan": "node automation/security-scanner.cjs || true && (npm audit --audit-level=high || true)",
    "auto:intel": "node automation/intelligent-orchestrator.cjs run intelligent",
    "autonomous": "node automation/launch-enhanced-autonomous-system.js",
    "autonomous:dev": "nodemon automation/launch-enhanced-autonomous-system.js",
    "autonomous:status": "node automation/launch-autonomous-systems-clean.js status",
    "linkedin:run": "ts-node scripts/linkedin-automation.ts run",
    "linkedin:cron": "ts-node scripts/linkedin-automation.ts cron",
    "linkedin:generate": "ts-node scripts/linkedin-automation.ts generate",
    "linkedin:start": "npm run linkedin:cron",
    "linkedin:test": "ts-node scripts/test-linkedin-automation.ts",
    "mcp:start": "node mcp-automation-system.js",
    "mcp:client": "node mcp-client-integration.js",
    "mcp:orchestrator": "node automation/mcp-integration-orchestrator.js",
    "mcp:enhance": "node automation/mcp-integration-orchestrator.js enhance",
    "mcp:workflow": "node automation/mcp-integration-orchestrator.js workflow",
    "mcp:report": "node automation/mcp-integration-orchestrator.js report",
    "mcp:setup-cron": "node automation/mcp-integration-orchestrator.js setup-cron",
    "mcp:daily": "node automation/mcp-integration-orchestrator.js daily-workflow",
    "mcp:weekly": "node automation/mcp-integration-orchestrator.js weekly-audit",
    "mcp:monitor": "node automation/mcp-integration-orchestrator.js performance-monitor",
    "mcp:status": "node automation/mcp-integration-orchestrator.js status",
    "mcp:test": "node simple-mcp-test.js",
    "redundancy:start": "./automation/start-redundancy-system.sh start",
    "redundancy:stop": "./automation/start-redundancy-system.sh stop",
    "redundancy:restart": "./automation/start-redundancy-system.sh restart",
    "redundancy:status": "./automation/start-redundancy-system.sh status",
    "redundancy:logs": "./automation/start-redundancy-system.sh logs",
    "redundancy:pm2": "node automation/pm2-redundancy-monitor.cjs check",
    "redundancy:github": "node automation/redundancy/github-actions-redundancy-manager.cjs",
    "redundancy:netlify": "node automation/redundancy/netlify-functions-redundancy-manager.cjs",
    "redundancy:orchestrator": "node automation/master-redundancy-orchestrator.cjs",
    "google-docs:start": "node automation/launch-google-docs-automation.js",
    "google-docs:dev": "nodemon automation/launch-google-docs-automation.js",
    "google-docs:status": "node automation/check-google-docs-status.js",
    "google-docs:report": "node automation/generate-google-docs-report.js",
    "pwa:generate": "node scripts/generate-pwa-assets.js",
    "pwa:validate": "node scripts/validate-pwa.js",
    "perf:lighthouse": "lighthouse https://ziontechgroup.com --output=json --output-path=./lighthouse-report.json",
    "perf:analyze": "npm run build && npm run perf:lighthouse",
    "bundle:analyze": "ANALYZE=true npm run build",
    "test:accessibility": "pa11y-ci",
    "test:performance": "npm run perf:analyze",
    "test:all": "npm run test:accessibility && npm run test:performance"
  },
  "dependencies": {
    "@google-analytics/data": "^5.2.0",
    "@google/generative-ai": "^0.24.1",
    "@magneticwatermelon/mcp-toolkit": "^1.1.4",
    "@modelcontextprotocol/sdk": "^1.17.1",
    "@modelcontextprotocol/server-filesystem": "^2025.7.29",
    "@modelcontextprotocol/server-memory": "^2025.8.4",
    "@modelcontextprotocol/server-sequential-thinking": "^2025.7.1",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.39.0",
    "@types/react-datepicker": "^6.2.0",
    "autoprefixer": "^10.4.21",
    "axios": "^1.11.0",
    "chalk": "^5.5.0",
    "cheerio": "^1.1.2",
    "child_process": "^1.0.2",
    "chokidar": "^4.0.3",
    "clsx": "^2.1.1",
    "cron-parser": "^5.3.0",
    "dotenv": "^17.2.1",
    "events": "^3.3.0",
    "framer-motion": "^12.23.12",
    "fs": "^0.0.1-security",
    "fs-extra": "^11.3.1",
    "glob": "^11.0.3",
    "https": "^1.0.0",
    "import-fresh": "^3.3.1",
    "js-yaml": "^4.1.0",
    "jsdom": "^26.1.0",
    "lucide-react": "^0.540.0",
    "next": "^15.5.0",
    "node-cron": "^4.2.1",
    "openai": "^5.11.0",
    "path": "^0.12.7",
    "postcss": "^8.4.32",
    "react": "^19.1.1",
    "react-datepicker": "^8.4.0",
    "react-dom": "^19.1.1",
    "tailwind-merge": "^3.3.1",
    "uuid": "^11.1.0",
    "webpack-bundle-analyzer": "^4.10.2"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@eslint/js": "^9.32.0",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@types/node": "^24.3.0",
    "@types/node-cron": "^3.0.11",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "eslint": "^8.57.1",
    "eslint-config-next": "^15.0.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.5",
    "postcss": "^8.4.32",
    "sharp": "^0.34.3",
    "tailwindcss": "^3.4.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.0.0"
  },
  "browserslist": [
    ">0.3%",
    "not dead",
    "not op_mini all"
  ],
  "engines": {
    "node": ">=20.18.1",
    "npm": ">=10.0.0"
  }
}
