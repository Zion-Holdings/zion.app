{
  "name": "project",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "bin": {
    "deploy-zion-ipfs": "scripts/deploy-zion-ipfs.js"
  },
  "scripts": {
    "dev": "NODE_OPTIONS='--no-deprecation --max-old-space-size=4096' next dev",
    "dev:quiet": "npm run env:dev && NEXT_PRIVATE_SKIP_SIZE_WARN=1 next dev",
    "dev:verbose": "npm run env:dev && DEBUG=* next dev",
    "dev:monitor": "npm run env:dev && node scripts/performance-monitor.cjs && next dev",
    "dev:react19": "npm run env:dev && REACT_19_MODE=true next dev --experimental-app",
    "dev:turbo": "npm run env:dev && next dev --turbo",
    "dev:offline": "bash offline-dev.sh",
    "generate": "prisma generate",
    "build": "next build",
    "build:monitored": "node scripts/comprehensive-build-check.cjs",
    "analyze:performance": "node scripts/analyze-performance.mjs",
    "analyze:full": "npm run build && npm run analyze:performance",
    "health:check": "curl -s http://localhost:3000/api/health | jq",
    "health:monitor": "node -e \"setInterval(() => fetch('http://localhost:3000/api/health').then(r => r.json()).then(console.log).catch(console.error), 10000)\"",
    "build:netlify": "node scripts/optimized-build.cjs",
    "build:netlify:prepare": "prisma generate && node scripts/install-build-deps.cjs && node scripts/optimized-build.cjs",
    "build:fast": "NEXT_DISABLE_CSS_INLINE=true SKIP_TYPE_CHECK=true NODE_OPTIONS='--no-deprecation --max-old-space-size=6144' npx next build --no-lint",
    "build:react19": "REACT_19_MODE=true npm run build",
    "build:production": "NODE_ENV=production npm run typecheck && npm run build",
    "build:analyze": "node scripts/analyze-bundle.cjs",
    "bundle:analyze": "node scripts/analyze-bundle.cjs",
    "bundle:optimize": "node scripts/bundle-optimizer.cjs",
    "bundle:report": "node scripts/bundle-analysis.cjs",
    "bundle:chunks": "node scripts/large-chunk-analyzer.cjs",
    "bundle:monitor": "node scripts/bundle-monitor.cjs",
    "perf:audit": "node scripts/performance-audit.cjs",
    "perf:optimize": "node -e \"require('./src/utils/performanceOptimizer.ts').default.applyOptimizations()\"",
    "perf:react19": "echo 'React 19 performance features enabled' && npm run perf:optimize",
    "optimize": "npm run perf:optimize && npm run bundle:analyze && npm run perf:audit",
    "optimize:react19": "npm run perf:react19 && npm run bundle:analyze && npm run perf:audit",
    "optimize:phase2": "npm run build:netlify:prepare && npm run bundle:optimize && npm run bundle:chunks",
    "production:setup": "node scripts/production-readiness-implementation.cjs",
    "validate:env:production": "node scripts/validate-production-env.cjs",
    "validate:build:production": "node scripts/validate-production-build.cjs",
    "monitor:production": "node scripts/production-monitor.cjs",
    "deploy:validate": "npm run validate:env:production && npm run build:production && npm run validate:build:production",
    "deploy:verify": "npm run monitor:production && npm run bundle:optimize",
    "deploy:complete": "node scripts/complete-production-deployment.cjs",
    "setup:quick": "node scripts/quick-supabase-setup.cjs",
    "fix:loading": "node scripts/fix-app-loading.cjs",
    "start": "next start",
    "start:production": "NODE_ENV=production next start",
    "deploy:ipfs": "node scripts/deploy-zion-ipfs.js",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "lint:nextjs": "next lint",
    "preview": "NODE_ENV=production vite preview",
    "test": "jest",
    "test:jest": "node scripts/pre-test-check.cjs",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:vitest": "vitest run",
    "test:vitest:watch": "vitest",
    "test:vitest:coverage": "vitest run --coverage",
    "test:e2e": "cypress run",
    "test:e2e:open": "cypress open",
    "test:collect": "node scripts/generate-jest-json.cjs && npm run logs:collect",
    "test:search": "node scripts/test-search-functionality.cjs",
    "perf:check": "node scripts/performance-check.cjs",
    "perf:api": "node scripts/test-api-performance.js",
    "build:monitor": "node scripts/build-monitor.cjs",
    "deps:check": "npm outdated && npm audit",
    "deps:update": "npm update && npm install",
    "deps:clean": "rm -rf node_modules package-lock.json && npm install",
    "deps:health": "node scripts/dependency-health-check.cjs",
    "cypress:open": "cypress open",
    "cypress:run": "cypress run --browser electron",
    "audit": "npm audit --production",
    "clean:cache": "node scripts/clean-cache.js",
    "sitemap": "node scripts/generate-sitemap.mjs",
    "lint:a11y": "vitest run tests/Accessibility.test.tsx",
    "test:axe": "vitest run tests/Accessibility.test.tsx",
    "test:browserstack": "node scripts/playwright-check.cjs && playwright test --config=browserstack.config.ts",
    "seed": "prisma db seed",
    "es:index": "node scripts/index-elasticsearch.js",
    "devnet": "node scripts/start-devnet.js",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "prepare": "command -v husky >/dev/null 2>&1 && husky install || echo 'Husky not available, skipping git hooks setup'",
    "dev:optimize": "node scripts/replace-console-statements.cjs && npm run lint -- --fix",
    "deploy:optimize": "node scripts/replace-console-statements.cjs && npm run lint -- --fix && npm run build",
    "console:replace": "node scripts/replace-console-statements.cjs",
    "health:summary": "node scripts/project-health-summary.cjs",
    "fix:imports": "node scripts/fix-import-placement.cjs",
    "fix:logger-types": "node scripts/fix-logger-types.cjs",
    "fix:all": "npm run fix:imports && npm run fix:logger-types && npm run lint -- --fix",
    "clean:all": "rm -rf node_modules package-lock.json .next dist coverage && npm install",
    "env:check": "node scripts/validate-environment.cjs",
    "env:validate": "npx tsx scripts/validate-environment.ts",
    "env:validate-build": "node scripts/validate-environment.cjs",
    "env:prebuild-check": "node scripts/pre-build-check.cjs",
    "env:dev": "node scripts/check-dev-environment.cjs",
    "build:report": "npm run build && node scripts/build-performance-report.cjs",
    "build:media-kit": "node scripts/build-media-kit.cjs",
    "typecheck": "tsc --noEmit -p tsconfig.json",
    "test:node": "node -v",
    "check-updates": "ncu",
    "audit-vulnerabilities": "npm audit",
    "monitor:perf": "node scripts/perf/monitor.js",
    "migrate:check": "npx prisma migrate diff --from-schema-datamodel prisma/schema.prisma --to-schema-datamodel prisma/schema.prisma --script",
    "setup:auth0": "node scripts/setup-auth0.js",
    "migrate:auth0": "npm run setup:auth0 && npm run env:validate",
    "watchdog:start": "node scripts/watchdog.js",
    "watchdog:clear": "node scripts/clear-logs.js",
    "watchdog:status": "ps aux | grep watchdog || echo 'No watchdog process found'",
    "logs:clear": "npm run watchdog:clear",
    "logs:view": "tail -f logs/self-heal.log",
    "logs:scan": "node scripts/analyze-error-logs.cjs",
    "logs:summary": "node scripts/analyze-error-logs.cjs logs --dedupe --summary",
    "logs:levels": "node scripts/analyze-error-logs.cjs logs --summary",
    "logs:collect": "bash scripts/collect-logs.sh",
    "logs:monitor": "node scripts/error-monitor.cjs",
    "logs:monitor:export": "node scripts/error-monitor.cjs --export",
    "logs:health": "node scripts/error-monitor.cjs",
    "logs:collect:enhanced": "node scripts/enhanced-log-collector.cjs --analyze --export",
    "logs:auto": "npm run logs:collect:enhanced && npm run logs:summary",
    "logs:rotate": "node scripts/rotate-logs.cjs",
    "logs:purge": "node scripts/purge-old-logs.cjs",
    "logs:collect:clean": "node scripts/enhanced-log-collector.cjs --clean",
    "logs:health:summary": "node scripts/log-health-summary.cjs",
    "logs:monitor:realtime": "node scripts/realtime-log-monitor.cjs",
    "logs:monitor:dashboard": "node scripts/realtime-log-monitor.cjs",
    "env:check-placeholders": "node scripts/check-env-placeholders.cjs",
    "logs:enhanced": "node -e \"require('./src/utils/enhanced-logger.ts').logger.info('Enhanced logging test', 'system')\"",
    "monitor:resources": "echo 'CPU:' && ps -A -o %cpu | awk '{sum+=$1} END {print sum\"%\"}' && echo 'Memory:' && free -h || vm_stat",
    "logs:realtime": "node scripts/enhanced-log-monitoring.cjs",
    "logs:dashboard": "node scripts/log-dashboard-server.cjs",
    "logs:alerts": "node scripts/setup-log-alerts.cjs",
    "logs:performance": "node scripts/performance-log-analyzer.cjs",
    "logs:security": "node scripts/security-log-monitor.cjs",
    "monitor:enhanced": "npm run logs:realtime",
    "monitor:all": "concurrently \"npm run logs:realtime\" \"npm run logs:performance\" \"npm run logs:security\"",
    "analyze:react19": "node scripts/react19-bundle-analysis.cjs",
    "monitor:health": "curl -s https://ziontechgroup.netlify.app/api/health && echo ' - API Health: OK'",
    "monitor:build": "npm run bundle:analyze && npm run monitor:health",
    "perf:monitor": "node -e \"console.log('Enable with: localStorage.setItem(\\\"performance-monitoring\\\", \\\"true\\\"); window.location.reload();')\"",
    "performance:check": "node scripts/performance-monitor.cjs",
    "optimize:images": "find public -name '*.jpg' -o -name '*.png' | head -5",
    "optimize:minify": "node scripts/minify-public-assets.cjs",
    "quality:check": "npm run typecheck && npm run lint && npm run test",
    "pwa:validate": "node -e \"console.log('üîç Validating PWA configuration...'); const fs = require('fs'); const manifest = JSON.parse(fs.readFileSync('public/manifest.json', 'utf8')); console.log('‚úÖ Manifest valid:', manifest.name);\"",
    "seo:validate": "node -e \"console.log('üîç Validating SEO setup...'); console.log('‚úÖ SEO components ready');\"",
    "build:enhanced": "npm run quality:check && npm run pwa:validate && npm run build",
    "deploy:check": "npm run build:enhanced && npm run performance:check",
    "deploy:ready": "node scripts/deployment-ready-check.cjs",
    "deploy:checklist": "npm run deploy:ready && npm run perf:monitor",
    "analyze": "node scripts/analyze-build.cjs",
    "monitor": "concurrently \"npm run health-monitor\" \"npm run build-monitor\"",
    "health": "node scripts/health-check.cjs",
    "clean": "rm -rf .next out node_modules/.cache",
    "reset": "npm run clean && npm install",
    "fresh": "npm run clean && npm install && npm run build",
    "i18n:audit": "node scripts/i18n-audit.cjs",
    "i18n:hardcoded": "node scripts/find-hardcoded-strings.cjs",
    "i18n:missing": "node scripts/check-missing-i18n-keys.cjs",
    "i18n:check": "npm run i18n:audit && npm run i18n:hardcoded",
    "i18n:report": "npm run i18n:check && echo 'i18n reports generated: i18n-audit-report.md and hardcoded-strings-report.md",
    "build:cache": "node scripts/cached-build.cjs",
    "errors:report": "node scripts/report-errors-to-cursor.cjs",
    "errors:autofix": "node scripts/cursor-autofix.cjs",
    "errors:report-codex": "node scripts/report-errors-to-codex.cjs",
    "growth:ideas": "node scripts/self-grow.js",
    "automation:start": "npm run automation:daemon",
    "automation:dev": "nodemon automation/index.js",
    "automation:stop": "npm run automation:daemon-stop",
    "automation:logs": "tail -f logs/automation.log",
    "automation:health": "curl http://localhost:3001/health",
    "automation:test": "cd automation && npm test",
    "automation:check": "node automation/performance/monitor.js",
    "automation:report": "node automation/scripts/generate-report.js",
    "automation:diagnose": "node automation/tests/system-diagnostic.js",
    "automation:test-slack": "node automation/tests/test-slack-connection.js",
    "automation:test-cursor": "node automation/tests/test-cursor-connection.js",
    "automation:test-monitoring": "node automation/tests/test-performance-monitoring.js",
    "optimize:bundle": "node scripts/optimize-bundle.cjs",
    "optimize:icons": "node scripts/optimize-icon-imports.cjs",
    "self-heal:start": "node scripts/netlify-self-healing.cjs start",
    "self-heal:stop": "node scripts/netlify-self-healing.cjs stop",
    "self-heal:status": "node scripts/netlify-self-healing.cjs status",
    "self-heal:health": "node scripts/netlify-self-healing.cjs health-check",
    "self-heal:fix": "node scripts/netlify-self-healing.cjs fix",
    "build:monitor:start": "node scripts/netlify-build-monitor.cjs start",
    "build:monitor:stop": "node scripts/netlify-build-monitor.cjs stop",
    "build:monitor:status": "node scripts/netlify-build-monitor.cjs status",
    "build:monitor:watch": "node scripts/netlify-build-monitor.cjs monitor",
    "auto-fix:all": "node scripts/netlify-auto-fix.cjs all",
    "auto-fix:test": "npm run auto-fix:nextjs && npm run dev -- --port 3004",
    "auto-fix:report": "node scripts/netlify-auto-fix.cjs report",
    "netlify:heal": "npm run auto-fix:all && npm run self-heal:start",
    "netlify:monitor": "npm run build:monitor:start",
    "netlify:status": "npm run self-heal:status && npm run build:monitor:status",
    "netlify:stop": "npm run self-heal:stop && npm run build:monitor:stop",
    "self-heal": "node scripts/self-healing-system.cjs",
    "health-monitor": "node scripts/health-monitor.cjs",
    "build-monitor": "node scripts/build-monitor.cjs",
    "auto-fix": "node scripts/auto-fix-errors.cjs",
    "postbuild": "npm run self-heal",
    "self-healing:start": "node scripts/self-healing-lint-system.cjs",
    "self-healing:build": "node scripts/build-with-self-healing.cjs",
    "self-healing:post-build": "node scripts/post-build-lint-healing.cjs",
    "self-healing:continuous": "node scripts/continuous-lint-healing.cjs",
    "build:with-healing": "npm run build && npm run self-healing:post-build",
    "lint:heal": "npm run self-healing:post-build",
    "heal:lint": "npm run self-healing:post-build",
    "heal:continuous": "npm run self-healing:continuous",
    "build-pipeline": "npm run lint:fix && npm run type-check && npm run build && npm run test",
    "heal-and-build": "npm run auto-fix && npm run build",
    "monitor-and-heal": "npm run build-monitor",
    "type-check": "tsc --noEmit",
    "post-build-heal": "node scripts/post-build-healer.js",
    "continuous-heal": "node scripts/continuous-healing.js",
    "heal-and-deploy": "node scripts/heal-and-deploy.js",
    "auto-heal-pipeline": "npm run auto-fix && npm run build && npm run post-build-heal",
    "heal-deploy-monitor": "npm run heal-and-deploy && npm run continuous-heal",
    "advanced-heal:start": "node scripts/advanced-self-healing-system.cjs start",
    "advanced-heal:stop": "node scripts/advanced-self-healing-system.cjs stop",
    "advanced-heal:status": "node scripts/advanced-self-healing-system.cjs status",
    "advanced-heal:report": "node scripts/advanced-self-healing-system.cjs report",
    "advanced-heal:monitor": "node scripts/advanced-self-healing-system.cjs monitor",
    "cursor-chat:comprehensive": "node scripts/cursor-chat-trigger.cjs comprehensive",
    "cursor-chat:specific": "node scripts/cursor-chat-trigger.cjs specific",
    "improvement:start": "node scripts/continuous-improvement-pipeline.cjs start",
    "improvement:stop": "node scripts/continuous-improvement-pipeline.cjs stop",
    "improvement:status": "node scripts/continuous-improvement-pipeline.cjs status",
    "improvement:report": "node scripts/continuous-improvement-pipeline.cjs report",
    "improvement:run": "node scripts/continuous-improvement-pipeline.cjs run",
    "auto-improve": "npm run improvement:start",
    "auto-heal:advanced": "npm run advanced-heal:start",
    "continuous:start": "npm run improvement:start",
    "continuous:stop": "npm run improvement:stop",
    "continuous:status": "npm run improvement:status",
    "continuous:report": "npm run improvement:report",
    "ai-improvement:start": "node scripts/ai-continuous-improvement.cjs",
    "ai-improvement:stop": "pkill -f 'ai-continuous-improvement.cjs'",
    "ai-improvement:status": "curl -s http://localhost:3001/api/status | jq",
    "ai-improvement:report": "node scripts/ai-continuous-improvement.cjs report",
    "cursor-delegator:start": "node scripts/cursor-ai-delegator.cjs",
    "cursor-delegator:stop": "pkill -f 'cursor-ai-delegator.cjs'",
    "cursor-delegator:status": "curl -s http://localhost:3005/api/status | jq",
    "cursor-delegator:submit": "curl -X POST http://localhost:3005/api/tasks/submit -H 'Content-Type: application/json' -d",
    "multi-coordinator:start": "node scripts/multi-computer-coordinator.cjs",
    "multi-coordinator:stop": "pkill -f 'multi-computer-coordinator.cjs'",
    "multi-coordinator:status": "curl -s http://localhost:3002/api/nodes/status | jq",
    "ai-delegate:start": "npm run ai-improvement:start && npm run cursor-delegator:start && npm run multi-coordinator:start",
    "ai-delegate:stop": "npm run ai-improvement:stop && npm run cursor-delegator:stop && npm run multi-coordinator:stop",
    "ai-delegate:status": "echo 'AI Improvement System:' && npm run ai-improvement:status && echo 'Cursor Delegator:' && npm run cursor-delegator:status && echo 'Multi-Coordinator:' && npm run multi-coordinator:status",
    "ai-delegate:master": "MASTER_NODE=true IS_MASTER=true npm run ai-delegate:start",
    "ai-delegate:worker": "MASTER_NODE=false IS_MASTER=false npm run ai-delegate:start",
    "ai-delegate:submit-task": "npm run cursor-delegator:submit",
    "ai-delegate:monitor": "watch -n 5 'npm run ai-delegate:status'",
    "ai-delegate:logs": "tail -f logs/ai-improvement.log logs/cursor-delegator.log logs/multi-coordinator.log",
    "ai-delegate:setup": "node scripts/setup-ai-delegation.cjs",
    "ai-delegate:test": "node scripts/test-ai-delegation.cjs",
    "ai-delegate:cleanup": "node scripts/cleanup-ai-delegation.cjs",
    "auto-improve:start": "node scripts/automated-improvement-pipeline.cjs",
    "auto-improve:stop": "pkill -f 'automated-improvement-pipeline.cjs'",
    "auto-improve:status": "curl -s http://localhost:3006/api/status | jq",
    "auto-improve:monitor": "watch -n 10 'npm run auto-improve:status'",
    "auto-improve:logs": "tail -f logs/automated-improvement.log",
    "auto-improve:full": "npm run ai-delegate:master && npm run auto-improve:start",
    "auto-improve:background": "nohup npm run auto-improve:full > logs/automation.log 2>&1 &",
    "auto-improve:daemon": "pm2 start scripts/automated-improvement-pipeline.cjs --name 'zion-auto-improve'",
    "auto-improve:daemon-stop": "pm2 stop zion-auto-improve",
    "auto-improve:daemon-restart": "pm2 restart zion-auto-improve",
    "auto-improve:daemon-logs": "pm2 logs zion-auto-improve",
    "auto-improve:daemon-status": "pm2 status zion-auto-improve",
    "automation:daemon": "node scripts/continuous-automation-daemon.cjs",
    "automation:daemon-stop": "pkill -f 'continuous-automation-daemon.cjs'",
    "automation:daemon-status": "curl -s http://localhost:3007/api/status | jq",
    "automation:daemon-logs": "tail -f logs/automation-daemon.log",
    "automation:daemon-metrics": "cat logs/automation-metrics.json | jq",
    "automation:monitor": "watch -n 5 'npm run automation:daemon-status'",
    "automation:full": "npm run automation:daemon & npm run auto-improve:full",
    "automation:start-simple": "node scripts/start-automation.cjs",
    "automation:start-background": "nohup node scripts/start-automation.cjs > logs/automation-startup.log 2>&1 &",
    "automation:start-daemon": "pm2 start scripts/start-automation.cjs --name 'zion-automation' --watch",
    "automation:stop-daemon": "pm2 stop zion-automation",
    "automation:restart-daemon": "pm2 restart zion-automation",
    "automation:logs-daemon": "pm2 logs zion-automation",
    "auto-fix:nextjs": "node scripts/auto-fix-nextjs-issues.cjs",
    "auto-fix:run": "npm run auto-fix:nextjs",
    "distributed-ai:start": "node scripts/distributed-ai-controller.cjs",
    "distributed-ai:install": "node scripts/cursor-ai-installer.cjs install-local",
    "distributed-ai:discover": "node scripts/cursor-ai-installer.cjs discover",
    "distributed-ai:install-remote": "node scripts/cursor-ai-installer.cjs install-remote",
    "distributed-ai:verify": "node scripts/cursor-ai-installer.cjs verify",
    "distributed-ai:report": "node scripts/cursor-ai-installer.cjs report",
    "ai-coordinator:start": "node scripts/ai-coordinator.cjs",
    "ai-coordinator:status": "node -e \"const { AICoordinator } = require('./scripts/ai-coordinator.cjs'); const coordinator = new AICoordinator(); coordinator.getSystemStatus().then(console.log);\"",
    "ai-coordinator:submit-task": "node -e \"const { AICoordinator } = require('./scripts/ai-coordinator.cjs'); const coordinator = new AICoordinator(); coordinator.submitTask(process.argv[1]).then(console.log);\"",
    "multi-computer:setup": "npm run distributed-ai:install && npm run ai-coordinator:start",
    "multi-computer:discover": "npm run distributed-ai:discover",
    "multi-computer:install-all": "npm run distributed-ai:install-remote",
    "multi-computer:verify": "npm run distributed-ai:verify",
    "multi-computer:report": "npm run distributed-ai:report",
    "multi-computer:status": "npm run ai-coordinator:status",
    "improve:automated": "node scripts/automated-app-improver.cjs",
    "improve:ai-syntax": "node scripts/ai-syntax-fixer.cjs",
    "improve:orchestrator": "node scripts/app-improvement-orchestrator.cjs",
    "improve:continuous": "node scripts/app-improvement-orchestrator.cjs --continuous",
    "improve:all": "npm run improve:ai-syntax && npm run improve:automated && npm run improve:orchestrator",
    "automation:comprehensive:start": "node scripts/comprehensive-app-automation.cjs start",
    "automation:comprehensive:stop": "node scripts/comprehensive-app-automation.cjs stop",
    "automation:comprehensive:status": "node scripts/comprehensive-app-automation.cjs status",
    "automation:comprehensive:improve": "node scripts/comprehensive-app-automation.cjs improve",
    "automation:ai:start": "node scripts/ai-continuous-improvement.cjs start",
    "automation:ai:stop": "node scripts/ai-continuous-improvement.cjs stop",
    "automation:ai:status": "node scripts/ai-continuous-improvement.cjs status",
    "automation:ai:improve": "node scripts/ai-continuous-improvement.cjs improve",
    "automation:cursor:start": "node scripts/cursor-ai-delegator.cjs start",
    "automation:cursor:stop": "node scripts/cursor-ai-delegator.cjs stop",
    "automation:cursor:status": "node scripts/cursor-ai-delegator.cjs status",
    "automation:cursor:submit": "node scripts/cursor-ai-delegator.cjs submit",
    "automation:coordinator:start": "node scripts/multi-computer-coordinator.cjs start",
    "automation:coordinator:stop": "node scripts/multi-computer-coordinator.cjs stop",
    "automation:coordinator:status": "node scripts/multi-computer-coordinator.cjs status",
    "automation:coordinator:distribute": "node scripts/multi-computer-coordinator.cjs distribute",
    "automation:start:all": "node scripts/start-automation.cjs start",
    "automation:stop:all": "node scripts/start-automation.cjs stop",
    "automation:status:all": "node scripts/start-automation.cjs status",
    "automation:health:all": "npm run automation:comprehensive:status && npm run automation:ai:status && npm run automation:cursor:status && npm run automation:coordinator:status",
    "automation:logs:all": "tail -f logs/automation.log logs/ai-improvement.log logs/cursor-delegator.log logs/coordinator.log",
    "automation:monitor:all": "watch -n 10 'npm run automation:status:all'",
    "automation:submit:task": "curl -X POST http://localhost:3005/api/tasks/submit -H 'Content-Type: application/json' -d",
    "automation:trigger:improvement": "curl -X POST http://localhost:3001/improve -H 'Content-Type: application/json' -d '{\"target\":\"general\",\"priority\":\"normal\"}'",
    "automation:trigger:ai": "curl -X POST http://localhost:3002/improve -H 'Content-Type: application/json' -d '{\"target\":\"general\",\"priority\":\"normal\"}'",
    "automation:distribute:workload": "curl -X POST http://localhost:3003/api/tasks/submit -H 'Content-Type: application/json' -d '{\"task\":\"Fix all issues\",\"priority\":\"high\"}'",
    "build:optimize": "node scripts/replace-console-statements.cjs && npm run lint -- --fix && npm run build"
  },
  "dependencies": {
    "@chakra-ui/react": "^3.22.0",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@sentry/nextjs": "^9.40.0",
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "framer-motion": "^12.23.6",
    "i18next": "^25.3.2",
    "lucide-react": "^0.525.0",
    "next": "^15.0.0-rc.0",
    "node-fetch": "^3.3.2",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-i18next": "^15.6.0"
  },
  "devDependencies": {
    "@types/node": "20.19.8",
    "@types/react": "^19.0.0",
    "@types/react-dom": "^19.0.0",
    "@typescript-eslint/eslint-plugin": "^8.37.0",
    "@typescript-eslint/parser": "^8.37.0",
    "eslint": "^9.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "typescript": "^5.0.0"
  }
}
