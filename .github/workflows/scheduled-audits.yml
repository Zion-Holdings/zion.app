# .github/workflows/scheduled-audits.yml
name: Scheduled Audits

on:
  schedule:
    # Runs every Sunday at midnight UTC. Cron syntax: minute hour day(month) month day(week)
    # This schedule can be adjusted as needed. For example, '0 2 * * 1' would be Monday at 2 AM UTC.
    # Use https://crontab.guru/ to help generate or verify cron expressions.
    - cron: '0 0 * * 0'
  workflow_dispatch: # Allows the workflow to be manually triggered from the GitHub Actions UI.

jobs:
  weekly-audits:
    name: Weekly Security and Dependency Audits # Descriptive name for the job
    runs-on: ubuntu-latest # Specifies the runner environment

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Action to check out the repository code

    - name: Set up Node.js
      uses: actions/setup-node@v4 # Action to set up a Node.js environment
      with:
        node-version: '20.x' # Specifies the Node.js version to use, consistent with other workflows
        cache: 'npm' # Enables caching for npm dependencies to speed up installation

    - name: Install dependencies
      run: npm ci # Installs dependencies cleanly using package-lock.json

    - name: Run Dependency and Vulnerability Audits
      run: bash ./scripts/security-audit.sh # Executes the custom script for security audits
      # This script is expected to run 'npm run check-updates' (via 'ncu') and 'npm run audit-vulnerabilities' (via 'npm audit').

    # Placeholder for Performance Audits
    # Performance auditing is highly application-specific and requires dedicated tools and setup.
    # This section serves as a reminder and starting point for future integration.
    # - For frontend applications (especially if this is a Next.js app, which it seems to be),
    #   Lighthouse CI (https://github.com/GoogleChrome/lighthouse-ci) is a common choice.
    #   It typically involves building the application and then running Lighthouse against a served version.
    # - For backend APIs, load testing tools like k6 (https://k6.io) or Artillery (https://artillery.io)
    #   can be scripted to measure performance under load.
    #
    # - name: Run Performance Audits (Example Placeholder)
    #   run: |
    #     echo "Performance audit step placeholder. Configure appropriate tools for your application."
    #     # Example for Lighthouse (this requires prior setup of lighthouserc.js and potentially serving the app):
    #     # echo "Installing Lighthouse CI..."
    #     # npm install -g @lhci/cli
    #     # echo "Building the application (if required for static site audit)..."
    #     # npm run build
    #     # echo "Running Lighthouse CI..."
    #     # lhci autorun --config=./lighthouserc.js || echo "Lighthouse audit finished. Note: Failures might be configured not to break the workflow."
    #     #
    #     # Example for k6 (this requires a k6 test script, e.g., scripts/performance-test.js):
    #     # echo "Running k6 performance test..."
    #     # k6 run scripts/performance-test.js
