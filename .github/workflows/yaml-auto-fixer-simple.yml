name: YAML Auto-Fixer (Simple)

on:
  workflow_dispatch:
    inputs:
      fix_mode:
        description: 'Fix mode (validate-only, conservative, aggressive)'
        required: false
        default: 'conservative'
        type: choice
        options:
          - validate-only
          - conservative
          - aggressive
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  auto-fix-yaml:
    runs-on: ubuntu-latest
    name: Auto-Fix YAML Syntax
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyyaml

      - name: Create simple YAML fixer
        run: |
          cat > simple_yaml_fixer.py << 'EOF'
          #!/usr/bin/env python3
          ""
          Simple YAML Auto-Fixer for GitHub Actions workflows
          ""
          
          import os
          import sys
          from pathlib import Path
          
          def fix_yaml_file(file_path, fix_mode='conservative'):
              ""Fix common YAML syntax errors in a file""
              print(f"üîß Fixing: {file_path}")
              
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      content = f.read()
              except Exception as e:
                  print(f"‚ùå Error reading {file_path}: {e}")
                  return False
              
              original_content = content
              fixes_applied = []
              
              # Fix 1: Remove stray quotes in concurrency
              if 'concurrency:"' in content:
                  content = content.replace('concurrency:"', 'concurrency:')
                  fixes_applied.append("Fixed concurrency syntax")
              
              # Fix 2: Fix group references
              if 'group: "github.workflow-github.ref' in content:
                  content = content.replace('group: "github.workflow-github.ref', 'group: "github.workflow-${{ github.ref }}"')
                  fixes_applied.append("Fixed concurrency group reference")
              
              # Fix 2b: Fix unquoted group references
              if 'group: github.workflow-github.ref' in content:
                  content = content.replace('group: github.workflow-github.ref', 'group: "github.workflow-${{ github.ref }}"')
                  fixes_applied.append("Fixed unquoted concurrency group reference")
              
              # Fix 2c: Fix missing closing quotes in group references
              if 'group: "fast-auto-push-${{ github.ref }}' in content and not 'group: "fast-auto-push-${{ github.ref }}"' in content:
                  content = content.replace('group: "fast-auto-push-${{ github.ref }}', 'group: "fast-auto-push-${{ github.ref }}"')
                  fixes_applied.append("Fixed missing closing quote in group reference")
              
              # Fix 2d: Fix missing closing quotes in any group reference
              import re
              group_pattern = r'group:\s*"([^"]*\${{[^}]*}}[^"]*)'
              if re.search(group_pattern, content):
                  content = re.sub(group_pattern, r'group: "\1"', content)
                  fixes_applied.append("Fixed missing closing quotes in group references")
              
              # Fix 3: Fix cancel-in-progress quotes
              if 'cancel-in-progress: "true' in content:
                  content = content.replace('cancel-in-progress: "true', 'cancel-in-progress: true')
                  fixes_applied.append("Fixed cancel-in-progress quotes")
              
              # Fix 4: Fix double quotes in env vars
              if '""' in content:
                  content = content.replace('""', '"')
                  fixes_applied.append("Fixed double quotes")
              
              # Fix 5: Fix run command syntax
              if 'run: |"' in content:
                  content = content.replace('run: |"', 'run: |')
                  fixes_applied.append("Fixed run command syntax")
              
              # Fix 6: Fix id field quotes
              if 'id: "' in content:
                  content = content.replace('id: "', 'id: ')
                  fixes_applied.append("Fixed id field quotes")
              
              # Fix 7: Fix case statement quotes (conservative mode only)
              if fix_mode in ['conservative', 'aggressive']:
                  if 'aggressive")' in content:
                      content = content.replace('aggressive")', '"aggressive")')
                      fixes_applied.append("Fixed case statement quotes")
                  if 'balanced")' in content:
                      content = content.replace('balanced")', '"balanced")')
                      fixes_applied.append("Fixed case statement quotes")
                  if 'conservative")' in content:
                      content = content.replace('conservative")', '"conservative")')
                      fixes_applied.append("Fixed case statement quotes")
              
              # Fix 8: Fix step indentation issues (conservative mode and up)
              if fix_mode in ['conservative', 'aggressive']:
                  lines = content.split('\n')
                  fixed_lines = []
                  for i, line in enumerate(lines):
                      # Fix missing dashes for steps
                      if (line.strip().startswith('uses:') or 
                          line.strip().startswith('run:') or 
                          line.strip().startswith('with:')) and i > 0:
                          prev_line = lines[i-1].strip()
                          if prev_line.startswith('- name:') and not line.strip().startswith('-'):
                              # This line should be indented under the previous step
                              line = '        ' + line.strip()
                              fixes_applied.append("Fixed step indentation")
                      
                      # Fix 8-space indentation to 6-space for step items
                      if line.startswith('        - name:') or line.startswith('        - uses:') or line.startswith('        - run:') or line.startswith('        - with:'):
                          line = '      ' + line[8:]
                          fixes_applied.append("Fixed step indentation")
                      
                      fixed_lines.append(line)
                  
                  new_content = '\n'.join(fixed_lines)
                  if new_content != content:
                      content = new_content
              
              # Fix 9: Fix missing step dashes (aggressive mode only)
              if fix_mode == 'aggressive':
                  lines = content.split('\n')
                  fixed_lines = []
                  for i, line in enumerate(lines):
                      # Look for step properties that are missing dashes
                      if (line.strip().startswith('uses:') or 
                          line.strip().startswith('run:') or 
                          line.strip().startswith('with:') or
                          line.strip().startswith('id:') or
                          line.strip().startswith('env:') or
                          line.strip().startswith('working-directory:') or
                          line.strip().startswith('shell:') or
                          line.strip().startswith('timeout-minutes:') or
                          line.strip().startswith('continue-on-error:')) and i > 0:
                          prev_line = lines[i-1].strip()
                          if prev_line.startswith('- name:') and not line.strip().startswith('-'):
                              # This line should be indented under the previous step
                              line = '        ' + line.strip()
                              fixes_applied.append("Fixed missing step dash")
                      
                      fixed_lines.append(line)
                  
                  new_content = '\n'.join(fixed_lines)
                  if new_content != content:
                      content = new_content
              
              # Apply fixes if any were made
              if fixes_applied:
                  try:
                      with open(file_path, 'w', encoding='utf-8') as f:
                          f.write(content)
                      print(f"‚úÖ Applied fixes: {', '.join(fixes_applied)}")
                      return True
                  except Exception as e:
                      print(f"‚ùå Error writing {file_path}: {e}")
                      return False
              else:
                  print(f"‚ÑπÔ∏è  No fixes needed for {file_path}")
                  return False
          
          def main():
              fix_mode = os.environ.get('FIX_MODE', 'conservative')
              print(f"üîß Simple YAML Auto-Fixer running in {fix_mode} mode")
              
              # Find all YAML files
              yaml_files = list(Path('.').rglob('*.yml')) + list(Path('.').rglob('*.yaml'))
              yaml_files = [f for f in yaml_files if 'node_modules' not in str(f) and '.git' not in str(f)]
              
              print(f"üìÅ Found {len(yaml_files)} YAML files")
              
              if fix_mode == 'validate-only':
                  print("üîç Validation mode - checking files only")
                  invalid_files = []
                  for file_path in yaml_files:
                      try:
                          import yaml
                          with open(file_path, 'r') as f:
                              yaml.safe_load(f)
                          print(f"‚úÖ {file_path} is valid")
                      except Exception as e:
                          print(f"‚ùå {file_path} has errors: {str(e)[:100]}")
                          invalid_files.append(str(file_path))
                  
                  if invalid_files:
                      print(f"\n‚ùå Found {len(invalid_files)} invalid files")
                      sys.exit(1)
                  else:
                      print("\n‚úÖ All YAML files are valid!")
                      sys.exit(0)
              
              # Fix mode
              fixed_count = 0
              for file_path in yaml_files:
                  if fix_yaml_file(file_path, fix_mode):
                      fixed_count += 1
              
              print(f"\nüéâ Fixed {fixed_count} files")
              
              if fixed_count > 0:
                  print("üìù Committing fixes...")
                  os.system('git config --local user.email "action@github.com"')
                  os.system('git config --local user.name "github-actions[bot]"')
                  os.system('git add -A')
                  os.system('git commit -m "fix(yaml): auto-fix YAML syntax errors [skip ci]"')
                  os.system('git push')
                  print("‚úÖ Fixes committed and pushed")
          
          if __name__ == '__main__':
              main()
          EOF

      - name: Run simple YAML auto-fixer
        env:
          FIX_MODE: ${{ github.event.inputs.fix_mode || 'conservative' }}
        run: |
          python3 simple_yaml_fixer.py

      - name: Validate fixed files
        run: |
          echo "üîç Validating fixed files..."
          python3 simple_yaml_fixer.py validate-only

      - name: Create fix report
        if: always()
        run: |
          echo "üìù Creating fix report..."
          
          cat > yaml-fix-report.md << EOF
          # YAML Auto-Fix Report
          
          Generated: $(date -u)
          Fix Mode: ${{ github.event.inputs.fix_mode || 'conservative' }}
          
          ## Summary
          - **Files processed**: $(find . -name "*.yml" -o -name "*.yaml" | grep -v node_modules | grep -v .git | wc -l)
          - **Fix mode**: ${{ github.event.inputs.fix_mode || 'conservative' }}
          
          ## Status
          ‚úÖ YAML auto-fix completed successfully
          
          All workflow files have been validated and common syntax errors have been fixed.
          EOF

      - name: Upload fix report
        uses: actions/upload-artifact@v3
        with:
          name: yaml-fix-report
          path: yaml-fix-report.md
