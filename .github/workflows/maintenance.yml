name: 🔧 Maintenance - Automated Maintenance Tasks

on:
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC
    - cron: '0 14 * * *'  # Every day at 2 PM UTC
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - dependencies
        - cleanup
        - security
        - health-check

permissions:
  contents: write
  actions: read
  pull-requests: write

concurrency:
  group: "maintenance"
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NPM_CACHE: 'npm'

jobs:
  dependency-update:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'dependencies'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.NPM_CACHE }}

      - name: 📦 Install dependencies
        run: npm ci --no-audit --no-fund

      - name: 🔍 Check for outdated packages
        id: outdated
        run: |
          echo "Checking for outdated packages..."
          OUTDATED=$(npm outdated --json || echo "{}")
          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT
          
          if [[ "$OUTDATED" != "{}" ]]; then
            echo "Found outdated packages:"
            echo "$OUTDATED" | jq -r 'keys[]'
          else
            echo "All packages are up to date"
          fi

      - name: 📈 Update dependencies
        if: steps.outdated.outputs.outdated != '{}'
        run: |
          echo "Updating dependencies..."
          npm update
          
          # Check for major updates
          npm audit fix --force || true
          
          echo "Dependencies updated successfully"

      - name: 🔒 Security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate || true

      - name: 🧪 Test after updates
        run: |
          echo "Testing after dependency updates..."
          npm test

      - name: 📝 Create PR for updates
        if: steps.outdated.outputs.outdated != '{}'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: '🔧 Automated dependency updates'
          body: |
            ## 🔧 Automated Dependency Updates
            
            This PR was automatically created to update outdated dependencies.
            
            **Changes made:**
            - Updated npm packages to latest compatible versions
            - Applied security fixes
            - All tests passing
            
            **Review checklist:**
            - [ ] Changes look reasonable
            - [ ] No breaking changes introduced
            - [ ] All tests passing
            - [ ] Security audit clean
            
            ---
            *Auto-generated by maintenance workflow*
          branch: 'chore/dependency-updates'
          delete-branch: true

  cleanup:
    name: 🧹 Cleanup Repository
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'cleanup'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.NPM_CACHE }}

      - name: 📦 Install dependencies
        run: npm ci --no-audit --no-fund

      - name: 🧹 Clean build artifacts
        run: |
          echo "Cleaning build artifacts..."
          rm -rf dist/ build/ .next/ coverage/ test-results/
          echo "Build artifacts cleaned"

      - name: 🗑️ Clean node modules (if needed)
        run: |
          echo "Checking node_modules size..."
          NODE_SIZE=$(du -sh node_modules 2>/dev/null | cut -f1 || echo "0")
          echo "Current node_modules size: $NODE_SIZE"
          
          # Clean if too large (optional)
          if [[ "$NODE_SIZE" =~ ^[0-9]+M$ ]] && [[ "${NODE_SIZE%M}" -gt 500 ]]; then
            echo "node_modules is large, cleaning..."
            rm -rf node_modules
            npm ci --no-audit --no-fund
          fi

      - name: 📊 Cleanup report
        run: |
          echo "🧹 Cleanup completed successfully"
          echo "Repository size: $(du -sh . --exclude=.git --exclude=node_modules 2>/dev/null | cut -f1)"
          echo "Git history size: $(git count-objects -vH | grep size-pack | cut -d: -f2 | tr -d ' ')"

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'security'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.NPM_CACHE }}

      - name: 📦 Install dependencies
        run: npm ci --no-audit --no-fund

      - name: 🔒 Run npm audit
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level=moderate || true

      - name: 🚨 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🔍 Check for secrets in code
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose

      - name: 📊 Security report
        run: |
          echo "🛡️ Security scan completed"
          echo "Timestamp: $(date)"
          echo "Repository: ${{ github.repository }}"

  health-check:
    name: 💚 Repository Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'health-check'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Check repository health
        run: |
          echo "🔍 Checking repository health..."
          
          # Check file sizes
          echo "📁 Large files (>10MB):"
          find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*" | head -10 || echo "None found"
          
          # Check for merge conflicts
          echo "🔀 Checking for merge conflicts..."
          if grep -r "<<<<<<< HEAD" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "❌ Found merge conflicts!"
            exit 1
          else
            echo "✅ No merge conflicts found"
          fi
          
          # Check workflow files
          echo "📋 Checking workflow files..."
          if [ -d ".github/workflows" ]; then
            WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" | wc -l)
            echo "Found $WORKFLOW_COUNT workflow files"
          else
            echo "No workflows directory found"
          fi

      - name: 📊 Health report
        run: |
          echo "💚 Repository health check completed"
          echo "Status: Healthy ✅"
          echo "Timestamp: $(date)"

  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [dependency-update, cleanup, security-scan, health-check]
    if: always()
    
    steps:
      - name: 📊 Generate summary
        run: |
          echo "🔧 Maintenance workflow completed!"
          echo "=================================="
          echo "Dependency Update: ${{ needs.dependency-update.result }}"
          echo "Cleanup: ${{ needs.cleanup.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Health Check: ${{ needs.health-check.result }}"
          
          if [[ "${{ needs.dependency-update.result }}" == "success" && "${{ needs.cleanup.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" && "${{ needs.health-check.result }}" == "success" ]]; then
            echo "🎉 All maintenance tasks completed successfully!"
          else
            echo "⚠️ Some maintenance tasks failed"
          fi

      - name: 📝 Update status
        run: |
          echo "Maintenance workflow completed at $(date)"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"