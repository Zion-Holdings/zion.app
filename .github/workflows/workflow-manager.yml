---
name: Workflow Manager Manager
on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * *'
permissions:
  contents: read
  actions: read
concurrency:
  group: workflow-manager
  cancel-in-progress: false
env:
  NODE_VERSION: '20'
jobs:
  workflow-health-check:
    name: Workflow Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci --no-audit --no-fund
      - name: Analyze workflow health
        run: |
          echo "## 🔍 Workflow Health Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Analyzing workflow performance and health..." >> $GITHUB_STEP_SUMMARY
          
          # Get workflow run statistics
          WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" | wc -l)
          echo "- Total workflows: $WORKFLOW_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Check for workflows with potential issues
          echo "Checking for potential workflow issues..." >> $GITHUB_STEP_SUMMARY
          
          # Look for workflows with very frequent schedules
          FREQUENT_WORKFLOWS=$(grep -r "cron.*\*/[0-9]" .github/workflows/ | wc -l)
          if [ $FREQUENT_WORKFLOWS -gt 0 ]; then
            echo "⚠️ Found $FREQUENT_WORKFLOWS workflows with very frequent schedules" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Look for workflows without proper error handling
          NO_ERROR_HANDLING=$(grep -L "continue-on-error\|if: always()" .github/workflows/*.yml | wc -l)
          if [ $NO_ERROR_HANDLING -gt 0 ]; then
            echo "⚠️ Found $NO_ERROR_HANDLING workflows without proper error handling" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "Health analysis completed" >> $GITHUB_STEP_SUMMARY

  workflow-optimization:
    name: Workflow Optimization
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: workflow-health-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci --no-audit --no-fund
      - name: Generate optimization recommendations
        run: |
          echo "## 🚀 Workflow Optimization Recommendations" >> $GITHUB_STEP_SUMMARY
          
          cat > workflow-optimization-report.md << EOF
          # Workflow Optimization Report
          
          Generated: $(date)
          
          ## Current Status
          - Total workflows: $(find .github/workflows -name "*.yml" | wc -l)
          - High frequency workflows: $(grep -r "cron.*\*/[0-9]" .github/workflows/ | wc -l)
          - Workflows without error handling: $(grep -L "continue-on-error\|if: always()" .github/workflows/*.yml | wc -l)
          
          ## Recommendations
          
          ### 1. Schedule Optimization
          - Consider consolidating workflows that run at similar times
          - Review workflows running more frequently than necessary
          - Implement staggered scheduling to avoid resource conflicts
          
          ### 2. Error Handling
          - Add \`continue-on-error: true\` to non-critical steps
          - Use \`if: always()\` for cleanup and reporting steps
          - Implement proper retry mechanisms for flaky operations
          
          ### 3. Resource Management
          - Use concurrency groups to prevent overlapping runs
          - Implement proper timeout values for all jobs
          - Consider using matrix builds for parallel execution
          
          ### 4. Monitoring
          - Add workflow status reporting
          - Implement failure notifications
          - Track workflow performance metrics
          
          ## Next Steps
          1. Review high-frequency workflows
          2. Add error handling to critical workflows
          3. Implement monitoring and alerting
          4. Regular performance reviews
          EOF
          
          echo "Optimization report generated"

      - name: Upload optimization report
        uses: actions/upload-artifact@v4
        with:
          name: workflow-optimization-report
          path: workflow-optimization-report.md
          retention-days: 30

  workflow-scheduling:
    name: Workflow Scheduling
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: workflow-health-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Analyze current scheduling
        run: |
          echo "## 📅 Current Workflow Schedule Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Current Schedule Distribution:" >> $GITHUB_STEP_SUMMARY
          
          # Morning workflows (6-9 AM)
          MORNING=$(grep -r "cron.*'0 [6-9]" .github/workflows/ | wc -l)
          echo "- Morning (6-9 AM): $MORNING workflows" >> $GITHUB_STEP_SUMMARY
          
          # Afternoon workflows (10 AM - 2 PM)
          AFTERNOON=$(grep -r "cron.*'0 1[0-4]" .github/workflows/ | wc -l)
          echo "- Afternoon (10 AM - 2 PM): $AFTERNOON workflows" >> $GITHUB_STEP_SUMMARY
          
          # Evening workflows (3-6 PM)
          EVENING=$(grep -r "cron.*'0 1[5-8]" .github/workflows/ | wc -l)
          echo "- Evening (3-6 PM): $EVENING workflows" >> $GITHUB_STEP_SUMMARY
          
          # Night workflows (7 PM - 5 AM)
          NIGHT=$(grep -r "cron.*'0 [1-5,19-23]" .github/workflows/ | wc -l)
          echo "- Night (7 PM - 5 AM): $NIGHT workflows" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scheduling Recommendations:" >> $GITHUB_STEP_SUMMARY
          echo "- Morning: Focus on CI/CD and testing" >> $GITHUB_STEP_SUMMARY
          echo "- Afternoon: Security scans and dependency updates" >> $GITHUB_STEP_SUMMARY
          echo "- Evening: Maintenance and optimization" >> $GITHUB_STEP_SUMMARY
          echo "- Night: Light monitoring and cleanup" >> $GITHUB_STEP_SUMMARY

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs:
      - workflow-health-check
      - workflow-optimization
      - workflow-scheduling
    if: always()
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "## 🎯 Workflow Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Health Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: ${{ needs.workflow-health-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Optimization: ${{ needs.workflow-optimization.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Scheduling: ${{ needs.workflow-scheduling.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.workflow-health-check.result }}" == "success" ] && [ "${{ needs.workflow-optimization.result }}" == "success" ] && [ "${{ needs.workflow-scheduling.result }}" == "success" ]; then
            echo "✅ All workflow management tasks completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some workflow management tasks failed. Review the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Actions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review optimization recommendations" >> $GITHUB_STEP_SUMMARY
          echo "2. Implement suggested improvements" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor workflow performance" >> $GITHUB_STEP_SUMMARY
          echo "4. Schedule next review" >> $GITHUB_STEP_SUMMARY
    timeout-minutes: 30
