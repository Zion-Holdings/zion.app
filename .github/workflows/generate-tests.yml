name: Generate Unit Tests

on:
  push:
    branches:
      - main # Or your development branch
    paths:
      - 'src/components/**.ts'
      - 'src/components/**.tsx'
      - 'src/hooks/**.ts'
      - 'src/hooks/**.tsx'
      - 'src/utils/**.ts'
      - 'src/lib/**.ts'
      # Add other paths for which you want to generate tests

jobs:
  generate_tests_for_changes:
    runs-on: ubuntu-latest
    # Only run if OPENAI_API_KEY is set, otherwise skip silently.
    # You might want to fail explicitly or notify if it's expected to run.
    if: secrets.OPENAI_API_KEY != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Needed to compare HEAD with its parent

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your project's version
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install openai-operator
        run: npm install -g @openai/operator # Or however you install/run the operator

      - name: Identify new/modified files
        id: changed_files
        run: |
          FILES=$(git diff --name-status HEAD^ HEAD | awk '$1 == "A" || $1 == "M" {print $2}' | grep -E '^(src/components/|src/hooks/|src/utils/|src/lib/).*\.(ts|tsx)$' || echo "")
          if [ -z "$FILES" ]; then
            echo "No relevant new or modified files found to generate tests for."
            echo "changed_files_list=''" >> $GITHUB_OUTPUT
          else
            echo "Found relevant files:"
            echo "$FILES"
            {
              echo "changed_files_list<<EOF";
              echo "$FILES";
              echo "EOF";
            } >> $GITHUB_OUTPUT
          fi

      - name: Generate tests for each file
        if: steps.changed_files.outputs.changed_files_list != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # Critical: Operator needs this
        run: |
          echo "${{ steps.changed_files.outputs.changed_files_list }}" | while read -r filepath; do
            if [ -n "$filepath" ]; then
              echo "Attempting to generate tests for: $filepath"
              export TARGET_COMPONENT_PATH="$filepath" # Set env var for the pipeline
              if operator run ./codex-test-generator-pipeline.yaml; then
                 echo "Test generation pipeline completed for $filepath."
              else
                 echo "::error file=$filepath::Test generation pipeline failed for $filepath."
              fi
            fi
          done

      - name: "Commit and push generated tests (Optional: Create PR instead)"
        if: steps.changed_files.outputs.changed_files_list != '' # Only run if files were processed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "src/**/__tests__/*.test.ts" "src/**/__tests__/*.test.tsx"
          if git diff --staged --quiet; then
            echo "No new tests were generated or committed."
          else
            TIMESTAMP=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
            BRANCH_NAME="bot/auto-generated-tests-${TIMESTAMP}"
            git checkout -b "$BRANCH_NAME"
            git commit -m "feat: auto-generate unit tests for new/modified components" -m "Co-authored-by: AI Assistant <ai@example.com>"
            git push origin "$BRANCH_NAME"
            echo "Generated tests pushed to branch $BRANCH_NAME."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN for pushing to repo, or a PAT for PR creation
