name: Security Gates & Compliance

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: ['20.18.1']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Generate SBOM
        run: |
          echo "üîê Generating Software Bill of Materials..."
          node automation/helpers/security-manager.js sbom
        env:
          NODE_ENV: production

      - name: Check License Compliance
        run: |
          echo "üìã Checking license compliance..."
          node automation/helpers/security-manager.js compliance
        env:
          NODE_ENV: production

      - name: Audit Content Security Policy
        run: |
          echo "üõ°Ô∏è Auditing Content Security Policy..."
          node automation/helpers/security-manager.js csp
        env:
          NODE_ENV: production

      - name: Run Security Manager
        run: |
          echo "üîç Running comprehensive security scan..."
          node -e "
            const SecurityManager = require('./automation/helpers/security-manager.js');
            const security = new SecurityManager();
            security.generateSecurityReport().then(result => {
              if (result.success) {
                console.log('‚úÖ Security report generated:', result.reportFile);
                process.exit(0);
              } else {
                console.error('‚ùå Security scan failed:', result.reason);
                process.exit(1);
              }
            }).catch(error => {
              console.error('‚ùå Security scan error:', error.message);
              process.exit(1);
            });
          "
        env:
          NODE_ENV: production

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            automation/security/
            public/reports/automation/
          retention-days: 30

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          npm audit --json > audit-report.json || true
          
          # Check if there are high or critical vulnerabilities
          if node -e "
            const audit = require('./audit-report.json');
            const highVulns = audit.metadata.vulnerabilities.high || 0;
            const criticalVulns = audit.metadata.vulnerabilities.critical || 0;
            
            if (highVulns > 0 || criticalVulns > 0) {
              console.error(\`‚ùå Found \${highVulns} high and \${criticalVulns} critical vulnerabilities\`);
              process.exit(1);
            } else {
              console.log('‚úÖ No high or critical vulnerabilities found');
              process.exit(0);
            }
          "; then
            echo "‚úÖ Security check passed"
          else
            echo "‚ùå Security check failed - vulnerabilities found"
            exit 1
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report-${{ github.run_number }}
          path: audit-report.json
          retention-days: 30

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Check license compliance
        run: |
          echo "üìã Checking license compliance..."
          node -e "
            const SecurityManager = require('./automation/helpers/security-manager.js');
            const security = new SecurityManager();
            
            security.checkLicenseCompliance().then(result => {
              if (result.success) {
                const compliance = result.complianceReport;
                console.log(\`üìä License Compliance Summary:\`);
                console.log(\`   Total Dependencies: \${compliance.totalDependencies}\`);
                console.log(\`   Allowed: \${compliance.summary.allowed}\`);
                console.log(\`   Restricted: \${compliance.summary.restricted}\`);
                console.log(\`   Forbidden: \${compliance.summary.forbidden}\`);
                
                if (compliance.summary.forbidden > 0) {
                  console.error('‚ùå Forbidden licenses found - compliance check failed');
                  process.exit(1);
                } else if (compliance.summary.restricted > 0) {
                  console.warn('‚ö†Ô∏è Restricted licenses found - review required');
                  process.exit(0);
                } else {
                  console.log('‚úÖ License compliance check passed');
                  process.exit(0);
                }
              } else {
                console.error('‚ùå License compliance check failed:', result.reason);
                process.exit(1);
              }
            }).catch(error => {
              console.error('‚ùå License compliance check error:', error.message);
              process.exit(1);
            });
          "

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-scan, license-compliance]
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security Gate Check
        run: |
          echo "üö™ Running security gate check..."
          
          # Check if all previous jobs succeeded
          if [[ "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.dependency-scan.result }}" == "success" && 
                "${{ needs.license-compliance.result }}" == "success" ]]; then
            echo "‚úÖ All security checks passed - gate is open"
            echo "üöÄ Proceeding with deployment..."
          else
            echo "‚ùå Security gate is closed - some checks failed"
            echo "üîí Deployment blocked until security issues are resolved"
            exit 1
          fi

      - name: Security Summary
        run: |
          echo "üìä Security Gate Summary:"
          echo "   Security Scan: ${{ needs.security-scan.result }}"
          echo "   Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "   License Compliance: ${{ needs.license-compliance.result }}"
          echo ""
          echo "üéØ Overall Status: ${{ needs.security-gate.result }}"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-scan, license-compliance]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Generate comprehensive security report
        run: |
          echo "üìã Generating comprehensive security report..."
          node -e "
            const SecurityManager = require('./automation/helpers/security-manager.js');
            const security = new SecurityManager();
            
            security.generateSecurityReport().then(result => {
              if (result.success) {
                console.log('‚úÖ Security report generated:', result.reportFile);
                
                // Also generate a summary for GitHub
                const report = result.report;
                console.log('\\nüìä Security Report Summary:');
                console.log('   SBOM Generated:', report.summary.sbomGenerated ? '‚úÖ' : '‚ùå');
                console.log('   License Compliant:', report.summary.licenseCompliant ? '‚úÖ' : '‚ùå');
                console.log('   CSP Score:', report.summary.cspScore + '/100');
                console.log('   Recommendations:', report.summary.recommendations.length);
                
                process.exit(0);
              } else {
                console.error('‚ùå Security report generation failed:', result.reason);
                process.exit(1);
              }
            }).catch(error => {
              console.error('‚ùå Security report generation error:', error.message);
              process.exit(1);
            });
          "

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ github.run_number }}
          path: |
            automation/security/
            public/reports/automation/
          retention-days: 90

  notify-security-issues:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: failure()
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security Issue Notification
        run: |
          echo "üö® Security issues detected in the pipeline!"
          echo "üîí Deployment has been blocked"
          echo ""
          echo "üìã Failed Security Checks:"
          echo "   Security Scan: ${{ needs.security-scan.result }}"
          echo "   Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "   License Compliance: ${{ needs.license-compliance.result }}"
          echo ""
          echo "üîç Please review the security artifacts and resolve issues before retrying"
          echo "üìÅ Check the uploaded artifacts for detailed reports"

      - name: Create security issue
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Security Gate Failed - PR #${context.payload.pull_request.number}`,
              body: `## Security Gate Failure
            
            The security gate has blocked this pull request due to security issues.
            
            ### Failed Checks:
            - **Security Scan**: ${{ needs.security-scan.result }}
            - **Dependency Scan**: ${{ needs.dependency-scan.result }}
            - **License Compliance**: ${{ needs.license-compliance.result }}
            
            ### Required Actions:
            1. Review the security artifacts uploaded in this workflow run
            2. Resolve all security issues
            3. Re-run the security checks
            4. Ensure all checks pass before merging
            
            ### Security Artifacts:
            - Security Reports: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - SBOM and Compliance Data: Check the uploaded artifacts
            
            ---
            *This issue was automatically created by the Security Gate workflow*
            `,
              labels: ['security', 'blocked', 'automation'],
              assignees: ['${{ github.repository_owner }}']
            });
            
            console.log(`Created security issue: ${issue.html_url}`);

  security-success:
    name: Security Success
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: success()
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security Success Notification
        run: |
          echo "‚úÖ All security checks passed successfully!"
          echo "üö™ Security gate is open"
          echo "üöÄ Deployment can proceed"
          echo ""
          echo "üìä Security Summary:"
          echo "   SBOM: Generated ‚úÖ"
          echo "   Dependencies: Scanned ‚úÖ"
          echo "   Licenses: Compliant ‚úÖ"
          echo "   CSP: Audited ‚úÖ"
          echo ""
          echo "üéØ Security posture: EXCELLENT"

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ‚úÖ Security Gate Passed!
            
            All security checks have passed successfully. This PR is ready for deployment.
            
            ### Security Status:
            - **SBOM Generation**: ‚úÖ Complete
            - **Dependency Scan**: ‚úÖ Clean
            - **License Compliance**: ‚úÖ Verified
            - **Content Security Policy**: ‚úÖ Audited
            
            üöÄ **Security Gate: OPEN** - Deployment can proceed
            
            ---
            *Security check completed at ${{ github.event.head_commit.timestamp }}*
            `
            });
