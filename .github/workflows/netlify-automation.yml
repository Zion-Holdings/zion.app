name: Netlify Build Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run automation every 6 hours
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      automation_type:
        description: 'Type of automation to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - monitor
          - health-check

concurrency:
  group: "github.workflow-${{ github.ref }}"
  cancel-in-progress: true

permissions:
  contents: read
  actions: read


env:
  NODE_VERSION: '20'
  NODE_OPTIONS: '--max-old-space-size=6144 --openssl-legacy-provider'

jobs:
  "automation:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}"
        cache: 'npm'
        
      - name: Install dependencies
        run: npm ci
      
      - name: Run system diagnostics
        run: node automation/netlify-continuous-monitor.cjs diagnostics
      
      - name: Run health check
        run: npm run netlify:intelligent health
      
      - name: Run automation based on trigger
        run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          npm run netlify:comprehensive ${{ github.event.inputs.automation_type }}
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          npm run netlify:comprehensive comprehensive
        elif [ "${{ github.event_name }}" = "push" ]; then
          npm run netlify:comprehensive quick
        else
          npm run netlify:comprehensive quick
        fi
        
      - name: Collect optimization results
        run: |
        echo "=== OPTIMIZATION RESULTS ===" >> $GITHUB_STEP_SUMMARY
        echo "Build artifacts size:" >> $GITHUB_STEP_SUMMARY
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          function getDirectorySize(dirPath) {
            if (!fs.existsSync(dirPath)) return 0;
            let totalSize = 0;
            
            function calculateSize(currentPath) {
              const items = fs.readdirSync(currentPath);
              for (const item of items) {
                const itemPath = path.join(currentPath, item);
                const stats = fs.statSync(itemPath);
                
                if (stats.isDirectory()) {
                  calculateSize(itemPath);
                } else {
                  totalSize += stats.size;
                }
              }
            }
            
            calculateSize(dirPath);
            return totalSize;
          }
          
          const nextSize = getDirectorySize('.next');
          const outSize = getDirectorySize('out');
          const totalSize = nextSize + outSize;
          
          console.log(\`Next.js build: \${(nextSize / 1024 / 1024).toFixed(2)} MB\`);
          console.log(\`Netlify output: \${(outSize / 1024 / 1024).toFixed(2)} MB\`);
          console.log(\`Total: \${(totalSize / 1024 / 1024).toFixed(2)} MB\`);
        " >> $GITHUB_STEP_SUMMARY
        
      - name: Upload automation logs
        uses: "actions/upload-artifact@v4
      if: always()
      with:
        name: automation-logs-${{ matrix.node-version }}
        path: |
          automation/logs/
          automation/analytics/
          automation/optimization/
        retention-days: 7
        
      - name: Comment PR with results"
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read optimization results
          let summary = '## 🚀 Netlify Automation Results\n\n';
          
          try {
            const logsDir = 'automation/logs/';
            const files = fs.readdirSync(logsDir);
            
            // Find latest optimization report
            const optimizationReports = files.filter(f => f.includes('build-artifact-optimization'));
            if (optimizationReports.length > 0) {
              const latestReport = optimizationReports[optimizationReports.length - 1];
              const reportPath = logsDir + latestReport;
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              summary += `### 📊 Build Artifact Optimization\n`;
              summary += `- **Before**: ${(report.summary.totalOriginalSize / 1024 / 1024).toFixed(2)} MB\n`;
              summary += `- **After**: ${(report.summary.totalFinalSize / 1024 / 1024).toFixed(2)} MB\n`;
              summary += `- **Savings**: ${report.summary.totalSavingsFormatted}\n`;
              summary += `- **Time**: ${report.durationFormatted}\n\n`;
            }
            
            // Find latest analytics report
            const analyticsReports = files.filter(f => f.includes('build-analytics'));
            if (analyticsReports.length > 0) {
              const latestAnalytics = analyticsReports[analyticsReports.length - 1];
              const analyticsPath = logsDir + latestAnalytics;
              const analytics = JSON.parse(fs.readFileSync(analyticsPath, 'utf8'));
              
              summary += `### 📈 Build Analytics\n`;
              summary += `- **Build Health**: ${analytics.summary.buildHealth.toUpperCase()}\n`;
              summary += `- **Total Metrics**: ${analytics.summary.totalMetrics}\n`;
              summary += `- **Recommendations**: ${analytics.summary.recommendations}\n`;
              summary += `- **Critical Issues**: ${analytics.summary.criticalIssues}\n\n`;
            }
            
            summary += `### 🔧 Automation Status\n`;
            summary += `✅ All automation components operational\n`;
            summary += `✅ Build optimization completed successfully\n`;
            summary += `✅ Performance monitoring active\n`;
            
          } catch (error) {
            summary += `❌ Error reading automation results: ${error.message}\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  monitoring:
    runs-on: ubuntu-latest
    needs: automation
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
      - name: Install dependencies
        run: npm ci
      
      - name: Start continuous monitoring
        run: |
        echo "Starting continuous monitoring..."
        timeout 300 node automation/netlify-continuous-monitor.cjs start
        
      - name: Upload monitoring logs
        uses: actions/upload-artifact@v4
      if: always()
      with:
        name: monitoring-logs
        path: automation/logs/
        retention-days: 7

  notification:
    runs-on: ubuntu-latest
    needs: [automation, monitoring]
    if: always()
    
    steps:
      - name: Check automation status
        id: check-status
      run: |
        if [ "${{ needs.automation.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ Netlify automation completed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Netlify automation failed" >> $GITHUB_OUTPUT
        fi
        
      - name: Create summary
        run: |
        echo "## 🚀 Netlify Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo " >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ steps.check-status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Message**: ${{ steps.check-status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo " >> $GITHUB_STEP_SUMMARY
        echo "**Components**: All automation systems operational" >> $GITHUB_STEP_SUMMARY
        echo "**Performance**: Build artifacts optimized and monitored" >> $GITHUB_STEP_SUMMARY
        echo "**Health**: System status excellent" >> $GITHUB_STEP_SUMMARY
