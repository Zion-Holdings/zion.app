<<<<<<< HEAD
import React, { useEffect, useState } from 'react';
=======
import React, { useEffect } from 'react';
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
import Head from 'next/head';
import { useRouter } from 'next/router';

<<<<<<< HEAD
interface SEOIssue {
  id: string;
  type: 'error' | 'warning' | 'info';
  category: 'meta' | 'content' | 'performance' | 'accessibility' | 'technical';
  message: string;
  element?: HTMLElement;
  severity: 'low' | 'medium' | 'high';
  fix?: string;
  impact: number; // 0-100
}

    // Check description length
    if (seoData.description.length < 120 || seoData.description.length > 160) {
      issues.push('Description length should be between 120-160 characters');
      score -= 10;
    }

    // Check for missing alt text on images
    const images = document.querySelectorAll('img');
    const imagesWithoutAlt = Array.from(images).filter(img => !img.alt);
    if (imagesWithoutAlt.length > 0) {
      issues.push(`${imagesWithoutAlt.length} images missing alt text`);
      score -= 5;
    }

    // Check heading structure
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    const h1Count = document.querySelectorAll('h1').length;
    if (h1Count === 0) {
      issues.push('Missing H1 heading');
      score -= 15;
    } else if (h1Count > 1) {
      issues.push('Multiple H1 headings found');
      score -= 10;
    }

    // Check for internal links
    const internalLinks = document.querySelectorAll('a[href^="/"], a[href^="https://ziontechgroup.com"]');
    if (internalLinks.length < 3) {
      issues.push('Low number of internal links');
      score -= 5;
    }

    // Check for meta viewport
    const viewport = document.querySelector('meta[name="viewport"]');
    if (!viewport) {
      issues.push('Missing viewport meta tag');
      score -= 10;
    }

    // Check for language declaration
    const html = document.documentElement;
    if (!html.lang) {
      issues.push('Missing language declaration');
      score -= 5;
    }

    // Check for robots meta tag
    const robots = document.querySelector('meta[name="robots"]');
    if (!robots) {
      issues.push('Missing robots meta tag');
      score -= 5;
    }

      newMetrics.images.score = Math.min(100,
        (newMetrics.images.withAlt / Math.max(newMetrics.images.total, 1)) * 100
      );

      newMetrics.links.score = Math.min(100,
        (newMetrics.links.internal / Math.max(newMetrics.links.internal + newMetrics.links.external, 1)) * 100
      );

      newMetrics.content.score = Math.min(100,
        (newMetrics.content.wordCount >= 300 ? 40 : newMetrics.content.wordCount / 7.5) +
        (newMetrics.content.keywordDensity >= 1 && newMetrics.content.keywordDensity <= 3 ? 30 : 0) +
        (newMetrics.content.readability >= 60 ? 30 : newMetrics.content.readability / 2)
      );

      // Calculate overall score
      const scores = [
        newMetrics.title.score,
        newMetrics.description.score,
        newMetrics.headings.score,
        newMetrics.images.score,
        newMetrics.links.score,
        newMetrics.content.score
      ];
      newMetrics.overall = Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);

      setMetrics(newMetrics);

      // Add to history
      setAnalysisHistory(prev => [
        { url: currentUrl, score: newMetrics.overall, date: new Date() },
        ...prev.slice(0, 9)
      ]);

      // Generate issues
      const newIssues: SEOIssue[] = [];
      
      if (newMetrics.title.length < 30) {
        newIssues.push({
          id: 'title-too-short',
          type: 'warning',
          category: 'meta',
          message: 'Title is too short. Aim for 30-60 characters.',
          severity: 'medium',
          fix: 'Add more descriptive words to your title',
          impact: 15
        });
      }

      if (newMetrics.title.length > 60) {
        newIssues.push({
          id: 'title-too-long',
          type: 'warning',
          category: 'meta',
          message: 'Title is too long. Keep it under 60 characters.',
          severity: 'medium',
          fix: 'Shorten your title to be more concise',
          impact: 10
        });
      }

      if (newMetrics.headings.h1Count === 0) {
        newIssues.push({
          id: 'no-h1',
          type: 'error',
          category: 'content',
          message: 'No H1 heading found. Every page should have one main heading.',
          severity: 'high',
          fix: 'Add an H1 heading to your page',
          impact: 25
        });
      }

      if (newMetrics.headings.h1Count > 1) {
        newIssues.push({
          id: 'multiple-h1',
          type: 'error',
          category: 'content',
          message: 'Multiple H1 headings found. Use only one per page.',
          severity: 'high',
          fix: 'Convert additional H1 headings to H2 or H3',
          impact: 20
        });
      }

      if (newMetrics.images.total > 0 && newMetrics.images.withAlt === 0) {
        newIssues.push({
          id: 'no-alt-text',
          type: 'error',
          category: 'accessibility',
          message: 'Images found without alt text. This affects accessibility and SEO.',
          severity: 'high',
          fix: 'Add descriptive alt text to all images',
          impact: 20
        });
      }

      if (newMetrics.content.wordCount < 300) {
        newIssues.push({
          id: 'content-too-short',
          type: 'warning',
          category: 'content',
          message: 'Content is too short. Aim for at least 300 words.',
          severity: 'medium',
          fix: 'Add more relevant content to your page',
          impact: 15
        });
      }
    };

    // Inject structured data
    const script = document.createElement('script');
    script.type = 'application/ld+json';
    script.text = JSON.stringify(webPageData);
    document.head.appendChild(script);

    } catch {
      // Silently handle errors
    } finally {
      setIsAnalyzing(false);
    }
  }, [currentUrl, isAnalyzing]);

  // Toggle visibility
  const toggleVisibility = useCallback(() => {
    setIsVisible(prev => !prev);
    if (isVisible) {
      setIsExpanded(false);
    }
  }, [isVisible]);

  // Toggle expansion
  const toggleExpansion = useCallback(() => {
    setIsExpanded(prev => !prev);
  }, []);

  // Get severity color
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'text-red-600 dark:text-red-400';
      case 'medium': return 'text-yellow-600 dark:text-yellow-400';
      case 'low': return 'text-blue-600 dark:text-blue-400';
      default: return 'text-gray-600 dark:text-gray-400';
    }
  };

  // Get severity background
  const getSeverityBg = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-100 dark:bg-red-900/30';
      case 'medium': return 'bg-yellow-100 dark:bg-yellow-900/30';
      case 'low': return 'bg-blue-100 dark:bg-blue-900/30';
      default: return 'bg-gray-100 dark:bg-gray-900/30';
    }
  };

  if (!isVisible) {
    return (
      <motion.button
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
        onClick={toggleVisibility}
        className="fixed bottom-6 left-6 w-14 h-14 bg-green-600 hover:bg-green-700 text-white rounded-full shadow-lg z-50 flex items-center justify-center transition-all duration-200 hover:shadow-xl"
        aria-label="Open SEO optimizer"
      >
        <Search className="w-6 h-6" />
      </motion.button>
    );
  }

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, x: 300 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: 300 }}
        className="fixed top-0 right-0 h-full w-96 bg-white dark:bg-gray-900 text-gray-900 dark:text-white p-6 shadow-2xl z-40 overflow-y-auto"
      >
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <h2 className="text-xl font-bold">SEO Optimizer</h2>
            <p className="text-sm text-gray-600 dark:text-gray-400">Real-time SEO analysis</p>
          </div>
          <button
            onClick={toggleVisibility}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
            aria-label="Close SEO optimizer"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Current URL */}
        <div className="mb-6 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">Current Page</p>
          <p className="text-sm font-mono break-all">{currentUrl}</p>
        </div>

        {/* Analysis Button */}
        <div className="mb-6">
          <button
            onClick={analyzePage}
            disabled={isAnalyzing}
            className="w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white rounded-lg transition-colors duration-200 flex items-center justify-center gap-2"
            aria-label="Analyze current page"
          >
            {isAnalyzing ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                <span>Analyzing...</span>
              </>
            ) : (
              <>
                <Search className="w-4 h-4" />
                <span>Analyze Page</span>
              </>
            )}
          </button>
        </div>

        {/* Metrics Display */}
        {metrics && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-4">SEO Score: {metrics.overall}/100</h3>
            
            <div className="space-y-4">
              {/* Title */}
              <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">Title</span>
                  <span className={`text-sm font-bold ${metrics.title.score >= 80 ? 'text-green-600' : metrics.title.score >= 60 ? 'text-yellow-600' : 'text-red-600'}`}>
                    {metrics.title.score}/100
                  </span>
                </div>
                <div className="text-xs text-gray-600 dark:text-gray-400 space-y-1">
                  <p>Length: {metrics.title.length} characters</p>
                  <p>Keywords: {metrics.title.hasKeywords ? '✓' : '✗'}</p>
                  <p>Brand: {metrics.title.hasBrand ? '✓' : '✗'}</p>
                </div>
              </div>

              {/* Headings */}
              <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">Headings</span>
                  <span className={`text-sm font-bold ${metrics.headings.score >= 80 ? 'text-green-600' : metrics.headings.score >= 60 ? 'text-yellow-600' : 'text-red-600'}`}>
                    {metrics.headings.score}/100
                  </span>
                </div>
                <div className="text-xs text-gray-600 dark:text-gray-400 space-y-1">
                  <p>H1: {metrics.headings.h1Count}</p>
                  <p>H2: {metrics.headings.h2Count}</p>
                  <p>H3: {metrics.headings.h3Count}</p>
                </div>
              </div>

              {/* Images */}
              <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">Images</span>
                  <span className={`text-sm font-bold ${metrics.images.score >= 80 ? 'text-green-600' : metrics.images.score >= 60 ? 'text-yellow-600' : 'text-red-600'}`}>
                    {metrics.images.score}/100
                  </span>
                </div>
                <div className="text-xs text-gray-600 dark:text-gray-400 space-y-1">
                  <p>Total: {metrics.images.total}</p>
                  <p>With Alt: {metrics.images.withAlt}</p>
                </div>
              </div>

              {/* Content */}
              <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">Content</span>
                  <span className={`text-sm font-bold ${metrics.content.score >= 80 ? 'text-green-600' : metrics.content.score >= 60 ? 'text-yellow-600' : 'text-red-600'}`}>
                    {metrics.content.score}/100
                  </span>
                </div>
                <div className="text-xs text-gray-600 dark:text-gray-400 space-y-1">
                  <p>Words: {metrics.content.wordCount}</p>
                  <p>Keyword Density: {metrics.content.keywordDensity}%</p>
                  <p>Readability: {metrics.content.readability}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Issues List */}
        {issues.length > 0 && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-4">Issues Found ({issues.length})</h3>
            <div className="space-y-3">
              {issues.map((issue) => (
                <div
                  key={issue.id}
                  className={`p-3 rounded-lg border-l-4 ${getSeverityBg(issue.severity)} border-l-${issue.severity === 'high' ? 'red' : issue.severity === 'medium' ? 'yellow' : 'blue'}-500`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <AlertTriangle className={`w-4 h-4 ${getSeverityColor(issue.severity)}`} />
                        <span className={`text-sm font-medium ${getSeverityColor(issue.severity)} capitalize`}>
                          {issue.severity} {issue.type}
                        </span>
                      </div>
                      <p className="text-sm text-gray-700 dark:text-gray-300 mb-2">{issue.message}</p>
                      {issue.fix && (
                        <p className="text-xs text-gray-600 dark:text-gray-400">
                          <strong>Fix:</strong> {issue.fix}
                        </p>
                      )}
                    </div>
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                      -{issue.impact} pts
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Analysis History */}
        {analysisHistory.length > 0 && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-4">Recent Analysis</h3>
            <div className="space-y-2">
              {analysisHistory.slice(0, 5).map((item, index) => (
                <div key={index} className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded">
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">{item.url}</p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {item.date.toLocaleDateString()}
                    </p>
                  </div>
                  <span className={`text-sm font-bold ${
                    item.score >= 80 ? 'text-green-600' : 
                    item.score >= 60 ? 'text-yellow-600' : 'text-red-600'
                  }`}>
                    {item.score}/100
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Expandable Details */}
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="border-t border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              <div className="pt-4 space-y-4">
                <h4 className="text-gray-900 dark:text-white font-medium text-sm">Advanced SEO Tips</h4>
                
                <div className="space-y-3 text-sm text-gray-600 dark:text-gray-400">
                  <div>
                    <h5 className="font-medium text-gray-700 dark:text-gray-300 mb-1">Title Optimization</h5>
                    <p>Keep titles between 30-60 characters. Include primary keywords near the beginning.</p>
                  </div>
                  
                  <div>
                    <h5 className="font-medium text-gray-700 dark:text-gray-300 mb-1">Meta Description</h5>
                    <p>Write compelling descriptions between 120-160 characters. Include a call-to-action.</p>
                  </div>
                  
                  <div>
                    <h5 className="font-medium text-gray-700 dark:text-gray-300 mb-1">Heading Structure</h5>
                    <p>Use one H1 per page, followed by H2s and H3s. Include keywords naturally.</p>
                  </div>
                  
                  <div>
                    <h5 className="font-medium text-gray-700 dark:text-gray-300 mb-1">Image Optimization</h5>
                    <p>Always add descriptive alt text. Use relevant filenames and compress images.</p>
                  </div>
                  
                  <div>
                    <h5 className="font-medium text-gray-700 dark:text-gray-300 mb-1">Content Quality</h5>
                    <p>Aim for at least 300 words. Use keywords naturally and provide value to readers.</p>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Expand/Collapse Button */}
        <button
          onClick={toggleExpansion}
          className="mt-6 w-full px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200 flex items-center justify-center gap-2"
          aria-label={`${isExpanded ? 'Collapse' : 'Expand'} advanced tips`}
        >
          <Settings className="w-4 h-4" />
          <span className="text-sm font-medium">
            {isExpanded ? 'Show Less' : 'Show More'}
          </span>
        </button>
      </motion.div>
    </AnimatePresence>
=======
interface SEOOptimizerProps {
  title?: string;
  description?: string;
  keywords?: string;
  image?: string;
  url?: string;
  type?: string;
  author?: string;
  publishedTime?: string;
  modifiedTime?: string;
  section?: string;
  tags?: string[];
  noindex?: boolean;
  nofollow?: boolean;
  canonical?: string;
}

const SEOOptimizer: React.FC<SEOOptimizerProps> = ({
  title = 'Zion Tech Group 2045 - Revolutionary AI, Quantum Computing & Space Technology Solutions',
  description = 'Transform your business with Zion Tech Group\'s cutting-edge AI, quantum computing, and space technology solutions. Enterprise-grade innovation for the future.',
  keywords = 'AI, artificial intelligence, quantum computing, space technology, cybersecurity, cloud solutions, enterprise IT, micro SaaS, Zion Tech Group',
  image = '/og-image-zion-tech-group-2045.jpg',
  url,
  type = 'website',
  author = 'Zion Tech Group',
  publishedTime,
  modifiedTime,
  section = 'Technology',
  tags = ['AI', 'Quantum Computing', 'Space Technology', 'Cybersecurity'],
  noindex = false,
  nofollow = false,
  canonical
}) => {
  const router = useRouter();
  const currentUrl = url || `${process.env.NEXT_PUBLIC_SITE_URL || 'https://ziontechgroup.com'}${router.asPath}`;
  const canonicalUrl = canonical || currentUrl;
  const ogImage = image.startsWith('http') ? image : `${process.env.NEXT_PUBLIC_SITE_URL || 'https://ziontechgroup.com'}${image}`;

  // Generate structured data for organization
  const organizationSchema = {
    '@context': 'https://schema.org',
    '@type': 'Organization',
    name: 'Zion Tech Group',
    url: 'https://ziontechgroup.com',
    logo: 'https://ziontechgroup.com/logo.png',
    description: 'Pioneering the future with revolutionary AI, quantum computing, and space technology solutions.',
    sameAs: [
      'https://linkedin.com/company/zion-tech-group',
      'https://twitter.com/ziontechgroup',
      'https://github.com/Zion-Holdings'
    ],
    contactPoint: {
      '@type': 'ContactPoint',
      telephone: '+1-555-123-4567',
      contactType: 'customer service',
      email: 'hello@ziontechgroup.com'
    },
    address: {
      '@type': 'PostalAddress',
      addressCountry: 'US',
      addressLocality: 'Middletown',
      addressRegion: 'DE'
    },
    founder: {
      '@type': 'Person',
      name: 'Kleber Oliveira',
      jobTitle: 'CEO & Founder',
      url: 'https://ziontechgroup.com/about'
    },
    foundingDate: '2020',
    numberOfEmployees: '50-100',
    industry: 'Technology',
    knowsAbout: [
      'Artificial Intelligence',
      'Quantum Computing',
      'Space Technology',
      'Cybersecurity',
      'Cloud Computing',
      'Enterprise Software'
    ]
  };

  // Generate structured data for website
  const websiteSchema = {
    '@context': 'https://schema.org',
    '@type': 'WebSite',
    name: 'Zion Tech Group',
    url: 'https://ziontechgroup.com',
    description: 'Revolutionary technology solutions for the future',
    publisher: {
      '@type': 'Organization',
      name: 'Zion Tech Group'
    },
    potentialAction: {
      '@type': 'SearchAction',
      target: {
        '@type': 'EntryPoint',
        urlTemplate: 'https://ziontechgroup.com/search?q={search_term_string}'
      },
      'query-input': 'required name=search_term_string'
    }
  };

  // Generate structured data for breadcrumbs
  const generateBreadcrumbSchema = () => {
    const pathSegments = router.asPath.split('/').filter(Boolean);
    if (pathSegments.length === 0) return null;

    const breadcrumbItems = [
      {
        '@type': 'ListItem',
        position: 1,
        name: 'Home',
        item: 'https://ziontechgroup.com'
      }
    ];

    let currentPath = '';
    pathSegments.forEach((segment, index) => {
      currentPath += `/${segment}`;
      breadcrumbItems.push({
        '@type': 'ListItem',
        position: index + 2,
        name: segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, ' '),
        item: `https://ziontechgroup.com${currentPath}`
      });
    });

    return {
      '@context': 'https://schema.org',
      '@type': 'BreadcrumbList',
      itemListElement: breadcrumbItems
    };
  };

  const breadcrumbSchema = generateBreadcrumbSchema();

  // Set meta robots
  useEffect(() => {
    const metaRobots = document.querySelector('meta[name="robots"]');
    if (metaRobots) {
      metaRobots.setAttribute('content', `${noindex ? 'noindex' : 'index'}, ${nofollow ? 'nofollow' : 'follow'}`);
    } else {
      const newMetaRobots = document.createElement('meta');
      newMetaRobots.name = 'robots';
      newMetaRobots.content = `${noindex ? 'noindex' : 'index'}, ${nofollow ? 'nofollow' : 'follow'}`;
      document.head.appendChild(newMetaRobots);
    }
  }, [noindex, nofollow]);

  // Set canonical URL
  useEffect(() => {
    const canonicalLink = document.querySelector('link[rel="canonical"]');
    if (canonicalLink) {
      canonicalLink.setAttribute('href', canonicalUrl);
    } else {
      const newCanonicalLink = document.createElement('link');
      newCanonicalLink.rel = 'canonical';
      newCanonicalLink.href = canonicalUrl;
      document.head.appendChild(newCanonicalLink);
    }
  }, [canonicalUrl]);

  return (
    <Head>
      {/* Basic Meta Tags */}
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <meta name="author" content={author} />
      <meta name="robots" content={`${noindex ? 'noindex' : 'index'}, ${nofollow ? 'nofollow' : 'follow'}`} />
      
      {/* Canonical URL */}
      <link rel="canonical" href={canonicalUrl} />
      
      {/* Open Graph Meta Tags */}
      <meta property="og:title" content={title} />
      <meta property="og:description" content={description} />
      <meta property="og:type" content={type} />
      <meta property="og:url" content={currentUrl} />
      <meta property="og:image" content={ogImage} />
      <meta property="og:image:width" content="1200" />
      <meta property="og:image:height" content="630" />
      <meta property="og:image:alt" content="Zion Tech Group - Revolutionary Technology Solutions" />
      <meta property="og:site_name" content="Zion Tech Group" />
      <meta property="og:locale" content="en_US" />
      
      {/* Twitter Card Meta Tags */}
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:site" content="@ziontechgroup" />
      <meta name="twitter:creator" content="@ziontechgroup" />
      <meta name="twitter:title" content={title} />
      <meta name="twitter:description" content={description} />
      <meta name="twitter:image" content={ogImage} />
      <meta name="twitter:image:alt" content="Zion Tech Group - Revolutionary Technology Solutions" />
      
      {/* Additional Meta Tags */}
      <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
      <meta name="theme-color" content="#06b6d4" />
      <meta name="msapplication-TileColor" content="#06b6d4" />
      <meta name="apple-mobile-web-app-capable" content="yes" />
      <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
      <meta name="apple-mobile-web-app-title" content="Zion Tech Group" />
      
      {/* Article specific meta tags */}
      {type === 'article' && publishedTime && (
        <>
          <meta property="article:published_time" content={publishedTime} />
          {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
          <meta property="article:section" content={section} />
          {tags.map((tag, index) => (
            <meta key={index} property="article:tag" content={tag} />
          ))}
        </>
      )}
      
      {/* Preconnect to external domains for performance */}
      <link rel="preconnect" href="https://fonts.googleapis.com" />
      <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
      <link rel="preconnect" href="https://www.google-analytics.com" />
      <link rel="preconnect" href="https://www.googletagmanager.com" />
      
      {/* DNS prefetch for performance */}
      <link rel="dns-prefetch" href="//www.google-analytics.com" />
      <link rel="dns-prefetch" href="//www.googletagmanager.com" />
      <link rel="dns-prefetch" href="//fonts.googleapis.com" />
      
      {/* Favicon and app icons */}
      <link rel="icon" type="image/x-icon" href="/favicon.ico" />
      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
      <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
      <link rel="manifest" href="/site.webmanifest" />
      
      {/* Structured Data */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(organizationSchema)
        }}
      />
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(websiteSchema)
        }}
      />
      {breadcrumbSchema && (
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(breadcrumbSchema)
          }}
        />
      )}
      
      {/* Additional SEO meta tags */}
      <meta name="application-name" content="Zion Tech Group" />
      <meta name="mobile-web-app-capable" content="yes" />
      <meta name="format-detection" content="telephone=no" />
      <meta name="msapplication-config" content="/browserconfig.xml" />
      
      {/* Security headers */}
      <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
      <meta httpEquiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google-analytics.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://www.google-analytics.com https://www.googletagmanager.com;" />
      
      {/* Performance hints */}
      <link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossOrigin="anonymous" />
      <link rel="preload" href="/fonts/jetbrains-mono-var.woff2" as="font" type="font/woff2" crossOrigin="anonymous" />
    </Head>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-8b41
  );
};

export default SEOOptimizer;