import React, { useState, useEffect, useRef } from 'react';
import { Search, X, Sparkles, Filter, TrendingUp, Clock, Star } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
<<<<<<< HEAD
=======
import { Search, X, TrendingUp, Clock, ArrowRight, Sparkles } from 'lucide-react';
import Link from 'next/link';
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b

interface SearchSuggestion {
  id: string;
  title: string;
  description: string;
  category: string;
  url: string;
  relevance: number;
  lastUpdated: string;
  featured: boolean;
}

interface EnhancedSearchProps {
  placeholder?: string;
  className?: string;
  onSearch?: (query: string) => void;
}

const EnhancedSearch: React.FC<EnhancedSearchProps> = ({
<<<<<<< HEAD
  placeholder = "Search for AI, quantum, or autonomous solutions...",
=======
  placeholder = "Search our services, solutions, or expertise...",
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
  className = "",
  onSearch
}) => {
  const [query, setQuery] = useState('');
  const [isOpen, setIsOpen] = useState(false);
<<<<<<< HEAD
  const [results, setResults] = useState<SearchResult[]>([]);
  const [filteredResults, setFilteredResults] = useState<SearchResult[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const searchRef = useRef<HTMLDivElement>(null);

  // Mock AI-powered search suggestions
  const aiSuggestions = [
    "AI consciousness evolution",
    "Quantum neural networks",
    "Autonomous business intelligence",
    "Space resource mining",
    "Brain-computer interface",
    "Quantum cybersecurity",
    "AI emotional intelligence",
    "Autonomous vehicle AI"
  ];

  // Mock search results
  const mockResults: SearchResult[] = [
    {
      id: '1',
      title: 'AI Consciousness Evolution 2040',
      description: 'Revolutionary AI consciousness platform for advanced cognitive computing',
      category: 'AI',
      url: '/ai-consciousness-evolution-2040',
      relevance: 0.98,
      lastUpdated: '2025-01-23',
      featured: true
    },
    {
      id: '2',
      title: 'Quantum Neural Ecosystem 2040',
      description: 'Breakthrough quantum neural network platform for complex problem solving',
      category: 'Quantum',
      url: '/quantum-neural-ecosystem-2040',
      relevance: 0.95,
      lastUpdated: '2025-01-22',
      featured: true
    },
    {
      id: '3',
      title: 'Autonomous Business Intelligence 2040',
      description: 'Self-learning business intelligence platform with predictive analytics',
      category: 'Business',
      url: '/autonomous-business-intelligence-2040',
      relevance: 0.92,
      lastUpdated: '2025-01-21',
      featured: false
    },
    {
      id: '4',
      title: 'Space Resource Intelligence 2040',
      description: 'Advanced space mining and resource optimization platform',
      category: 'Space',
      url: '/space-resource-intelligence-2040',
      relevance: 0.89,
      lastUpdated: '2025-01-20',
      featured: false
=======
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [trendingSearches] = useState<string[]>([
    'AI Services',
    'Quantum Computing',
    'Space Technology',
    'Enterprise Solutions',
    'Machine Learning',
    'Cloud Infrastructure'
  ]);
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const searchRef = useRef<HTMLDivElement>(null);

  // Load recent searches from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('zion-recent-searches');
    if (saved) {
      try {
        setRecentSearches(JSON.parse(saved));
      } catch {
        // Silently handle parsing errors
      }
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
    }
  }, []);

<<<<<<< HEAD
  // Popular searches
  const popularSearchesData = [
    'AI automation', 'Quantum computing', 'Space technology', 
    'Cybersecurity', 'Machine learning', 'Neural networks',
    'Autonomous systems', 'Digital transformation', 'Cloud solutions'
  ];

  // Categories
  const categories = [
    { id: 'ai', name: 'AI & Machine Learning', icon: <Brain className="w-4 h-4" /> },
    { id: 'quantum', name: 'Quantum Computing', icon: <Zap className="w-4 h-4" /> },
    { id: 'space', name: 'Space Technology', icon: <Rocket className="w-4 h-4" /> },
    { id: 'cybersecurity', name: 'Cybersecurity', icon: <Shield className="w-4 h-4" /> },
    { id: 'cloud', name: 'Cloud Solutions', icon: <Cloud className="w-4 h-4" /> },
    { id: 'automation', name: 'Automation', icon: <Cpu className="w-4 h-4" /> },
    { id: 'data', name: 'Data & Analytics', icon: <Database className="w-4 h-4" /> },
    { id: 'blockchain', name: 'Blockchain', icon: <Globe className="w-4 h-4" /> }
  ];

  // Types
  const types = [
    { id: 'service', name: 'Services', icon: <Star className="w-4 h-4" /> },
    { id: 'page', name: 'Pages', icon: <Globe className="w-4 h-4" /> },
    { id: 'blog', name: 'Blog Posts', icon: <Clock className="w-4 h-4" /> },
    { id: 'case-study', name: 'Case Studies', icon: <TrendingUp className="w-4 h-4" /> }
  ];

  // Load recent searches from localStorage
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
        setIsOpen(false);
        setShowSuggestions(false);
=======
  // Save recent searches to localStorage
  const saveRecentSearch = (search: string) => {
    const updated = [search, ...recentSearches.filter(s => s !== search)].slice(0, 5);
    setRecentSearches(updated);
    localStorage.setItem('zion-recent-searches', JSON.stringify(updated));
  };

  // Handle search submission
  const handleSearch = (searchQuery: string) => {
    if (searchQuery.trim()) {
      saveRecentSearch(searchQuery.trim());
      setQuery(searchQuery.trim());
      setIsOpen(false);
      if (onSearch) {
        onSearch(searchQuery.trim());
      }
    }
  };

  // Generate search suggestions based on query
  const generateSuggestions = (searchQuery: string): SearchSuggestion[] => {
    if (!searchQuery.trim()) return [];

    const allServices = [
      {
        id: 'ai-services',
        title: 'AI & Machine Learning Services',
        description: 'Advanced artificial intelligence and machine learning solutions',
        category: 'AI',
        url: '/ai-services',
        relevance: 0.9
      },
      {
        id: 'quantum-computing',
        title: 'Quantum Computing Solutions',
        description: 'Next-generation quantum computing and quantum algorithms',
        category: 'Quantum',
        url: '/quantum-services',
        relevance: 0.8
      },
      {
        id: 'space-technology',
        title: 'Space Technology & Infrastructure',
        description: 'Revolutionary space solutions and satellite technology',
        category: 'Space',
        url: '/space-technology',
        relevance: 0.8
      },
      {
        id: 'enterprise-solutions',
        title: 'Enterprise IT Solutions',
        description: 'Comprehensive enterprise technology and infrastructure',
        category: 'Enterprise',
        url: '/it-services',
        relevance: 0.7
      },
      {
        id: 'cloud-infrastructure',
        title: 'Cloud Infrastructure & DevOps',
        description: 'Scalable cloud solutions and development operations',
        category: 'Cloud',
        url: '/cloud-platform',
        relevance: 0.7
      }
    ];

    const query = searchQuery.toLowerCase();
    return allServices
      .filter(service => 
        service.title.toLowerCase().includes(query) ||
        service.description.toLowerCase().includes(query) ||
        service.category.toLowerCase().includes(query)
      )
      .map(service => ({
        ...service,
        relevance: service.relevance + (service.title.toLowerCase().includes(query) ? 0.1 : 0)
      }))
      .sort((a, b) => b.relevance - a.relevance)
      .slice(0, 5);
  };

  // Handle input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
    
    if (value.trim()) {
      setIsOpen(true);
      setSuggestions(generateSuggestions(value));
    } else {
      setIsOpen(false);
      setSuggestions([]);
    }
  };

  // Handle click outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (searchRef.current && !searchRef.current.contains(event.target as HTMLElement)) {
        setIsOpen(false);
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
      }
    };
    
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, []);

  // Close search when clicking outside
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (searchInputRef.current && !searchInputRef.current.contains(e.target as Node)) {
        setIsOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

<<<<<<< HEAD
  useEffect(() => {
    if (query.length > 2) {
      performSearch(query);
      setShowSuggestions(false);
    } else {
      setResults([]);
      setFilteredResults([]);
      if (query.length > 0) {
        setShowSuggestions(true);
      }
    }
  }, [query]);

  useEffect(() => {
    if (selectedCategory === 'all') {
      setFilteredResults(results);
    } else {
      setFilteredResults(results.filter(result => result.category === selectedCategory));
    }
  }, [selectedCategory, results]);

  const performSearch = async (searchQuery: string) => {
    setIsLoading(true);
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Filter mock results based on query
    const filtered = mockResults.filter(result =>
      result.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      result.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      result.category.toLowerCase().includes(searchQuery.toLowerCase())
    );
    
    setResults(filtered);
    setFilteredResults(filtered);
    setIsLoading(false);
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (query.trim()) {
      onSearch?.(query);
      setIsOpen(false);
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    setQuery(suggestion);
    setShowSuggestions(false);
    performSearch(suggestion);
  };

  const categories = [
    { id: 'all', name: 'All Categories', count: results.length },
    { id: 'AI', name: 'AI & ML', count: results.filter(r => r.category === 'AI').length },
    { id: 'Quantum', name: 'Quantum', count: results.filter(r => r.category === 'Quantum').length },
    { id: 'Business', name: 'Business', count: results.filter(r => r.category === 'Business').length },
    { id: 'Space', name: 'Space Tech', count: results.filter(r => r.category === 'Space').length }
  ];

  return (
    <div className={`relative ${className}`} ref={searchRef}>
      {/* Search Input */}
      <form onSubmit={handleSearch} className="relative">
        <div className="relative">
          <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            onFocus={() => setIsOpen(true)}
            placeholder={placeholder}
            className="w-full pl-12 pr-12 py-3 bg-white/5 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-all duration-300"
          />
          {query && (
            <button
              type="button"
              onClick={() => setQuery('')}
              className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          )}
        </div>
      </form>

      {/* AI Suggestions */}
      <AnimatePresence>
        {showSuggestions && query.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full left-0 right-0 mt-2 bg-gray-900/95 backdrop-blur-xl border border-white/20 rounded-xl shadow-2xl z-50"
          >
            <div className="p-4">
              <div className="flex items-center gap-2 mb-3">
                <Sparkles className="w-4 h-4 text-cyan-400" />
                <span className="text-sm font-medium text-cyan-400">AI-Powered Suggestions</span>
              </div>
              <div className="space-y-2">
                {aiSuggestions
                  .filter(suggestion => suggestion.toLowerCase().includes(query.toLowerCase()))
                  .slice(0, 4)
                  .map((suggestion, index) => (
                    <button
                      key={index}
                      onClick={() => handleSuggestionClick(suggestion)}
                      className="w-full text-left p-2 rounded-lg hover:bg-white/5 transition-colors text-gray-300 hover:text-white"
                    >
                      {suggestion}
                    </button>
                  ))}
              </div>
=======
  // Handle keyboard navigation
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch(query);
    } else if (e.key === 'Escape') {
      setIsOpen(false);
    }
  };

  return (
    <div ref={searchRef} className={`relative ${className}`}>
      {/* Search Input */}
      <div className="relative group">
        <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 group-focus-within:text-cyan-400 transition-colors" />
        <input
          type="text"
          value={query}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          onFocus={() => query.trim() && setIsOpen(true)}
          placeholder={placeholder}
          className="w-full pl-12 pr-12 py-3 bg-white/10 border border-white/20 rounded-full text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent backdrop-blur-sm transition-all duration-300 group-hover:bg-white/15 group-hover:border-white/30"
        />
        {query && (
          <button
            onClick={() => {
              setQuery('');
              setSuggestions([]);
              setIsOpen(false);
            }}
            className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
          >
            <X className="w-4 h-4" />
          </button>
        )}
      </div>

      {/* Search Dropdown */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: -10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -10, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className="absolute top-full left-0 right-0 mt-2 bg-gray-900/95 backdrop-blur-sm border border-gray-700 rounded-xl shadow-2xl z-50 max-h-96 overflow-y-auto"
          >
            {/* Search Suggestions */}
            {suggestions.length > 0 && (
              <div className="p-4 border-b border-gray-700">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-gray-300 flex items-center">
                    <Sparkles className="w-4 h-4 mr-2 text-cyan-400" />
                    Search Results
                  </h3>
                  <span className="text-xs text-gray-500">{suggestions.length} results</span>
                </div>
                <div className="space-y-2">
                  {suggestions.map((suggestion) => (
                    <Link
                      key={suggestion.id}
                      href={suggestion.url}
                      onClick={() => {
                        handleSearch(suggestion.title);
                        setIsOpen(false);
                      }}
                      className="block p-3 rounded-lg hover:bg-gray-800/50 transition-colors group"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="text-sm font-medium text-white group-hover:text-cyan-300 transition-colors">
                              {suggestion.title}
                            </span>
                            <span className="px-2 py-1 text-xs bg-gray-700 text-gray-300 rounded">
                              {suggestion.category}
                            </span>
                          </div>
                          <p className="text-sm text-gray-400">{suggestion.description}</p>
                        </div>
                        <ArrowRight className="w-4 h-4 text-gray-500 group-hover:text-cyan-400 transition-colors opacity-0 group-hover:opacity-100" />
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            )}

            {/* Recent Searches */}
            {recentSearches.length > 0 && (
              <div className="p-4 border-b border-gray-700">
                <h3 className="text-sm font-medium text-gray-300 flex items-center mb-3">
                  <Clock className="w-4 h-4 mr-2 text-gray-400" />
                  Recent Searches
                </h3>
                <div className="space-y-2">
                  {recentSearches.map((search, index) => (
                    <button
                      key={index}
                      onClick={() => handleSearch(search)}
                      className="w-full text-left p-2 rounded-lg hover:bg-gray-800/50 transition-colors text-sm text-gray-300 hover:text-white"
                    >
                      {search}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Trending Searches */}
            <div className="p-4">
              <h3 className="text-sm font-medium text-gray-300 flex items-center mb-3">
                <TrendingUp className="w-4 h-4 mr-2 text-green-400" />
                Trending Searches
              </h3>
              <div className="flex flex-wrap gap-2">
                {trendingSearches.map((search, index) => (
                  <button
                    key={index}
                    onClick={() => handleSearch(search)}
                    className="px-3 py-1 bg-gray-800 hover:bg-gray-700 text-gray-300 hover:text-white rounded-full text-sm transition-colors"
                  >
                    {search}
                  </button>
                ))}
              </div>
            </div>

            {/* Quick Actions */}
            <div className="p-4 bg-gray-800/30 rounded-b-xl">
              <div className="flex gap-2">
                <button
                  onClick={() => {
                    handleSearch('AI Services');
                    setIsOpen(false);
                  }}
                  className="flex-1 px-4 py-2 bg-cyan-500/20 hover:bg-cyan-500/30 text-cyan-300 rounded-lg text-sm transition-colors"
                >
                  AI Services
                </button>
                <button
                  onClick={() => {
                    handleSearch('Quantum Computing');
                    setIsOpen(false);
                  }}
                  className="flex-1 px-4 py-2 bg-purple-500/20 hover:bg-purple-500/30 text-purple-300 rounded-lg text-sm transition-colors"
                >
                  Quantum
                </button>
                <button
                  onClick={() => {
                    handleSearch('Space Technology');
                    setIsOpen(false);
                  }}
                  className="flex-1 px-4 py-2 bg-blue-500/20 hover:bg-blue-500/30 text-blue-300 rounded-lg text-sm transition-colors"
                >
                  Space Tech
                </button>
              </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-application-8e8b
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Search Results */}
      <AnimatePresence>
        {isOpen && (results.length > 0 || isLoading) && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full left-0 right-0 mt-2 bg-gray-900/95 backdrop-blur-xl border border-white/20 rounded-xl shadow-2xl z-50 max-h-96 overflow-hidden"
          >
            {/* Category Filters */}
            <div className="p-4 border-b border-white/10">
              <div className="flex items-center gap-2 mb-3">
                <Filter className="w-4 h-4 text-purple-400" />
                <span className="text-sm font-medium text-purple-400">Filter by Category</span>
              </div>
              <div className="flex flex-wrap gap-2">
                {categories.map((category) => (
                  <button
                    key={category.id}
                    onClick={() => setSelectedCategory(category.id)}
                    className={`px-3 py-1 rounded-full text-xs font-medium transition-all duration-200 ${
                      selectedCategory === category.id
                        ? 'bg-cyan-500 text-black'
                        : 'bg-white/10 text-gray-300 hover:bg-white/20'
                    }`}
                  >
                    {category.name} ({category.count})
                  </button>
                ))}
              </div>
            </div>

            {/* Results */}
            <div className="max-h-64 overflow-y-auto">
              {isLoading ? (
                <div className="p-4 text-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-500 mx-auto"></div>
                  <p className="text-gray-400 mt-2">Searching with AI...</p>
                </div>
              ) : (
                <div className="p-4 space-y-3">
                  {filteredResults.map((result) => (
                    <motion.div
                      key={result.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="group p-3 rounded-lg hover:bg-white/5 transition-all duration-200 cursor-pointer"
                    >
                      <div className="flex items-start gap-3">
                        <div className="flex-shrink-0">
                          {result.featured ? (
                            <Star className="w-5 h-5 text-yellow-400 fill-current" />
                          ) : (
                            <div className="w-5 h-5 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500"></div>
                          )}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="text-sm font-medium text-white group-hover:text-cyan-400 transition-colors truncate">
                              {result.title}
                            </h4>
                            {result.featured && (
                              <span className="px-2 py-1 text-xs bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-full">
                                Featured
                              </span>
                            )}
                          </div>
                          <p className="text-xs text-gray-400 mb-2 line-clamp-2">
                            {result.description}
                          </p>
                          <div className="flex items-center gap-4 text-xs text-gray-500">
                            <span className="flex items-center gap-1">
                              <TrendingUp className="w-3 h-3" />
                              {Math.round(result.relevance * 100)}% match
                            </span>
                            <span className="flex items-center gap-1">
                              <Clock className="w-3 h-3" />
                              {result.lastUpdated}
                            </span>
                            <span className="px-2 py-1 bg-white/10 rounded-full">
                              {result.category}
                            </span>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="p-4 border-t border-white/10 bg-gray-900/50">
              <div className="flex items-center justify-between text-xs text-gray-400">
                <span>{filteredResults.length} results found</span>
                <span className="flex items-center gap-1">
                  <Sparkles className="w-3 h-3 text-cyan-400" />
                  Powered by AI
                </span>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Filters Panel */}
      {showFilters && (
        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="absolute z-40 w-full mt-2 bg-white rounded-2xl shadow-lg border border-gray-200 p-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Categories */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Categories</h4>
                  <div className="space-y-2">
                    {categories.map((category) => (
                      <label key={category.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={filters.category.includes(category.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleFilterChange('category', [...filters.category, category.id]);
                            } else {
                              handleFilterChange('category', filters.category.filter(c => c !== category.id));
                            }
                          }}
                          className="rounded border-gray-300 text-cyan-600 focus:ring-cyan-500"
                        />
                        <span className="text-sm text-gray-700 flex items-center space-x-1">
                          {category.icon}
                          <span>{category.name}</span>
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Types */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Types</h4>
                  <div className="space-y-2">
                    {types.map((type) => (
                      <label key={type.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={filters.type.includes(type.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleFilterChange('type', [...filters.type, type.id]);
                            } else {
                              handleFilterChange('type', filters.type.filter(t => t !== type.id));
                            }
                          }}
                          className="rounded border-gray-300 text-cyan-600 focus:ring-cyan-500"
                        />
                        <span className="text-sm text-gray-700 flex items-center space-x-1">
                          {type.icon}
                          <span>{type.name}</span>
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Date Range */}
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Date Range</h4>
                  <select
                    value={filters.dateRange}
                    onChange={(e) => handleFilterChange('dateRange', e.target.value)}
                    className="w-full rounded-md border-gray-300 text-sm focus:ring-cyan-500 focus:border-cyan-500"
                  >
                    <option value="all">All Time</option>
                    <option value="week">Past Week</option>
                    <option value="month">Past Month</option>
                    <option value="year">Past Year</option>
                  </select>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      )}
    </div>
  );
};

export default EnhancedSearch;