<<<<<<< HEAD
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Activity, TrendingUp, TrendingDown, CheckCircle, AlertTriangle, X, 
  Zap, Clock, BarChart3, Target, Lightbulb, Settings, Monitor, Gauge,
  RefreshCw, Minimize2, Maximize2, Wifi
} from 'lucide-react';

// Web Performance API type definitions
interface LayoutShiftEntry extends PerformanceEntry {
  value: number;
  hadRecentInput: boolean;
}

interface FirstInputEntry extends PerformanceEntry {
  processingStart: number;
  startTime: number;
}

interface LargestContentfulPaintEntry extends PerformanceEntry {
  size: number;
  id: string;
  url?: string;
}

interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  startTime: number;
}

interface PerformanceMetrics {
  loadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  firstInputDelay: number;
  timeToInteractive: number;
  memoryUsage?: number;
  networkLatency?: number;
}

interface PerformanceMonitorProps {
  showUI?: boolean;
  autoRefresh?: boolean;
  refreshInterval?: number;
}

interface PerformanceMonitorProps {
  onToggle?: (visible: boolean) => void;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ onToggle }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [score, setScore] = useState<PerformanceScore | null>(null);
  const [showDetails, setShowDetails] = useState(false);
  const [optimizationTips, setOptimizationTips] = useState<string[]>([]);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [isMonitoring, setIsMonitoring] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Calculate performance scores
  const calculateScores = useCallback((metrics: PerformanceMetrics): PerformanceScore => {
    const fcpScore = Math.max(0, 100 - (metrics.fcp - 1800) / 20);
    const lcpScore = Math.max(0, 100 - (metrics.lcp - 2500) / 25);
    const fidScore = Math.max(0, 100 - (metrics.fid - 100) / 2);
    const clsScore = Math.max(0, 100 - (metrics.cls * 1000));
    const ttfbScore = Math.max(0, 100 - (metrics.ttfb - 600) / 10);

    const overall = Math.round((fcpScore + lcpScore + fidScore + clsScore + ttfbScore) / 5);

    return {
      overall: Math.max(0, Math.min(100, overall)),
      fcp: Math.max(0, Math.min(100, fcpScore)),
      lcp: Math.max(0, Math.min(100, lcpScore)),
      fid: Math.max(0, Math.min(100, fidScore)),
      cls: Math.max(0, Math.min(100, clsScore)),
      ttfb: Math.max(0, Math.min(100, ttfbScore))
    };
  }, []);

  // Get optimization tips based on performance scores
  const getOptimizationTips = useCallback((score: PerformanceScore): string[] => {
    const tips: string[] = [];

    if (score.fcp < 70) {
      tips.push('Optimize critical rendering path and reduce server response time');
    }
    if (score.lcp < 70) {
      tips.push('Optimize images and implement lazy loading for better LCP');
    }
    if (score.fid < 70) {
      tips.push('Reduce JavaScript execution time and optimize event handlers');
    }
    if (score.cls < 70) {
      tips.push('Set explicit dimensions for images and avoid layout shifts');
    }
    if (score.ttfb < 70) {
      tips.push('Optimize server response time and implement CDN');
    }

    if (tips.length === 0) {
      tips.push('Great performance! Keep monitoring for any regressions');
    }

    return tips;
  }, []);

  // Monitor Core Web Vitals
  const monitorPerformance = useCallback(() => {
    if (!('PerformanceObserver' in window)) return;

    // Monitor Largest Contentful Paint
    const lcpObserver = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      const lastEntry = entries[entries.length - 1] as LargestContentfulPaintEntry;
      if (lastEntry) {
        setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
      }
    });
    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

    // Monitor First Input Delay
    const fidObserver = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      const firstEntry = entries[0] as FirstInputEntry;
      if (firstEntry) {
        const fidValue = firstEntry.processingStart - firstEntry.startTime;
        setMetrics(prev => prev ? { ...prev, fid: fidValue } : null);
      }
    });
    fidObserver.observe({ entryTypes: ['first-input'] });

    // Monitor Cumulative Layout Shift
    const clsObserver = new PerformanceObserver((entryList) => {
      let clsValue = 0;
      entryList.getEntries().forEach((entry) => {
        const layoutEntry = entry as LayoutShiftEntry;
        if (!layoutEntry.hadRecentInput) {
          clsValue += layoutEntry.value;
        }
      });
      setMetrics(prev => prev ? { ...prev, cls: clsValue } : null);
    });
    clsObserver.observe({ entryTypes: ['layout-shift'] });

    // Get other metrics
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigationEntry) {
      const fcp = navigationEntry.domContentLoadedEventEnd - navigationEntry.fetchStart;
      const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
      
      setMetrics(prev => ({
        fcp: prev?.fcp || fcp,
        lcp: prev?.lcp || 0,
        fid: prev?.fid || 0,
        cls: prev?.cls || 0,
        ttfb: prev?.ttfb || ttfb,
        fmp: prev?.fmp || 0,
        si: prev?.si || 0,
        tti: prev?.tti || 0
      }));
    }

    return () => {
      lcpObserver.disconnect();
      fidObserver.disconnect();
      clsObserver.disconnect();
    };
  }, []);

  // Measure performance function
  const measurePerformance = useCallback(() => {
    if (typeof window !== 'undefined' && 'performance' in window) {
      const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigationEntry) {
        const fcp = navigationEntry.domContentLoadedEventEnd - navigationEntry.fetchStart;
        const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
        
        setMetrics(prev => ({
          fcp: prev?.fcp || fcp,
          lcp: prev?.lcp || 0,
          fid: prev?.fid || 0,
          cls: prev?.cls || 0,
          ttfb: prev?.ttfb || ttfb,
          fmp: prev?.fmp || 0,
          si: prev?.si || 0,
          tti: prev?.tti || 0
        }));
      }
    }
  }, []);

  // Start monitoring when component mounts
  useEffect(() => {
    const cleanup = monitorPerformance();
    
    // Show monitor after a delay
    const timer = setTimeout(() => setIsVisible(true), 2000);
    
    return () => {
      cleanup?.();
      clearTimeout(timer);
    };
  }, [monitorPerformance]);

  // Calculate scores when metrics change
  useEffect(() => {
    if (metrics) {
      const newScore = calculateScores(metrics);
      setScore(newScore);
      setOptimizationTips(getOptimizationTips(newScore));
    }
  }, [getPerformanceMetrics]);

  // Auto-refresh functionality
  useEffect(() => {
    if (autoRefresh && isVisible) {
      intervalRef.current = setInterval(measurePerformance, 30000); // Every 30 seconds
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [autoRefresh, isVisible, measurePerformance]);

  // Initial measurement
  useEffect(() => {
    if (isVisible) {
      measurePerformance();
    }
  }, [isVisible, measurePerformance]);

  const toggleExpanded = () => setIsExpanded(!isExpanded);
  const toggleAutoRefresh = () => setAutoRefresh(!autoRefresh);
=======
import React, { useEffect, useState, useCallback } from 'react';

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
  domContentLoaded: number;
  loadComplete: number;
  memoryUsage?: {
    usedJSHeapSize: number;
    totalJSHeapSize: number;
    jsHeapSizeLimit: number;
  };
}

interface PerformanceMonitorProps {
  enabled?: boolean;
  logToConsole?: boolean;
  sendToAnalytics?: boolean;
  threshold?: {
    fcp: number;
    lcp: number;
    fid: number;
    cls: number;
    ttfb: number;
  };
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
  enabled = true,
  logToConsole = false,
  sendToAnalytics = false,
  threshold = {
    fcp: 1800,
    lcp: 2500,
    fid: 100,
    cls: 0.1,
    ttfb: 800,
  }
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [isMonitoring, setIsMonitoring] = useState(false);

  // Get performance metrics
  const getPerformanceMetrics = useCallback((): PerformanceMetrics => {
    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    const paint = performance.getEntriesByType('paint');
    
    const fcp = paint.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0;
    const lcp = paint.find(entry => entry.name === 'largest-contentful-paint')?.startTime || 0;
    
    // Get FID (First Input Delay) - requires user interaction
    const fid = 0; // Will be updated when user interacts
    
    // Get CLS (Cumulative Layout Shift)
    const cls = 0; // Will be updated by observer
    
    const ttfb = navigation.responseStart - navigation.requestStart;
    const domContentLoaded = navigation.domContentLoadedEventEnd - navigation.fetchStart;
    const loadComplete = navigation.loadEventEnd - navigation.fetchStart;
    
    // Get memory usage if available
    let memoryUsage;
    if ('memory' in performance) {
      const memory = (performance as any).memory;
      memoryUsage = {
        usedJSHeapSize: memory.usedJSHeapSize,
        totalJSHeapSize: memory.totalJSHeapSize,
        jsHeapSizeLimit: memory.jsHeapSizeLimit,
      };
    }
    
    return {
      fcp,
      lcp,
      fid,
      cls,
      ttfb,
      domContentLoaded,
      loadComplete,
      memoryUsage,
    };
  }, []);

  // Monitor Core Web Vitals
  const monitorCoreWebVitals = useCallback(() => {
    // Monitor LCP
    if ('PerformanceObserver' in window) {
      const lcpObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1] as PerformanceEntry;
        if (lastEntry) {
          setMetrics(prev => prev ? { ...prev, lcp: lastEntry.startTime } : null);
        }
      });
      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
      
      // Monitor CLS
      const clsObserver = new PerformanceObserver((list) => {
        let clsValue = 0;
        for (const entry of list.getEntries()) {
          if (!(entry as any).hadRecentInput) {
            clsValue += (entry as any).value;
          }
        }
        setMetrics(prev => prev ? { ...prev, cls: clsValue } : null);
      });
      clsObserver.observe({ entryTypes: ['layout-shift'] });
      
      // Monitor FID
      const fidObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const fid = (entry as any).processingStart - (entry as any).startTime;
          setMetrics(prev => prev ? { ...prev, fid } : null);
        }
      });
      fidObserver.observe({ entryTypes: ['first-input'] });
    }
  }, []);

  // Analyze performance and provide recommendations
  const analyzePerformance = useCallback((metrics: PerformanceMetrics) => {
    const recommendations: string[] = [];
    
    if (metrics.fcp > threshold.fcp) {
      recommendations.push('First Contentful Paint is slow. Consider optimizing critical rendering path.');
    }
    
    if (metrics.lcp > threshold.lcp) {
      recommendations.push('Largest Contentful Paint is slow. Optimize images and reduce render-blocking resources.');
    }
    
    if (metrics.fid > threshold.fid) {
      recommendations.push('First Input Delay is high. Consider code splitting and reducing JavaScript execution time.');
    }
    
    if (metrics.cls > threshold.cls) {
      recommendations.push('Cumulative Layout Shift is high. Ensure stable layouts and avoid content jumping.');
    }
    
    if (metrics.ttfb > threshold.ttfb) {
      recommendations.push('Time to First Byte is slow. Optimize server response time and consider CDN.');
    }
    
    return recommendations;
  }, [threshold]);

  // Send metrics to analytics
  const sendMetricsToAnalytics = useCallback((metrics: PerformanceMetrics) => {
    if (!sendToAnalytics) return;
    
    // Send to Google Analytics 4
    if (typeof window !== 'undefined' && (window as any).gtag) {
      (window as any).gtag('event', 'performance_metrics', {
        event_category: 'performance',
        event_label: 'core_web_vitals',
        value: Math.round(metrics.lcp),
        custom_parameters: {
          fcp: Math.round(metrics.fcp),
          lcp: Math.round(metrics.lcp),
          fid: Math.round(metrics.fid),
          cls: metrics.cls.toFixed(3),
          ttfb: Math.round(metrics.ttfb),
        }
      });
    }
    
    // Send to custom analytics endpoint
    fetch('/api/analytics/performance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        timestamp: Date.now(),
        url: window.location.href,
        userAgent: navigator.userAgent,
        metrics,
      }),
    }).catch(() => {
      // Silently fail if analytics endpoint is not available
    });
  }, [sendToAnalytics]);

  // Log metrics to console
  const logMetrics = useCallback((metrics: PerformanceMetrics) => {
    if (!logToConsole) return;
    
    console.group('🚀 Performance Metrics');
    console.log('First Contentful Paint:', `${metrics.fcp.toFixed(0)}ms`);
    console.log('Largest Contentful Paint:', `${metrics.lcp.toFixed(0)}ms`);
    console.log('First Input Delay:', `${metrics.fid.toFixed(0)}ms`);
    console.log('Cumulative Layout Shift:', metrics.cls.toFixed(3));
    console.log('Time to First Byte:', `${metrics.ttfb.toFixed(0)}ms`);
    console.log('DOM Content Loaded:', `${metrics.domContentLoaded.toFixed(0)}ms`);
    console.log('Load Complete:', `${metrics.loadComplete.toFixed(0)}ms`);
    
    if (metrics.memoryUsage) {
      console.log('Memory Usage:', {
        used: `${(metrics.memoryUsage.usedJSHeapSize / 1048576).toFixed(2)}MB`,
        total: `${(metrics.memoryUsage.totalJSHeapSize / 1048576).toFixed(2)}MB`,
        limit: `${(metrics.memoryUsage.jsHeapSizeLimit / 1048576).toFixed(2)}MB`,
      });
    }
    
    const recommendations = analyzePerformance(metrics);
    if (recommendations.length > 0) {
      console.group('💡 Performance Recommendations');
      recommendations.forEach(rec => console.log(rec));
      console.groupEnd();
    }
    
    console.groupEnd();
  }, [logToConsole, analyzePerformance]);

  // Start monitoring
  useEffect(() => {
    if (!enabled) return;
    
    setIsMonitoring(true);
    
    // Wait for page to load completely
    if (document.readyState === 'complete') {
      const initialMetrics = getPerformanceMetrics();
      setMetrics(initialMetrics);
      logMetrics(initialMetrics);
      sendMetricsToAnalytics(initialMetrics);
    } else {
      window.addEventListener('load', () => {
        setTimeout(() => {
          const initialMetrics = getPerformanceMetrics();
          setMetrics(initialMetrics);
          logMetrics(initialMetrics);
          sendMetricsToAnalytics(initialMetrics);
        }, 100);
      });
    }
    
    // Start monitoring Core Web Vitals
    monitorCoreWebVitals();
    
    // Monitor performance over time
    const interval = setInterval(() => {
      if (metrics) {
        const currentMetrics = getPerformanceMetrics();
        setMetrics(currentMetrics);
        logMetrics(currentMetrics);
        sendMetricsToAnalytics(currentMetrics);
      }
    }, 30000); // Check every 30 seconds
    
    return () => {
      clearInterval(interval);
      setIsMonitoring(false);
    };
  }, [enabled, getPerformanceMetrics, logMetrics, sendMetricsToAnalytics, monitorCoreWebVitals, metrics]);
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-a25d

  // Performance optimization suggestions
  const getOptimizationTips = useCallback(() => {
    if (!metrics) return [];
    
    const tips: string[] = [];
    
    if (metrics.fcp > 1000) {
      tips.push('Optimize critical rendering path by inlining critical CSS');
    }
    
    if (metrics.lcp > 2000) {
      tips.push('Use next/image for automatic image optimization');
    }
    
    if (metrics.ttfb > 600) {
      tips.push('Consider implementing server-side caching');
    }
    
    if (metrics.memoryUsage && metrics.memoryUsage.usedJSHeapSize > 50 * 1024 * 1024) {
      tips.push('Monitor memory usage and implement cleanup for long-running components');
    }
    
    return tips;
  }, [metrics]);

<<<<<<< HEAD
  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: 20, scale: 0.95 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: 20, scale: 0.95 }}
          className="fixed bottom-4 left-4 z-50"
        >
          {/* Performance Monitor Panel */}
          <div className="bg-gray-900/95 backdrop-blur-md border border-gray-700/50 rounded-xl shadow-2xl shadow-black/50 overflow-hidden">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
              <div className="flex items-center space-x-2">
                <Activity className="w-5 h-5 text-cyan-400" />
                <span className="text-white font-semibold">Performance Monitor</span>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={refreshMetrics}
                  disabled={isLoading}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200 disabled:opacity-50"
                  aria-label="Refresh metrics"
                >
                  <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
                </button>
                <button
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label={isExpanded ? 'Collapse' : 'Expand'}
                >
                  <BarChart3 className="w-4 h-4" />
                </button>
                <button
                  onClick={() => setIsVisible(false)}
                  className="p-1 text-gray-400 hover:text-white transition-colors duration-200"
                  aria-label="Close"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
              <span className="text-sm font-mono text-white">{metrics.lcp}ms</span>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Control Buttons */}
          <div className="flex items-center gap-2 p-2">
            <button
              onClick={toggleAutoRefresh}
              className={`p-1.5 rounded-lg transition-colors ${
                autoRefresh 
                  ? 'bg-cyan-500/20 text-cyan-400' 
                  : 'bg-white/10 text-white/60 hover:bg-white/20'
              }`}
              title={autoRefresh ? 'Disable auto-refresh' : 'Enable auto-refresh'}
            >
              <RefreshCw className={`w-4 h-4 ${autoRefresh ? 'animate-spin' : ''}`} />
            </button>
            <button
              onClick={toggleExpanded}
              className="p-1.5 rounded-lg bg-white/10 text-white/60 hover:bg-white/20 transition-colors"
              title={isExpanded ? 'Minimize' : 'Expand'}
            >
              {isExpanded ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
            </button>
            <button
              onClick={() => onToggle?.(false)}
              className="p-1.5 rounded-lg bg-white/10 text-white/60 hover:bg-white/20 transition-colors"
              title="Close"
            >
              <X className="w-4 h-4" />
            </button>
          </div>

            {/* Performance Score */}
            <div className="p-4 border-b border-gray-700/50">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-400">Performance Score</span>
                {getScoreIcon(getPerformanceScore())}
              </div>
              <div className="flex items-center gap-3">
                <div className="relative w-16 h-16">
                  <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                    <path
                      d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeDasharray={`${score.overall}, 100`}
                      className="text-cyan-400"
                    />
                  </svg>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-lg font-bold text-white">{score.overall}</span>
                  </div>
                </div>
                <div className="flex-1">
                  <div className="text-sm text-gray-400 mb-1">Performance Grade</div>
                  <div className="text-lg font-semibold text-white">{getScoreLabel(score.overall)}</div>
                </div>
                <div className="text-sm text-gray-400">/ 100</div>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2 mt-2">
                <div
                  className={`h-2 rounded-full transition-all duration-500 ${
                    getPerformanceScore() >= 90 ? 'bg-green-500' :
                    getPerformanceScore() >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${getPerformanceScore()}%` }}
                />
              </div>
            </div>

          {/* Core Web Vitals */}
          {metrics && (
            <div className="p-4 border-b border-gray-700/50">
              <h4 className="text-sm font-medium text-gray-300 mb-3">Core Web Vitals</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Zap className="w-4 h-4 text-blue-400" />
                    <span className="text-sm text-gray-300">FCP</span>
                  </div>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Target className="w-4 h-4 text-green-400" />
                    <span className="text-sm text-gray-300">LCP</span>
                  </div>
                  <span className="text-sm font-mono text-white">
                    {Math.round(metrics.lcp)}ms
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-purple-400" />
                    <span className="text-sm text-gray-300">FID</span>
                  </div>
                  <span className="text-sm font-mono text-white">
                    {Math.round(metrics.fid)}ms
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Wifi className="w-4 h-4 text-yellow-400" />
                    <span className="text-sm text-gray-300">TTFB</span>
                  </div>
                  <span className="text-sm font-mono text-white">
                    {Math.round(metrics.ttfb)}ms
                  </span>
                </div>
              </div>
              
              <div className="text-xs text-gray-400 text-center">
                Last updated: {lastUpdate.toLocaleTimeString()}
              </div>
              <span className="text-sm font-mono text-white">{metrics.fid}ms</span>
            </div>

          {/* Optimization Tips */}
          {optimizationTips.length > 0 && (
            <div className="p-4 border-b border-gray-700/50">
              <div className="flex items-center gap-2 mb-3">
                <TrendingUp className="w-4 h-4 text-emerald-400" />
                <span className="text-sm font-medium text-gray-300">Optimization Tips</span>
              </div>
              <div className="space-y-2">
                {optimizationTips.map((tip, index) => (
                  <div key={index} className="text-xs text-gray-400 leading-relaxed">
                    • {tip}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="p-4">
            <button
              onClick={() => setShowDetails(!showDetails)}
              className="w-full px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-600 text-white text-sm font-medium rounded-lg hover:from-cyan-600 hover:to-blue-700 transition-all duration-200"
            >
              {showDetails ? 'Hide Details' : 'Show Details'}
            </button>
          </div>

          {/* Detailed Metrics */}
          <AnimatePresence>
            {showDetails && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className="border-t border-gray-700/50"
              >
                <div className="p-4 space-y-3">
                  <h4 className="text-sm font-medium text-gray-300 mb-3">Detailed Performance Data</h4>
                  
                  {metrics && (
                    <div className="grid grid-cols-2 gap-3 text-xs">
                      <div className="bg-gray-800/50 p-2 rounded">
                        <div className="text-gray-400">DOM Load</div>
                        <div className="text-white font-mono">
                          {Math.round(metrics.fcp)}ms
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Largest Contentful Paint:</span>
                          <span className="text-white">{formatTime(metrics.largestContentfulPaint)}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Time to Interactive:</span>
                          <span className="text-white">{formatTime(metrics.timeToInteractive)}</span>
                        </div>
                        {metrics.memoryUsage && (
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-400">Memory Usage:</span>
                            <span className="text-white">{metrics.memoryUsage.toFixed(1)} MB</span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  <div className="text-xs text-gray-400 text-center pt-2">
                    Monitoring in real-time
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Footer Actions */}
          <div className="p-3 border-t border-cyan-500/20 bg-white/5">
            <button
              onClick={measurePerformance}
              disabled={isMonitoring}
              className="w-full flex items-center justify-center gap-2 px-3 py-2 bg-gradient-to-r from-cyan-500 to-purple-500 text-white text-sm font-medium rounded-lg transition-all duration-300 hover:from-cyan-600 hover:to-purple-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isMonitoring ? (
                <>
                  <RefreshCw className="w-4 h-4 animate-spin" />
                  Measuring...
                </>
              ) : (
                <>
                  <Activity className="w-4 h-4" />
                  Measure Performance
                </>
              )}
            </button>
=======
  // Don't render anything in production unless explicitly enabled
  if (!enabled || process.env.NODE_ENV === 'production') {
    return null;
  }

  return (
    <div className="fixed bottom-4 right-4 bg-black/80 text-white p-4 rounded-lg backdrop-blur-sm border border-gray-700 max-w-sm z-50">
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-sm font-semibold">Performance Monitor</h3>
        <span className={`w-2 h-2 rounded-full ${isMonitoring ? 'bg-green-400' : 'bg-red-400'}`}></span>
      </div>
      
      {metrics && (
        <div className="space-y-1 text-xs">
          <div className="flex justify-between">
            <span>FCP:</span>
            <span className={metrics.fcp > threshold.fcp ? 'text-red-400' : 'text-green-400'}>
              {metrics.fcp.toFixed(0)}ms
            </span>
          </div>
          <div className="flex justify-between">
            <span>LCP:</span>
            <span className={metrics.lcp > threshold.lcp ? 'text-red-400' : 'text-green-400'}>
              {metrics.lcp.toFixed(0)}ms
            </span>
          </div>
          <div className="flex justify-between">
            <span>CLS:</span>
            <span className={metrics.cls > threshold.cls ? 'text-red-400' : 'text-green-400'}>
              {metrics.cls.toFixed(3)}
            </span>
          </div>
          <div className="flex justify-between">
            <span>TTFB:</span>
            <span className={metrics.ttfb > threshold.ttfb ? 'text-red-400' : 'text-green-400'}>
              {metrics.ttfb.toFixed(0)}ms
            </span>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-a25d
          </div>
        </div>
      )}
      
      {getOptimizationTips().length > 0 && (
        <div className="mt-3 pt-2 border-t border-gray-600">
          <h4 className="text-xs font-medium mb-1">Optimization Tips:</h4>
          <ul className="text-xs space-y-1">
            {getOptimizationTips().map((tip, index) => (
              <li key={index} className="text-yellow-300">• {tip}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

// Helper functions
const getScoreIcon = (score: number) => {
  if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
  if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
  return <AlertTriangle className="w-5 h-5 text-red-400" />;
};

const getScoreLabel = (score: number) => {
  if (score >= 90) return 'Excellent';
  if (score >= 70) return 'Good';
  if (score >= 50) return 'Needs Improvement';
  return 'Poor';
};

export default PerformanceMonitor;