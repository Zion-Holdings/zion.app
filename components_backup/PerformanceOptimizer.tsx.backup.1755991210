import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
<<<<<<< HEAD
import { Zap, Clock, Database, Image, Code, Wifi, TrendingUp, CheckCircle } from 'lucide-react';
=======

// Add browser API types
declare global {
  interface Window {
    gtag?: (...args: unknown[]) => void;
  }
  
  // Add missing browser API types
  interface PerformanceResourceTiming extends PerformanceEntry {}
  interface EventTarget {}
  interface Node {}
  interface DOMRectReadOnly {}
}
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
  score: number;
}

<<<<<<< HEAD
interface OptimizationSuggestion {
  id: string;
  title: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  category: 'images' | 'code' | 'caching' | 'network';
  icon: React.ComponentType<any>;
  action: string;
}

const PerformanceOptimizer: React.FC = () => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [suggestions, setSuggestions] = useState<OptimizationSuggestion[]>([]);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationProgress, setOptimizationProgress] = useState(0);

  // Analyze current performance
  const analyzePerformance = useCallback(async () => {
    if (typeof window === 'undefined') return;

    try {
      // Get performance timing
      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      const loadTime = navigation.loadEventEnd - navigation.fetchStart;

      // Analyze resources
      const resources = performance.getEntriesByType('resource');
      let imageSize = 0;
      let jsSize = 0;
      let cssSize = 0;

      resources.forEach((resource: any) => {
        const size = resource.transferSize || 0;
        if (resource.name.includes('.jpg') || resource.name.includes('.png') || resource.name.includes('.webp')) {
          imageSize += size;
        } else if (resource.name.includes('.js')) {
          jsSize += size;
        } else if (resource.name.includes('.css')) {
          cssSize += size;
        }
      });

      const newMetrics: PerformanceMetrics = {
        imageSize,
        jsSize,
        cssSize,
        requests: resources.length,
        loadTime,
        score: calculateScore({ imageSize, jsSize, cssSize, requests: resources.length, loadTime, score: 0 })
      };

      setMetrics(newMetrics);
      generateSuggestions(newMetrics);
    } catch (error) {
      console.error('Performance analysis failed:', error);
    }
  }, []);

  // Calculate performance score
  const calculateScore = (metrics: PerformanceMetrics): number => {
    let score = 100;

    // Image size penalty
    if (metrics.imageSize > 1000000) score -= 20;
    else if (metrics.imageSize > 500000) score -= 10;

    // JavaScript size penalty
    if (metrics.jsSize > 500000) score -= 20;
    else if (metrics.jsSize > 250000) score -= 10;

    // Request count penalty
    if (metrics.requests > 50) score -= 15;
    else if (metrics.requests > 30) score -= 8;

    // Load time penalty
    if (metrics.loadTime > 3000) score -= 25;
    else if (metrics.loadTime > 2000) score -= 15;

    return Math.max(0, score);
  };

  // Generate optimization suggestions
  const generateSuggestions = (metrics: PerformanceMetrics) => {
    const newSuggestions: OptimizationSuggestion[] = [];

    // Image optimization suggestions
    if (metrics.imageSize > 500000) {
      newSuggestions.push({
        id: 'image-optimization',
        title: 'Image Optimization',
        description: 'Convert images to WebP format and implement lazy loading',
        impact: 'high',
        category: 'images',
        icon: Image,
        action: 'Implement WebP conversion and lazy loading'
      });
    }
  }, []);

    // Code splitting suggestions
    if (metrics.jsSize > 300000) {
      newSuggestions.push({
        id: 'code-splitting',
        title: 'Code Splitting',
        description: 'Implement dynamic imports and route-based code splitting',
        impact: 'high',
        category: 'code',
        icon: Code,
        action: 'Add dynamic imports for routes and components'
      });
    }
=======
const PerformanceOptimizer: React.FC<PerformanceOptimizerProps> = ({
  enableMonitoring = true,
  showMetrics = true,
  enableImageOptimization = true,
  enableLazyLoading = true
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fcp: 0,
    lcp: 0,
    fid: 0,
    cls: 0,
    ttfb: 0,
    score: 0
  });

  // Measure performance metrics
  useEffect(() => {
    const startTime = performance.now();
    
    // Simulate performance monitoring
    const timer = setTimeout(() => {
      const loadTime = performance.now() - startTime;
      
      // Get performance metrics
      if ('memory' in performance) {
        const memory = performance.memory;
        setPerformanceMetrics({
          loadTime: Math.round(loadTime),
          memoryUsage: Math.round(memory.usedJSHeapSize / 1024 / 1024), // MB
          networkRequests: 0 // This would be tracked in a real implementation
        });
      } else {
        setPerformanceMetrics({
          loadTime: Math.round(loadTime),
          networkRequests: 0
        });
      }
    };

    const measureCoreWebVitals = () => {
      if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {
        // First Contentful Paint (FCP)
        const fcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fcp = entries[entries.length - 1];
          setMetrics(prev => ({ ...prev, fcp: fcp.startTime }));
        });
        fcpObserver.observe({ entryTypes: ['paint'] });

        // Largest Contentful Paint (LCP)
        const lcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lcp = entries[entries.length - 1];
          setMetrics(prev => ({ ...prev, lcp: lcp.startTime }));
        });
        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

        // First Input Delay (FID)
        const fidObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fid = entries[entries.length - 1] as FirstInputEntry;
          if (fid && 'processingStart' in fid) {
            setMetrics(prev => ({ ...prev, fid: fid.processingStart - fid.startTime }));
          }
        });
        fidObserver.observe({ entryTypes: ['first-input'] });

        // Cumulative Layout Shift (CLS)
        const clsObserver = new PerformanceObserver((list) => {
          let clsValue = 0;
          for (const entry of list.getEntries()) {
            const clsEntry = entry as LayoutShiftEntry;
            if (!clsEntry.hadRecentInput) {
              clsValue += clsEntry.value;
            }
          }
          setMetrics(prev => ({ ...prev, cls: clsValue }));
        });
        clsObserver.observe({ entryTypes: ['layout-shift'] });

        return () => {
          fcpObserver.disconnect();
          lcpObserver.disconnect();
          fidObserver.disconnect();
          clsObserver.disconnect();
        };
      }
    };

    const calculatePerformanceScore = () => {
      let score = 100;
      
      // FCP scoring (0-100)
      if (metrics.fcp > 2500) score -= 30;
      else if (metrics.fcp > 1800) score -= 15;
      
      // LCP scoring (0-100)
      if (metrics.lcp > 4000) score -= 30;
      else if (metrics.lcp > 2500) score -= 15;
      
      // FID scoring (0-100)
      if (metrics.fid > 300) score -= 30;
      else if (metrics.fid > 100) score -= 15;
      
      // CLS scoring (0-100)
      if (metrics.cls > 0.25) score -= 30;
      else if (metrics.cls > 0.1) score -= 15;
      
      setMetrics(prev => ({ ...prev, score: Math.max(0, score) }));
    };
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a

    measurePerformance();
    const cleanup = measureCoreWebVitals();
    
    // Calculate score after metrics are updated
    const timer = setTimeout(calculatePerformanceScore, 1000);
    
    return () => {
      cleanup?.();
      clearTimeout(timer);
    };
  }, [enableMonitoring, metrics.fcp, metrics.lcp, metrics.fid, metrics.cls]);

  // Image optimization
  useEffect(() => {
    if (!enableImageOptimization || typeof window === 'undefined') return;

    const optimizeImages = () => {
      const images = document.querySelectorAll('img');
      images.forEach((img) => {
        img.setAttribute('loading', 'lazy');
        img.setAttribute('decoding', 'async');
        
<<<<<<< HEAD
        <div className="bg-gray-800/50 p-3 rounded-lg text-center">
          <Code className="w-6 h-6 text-purple-400 mx-auto mb-2" />
          <div className="text-sm text-gray-400">JavaScript</div>
          <div className="text-lg font-semibold text-white">
            {(metrics.jsSize / 1024 / 1024).toFixed(1)}MB
          </div>
        </div>
        
        <div className="bg-gray-800/50 p-3 rounded-lg text-center">
          <Database className="w-6 h-6 text-green-400 mx-auto mb-2" />
          <div className="text-sm text-gray-400">CSS</div>
          <div className="text-lg font-semibold text-white">
            {(metrics.cssSize / 1024).toFixed(0)}KB
          </div>
        </div>
        
        <div className="bg-gray-800/50 p-3 rounded-lg text-center">
          <Wifi className="w-6 h-6 text-yellow-400 mx-auto mb-2" />
          <div className="text-sm text-gray-400">Requests</div>
          <div className="text-lg font-semibold text-white">
            {metrics.requests}
          </div>
        </div>
      </div>

      {/* Optimization Suggestions */}
      {suggestions.length > 0 && (
        <div className="mb-6">
          <h4 className="text-lg font-semibold text-white mb-4">Optimization Suggestions</h4>
          <div className="space-y-3">
            {suggestions.map((suggestion) => (
              <motion.div
                key={suggestion.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                className="bg-gray-800/50 p-4 rounded-lg border border-gray-700/50"
              >
                <div className="flex items-start gap-3">
                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                    suggestion.impact === 'high' ? 'bg-red-500/20' :
                    suggestion.impact === 'medium' ? 'bg-yellow-500/20' : 'bg-blue-500/20'
                  }`}>
                    <suggestion.icon className={`w-5 h-5 ${
                      suggestion.impact === 'high' ? 'text-red-400' :
                      suggestion.impact === 'medium' ? 'text-yellow-400' : 'text-blue-400'
                    }`} />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h5 className="font-semibold text-white">{suggestion.title}</h5>
                      <span className={`text-xs px-2 py-1 rounded-full ${
                        suggestion.impact === 'high' ? 'bg-red-500/20 text-red-400' :
                        suggestion.impact === 'medium' ? 'bg-yellow-500/20 text-yellow-400' : 'bg-blue-500/20 text-blue-400'
                      }`}>
                        {suggestion.impact} impact
                      </span>
                    </div>
                    <p className="text-sm text-gray-400 mb-2">{suggestion.description}</p>
                    <div className="text-xs text-cyan-400 font-mono">{suggestion.action}</div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      )}

      {/* Optimization Button */}
      <div className="text-center">
        <button
          onClick={applyOptimizations}
          disabled={isOptimizing}
          className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-semibold rounded-lg hover:from-cyan-600 hover:to-blue-700 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isOptimizing ? (
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              Optimizing... {optimizationProgress}%
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <TrendingUp className="w-4 h-4" />
              Apply Optimizations
            </div>
          )}
        </button>
      </div>

      {/* Performance Tips */}
      <div className="mt-6 p-4 bg-cyan-500/10 border border-cyan-500/20 rounded-lg">
        <div className="flex items-center gap-2 mb-2">
          <CheckCircle className="w-4 h-4 text-cyan-400" />
          <span className="text-sm font-medium text-cyan-300">Pro Tips</span>
        </div>
        <ul className="text-xs text-gray-300 space-y-1">
          <li>• Use Next.js Image component for automatic optimization</li>
          <li>• Implement dynamic imports for route-based code splitting</li>
          <li>• Enable gzip compression on your server</li>
          <li>• Use a CDN for static assets</li>
        </ul>
      </div>
    </motion.div>
=======
        // Set fetchpriority for above-the-fold images
        if (img.getBoundingClientRect().top < window.innerHeight) {
          img.setAttribute('fetchpriority', 'high');
        }
      });
    };

    // Run after DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', optimizeImages);
    } else {
      optimizeImages();
    }
  }, [enableImageOptimization]);

  // Lazy loading setup
  useEffect(() => {
    if (!enableLazyLoading || typeof window === 'undefined' || !('IntersectionObserver' in window)) return;

    const lazyImages = document.querySelectorAll('img[loading="lazy"]');
    
    const imageObserver = new (window as any).IntersectionObserver((entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const img = entry.target as any;
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.removeAttribute('data-src');
            imageObserver.unobserve(img);
          }
        }
      });
    });

    lazyImages.forEach((img) => imageObserver.observe(img));

    return () => imageObserver.disconnect();
  }, [enableLazyLoading]);

  // Preload critical resources
  useEffect(() => {
    if (typeof window === 'undefined') return;

    // Preload critical fonts
    const fontLink = document.createElement('link');
    fontLink.rel = 'preload';
    fontLink.href = '/fonts/inter-var.woff2';
    fontLink.as = 'font';
    fontLink.type = 'font/woff2';
    fontLink.crossOrigin = 'anonymous';
    document.head.appendChild(fontLink);

    // Preload critical CSS
    const cssLink = document.createElement('link');
    cssLink.rel = 'preload';
    cssLink.href = '/styles/globals.css';
    cssLink.as = 'style';
    document.head.appendChild(cssLink);

    // Prefetch non-critical resources
    const prefetchLinks = [
      '/api/analytics',
      '/api/error-reporting'
    ];

    prefetchLinks.forEach((href) => {
      const link = document.createElement('link');
      link.rel = 'prefetch';
      link.href = href;
      document.head.appendChild(link);
    });
  }, []);

  if (!showMetrics) return null;

  return (
    <>
      {/* Performance Dashboard */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="fixed bottom-4 right-4 z-50 bg-gray-900/90 backdrop-blur-md border border-gray-700/50 rounded-2xl p-4 shadow-2xl max-w-sm"
        role="status"
        aria-live="polite"
      >
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-semibold text-white">Performance Monitor</h3>
          <div className={`w-3 h-3 rounded-full ${
            metrics.score >= 90 ? 'bg-green-400' : 
            metrics.score >= 70 ? 'bg-yellow-400' : 'bg-red-400'
          }`} />
        </div>
        
        <div className="space-y-2 text-xs">
          <div className="flex justify-between">
            <span className="text-gray-400">Score:</span>
            <span className="text-white font-medium">{metrics.score}/100</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">FCP:</span>
            <span className="text-white">{metrics.fcp.toFixed(0)}ms</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">LCP:</span>
            <span className="text-white">{metrics.lcp.toFixed(0)}ms</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">FID:</span>
            <span className="text-white">{metrics.fid.toFixed(0)}ms</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">CLS:</span>
            <span className="text-white">{metrics.cls.toFixed(3)}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">TTFB:</span>
            <span className="text-white">{metrics.ttfb.toFixed(0)}ms</span>
          </div>
        </div>
      </motion.div>

      {/* Screen reader announcements */}
      <div className="sr-only" aria-live="polite">
        Performance score: {metrics.score} out of 100
      </div>
    </>
>>>>>>> cd1ee3c44c95b58078a38d33c1abd7a77d8f4d5a
  );
};

export default PerformanceOptimizer;