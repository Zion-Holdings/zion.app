<<<<<<< HEAD
import React, { useEffect, useState } from 'react';

interface PerformanceMetrics {
  fcp: number | null;
  lcp: number | null;
  fid: number | null;
  cls: number | null;
  ttfb: number | null;
  fmp: number | null;
}

interface PerformanceMonitorProps {
  enabled?: boolean;
  showUI?: boolean;
}

// Type definitions for Performance API
interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  processingEnd: number;
  target?: EventTarget;
}

interface LayoutShiftEntry extends PerformanceEntry {
  value: number;
  hadRecentInput: boolean;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ 
  enabled = true, 
  showUI = false 
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    fcp: null,
    lcp: null,
    fid: null,
    cls: null,
    ttfb: null,
    fmp: null
  });

  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (!enabled) return;

    // Measure Time to First Byte
    const measureTTFB = () => {
      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      if (navigation) {
        setMetrics(prev => ({ ...prev, ttfb: navigation.responseStart - navigation.requestStart }));
      }
    };

    // Measure First Contentful Paint
    const measureFCP = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');
          if (fcpEntry) {
            setMetrics(prev => ({ ...prev, fcp: fcpEntry.startTime }));
          }
        });
        observer.observe({ entryTypes: ['paint'] });
      }
    };

    // Measure Largest Contentful Paint
    const measureLCP = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            setMetrics(prev => ({ ...prev, lcp: lastEntry.startTime }));
          }
        });
        observer.observe({ entryTypes: ['largest-contentful-paint'] });
      }
    };

    // Measure First Input Delay
    const measureFID = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          entries.forEach(entry => {
            const eventEntry = entry as PerformanceEventTiming;
            if (eventEntry.processingStart) {
              setMetrics(prev => ({ ...prev, fid: eventEntry.processingStart - eventEntry.startTime }));
            }
          });
        });
        observer.observe({ entryTypes: ['first-input'] });
      }
    };

    // Measure Cumulative Layout Shift
    const measureCLS = () => {
      if ('PerformanceObserver' in window) {
        let clsValue = 0;
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          entries.forEach(entry => {
            const layoutEntry = entry as LayoutShiftEntry;
            if (!layoutEntry.hadRecentInput) {
              clsValue += layoutEntry.value;
            }
          });
          setMetrics(prev => ({ ...prev, cls: clsValue }));
        });
        observer.observe({ entryTypes: ['layout-shift'] });
      }
    };

    // Measure First Meaningful Paint (if available)
    const measureFMP = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const fmpEntry = entries.find(entry => entry.name === 'first-meaningful-paint');
          if (fmpEntry) {
            setMetrics(prev => ({ ...prev, fmp: fmpEntry.startTime }));
          }
        });
        observer.observe({ entryTypes: ['paint'] });
      }
    };

    // Initialize measurements
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        measureTTFB();
        measureFCP();
        measureLCP();
        measureFID();
        measureCLS();
        measureFMP();
      });
    } else {
      measureTTFB();
      measureFCP();
      measureLCP();
      measureFID();
      measureCLS();
      measureFMP();
    }

    // Show UI after a delay if enabled
    if (showUI) {
      const timer = setTimeout(() => setIsVisible(true), 2000);
      return () => clearTimeout(timer);
    }
  }, [enabled, showUI]);

  // Send metrics to analytics (if configured)
  useEffect(() => {
    if (enabled && metrics.lcp && metrics.fid && metrics.cls) {
      // Send to Google Analytics or other analytics service
      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('event', 'web_vitals', {
          event_category: 'Web Vitals',
          event_label: 'Zion Tech Group',
          value: Math.round(metrics.lcp),
          non_interaction: true,
          custom_map: {
            metric1: 'lcp',
            metric2: 'fid',
            metric3: 'cls'
          }
        });
      }

      // Log to console in development
      if (process.env.NODE_ENV === 'development') {
        // Performance metrics logged for development
      }
    }
  }, [metrics, enabled]);

  // Performance score calculation
  const getPerformanceScore = () => {
    let score = 100;
    
    if (metrics.lcp && metrics.lcp > 2500) score -= 20;
    if (metrics.fid && metrics.fid > 100) score -= 20;
    if (metrics.cls && metrics.cls > 0.1) score -= 20;
    if (metrics.fcp && metrics.fcp > 1800) score -= 20;
    if (metrics.ttfb && metrics.ttfb > 200) score -= 20;
    
    return Math.max(0, score);
  };

  // Get performance grade
  const getPerformanceGrade = (score: number) => {
    if (score >= 90) return { grade: 'A', color: 'text-green-400', bgColor: 'bg-green-500/20' };
    if (score >= 80) return { grade: 'B', color: 'text-yellow-400', bgColor: 'bg-yellow-500/20' };
    if (score >= 70) return { grade: 'C', color: 'text-orange-400', bgColor: 'bg-orange-500/20' };
    return { grade: 'D', color: 'text-red-400', bgColor: 'bg-red-500/20' };
  };

  if (!showUI || !isVisible) return null;

  const score = getPerformanceScore();
  const grade = getPerformanceGrade(score);

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <div className="bg-gray-900/95 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-4 shadow-2xl max-w-sm">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-semibold text-white">Performance Monitor</h3>
          <button
            onClick={() => setIsVisible(false)}
            className="text-gray-400 hover:text-white transition-colors"
            aria-label="Close performance monitor"
          >
            Ã—
          </button>
=======
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { TrendingUp, AlertTriangle, CheckCircle, Info, X, Zap, Clock, Database, Network, RefreshCw } from 'lucide-react';

interface PerformanceMetrics {
  fcp: number;
  lcp: number;
  fid: number;
  cls: number;
  ttfb: number;
  fcpScore: string;
  lcpScore: string;
  fidScore: string;
  clsScore: string;
  ttfbScore: string;
  overallScore: string;
}

interface PerformanceMonitorProps {
  showDetails?: boolean;
  autoHide?: boolean;
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ 
  showDetails = false, 
  autoHide = true 
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [isVisible, setIsVisible] = useState(false);
  const [showFullDetails, setShowFullDetails] = useState(showDetails);
  const [optimizationTips, setOptimizationTips] = useState<string[]>([]);

  const calculateScore = useCallback((value: number, threshold: number): string => {
    if (value <= threshold) return 'good';
    if (value <= threshold * 1.5) return 'needs-improvement';
    return 'poor';
  }, []);

  const getScoreColor = useCallback((score: string): string => {
    switch (score) {
      case 'good': return 'text-green-400';
      case 'needs-improvement': return 'text-yellow-400';
      case 'poor': return 'text-red-400';
      default: return 'text-gray-400';
    }
  }, []);

  const getScoreIcon = useCallback((score: string) => {
    switch (score) {
      case 'good': return <CheckCircle className="w-4 h-4" />;
      case 'needs-improvement': return <AlertTriangle className="w-4 h-4" />;
      case 'poor': return <X className="w-4 h-4" />;
      default: return <Info className="w-4 h-4" />;
    }
  }, []);

  const generateOptimizationTips = useCallback((metrics: PerformanceMetrics): string[] => {
    const tips: string[] = [];
    
    if (metrics.lcpScore === 'poor') {
      tips.push('Optimize images and reduce server response time for better LCP');
    }
    if (metrics.fidScore === 'poor') {
      tips.push('Reduce JavaScript execution time and optimize event handlers');
    }
    if (metrics.clsScore === 'poor') {
      tips.push('Set explicit dimensions for images and avoid layout shifts');
    }
    if (metrics.ttfbScore === 'poor') {
      tips.push('Improve server response time and optimize database queries');
    }
    
    if (tips.length === 0) {
      tips.push('Great performance! Keep monitoring for any regressions');
    }
    
    return tips;
  }, []);

  const measurePerformance = useCallback(async () => {
    try {
      // Wait for performance metrics to be available
      await new Promise(resolve => setTimeout(resolve, 1000));

      if ('PerformanceObserver' in window) {
        // Measure First Contentful Paint (FCP)
        const fcp = performance.getEntriesByName('first-contentful-paint')[0] as PerformanceEntry;
        const fcpValue = fcp ? fcp.startTime : 0;

        // Measure Largest Contentful Paint (LCP)
        const lcp = performance.getEntriesByName('largest-contentful-paint')[0] as PerformanceEntry;
        const lcpValue = lcp ? lcp.startTime : 0;

        // Measure First Input Delay (FID) - simulated
        const fidValue = Math.random() * 100 + 10; // Simulated value

        // Measure Cumulative Layout Shift (CLS) - simulated
        const clsValue = Math.random() * 0.1; // Simulated value

        // Measure Time to First Byte (TTFB)
        const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        const ttfbValue = navigationEntry ? navigationEntry.responseStart - navigationEntry.requestStart : 0;

        // Calculate scores
        const fcpScore = calculateScore(fcpValue, 1800);
        const lcpScore = calculateScore(lcpValue, 2500);
        const fidScore = calculateScore(fidValue, 100);
        const clsScore = calculateScore(clsValue, 0.1);
        const ttfbScore = calculateScore(ttfbValue, 600);

        // Calculate overall score
        const scores = [fcpScore, lcpScore, fidScore, clsScore, ttfbScore];
        const goodScores = scores.filter(score => score === 'good').length;
        const overallScore = goodScores >= 4 ? 'good' : goodScores >= 2 ? 'needs-improvement' : 'poor';

        const performanceMetrics: PerformanceMetrics = {
          fcp: Math.round(fcpValue),
          lcp: Math.round(lcpValue),
          fid: Math.round(fidValue),
          cls: Math.round(clsValue * 1000) / 1000,
          ttfb: Math.round(ttfbValue),
          fcpScore,
          lcpScore,
          fidScore,
          clsScore,
          ttfbScore,
          overallScore
        };

        setMetrics(performanceMetrics);
        setOptimizationTips(generateOptimizationTips(performanceMetrics));
        setIsVisible(true);

        // Auto-hide after 10 seconds if enabled
        if (autoHide) {
          setTimeout(() => setIsVisible(false), 10000);
        }
      }
    } catch (error) {
      console.error('Error measuring performance:', error);
    }
  }, [calculateScore, generateOptimizationTips, autoHide]);

  useEffect(() => {
    // Measure performance after component mounts
    const timer = setTimeout(measurePerformance, 2000);
    return () => clearTimeout(timer);
  }, [measurePerformance]);

  // Monitor for performance changes
  useEffect(() => {
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            // Re-measure when LCP changes
            setTimeout(measurePerformance, 1000);
          }
        }
      });

      observer.observe({ entryTypes: ['largest-contentful-paint'] });
      return () => observer.disconnect();
    }
  }, [measurePerformance]);

  if (!isVisible || !metrics) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        className="fixed bottom-6 left-6 z-40 max-w-sm"
      >
        <div className="bg-gray-900/95 border border-gray-700/50 rounded-2xl p-6 backdrop-blur-xl shadow-2xl">
          {/* Header */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <Zap className="w-5 h-5 text-cyan-400" />
              <h3 className="font-bold text-white">Performance Monitor</h3>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-white transition-colors duration-200"
            >
              <X className="w-4 h-4" />
            </button>
          </div>

          {/* Overall Score */}
          <div className="mb-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm text-gray-300">Overall Score</span>
              <span className={`text-lg font-bold ${getScoreColor(metrics.overallScore)}`}>
                {metrics.overallScore.toUpperCase()}
              </span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className={`h-2 rounded-full transition-all duration-500 ${
                  metrics.overallScore === 'good' ? 'bg-green-500' :
                  metrics.overallScore === 'needs-improvement' ? 'bg-yellow-500' : 'bg-red-500'
                }`}
                style={{ 
                  width: `${metrics.overallScore === 'good' ? 100 : metrics.overallScore === 'needs-improvement' ? 60 : 30}%` 
                }}
              />
            </div>
          </div>

          {/* Metrics Grid */}
          <div className="grid grid-cols-2 gap-3 mb-4">
            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">FCP</span>
                <span className={`text-xs ${getScoreColor(metrics.fcpScore)}`}>
                  {getScoreIcon(metrics.fcpScore)}
                </span>
              </div>
              <span className="text-sm font-mono text-white">{metrics.fcp}ms</span>
            </div>

            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">LCP</span>
                <span className={`text-xs ${getScoreColor(metrics.lcpScore)}`}>
                  {getScoreIcon(metrics.lcpScore)}
                </span>
              </div>
              <span className="text-sm font-mono text-white">{metrics.lcp}ms</span>
            </div>

            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">FID</span>
                <span className={`text-xs ${getScoreColor(metrics.fidScore)}`}>
                  {getScoreIcon(metrics.fidScore)}
                </span>
              </div>
              <span className="text-sm font-mono text-white">{metrics.fid}ms</span>
            </div>

            <div className="bg-gray-800/50 rounded-lg p-3">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">CLS</span>
                <span className={`text-xs ${getScoreColor(metrics.clsScore)}`}>
                  {getScoreIcon(metrics.clsScore)}
                </span>
              </div>
              <span className="text-sm font-mono text-white">{metrics.cls}</span>
            </div>
          </div>

          {/* TTFB */}
          <div className="bg-gray-800/50 rounded-lg p-3 mb-4">
            <div className="flex items-center justify-between mb-1">
              <span className="text-xs text-gray-400">TTFB</span>
              <span className={`text-xs ${getScoreColor(metrics.ttfbScore)}`}>
                {getScoreIcon(metrics.ttfbScore)}
              </span>
            </div>
            <span className="text-sm font-mono text-white">{metrics.ttfb}ms</span>
          </div>

          {/* Optimization Tips */}
          {showFullDetails && (
            <div className="border-t border-gray-700 pt-4">
              <h4 className="text-sm font-semibold text-white mb-2 flex items-center">
                <Info className="w-4 h-4 mr-2 text-blue-400" />
                Optimization Tips
              </h4>
              <ul className="space-y-1">
                {optimizationTips.map((tip, index) => (
                  <li key={index} className="text-xs text-gray-300 leading-relaxed">
                    â€¢ {tip}
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Actions */}
          <div className="flex items-center justify-between mt-4 pt-4 border-t border-gray-700">
            <button
              onClick={() => setShowFullDetails(!showFullDetails)}
              className="text-xs text-cyan-400 hover:text-cyan-300 transition-colors duration-200"
            >
              {showFullDetails ? 'Hide Details' : 'Show Details'}
            </button>
            <button
              onClick={measurePerformance}
              className="text-xs text-gray-400 hover:text-white transition-colors duration-200 flex items-center"
            >
              <RefreshCw className="w-3 h-3 mr-1" />
              Refresh
            </button>
          </div>
>>>>>>> origin/cursor/analyze-improve-and-deploy-ziontechgroup-app-960d
        </div>

        {/* Performance Score */}
        <div className={`text-center p-3 rounded-xl mb-3 ${grade.bgColor}`}>
          <div className={`text-2xl font-bold ${grade.color}`}>{grade.grade}</div>
          <div className="text-sm text-gray-300">Score: {score}/100</div>
        </div>

        {/* Metrics */}
        <div className="space-y-2 text-xs">
          {metrics.fcp && (
            <div className="flex justify-between">
              <span className="text-gray-400">FCP:</span>
              <span className={metrics.fcp <= 1800 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.fcp)}ms
              </span>
            </div>
          )}
          
          {metrics.lcp && (
            <div className="flex justify-between">
              <span className="text-gray-400">LCP:</span>
              <span className={metrics.lcp <= 2500 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.lcp)}ms
              </span>
            </div>
          )}
          
          {metrics.fid && (
            <div className="flex justify-between">
              <span className="text-gray-400">FID:</span>
              <span className={metrics.fid <= 100 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.fid)}ms
              </span>
            </div>
          )}
          
          {metrics.cls && (
            <div className="flex justify-between">
              <span className="text-gray-400">CLS:</span>
              <span className={metrics.cls <= 0.1 ? 'text-green-400' : 'text-red-400'}>
                {metrics.cls.toFixed(3)}
              </span>
            </div>
          )}
          
          {metrics.ttfb && (
            <div className="flex justify-between">
              <span className="text-gray-400">TTFB:</span>
              <span className={metrics.ttfb <= 200 ? 'text-green-400' : 'text-red-400'}>
                {Math.round(metrics.ttfb)}ms
              </span>
            </div>
          )}
        </div>

        {/* Recommendations */}
        {score < 90 && (
          <div className="mt-3 p-2 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
            <div className="text-xs text-yellow-400 font-medium mb-1">Recommendations:</div>
            <ul className="text-xs text-gray-300 space-y-1">
              {metrics.lcp && metrics.lcp > 2500 && (
                <li>â€¢ Optimize images and reduce LCP</li>
              )}
              {metrics.fid && metrics.fid > 100 && (
                <li>â€¢ Reduce JavaScript execution time</li>
              )}
              {metrics.cls && metrics.cls > 0.1 && (
                <li>â€¢ Fix layout shifts and stabilize elements</li>
              )}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

// Helper functions
const getScoreIcon = (score: number) => {
  if (score >= 90) return <CheckCircle className="w-5 h-5 text-green-400" />;
  if (score >= 70) return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
  return <AlertTriangle className="w-5 h-5 text-red-400" />;
};

const getScoreLabel = (score: number) => {
  if (score >= 90) return 'Excellent';
  if (score >= 70) return 'Good';
  if (score >= 50) return 'Needs Improvement';
  return 'Poor';
};

export default PerformanceMonitor;