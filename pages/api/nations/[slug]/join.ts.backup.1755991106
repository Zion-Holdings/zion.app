import type { NextApiRequest, NextApiResponse } from 'next';
<<<<<<< HEAD
import { addMember } from '../../../../lib/nations';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { slug } = req.query as { slug: string };

  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });
  const { userId, role } = req.body || {};
  if (!slug || !userId || !role) return res.status(400).json({ error: 'Missing required fields' });

  const nation = addMember(slug, { userId, role });
  if (!nation) return res.status(404).json({ error: 'Nation not found' });
  return res.status(200).json({ nation });
=======
import { getNationBySlug, upsertNation } from '../../../../utils/nationStore';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { slug } = req.query as { slug: string };
  const nation = getNationBySlug(slug);
  if (!nation) return res.status(404).json({ error: 'Nation not found' });

  if (req.method === 'POST') {
    const updated = { ...nation, population: nation.population + 1, updatedAt: new Date().toISOString() };
    upsertNation(updated);
    return res.status(200).json({ nation: updated });
  }

  res.setHeader('Allow', ['POST']);
  return res.status(405).end('Method Not Allowed');
>>>>>>> origin/cursor/build-digital-nation-creation-module-57e8
}