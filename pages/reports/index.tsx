import React from 'react';
import Head from 'next/head';
import Link from 'next/link';
import type { GetStaticProps, InferGetStaticPropsType } from 'next';
import fs from 'fs';
import path from 'path';

type UpdateItem = {
  slug: string;
};

export const getStaticProps: GetStaticProps<{ updates: UpdateItem[] }> = async () => {
  const updatesDirectory = path.join(process.cwd(), 'pages', 'reports', 'updates');
  let updates: UpdateItem[] = [];

  try {
    const fileNames = fs.readdirSync(updatesDirectory).filter((fileName) => fileName.endsWith('.tsx'));
    const slugs = fileNames
      .map((fileName) => fileName.replace(/\.tsx$/, ''))
      .sort()
      .reverse();

    updates = slugs.map((slug) => ({ slug }));
  } catch {
    updates = [];
  }

  return {
    props: { updates },
  };
};

export default function ReportsIndexPage({ updates }: InferGetStaticPropsType<typeof getStaticProps>) {
  return (
    <>
      <Head>
        <title>Reports & Analytics | Zion Tech Group</title>
        <meta name="description" content="Browse the latest autonomous system updates and reports from Zion Tech Group." />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-indigo-950 via-purple-950 to-slate-950 text-white">
        <main className="container mx-auto px-6 py-12">
          <nav className="mb-8">
            <Link href="/" className="text-cyan-400 hover:text-cyan-300 transition-colors">
              ← Back to Home
            </Link>
          </nav>

          <header className="text-center mb-12">
            <h1 className="text-5xl font-extrabold mb-4 bg-gradient-to-r from-cyan-400 to-fuchsia-400 bg-clip-text text-transparent">
              Reports & Analytics
            </h1>
            <p className="text-white/80 max-w-3xl mx-auto">
              Explore the latest automated updates generated by our autonomous systems.
            </p>
          </header>

          <section className="mx-auto max-w-6xl">
            {updates.length === 0 ? (
              <p className="text-white/70">No reports found.</p>
            ) : (
              <ul className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {updates.slice(0, 30).map(({ slug }) => (
                  <li key={slug} className="group relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-br from-white/10 to-white/5 p-6 backdrop-blur-xl hover:border-cyan-400/30">
                    <div className="pointer-events-none absolute -inset-px -z-10 bg-gradient-to-r from-fuchsia-500/0 via-cyan-400/10 to-fuchsia-500/0 opacity-0 blur-2xl transition-opacity group-hover:opacity-100" />
                    <h3 className="text-lg font-semibold">{formatSlug(slug)}</h3>
                    <p className="mt-1 text-sm text-white/75">Automated system update.</p>
                    <Link href={`/reports/updates/${slug}`} className="mt-3 inline-flex items-center gap-1 text-xs text-cyan-300/90">
                      Open <span aria-hidden>→</span>
                    </Link>
                  </li>
                ))}
              </ul>
            )}
          </section>
        </main>
      </div>
    </>
  );
}

function formatSlug(slug: string): string {
  // Expected slug format: update-YYYY-MM-DD-HHmm
  const parts = slug.replace(/^update-/, '').split('-');
  if (parts.length >= 4) {
    const [year, month, day, time] = parts;
    const prettyTime = time?.match(/^(\d{2})(\d{2})$/) ? `${time.slice(0, 2)}:${time.slice(2)}` : time;
    return `Autonomous Update — ${year}-${month}-${day} ${prettyTime}`;
  }
  return slug;
}

