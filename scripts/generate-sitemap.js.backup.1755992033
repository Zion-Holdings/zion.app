const fs = require('fs');
const path = require('path');

<<<<<<< HEAD
const BASE_URL = 'https://ziontechgroup.com';

function listPageRoutes() {
	const pagesDir = path.join(process.cwd(), 'pages');
	const routes = new Set();

	function walk(dir, parentSegments = []) {
		const entries = fs.readdirSync(dir, { withFileTypes: true });
		for (const entry of entries) {
			// Skip special folders and files
			if (entry.name.startsWith('_')) continue;
			if (entry.name === 'api') continue;
			if (entry.name === 'reports') continue;

			const full = path.join(dir, entry.name);
			if (entry.isDirectory()) {
				walk(full, parentSegments.concat(entry.name));
				continue;
			}

			// Only consider page files
			const m = entry.name.match(/^(.*)\.(tsx|ts|jsx|js)$/);
			if (!m) continue;

			const base = m[1];
			// Skip dynamic routes
			if (base.includes('[')) continue;

			const segments = parentSegments.concat(base);
			// index pages map to directory path
			if (base === 'index') {
				const route = '/' + parentSegments.join('/') + '/';
				routes.add(route.replace(/\/+/g, '/').replace('//', '/'));
			} else {
				const route = '/' + segments.join('/') + '/';
				routes.add(route.replace(/\/+/g, '/'));
			}
		}
	}

	walk(pagesDir);
	return Array.from(routes);
}

function listServiceLinksFromData() {
	const dataDir = path.join(process.cwd(), 'data');
	if (!fs.existsSync(dataDir)) return [];
	const links = new Set();

	const files = fs.readdirSync(dataDir).filter((f) => f.endsWith('.ts') || f.endsWith('.tsx'));
	for (const file of files) {
		const full = path.join(dataDir, file);
		try {
			const content = fs.readFileSync(full, 'utf8');
			// Find link: 'https://ziontechgroup.com/...' or "..."
			const re = /link\s*:\s*['"](https?:\/\/[^'"\s]+)['"]/g;
			let match;
			while ((match = re.exec(content))) {
				try {
					const url = new URL(match[1]);
					if (url.hostname.endsWith('ziontechgroup.com')) {
						let p = url.pathname;
						if (!p.endsWith('/')) p += '/';
						// Skip data-driven /services/* routes to avoid stale 404 entries
						if (p.startsWith('/services/')) continue;
						links.add(p);
					}
				} catch {}
			}
		} catch {}
	}
	return Array.from(links);
}

// New: collect static page routes with filesystem last modification time
function listPageRoutesWithLastMod() {
	const pagesDir = path.join(process.cwd(), 'pages');
	const entries = [];

	function walk(dir, parentSegments = []) {
		const dirEntries = fs.readdirSync(dir, { withFileTypes: true });
		for (const entry of dirEntries) {
			if (entry.name.startsWith('_')) continue;
			if (entry.name === 'api') continue;
			if (entry.name === 'reports') continue;

			const full = path.join(dir, entry.name);
			if (entry.isDirectory()) {
				walk(full, parentSegments.concat(entry.name));
				continue;
			}

			const m = entry.name.match(/^(.*)\.(tsx|ts|jsx|js)$/);
			if (!m) continue;

			const base = m[1];
			if (base.includes('[')) continue;

			const segments = parentSegments.concat(base);
			let route;
			if (base === 'index') {
				route = '/' + parentSegments.join('/') + '/';
				route = route.replace(/\/+/g, '/').replace('//', '/');
			} else {
				route = '/' + segments.join('/') + '/';
				route = route.replace(/\/+/g, '/');
			}

			let lastmod;
			try {
				const stat = fs.statSync(full);
				lastmod = new Date(stat.mtime).toISOString();
			} catch {}

			entries.push({ route, lastmod });
		}
	}

	walk(pagesDir);

	const map = new Map();
	for (const e of entries) {
		const existing = map.get(e.route);
		if (!existing) {
			map.set(e.route, e);
			continue;
		}
		if (e.lastmod && (!existing.lastmod || e.lastmod > existing.lastmod)) {
			map.set(e.route, e);
		}
	}
	return Array.from(map.values());
}

function priorityForPath(p) {
	if (p === '/') return '1.0';
	if (p.startsWith('/services/')) return '0.8';
	if (p === '/services/') return '0.9';
	if (p === '/market-pricing/') return '0.7';
	return '0.6';
}

function changefreqForPath(p) {
	if (p === '/' || p === '/services/') return 'daily';
	if (p.startsWith('/services/')) return 'weekly';
	if (p === '/market-pricing/') return 'weekly';
	return 'monthly';
}

function generate() {
	const staticEntries = listPageRoutesWithLastMod();
	const dataLinks = listServiceLinksFromData().map((route) => ({ route }));

	const map = new Map();
	for (const e of staticEntries) map.set(e.route, e);
	for (const e of dataLinks) if (!map.has(e.route)) map.set(e.route, e);

	const all = Array.from(map.values()).sort((a, b) => a.route.localeCompare(b.route));

	const lines = [];
	lines.push('<?xml version="1.0" encoding="UTF-8"?>');
	lines.push('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">');
	for (const { route, lastmod } of all) {
		const loc = `${BASE_URL}${route}`;
		const priority = priorityForPath(route);
		const changefreq = changefreqForPath(route);
		lines.push('  <url>');
		lines.push(`    <loc>${loc}</loc>`);
		if (lastmod) lines.push(`    <lastmod>${lastmod}</lastmod>`);
		lines.push(`    <changefreq>${changefreq}</changefreq>`);
		lines.push(`    <priority>${priority}</priority>`);
		lines.push('  </url>');
	}
	lines.push('</urlset>');

	const outDir = path.join(process.cwd(), 'public');
	if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
	fs.writeFileSync(path.join(outDir, 'sitemap.xml'), lines.join('\n'));
	// Ensure robots.txt references sitemap
	const robotsPath = path.join(outDir, 'robots.txt');
	let robots = 'User-agent: *\nAllow: /\nSitemap: https://ziontechgroup.com/sitemap.xml\n';
	try {
		if (fs.existsSync(robotsPath)) {
			const existing = fs.readFileSync(robotsPath, 'utf8');
			if (!/Sitemap:\s*https?:\/\/[^^\n]+\/sitemap\.xml/.test(existing)) {
				robots = existing.trim() + '\nSitemap: https://ziontechgroup.com/sitemap.xml\n';
			} else {
				robots = existing;
			}
		}
	} catch {}
	fs.writeFileSync(robotsPath, robots);
	console.log(`[sitemap] Wrote ${all.length} routes to public/sitemap.xml`);
}

if (require.main === module) {
	try {
		generate();
	} catch (e) {
		console.error('[sitemap] generation failed:', e);
		process.exit(0); // Do not fail builds
	}
}
=======
// Base URL for the site
const BASE_URL = 'https://zion.app';

// Define the pages and their metadata
const pages = [
  {
    url: '/',
    priority: '1.0',
    changefreq: 'daily',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/about',
    priority: '0.8',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/services',
    priority: '0.9',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/micro-saas',
    priority: '0.9',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/ai-tools',
    priority: '0.9',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/developer-tools',
    priority: '0.9',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/ai-assistant',
    priority: '0.8',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/cloud-platform',
    priority: '0.8',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/automation',
    priority: '0.8',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/analytics',
    priority: '0.8',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/pricing',
    priority: '0.8',
    changefreq: 'monthly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/contact',
    priority: '0.7',
    changefreq: 'monthly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/case-studies',
    priority: '0.7',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/blog',
    priority: '0.7',
    changefreq: 'weekly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/resources',
    priority: '0.6',
    changefreq: 'monthly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/support',
    priority: '0.6',
    changefreq: 'monthly',
    lastmod: new Date().toISOString().split('T')[0]
  },
  {
    url: '/docs',
    priority: '0.6',
    changefreq: 'monthly',
    lastmod: new Date().toISOString().split('T')[0]
  }
];

// Generate sitemap XML content
function generateSitemapXML() {
  let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
  xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n';
  
  pages.forEach(page => {
    xml += '  <url>\n';
    xml += `    <loc>${BASE_URL}${page.url}</loc>\n`;
    xml += `    <lastmod>${page.lastmod}</lastmod>\n`;
    xml += `    <changefreq>${page.changefreq}</changefreq>\n`;
    xml += `    <priority>${page.priority}</priority>\n`;
    xml += '  </url>\n';
  });
  
  xml += '</urlset>';
  return xml;
}

// Generate sitemap.txt (simple text version)
function generateSitemapTXT() {
  return pages.map(page => `${BASE_URL}${page.url}`).join('\n');
}

// Main execution
function main() {
  try {
    // Create public directory if it doesn't exist
    const publicDir = path.join(__dirname, '../public');
    if (!fs.existsSync(publicDir)) {
      fs.mkdirSync(publicDir, { recursive: true });
    }

    // Generate and save sitemap.xml
    const sitemapXML = generateSitemapXML();
    const xmlPath = path.join(publicDir, 'sitemap.xml');
    fs.writeFileSync(xmlPath, sitemapXML, 'utf8');
    console.log(`✅ Sitemap XML generated: ${xmlPath}`);

    // Generate and save sitemap.txt
    const sitemapTXT = generateSitemapTXT();
    const txtPath = path.join(publicDir, 'sitemap.txt');
    fs.writeFileSync(txtPath, sitemapTXT, 'utf8');
    console.log(`✅ Sitemap TXT generated: ${txtPath}`);

    // Generate robots.txt
    const robotsTXT = `User-agent: *
Allow: /

# Sitemaps
Sitemap: ${BASE_URL}/sitemap.xml
Sitemap: ${BASE_URL}/sitemap.txt

# Crawl-delay
Crawl-delay: 1`;
    
    const robotsPath = path.join(publicDir, 'robots.txt');
    fs.writeFileSync(robotsPath, robotsTXT, 'utf8');
    console.log(`✅ Robots.txt generated: ${robotsPath}`);

    console.log(`\n🎉 Sitemap generation complete!`);
    console.log(`📊 Total pages: ${pages.length}`);
    console.log(`🌐 Base URL: ${BASE_URL}`);
    
  } catch (error) {
    console.error('❌ Error generating sitemap:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { generateSitemapXML, generateSitemapTXT, pages };
>>>>>>> origin/cursor/enhance-app-with-micro-saas-and-deploy-655c
