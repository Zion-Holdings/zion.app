#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import https from 'https';

const SOURCES = [
  'https://hnrss.org/frontpage',
  'https://rss.nytimes.com/services/xml/rss/nyt/Technology.xml',
  'https://www.reddit.com/r/MachineLearning/.rss',
];

function ensureDir(dirPath) { if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true }); }

function fetchUrl(url) {
  return new Promise((resolve) => {
    https
      .get(url, { timeout: 10000, headers: { 'User-Agent': 'zion-autonomy' } }, (res) => {
        let data = '';
        res.on('data', (c) => (data += c));
        res.on('end', () => resolve({ url, ok: true, data }));
      })
      .on('error', () => resolve({ url, ok: false, data: '' }))
      .on('timeout', function () { this.destroy(); resolve({ url, ok: false, data: '' }); });
  });
}

function extractItems(xml) {
  const items = [];
  const regex = /<item>[\s\S]*?<title>([\s\S]*?)<\/title>[\s\S]*?<link>([\s\S]*?)<\/link>/gi;
  let m;
  while ((m = regex.exec(xml))) {
    const title = m[1].replace(/<!\[CDATA\[|\]\]>/g, '').trim();
    const link = m[2].trim();
    items.push({ title, link });
  }
  return items.slice(0, 10);
}

function renderDigest(sourceResults) {
  const now = new Date().toISOString();
  const lines = [];
  lines.push('# Autonomous Market Intelligence Digest');
  lines.push('');
  lines.push(`Generated: ${now}`);
  lines.push('');
  for (const s of sourceResults) {
    lines.push(`## ${s.url}`);
    if (!s.ok) { lines.push('- Failed to fetch'); continue; }
    for (const it of s.items) lines.push(`- ${it.title} (${it.link})`);
    lines.push('');
  }
  lines.push('> Generated by Autonomous Intelligence Fetcher');
  return lines.join('\n');
}

async function main() {
  const fetched = await Promise.all(SOURCES.map(fetchUrl));
  const withItems = fetched.map((r) => ({ ...r, items: r.ok ? extractItems(r.data) : [] }));
  const digest = renderDigest(withItems);
  ensureDir('docs');
  ensureDir('automation_logs');
  fs.writeFileSync(path.join('docs', 'INTELLIGENCE_DIGEST.md'), digest, 'utf8');
  const id = new Date().toISOString().replace(/[:.]/g, '-').toLowerCase();
  fs.writeFileSync(path.join('automation_logs', `intelligence-${id}.json`), JSON.stringify({ generatedAt: new Date().toISOString(), sources: SOURCES, counts: withItems.map((w) => w.items.length) }, null, 2));
  console.log('Wrote docs/INTELLIGENCE_DIGEST.md and intelligence log');
}

main();