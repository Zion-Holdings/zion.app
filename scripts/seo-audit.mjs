#!/usr/bin/env node
import fs from 'fs';
import path from 'path';

function ensureDir(dirPath) { if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true }); }

function findPages(dir, acc = []) {
  for (const name of fs.readdirSync(dir)) {
    const p = path.join(dir, name);
    const stat = fs.statSync(p);
    if (stat.isDirectory()) findPages(p, acc);
    else if (name.endsWith('.tsx')) acc.push(p);
  }
  return acc;
}

function analyze(content) {
  const hasTitle = content.includes('<h1') || content.includes('className="text-3xl');
  const hasMeta = content.includes('<Head>') || content.includes('next/head');
  const links = (content.match(/href=\"/g) || []).length;
  const images = (content.match(/<img /g) || []).length;
  return { hasTitle, hasMeta, links, images };
}

function renderReport(results) {
  const now = new Date().toISOString();
  const lines = [];
  lines.push('# SEO Audit (Autonomous)');
  lines.push('');
  lines.push(`Generated: ${now}`);
  lines.push('');
  lines.push('| File | Title | Meta | Links | Images |');
  lines.push('|---|---:|---:|---:|---:|');
  for (const r of results) {
    lines.push(`| ${r.file} | ${r.data.hasTitle ? 'Yes' : 'No'} | ${r.data.hasMeta ? 'Yes' : 'No'} | ${r.data.links} | ${r.data.images} |`);
  }
  lines.push('');
  lines.push('> Generated by Autonomous SEO Audit');
  return lines.join('\n');
}

function main() {
  const pagesDir = path.join(process.cwd(), 'pages');
  const files = findPages(pagesDir);
  const results = files.slice(0, 200).map((f) => ({ file: path.relative(process.cwd(), f), data: analyze(fs.readFileSync(f, 'utf8')) }));
  const md = renderReport(results);
  ensureDir('docs');
  ensureDir(path.join('public', 'autonomy'));
  fs.writeFileSync(path.join('docs', 'SEO_AUDIT.md'), md, 'utf8');
  fs.writeFileSync(path.join('public', 'autonomy', 'SEO_AUDIT.md'), md, 'utf8');
  console.log('Wrote docs/SEO_AUDIT.md and public/autonomy/SEO_AUDIT.md');
}

main();