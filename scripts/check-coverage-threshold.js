const fs = require('fs');
const path = require('path');

// Path to the coverage summary file generated by Jest
// Adjust this path if your Jest configuration outputs the summary elsewhere
const coverageSummaryPath = path.join(process.cwd(), 'logs', 'coverage', 'hourly', 'coverage-summary.json');
const coverageThreshold = 80; // Minimum percentage

try {
  if (!fs.existsSync(coverageSummaryPath)) {
    console.error(`Coverage summary file not found at ${coverageSummaryPath}`);
    process.exit(1); // Exit with error if summary file doesn't exist
  }

  const coverageSummary = JSON.parse(fs.readFileSync(coverageSummaryPath, 'utf8'));

  // Assuming 'total.lines.pct' is the key for overall line coverage percentage
  // This might need adjustment based on your Jest coverage reporter's output structure
  const linesCoverage = coverageSummary.total && coverageSummary.total.lines && coverageSummary.total.lines.pct;

  if (linesCoverage === undefined || linesCoverage === null) {
    console.error('Could not find total lines coverage percentage in the summary file.');
    console.error('Please ensure your Jest coverage reporter is configured to output a `coverage-summary.json` with `total.lines.pct`.');
    console.log('Coverage summary content:', JSON.stringify(coverageSummary, null, 2));
    process.exit(1);
  }

  console.log(`Current lines coverage: ${linesCoverage}%`);

  if (linesCoverage < coverageThreshold) {
    console.log(`Coverage (${linesCoverage}%) is below the threshold of ${coverageThreshold}%.`);
    // Outputting a specific value or setting an output for GitHub Actions
    // For simplicity, we'll rely on a log message and then check this in a later step,
    // or you can set an output variable like so:
    // console.log(`::set-output name=coverage_below_threshold::true`);
    // For now, a distinct log message will be used for the issue creation step to check.
    // A more robust way would be to set an environment variable or output parameter.
    // We will refine this in the "Create GitHub Issue" step.
    // For now, let's make it fail the step if coverage is low to simplify the next step.
    process.exit(2); // Special exit code to indicate low coverage
  } else {
    console.log(`Coverage (${linesCoverage}%) meets or exceeds the threshold of ${coverageThreshold}%.`);
    // console.log(`::set-output name=coverage_below_threshold::false`);
  }

} catch (error) {
  console.error('Error checking coverage threshold:', error);
  process.exit(1);
}
