#!/usr/bin/env node
/* eslint-disable no-console -- All output uses only console.warn or console.error. This disables false positives. */
 

/**
 * Auth0 Setup Script for Zion AI Marketplace
 * Fixes Critical Issue #1: Sign-up fails due to missing Auth0 configuration
 */

const fs = require('fs');
const _path = require('path');
const readline = require('readline');
const _crypto = require('crypto');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'white') {
  if (color === 'red' || color === 'yellow') {
    console.error(`${colors[color]}${message}${colors.reset}`);
  } else {
    console.warn(`${colors[color]}${message}${colors.reset}`);
  }
}

function logSection(title) {
  console.warn('\n' + '='.repeat(60));
  log(`  ${title}`, 'bold');
  console.warn('='.repeat(60));
}

function logStep(step, description) {
  log(`\n${step}. ${description}`, 'cyan');
}

function logSuccess(message) {
  log(`✅ ${message}`, 'green');
}

function logWarning(message) {
  log(`⚠️  ${message}`, 'yellow');
}

function logErrorToProduction(message) {
  log(`❌ ${message}`, 'red');
}

function logInfo(message) {
  log(`ℹ️  ${message}`, 'blue');
}

async function checkExistingEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  const exists = fs.existsSync(envPath);
  
  if (exists) {
    logInfo('Found existing .env.local file');
    const content = fs.readFileSync(envPath, 'utf8');
    
    const auth0Vars = [
      'AUTH0_SECRET',
      'AUTH0_BASE_URL', 
      'AUTH0_ISSUER_BASE_URL',
      'AUTH0_CLIENT_ID',
      'AUTH0_CLIENT_SECRET'
    ];
    
    const missing = [];
    const placeholders = [];
    
    auth0Vars.forEach(varName => {
      const match = content.match(new RegExp(`^${varName}=(.*)$`, 'm'));
      if (!match || !match[1]) {
        missing.push(varName);
      } else {
        const value = match[1].trim();
        if (isPlaceholderValue(value)) {
          placeholders.push(varName);
        }
      }
    });
    
    if (missing.length === 0 && placeholders.length === 0) {
      logSuccess('All Auth0 environment variables are properly configured!');
      return true;
    }
    
    if (missing.length > 0) {
      logWarning(`Missing variables: ${missing.join(', ')}`);
    }
    
    if (placeholders.length > 0) {
      logWarning(`Placeholder values detected: ${placeholders.join(', ')}`);
    }
    
    return false;
  }
  
  logWarning('No .env.local file found');
  return false;
}

function isPlaceholderValue(value) {
  if (!value) return true;
  
  const placeholderPatterns = [
    'placeholder',
    'your_',
    'example',
    'test_key',
    'localhost',
    'change_me',
    'replace_with',
    'insert_',
    'add_your',
    'enter_your',
    'auth0_client_id_here',
    'auth0_client_secret_here',
    'auth0_secret_here',
    'your-tenant.us.auth0.com'
  ];
  
  const lowerValue = value.toLowerCase();
  return placeholderPatterns.some(pattern => lowerValue.includes(pattern));
}

function generateAuth0Secret() {
  return _crypto.randomBytes(32).toString('hex');
}

function validateAuth0Domain(domain) {
  const auth0DomainRegex = /^https:\/\/[a-zA-Z0-9-]+\.(us|eu|au)\.auth0\.com$/;
  return auth0DomainRegex.test(domain);
}

async function createEnvFile(config) {
  const envPath = path.join(process.cwd(), '.env.local');
  
  const envContent = `# ==============================================
# ZION AI MARKETPLACE - AUTH0 CONFIGURATION
# ==============================================
# Generated by setup-auth0.js on ${new Date().toISOString()}
# Issue #1 Fix: Critical signup authentication configuration

# Auth0 Application Configuration
AUTH0_ISSUER_BASE_URL=${config.issuerBaseUrl}
AUTH0_BASE_URL=${config.baseUrl}
AUTH0_CLIENT_ID=${config.clientId}
AUTH0_CLIENT_SECRET=${config.clientSecret}
AUTH0_SECRET=${config.secret}

# Optional: Auth0 API Identifier
${config.audience ? `AUTH0_AUDIENCE=${config.audience}` : '# AUTH0_AUDIENCE=https://your-api-identifier'}

# ==============================================
# ADDITIONAL CONFIGURATION
# ==============================================

# Sentry Error Monitoring (Optional)
# NEXT_PUBLIC_SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Reown Wallet Integration (Optional) 
# NEXT_PUBLIC_REOWN_PROJECT_ID=your_reown_project_id_here

# Development Environment
NODE_ENV=development
`;

  fs.writeFileSync(envPath, envContent);
  logSuccess(`Created .env.local file with Auth0 configuration`);
}

async function promptForAuth0Config() {
  logSection('AUTH0 CONFIGURATION SETUP');
  
  logInfo('You need to set up an Auth0 account and application first.');
  logInfo('Visit: https://manage.auth0.com/');
  logInfo('Create a "Regular Web Application" and get your credentials.');
  
  console.warn('\n');
  
  const config = {};
  
  // Auth0 Domain
  while (true) {
    config.issuerBaseUrl = await question('Enter your Auth0 domain (e.g., https://dev-xyz.us.auth0.com): ');
    if (validateAuth0Domain(config.issuerBaseUrl)) {
      logSuccess('Valid Auth0 domain format');
      break;
    } else {
      logErrorToProduction('Invalid Auth0 domain format. Must be https://tenant.region.auth0.com');
    }
  }
  
  // Base URL
  config.baseUrl = await question('Enter your application base URL [http://localhost:3000]: ') || 'http://localhost:3000';
  
  // Client ID
  while (true) {
    config.clientId = await question('Enter your Auth0 Client ID: ');
    if (config.clientId && config.clientId.length > 10 && !isPlaceholderValue(config.clientId)) {
      logSuccess('Client ID looks valid');
      break;
    } else {
      logErrorToProduction('Please enter a valid Auth0 Client ID (32+ characters)');
    }
  }
  
  // Client Secret
  while (true) {
    config.clientSecret = await question('Enter your Auth0 Client Secret: ');
    if (config.clientSecret && config.clientSecret.length > 20 && !isPlaceholderValue(config.clientSecret)) {
      logSuccess('Client Secret looks valid');
      break;
    } else {
      logErrorToProduction('Please enter a valid Auth0 Client Secret (64+ characters)');
    }
  }
  
  // Generate secret
  config.secret = generateAuth0Secret();
  logSuccess(`Generated secure AUTH0_SECRET: ${config.secret.substring(0, 16)}...`);
  
  // Optional audience
  config.audience = await question('Enter Auth0 API Audience (optional, press Enter to skip): ');
  
  return config;
}

async function testConfiguration() {
  logSection('TESTING CONFIGURATION');
  
  logStep(1, 'Loading environment variables');
  
  // Re-read the env file
  require('dotenv').config({ path: '.env.local' });
  
  const requiredVars = [
    'AUTH0_SECRET',
    'AUTH0_BASE_URL',
    'AUTH0_ISSUER_BASE_URL', 
    'AUTH0_CLIENT_ID',
    'AUTH0_CLIENT_SECRET'
  ];
  
  const missing = requiredVars.filter(varName => !process.env[varName]);
  
  if (missing.length > 0) {
    logErrorToProduction(`Missing environment variables: ${missing.join(', ')}`);
    return false;
  }
  
  logSuccess('All required environment variables are set');
  
  logStep(2, 'Testing Auth0 domain connectivity');
  
  try {
    const fetch = require('node-fetch');
    const wellKnownUrl = `${process.env.AUTH0_ISSUER_BASE_URL}/.well-known/openid_configuration`;
    
    console.warn(`Testing: ${wellKnownUrl}`);
    
    const response = await fetch(wellKnownUrl);
    
    if (response.ok) {
      const data = await response.json();
      logSuccess('Auth0 domain is reachable');
      logInfo(`Issuer: ${data.issuer}`);
      return true;
    } else {
      logErrorToProduction(`Auth0 domain test failed: ${response.status} ${response.statusText}`);
      return false;
    }
  } catch {
    logErrorToProduction(`Auth0 domain test failed: ${_'Error occurred'}`);
    return false;
  }
}

async function displayNextSteps() {
  logSection('NEXT STEPS');
  
  console.warn('');
  logStep(1, 'Configure Auth0 Application Settings');
  logInfo('In your Auth0 Dashboard → Applications → Settings, add:');
  console.warn('');
  console.warn('  Allowed Callback URLs:', 'yellow');
  console.warn('    http://localhost:3000/api/auth/callback');
  console.warn('    https://yourdomain.com/api/auth/callback');
  console.warn('');
  console.warn('  Allowed Logout URLs:', 'yellow');
  console.warn('    http://localhost:3000');
  console.warn('    https://yourdomain.com');
  console.warn('');
  console.warn('  Allowed Web Origins:', 'yellow');
  console.warn('    http://localhost:3000');
  console.warn('    https://yourdomain.com');
  
  logStep(2, 'Grant Management API Permissions');
  logInfo('In Auth0 Dashboard → Applications → APIs → Machine to Machine:');
  console.warn('  • Authorize your app for "Auth0 Management API"');
  console.warn('  • Grant scopes: create:users, read:users, update:users');
  
  logStep(3, 'Restart Your Application');
  console.warn('  npm run dev', 'cyan');
  console.warn('  # or', 'white');
  console.warn('  yarn dev', 'cyan');
  
  logStep(4, 'Test the Signup Flow');
  console.warn('  1. Visit: http://localhost:3000/signup', 'cyan');
  console.warn('  2. Fill out the form with test data', 'cyan');
  console.warn('  3. Verify no error messages appear', 'cyan');
  console.warn('  4. Check email for verification link', 'cyan');
  
  logStep(5, 'Verify Health Check');
  console.warn('  Visit: http://localhost:3000/api/auth/health', 'cyan');
  console.warn('  Should return: {"status": "ok", ...}', 'cyan');
  
  console.warn('');
  logSuccess('Setup complete! Follow the steps above to finish the configuration.');
  
  console.warn('');
  logInfo('For detailed instructions, see: AUTH0_SETUP_GUIDE_ISSUE_1.md');
  logInfo('For troubleshooting, check the Auth0 Dashboard → Monitoring → Logs');
}

async function main() {
  console.clear();
  
  logSection('ZION AI MARKETPLACE - AUTH0 SETUP');
  log('Fixing Critical Issue #1: Sign-up fails due to missing Auth0 configuration', 'yellow');
  
  try {
    // Check if already configured
    const isConfigured = await checkExistingEnv();
    
    if (isConfigured) {
      logInfo('Auth0 appears to be already configured.');
      const reconfigure = await question('Do you want to reconfigure anyway? (y/N): ');
      
      if (reconfigure.toLowerCase() !== 'y') {
        logInfo('Skipping configuration. Testing existing setup...');
        const testPassed = await testConfiguration();
        
        if (testPassed) {
          logSuccess('Existing configuration is working correctly!');
          await displayNextSteps();
          rl.close();
          return;
        } else {
          logWarning('Existing configuration has issues. Continuing with setup...');
        }
      }
    }
    
    // Get Auth0 configuration
    const config = await promptForAuth0Config();
    
    // Create .env.local file
    await createEnvFile(config);
    
    // Test the configuration
    const testPassed = await testConfiguration();
    
    if (testPassed) {
      logSuccess('Configuration test passed!');
    } else {
      logWarning('Configuration test failed. Please review the settings.');
    }
    
    // Display next steps
    await displayNextSteps();
    
  } catch {
    logErrorToProduction(`Setup failed: ${_'Error occurred'}`);
    console.error(_error);
  } finally {
    rl.close();
  }
}

// Handle script termination
process.on('SIGINT', () => {
  console.warn('\n');
  logInfo('Setup cancelled by user');
  rl.close();
  process.exit(0);
});

// Check if node-fetch is available, install if needed
try {
  require('node-fetch');
} catch {
  logWarning('node-fetch not found. Please install it:');
  log('npm install node-fetch', 'cyan');
  process.exit(1);
}

// Check if dotenv is available
try {
  require('dotenv');
} catch {
  logWarning('dotenv not found. Please install it:');
  log('npm install dotenv', 'cyan');
  process.exit(1);
}

if (require.main === module) {
  main();
}

module.exports = {
  checkExistingEnv,
  generateAuth0Secret,
  validateAuth0Domain,
  isPlaceholderValue
}; 