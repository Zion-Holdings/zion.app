#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const functionsDir = path.join(__dirname, '..', 'netlify', 'functions');
const manifestPath = path.join(functionsDir, 'functions-manifest.json');

function listFunctions() {
  const files = fs.readdirSync(functionsDir).filter(f => f.endsWith('.js') || f.endsWith('.ts'));
  const names = files
    .map(f => f.replace(/\.(js|ts)$/,'').trim())
    .filter(name => !name.startsWith('_'))
    .sort();
  return names;
}

function main() {
  const names = listFunctions();
  const manifest = { generatedAt: new Date().toISOString(), functions: names };
  fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
  console.log(`Updated functions manifest with ${names.length} entries.`);
}

<<<<<<< HEAD
main();
=======
(function main() {
  const scheduled = parseScheduledFunctionNamesFromToml(safeRead(tomlPath));
  const fromDir = listFunctionNamesFromDir(functionsDir);
  const all = Array.from(new Set([...scheduled, ...fromDir])).sort();
  const manifest = { generatedAt: new Date().toISOString(), functions: all };
  const extra = [
    { name: 'ops-consolidator', path: 'netlify/functions/ops-consolidator.js' },
    { name: 'automation-health', path: 'netlify/functions/automation-health.js' },
  ];
  manifest.functions.push(...extra.filter(x => !manifest.functions.find(f => f.name === x.name)));
  fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
  log(`Wrote ${manifestPath} with ${manifest.functions.length} functions.`);
})();
>>>>>>> 5fe4d4a516412daaecc6e2e3437df4b5fdac83d3
