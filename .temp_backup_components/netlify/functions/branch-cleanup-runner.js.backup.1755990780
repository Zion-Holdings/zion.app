const path = require('path');
const { spawnSync } = require('child_process');

<<<<<<< HEAD
exports.config = {
  schedule: '0 3 * * *',
=======
function runNode(relPath, args = []) {
  const abs = path.resolve(__dirname, '..', '..', relPath);
  const res = spawnSync('node', [abs, ...args], { stdio: 'pipe', encoding: 'utf8' });
  return { status: res.status || 0, stdout: res.stdout || '', stderr: res.stderr || '' };
}

exports.config = {
  schedule: '0 2 * * *', // daily at 02:00 UTC
>>>>>>> origin/cursor/automate-project-development-with-netlify-7f13
};

exports.handler = async () => {
  const logs = [];
<<<<<<< HEAD
  const env = process.env || {};
  const token = env.GITHUB_TOKEN || env.GH_TOKEN;
  const repo = env.GITHUB_REPOSITORY;

  if (!token || !repo) {
    return { statusCode: 200, body: JSON.stringify({ ok: false, skipped: true, reason: 'Missing GITHUB_TOKEN and/or GITHUB_REPOSITORY env vars' }) };
  }

  const script = path.resolve(__dirname, '..', '..', 'automation', 'branch-cleanup.cjs');
  const res = spawnSync('node', [script], { stdio: 'pipe', encoding: 'utf8', env: { ...env } });
  if (res.stdout) logs.push(res.stdout);
  if (res.stderr) logs.push(res.stderr);
=======
  function logStep(name, fn) {
    logs.push(`\n=== ${name} ===`);
    const { status, stdout, stderr } = fn();
    if (stdout) logs.push(stdout);
    if (stderr) logs.push(stderr);
    logs.push(`exit=${status}`);
    return status;
  }

  // Requires env: GITHUB_TOKEN and GITHUB_REPOSITORY (owner/repo)
  logStep('branch:cleanup', () => runNode('automation/branch-cleanup.cjs'));
>>>>>>> origin/cursor/automate-project-development-with-netlify-7f13

  return { statusCode: 200, body: logs.join('\n') };
};