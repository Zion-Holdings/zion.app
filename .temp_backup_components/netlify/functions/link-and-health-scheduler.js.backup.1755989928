<<<<<<< HEAD
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

exports.handler = async function(event, context) {
  console.log('🤖 Starting link-and-health-scheduler...');
  
  try {
    const timestamp = new Date().toISOString();
    const reportPath = path.join(process.cwd(), 'link-and-health-scheduler-report.md');
    
    const reportContent = `# link-and-health-scheduler Report

Generated: ${timestamp}

## Status
- Task: link-and-health-scheduler
- Status: Completed
- Timestamp: ${timestamp}

## Next Steps
- Implement actual link-and-health-scheduler functionality
- Add proper error handling
- Add logging and monitoring
`;

    fs.writeFileSync(reportPath, reportContent);
    console.log('📝 Report generated');
    
    try {
      execSync('git add ' + reportPath, { stdio: 'inherit' });
      execSync('git commit -m "🤖 Add link-and-health-scheduler report [skip ci]"', { stdio: 'inherit' });
      execSync('git push', { stdio: 'inherit' });
      console.log('✅ Report committed and pushed');
    } catch (gitError) {
      console.log('Git error:', gitError.message);
    }
    
    console.log('✅ link-and-health-scheduler completed successfully');
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        message: 'link-and-health-scheduler completed successfully',
        timestamp: timestamp
      })
    };
    
  } catch (error) {
    console.error('❌ link-and-health-scheduler failed:', error.message);
    
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: error.message,
        timestamp: new Date().toISOString()
      })
    };
  }
};
=======
// Netlify Scheduled Function: Link & Health Scheduler
// Replaces GH Actions for link integrity, health scans, and sitemap generation.

const path = require('path');
const { spawnSync } = require('child_process');

function runNode(relPath, args = []) {
  const abs = path.resolve(__dirname, '..', '..', relPath);
  const res = spawnSync('node', [abs, ...args], { stdio: 'pipe', encoding: 'utf8' });
  return { status: res.status || 0, stdout: res.stdout || '', stderr: res.stderr || '' };
}

exports.config = {
  schedule: '0 */4 * * *', // every 4 hours
};

exports.handler = async () => {
  const logs = [];
  function logStep(name, fn) {
    logs.push(`\n=== ${name} ===`);
    const { status, stdout, stderr } = fn();
    if (stdout) logs.push(stdout);
    if (stderr) logs.push(stderr);
    logs.push(`exit=${status}`);
    return status;
  }

  logStep('sitemap', () => runNode('scripts/generate-sitemap.js'));
  logStep('site-health', () => runNode('automation/auto-health-monitor/index.mjs'));
  logStep('links:scan', () => runNode('automation/site-link-crawler.cjs'));
  logStep('git:sync', () => runNode('automation/advanced-git-sync.cjs'));

  return { statusCode: 200, body: logs.join('\n') };
};
>>>>>>> 17df199e451813150094c5ab1fb554b04628cb60
