const fs = require('fs');
const path = require('path');
const PDFDocument = require('pdfkit');

function loadProposals() {
  const proposalsFile = path.join(process.cwd(), 'data', 'zgp-proposals.json');
  if (!fs.existsSync(proposalsFile)) return { proposals: [] };
  return JSON.parse(fs.readFileSync(proposalsFile, 'utf8'));
}

function ensureDir(p) {
  fs.mkdirSync(p, { recursive: true });
}

function writePdfForProposal(proposal, outPath) {
  return new Promise((resolve) => {
    const latest = proposal.versions[proposal.latestVersion - 1] || proposal.versions[0];
    const stream = fs.createWriteStream(outPath);
    const doc = new PDFDocument({ margin: 50 });
    doc.pipe(stream);

    doc.fontSize(18).text(`${proposal.proposalNumber} — ${proposal.title}`, { underline: true });
    doc.moveDown();
    doc.fontSize(12).text(`Template: ${proposal.templateCode}`);
    doc.text(`Status: ${proposal.status}`);
    doc.text(`Created: ${proposal.versions[0].createdAt}`);
    doc.text(`Latest Version: v${proposal.latestVersion} @ ${latest.createdAt}`);
    if (proposal.votingResultUrl) doc.text(`Voting Result: ${proposal.votingResultUrl}`);

    doc.moveDown();
    doc.fontSize(14).text('Summary');
    doc.fontSize(12).text(latest.summary || '');

    doc.moveDown();
    doc.fontSize(14).text('Motivation');
    doc.fontSize(12).text(latest.motivation || '');

    doc.moveDown();
    doc.fontSize(14).text('Specification / Impact');
    doc.fontSize(12).text(latest.specificationImpact || '');

    doc.moveDown();
    doc.fontSize(14).text('Code/Module to be Affected');
    doc.fontSize(12).text(latest.codeModuleAffected || '');

    doc.moveDown();
    doc.fontSize(14).text('Voting Options');
    doc.fontSize(12).text((latest.votingOptions || []).join(', '));

    doc.moveDown();
    doc.fontSize(14).text('Funding Needed');
    const funding = latest.fundingNeeded;
    if (funding && typeof funding === 'object') {
      doc.fontSize(12).text(`${funding.amount} ${funding.currency}`);
    } else {
      doc.fontSize(12).text('None');
    }

    doc.end();
    stream.on('finish', resolve);
  });
}

async function main() {
  const { proposals } = loadProposals();
  const archiveDir = path.join(process.cwd(), 'public', 'governance', 'archive');
  ensureDir(archiveDir);
  const pdfDir = archiveDir;

  const index = [];

  for (const p of proposals) {
    const filename = `${p.proposalNumber}.pdf`;
    const outPath = path.join(pdfDir, filename);
    await writePdfForProposal(p, outPath);
    const latest = p.versions[p.latestVersion - 1] || p.versions[0];
    index.push({
      id: p.id,
      proposalNumber: p.proposalNumber,
      title: p.title,
      status: p.status,
      latestVersion: p.latestVersion,
      updatedAt: latest.createdAt,
      pdf: `/governance/archive/${filename}`,
    });
  }

  // Write JSON and HTML index
  fs.writeFileSync(path.join(archiveDir, 'index.json'), JSON.stringify({ generatedAt: new Date().toISOString(), items: index }, null, 2));

  const itemsHtml = index
    .sort((a, b) => (a.proposalNumber < b.proposalNumber ? 1 : -1))
    .map((i) => `<li><a href="${i.pdf}">${i.proposalNumber} — ${i.title}</a> <small>(v${i.latestVersion}, ${i.status})</small></li>`) 
    .join('\n');

  const html = `<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>ZGP Archive</title>
  <style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Helvetica,Arial;max-width:960px;margin:40px auto;padding:0 16px} a{color:#2563eb;text-decoration:none} a:hover{text-decoration:underline}</style>
</head>
<body>
  <h1>Zion Governance Proposal Archive</h1>
  <p>Autogenerated PDF archive of proposals. Source: data/zgp-proposals.json</p>
  <ul>${itemsHtml}</ul>
  <p><small>Generated at ${new Date().toISOString()}</small></p>
</body>
</html>`;
  fs.writeFileSync(path.join(archiveDir, 'index.html'), html);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});