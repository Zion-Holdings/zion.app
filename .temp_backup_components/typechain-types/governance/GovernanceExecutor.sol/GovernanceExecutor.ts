/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface GovernanceExecutorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeTimelock"
      | "onProposal"
      | "onVoteMirror"
      | "owner"
      | "rewardVault"
      | "scheduleTimelock"
      | "setOwner"
      | "setRewardVault"
      | "setTimelock"
      | "tallies"
      | "timelock"
      | "unlockRewards"
      | "voteToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnerUpdated"
      | "ProposalFinalized"
      | "RewardVaultUpdated"
      | "TimelockUpdated"
      | "VoteMirrored"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeTimelock",
    values: [BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onProposal",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onVoteMirror",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTimelock",
    values: [BytesLike, AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tallies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlockRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voteToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "executeTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onProposal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onVoteMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteToken", data: BytesLike): Result;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalFinalizedEvent {
  export type InputTuple = [proposalId: BigNumberish, proposalHash: BytesLike];
  export type OutputTuple = [proposalId: bigint, proposalHash: string];
  export interface OutputObject {
    proposalId: bigint;
    proposalHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardVaultUpdatedEvent {
  export type InputTuple = [rewardVault: AddressLike];
  export type OutputTuple = [rewardVault: string];
  export interface OutputObject {
    rewardVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockUpdatedEvent {
  export type InputTuple = [timelock: AddressLike];
  export type OutputTuple = [timelock: string];
  export interface OutputObject {
    timelock: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteMirroredEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    forVotes: BigNumberish,
    againstVotes: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    forVotes: bigint,
    againstVotes: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    forVotes: bigint;
    againstVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GovernanceExecutor extends BaseContract {
  connect(runner?: ContractRunner | null): GovernanceExecutor;
  waitForDeployment(): Promise<this>;

  interface: GovernanceExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeTimelock: TypedContractMethod<
    [id: BytesLike, target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;

  onProposal: TypedContractMethod<
    [proposalHash: BytesLike, proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  onVoteMirror: TypedContractMethod<
    [
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  rewardVault: TypedContractMethod<[], [string], "view">;

  scheduleTimelock: TypedContractMethod<
    [
      id: BytesLike,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      delay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  setRewardVault: TypedContractMethod<
    [_vault: AddressLike],
    [void],
    "nonpayable"
  >;

  setTimelock: TypedContractMethod<
    [_timelock: AddressLike],
    [void],
    "nonpayable"
  >;

  tallies: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { forVotes: bigint; againstVotes: bigint }],
    "view"
  >;

  timelock: TypedContractMethod<[], [string], "view">;

  unlockRewards: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeTimelock"
  ): TypedContractMethod<
    [id: BytesLike, target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onProposal"
  ): TypedContractMethod<
    [proposalHash: BytesLike, proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onVoteMirror"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "scheduleTimelock"
  ): TypedContractMethod<
    [
      id: BytesLike,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      delay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimelock"
  ): TypedContractMethod<[_timelock: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tallies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { forVotes: bigint; againstVotes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "timelock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unlockRewards"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalFinalized"
  ): TypedContractEvent<
    ProposalFinalizedEvent.InputTuple,
    ProposalFinalizedEvent.OutputTuple,
    ProposalFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "RewardVaultUpdated"
  ): TypedContractEvent<
    RewardVaultUpdatedEvent.InputTuple,
    RewardVaultUpdatedEvent.OutputTuple,
    RewardVaultUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockUpdated"
  ): TypedContractEvent<
    TimelockUpdatedEvent.InputTuple,
    TimelockUpdatedEvent.OutputTuple,
    TimelockUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteMirrored"
  ): TypedContractEvent<
    VoteMirroredEvent.InputTuple,
    VoteMirroredEvent.OutputTuple,
    VoteMirroredEvent.OutputObject
  >;

  filters: {
    "OwnerUpdated(address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "ProposalFinalized(uint256,bytes32)": TypedContractEvent<
      ProposalFinalizedEvent.InputTuple,
      ProposalFinalizedEvent.OutputTuple,
      ProposalFinalizedEvent.OutputObject
    >;
    ProposalFinalized: TypedContractEvent<
      ProposalFinalizedEvent.InputTuple,
      ProposalFinalizedEvent.OutputTuple,
      ProposalFinalizedEvent.OutputObject
    >;

    "RewardVaultUpdated(address)": TypedContractEvent<
      RewardVaultUpdatedEvent.InputTuple,
      RewardVaultUpdatedEvent.OutputTuple,
      RewardVaultUpdatedEvent.OutputObject
    >;
    RewardVaultUpdated: TypedContractEvent<
      RewardVaultUpdatedEvent.InputTuple,
      RewardVaultUpdatedEvent.OutputTuple,
      RewardVaultUpdatedEvent.OutputObject
    >;

    "TimelockUpdated(address)": TypedContractEvent<
      TimelockUpdatedEvent.InputTuple,
      TimelockUpdatedEvent.OutputTuple,
      TimelockUpdatedEvent.OutputObject
    >;
    TimelockUpdated: TypedContractEvent<
      TimelockUpdatedEvent.InputTuple,
      TimelockUpdatedEvent.OutputTuple,
      TimelockUpdatedEvent.OutputObject
    >;

    "VoteMirrored(uint256,uint256,uint256)": TypedContractEvent<
      VoteMirroredEvent.InputTuple,
      VoteMirroredEvent.OutputTuple,
      VoteMirroredEvent.OutputObject
    >;
    VoteMirrored: TypedContractEvent<
      VoteMirroredEvent.InputTuple,
      VoteMirroredEvent.OutputTuple,
      VoteMirroredEvent.OutputObject
    >;
  };
}
