import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { MemoryRouter, Routes, Route } from 'react-router-dom';
import { vi } from 'vitest';
<<<<<<< HEAD
import Login from '@/pages/auth/Login';
import * as authApi from '@/services/auth';
=======
import { LoginForm } from '@/components/auth/login';
import { Toaster } from '@/components/ui/toaster';
import * as authService from '@/services/authService';
import * as authHook from '@/hooks/useAuth';
>>>>>>> origin/4o9pcp-codex/add-test-for-failed-login-toast

vi.mock('@/services/auth');

<<<<<<< HEAD
describe('Login page', () => {
  it('redirects to /dashboard on successful login', async () => {
    vi.spyOn(authApi, 'login').mockResolvedValue({ status: 200, data: { token: 'x' } } as any);

    render(
      <MemoryRouter initialEntries={['/login']}>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/dashboard" element={<div>Dashboard</div>} />
        </Routes>
=======
describe('LoginForm', () => {
  it('shows error toast on 401 response', async () => {
    vi.spyOn(authService, 'loginUser').mockResolvedValue({
      res: { ok: false, status: 401 } as Response,
      data: { error: 'Invalid credentials' },
    });

    render(
      <MemoryRouter>
        <>
          <Toaster />
          <LoginForm />
        </>
>>>>>>> origin/4o9pcp-codex/add-test-for-failed-login-toast
      </MemoryRouter>
    );

    fireEvent.input(screen.getByLabelText(/email/i), { target: { value: 'a@b.com' } });
    fireEvent.input(screen.getByLabelText(/password/i), { target: { value: 'secret' } });
    fireEvent.click(screen.getByRole('button', { name: /login/i }));

<<<<<<< HEAD
    await waitFor(() => expect(screen.getByText('Dashboard')).toBeInTheDocument());
=======
    // wait for login submission to resolve
    await screen.findByRole('button', { name: /login/i });

    expect(await screen.findByText(/invalid credentials/i)).toBeInTheDocument();
>>>>>>> origin/4o9pcp-codex/add-test-for-failed-login-toast
  });
});
