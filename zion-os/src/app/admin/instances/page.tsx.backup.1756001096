import { prisma } from "@/lib/prisma";
import { 
  Globe, 
  Users, 
  Settings, 
  Rocket, 
  Shield, 
  TrendingUp,
  Calendar,
  Activity,
  Play,
  Eye,
  Settings as SettingsIcon
} from "lucide-react";

export default async function InstancesPage() {
  let instances: any[] = [];
  let error: string | null = null;

  try {
    instances = await prisma.instance.findMany({
      include: {
        daoConfig: true,
        _count: { select: { deployments: true, features: true } },
      },
      orderBy: { createdAt: "desc" },
    });
  } catch (err) {
    console.error("Database connection error:", err);
    error = "Database connection unavailable";
  }

  const getStatusColor = (deploymentCount: number) => {
    if (deploymentCount === 0) return "text-yellow-400";
    if (deploymentCount > 0) return "text-green-400";
    return "text-gray-400";
  };

  const getStatusIcon = (deploymentCount: number) => {
    if (deploymentCount === 0) return <Activity className="w-4 h-4" />;
    if (deploymentCount > 0) return <Rocket className="w-4 h-4" />;
    return <Settings className="w-4 h-4" />;
  };

  const getVerticalIcon = (vertical: string) => {
    switch (vertical) {
      case "HEALTH": return <Shield className="w-4 h-4 text-blue-400" />;
      case "EDUCATION": return <TrendingUp className="w-4 h-4 text-green-400" />;
      case "LAW": return <Shield className="w-4 h-4 text-purple-400" />;
      case "GOV": return <Users className="w-4 h-4 text-red-400" />;
      default: return <Globe className="w-4 h-4 text-gray-400" />;
    }
  };

  return (
    <div className="space-y-8">
<<<<<<< HEAD
      <header>
        <h1 className="text-3xl font-bold text-high-contrast">Instances</h1>
        <p className="text-[var(--fg-secondary)] mt-2">
          Manage and monitor your deployed Zion instances, API keys, and governance settings.
        </p>
      </header>

      <section aria-labelledby="instances-list">
        <h2 id="instances-list" className="sr-only">Instances List</h2>
        
        {instances.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-[var(--fg-secondary)] text-lg mb-4">No instances deployed yet</div>
            <a href="/multiverse/launch" className="btn-primary">
              Deploy Your First Instance
            </a>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {instances.map((inst) => (
              <article key={inst.id} className="card group">
                <header className="mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-semibold text-lg group-hover:text-[var(--accent)] transition-colors">
                      {inst.name}
                    </h3>
                    <span 
                      className="text-xs px-2 py-1 rounded-full bg-[var(--bg)] border border-[var(--border)] text-[var(--fg-secondary)]"
                      aria-label={`Vertical: ${inst.vertical}`}
                    >
                      {inst.vertical}
                    </span>
                  </div>
                  <div className="text-sm text-[var(--fg-secondary)]">
                    {inst.domain || inst.subdomain || inst.slug}
                  </div>
                </header>
                
                <div className="space-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <span className="text-[var(--fg-secondary)]">Governance:</span>
                    <span className="font-medium">{inst.governanceType}</span>
                  </div>
                  <div className="flex items-center gap-4 text-xs text-[var(--fg-secondary)]">
                    <span>
                      <span className="font-medium">{inst._count.deployments}</span> deployments
                    </span>
                    <span>
                      <span className="font-medium">{inst._count.features}</span> features
                    </span>
                  </div>
                </div>
                
                <footer className="mt-4 pt-3 border-t border-[var(--border)]">
                  <div className="flex items-center justify-between text-xs text-[var(--fg-secondary)]">
                    <span>
                      Created {new Date(inst.createdAt).toLocaleDateString()}
                    </span>
                    <a 
                      href={`/admin/instances/${inst.id}`}
                      className="text-[var(--accent)] hover:text-[var(--accent-hover)] transition-colors"
                      aria-label={`View details for ${inst.name}`}
                    >
                      View Details â†’
                    </a>
                  </div>
                </footer>
              </article>
            ))}
          </div>
        )}
      </section>
=======
      {/* Header Section */}
      <div className="border-b border-white/10 pb-6">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent">
          Instance Management
        </h1>
        <p className="text-white/70 mt-2">Monitor and manage your deployed Zion ecosystems</p>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-blue-500/20 rounded-lg">
              <Globe className="w-5 h-5 text-blue-400" />
            </div>
            <div>
              <p className="text-2xl font-bold">{instances.length}</p>
              <p className="text-sm text-white/60">Total Instances</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-green-500/20 rounded-lg">
              <Rocket className="w-5 h-5 text-green-400" />
            </div>
            <div>
              <p className="text-2xl font-bold">
                {instances.filter(i => i._count.deployments > 0).length}
              </p>
              <p className="text-sm text-white/60">Deployed</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-purple-500/20 rounded-lg">
              <Settings className="w-5 h-5 text-purple-400" />
            </div>
            <div>
              <p className="text-2xl font-bold">
                {instances.reduce((sum, i) => sum + i._count.features, 0)}
              </p>
              <p className="text-sm text-white/60">Active Features</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-orange-500/20 rounded-lg">
              <Users className="w-5 h-5 text-orange-400" />
            </div>
            <div>
              <p className="text-2xl font-bold">
                {instances.filter(i => i.governanceType === "DAO_FULL").length}
              </p>
              <p className="text-sm text-white/60">Full DAOs</p>
            </div>
          </div>
        </div>
      </div>

      {/* Instances Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {instances.map((inst) => (
          <div key={inst.id} className="group relative bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 hover:border-white/20 transition-all duration-300 hover:shadow-xl hover:shadow-white/5">
            {/* Status Indicator */}
            <div className="absolute top-4 right-4 flex items-center gap-2">
              {getStatusIcon(inst._count.deployments)}
              <span className={`text-xs font-medium ${getStatusColor(inst._count.deployments)}`}>
                {inst._count.deployments > 0 ? 'Live' : 'Pending'}
              </span>
            </div>

            {/* Card Content */}
            <div className="p-6">
              {/* Header */}
              <div className="flex items-start gap-3 mb-4">
                <div className="p-2 bg-white/10 rounded-lg">
                  {getVerticalIcon(inst.vertical)}
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="font-bold text-lg text-white group-hover:text-white/90 transition-colors">
                    {inst.name}
                  </h3>
                  <div className="flex items-center gap-2 mt-1">
                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-white/10 text-white/80">
                      {inst.vertical}
                    </span>
                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-500/20 text-blue-400">
                      {inst.governanceType}
                    </span>
                  </div>
                </div>
              </div>

              {/* Domain Info */}
              <div className="space-y-2 mb-4">
                <div className="flex items-center gap-2 text-sm text-white/70">
                  <Globe className="w-4 h-4" />
                  <span className="font-mono">
                    {inst.domain || inst.subdomain || inst.slug || 'No domain set'}
                  </span>
                </div>
                
                <div className="flex items-center gap-4 text-xs text-white/60">
                  <div className="flex items-center gap-1">
                    <Rocket className="w-3 h-3" />
                    <span>{inst._count.deployments} deployments</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Settings className="w-3 h-3" />
                    <span>{inst._count.features} features</span>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-2 pt-4 border-t border-white/10">
                <button className="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors duration-200">
                  <Play className="w-4 h-4" />
                  Deploy Now
                </button>
                <button className="flex items-center justify-center px-3 py-2 bg-white/10 hover:bg-white/20 text-white/80 text-sm font-medium rounded-lg transition-colors duration-200">
                  <Eye className="w-4 h-4" />
                </button>
                <button className="flex items-center justify-center px-3 py-2 bg-white/10 hover:bg-white/20 text-white/80 text-sm font-medium rounded-lg transition-colors duration-200">
                  <SettingsIcon className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Empty State */}
      {instances.length === 0 && (
        <div className="text-center py-16">
          <div className="w-16 h-16 mx-auto mb-4 p-4 bg-white/10 rounded-full">
            <Globe className="w-8 h-8 text-white/40" />
          </div>
          <h3 className="text-lg font-medium text-white/60 mb-2">No instances yet</h3>
          <p className="text-white/40 mb-6">Create your first Zion ecosystem to get started</p>
          <a 
            href="/admin/os-deploy" 
            className="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200"
          >
            <Rocket className="w-4 h-4" />
            Deploy First Instance
          </a>
        </div>
      )}
>>>>>>> origin/cursor/enhance-update-item-design-and-functionality-9c4a
    </div>
  );
}